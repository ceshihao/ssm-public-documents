{
  "schemaVersion": "1.0",
  "templateBody": {
    "Parameters": {
      "IsPolicyAttachAllowed": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether or not Quicksetup is allowed to attach policies to existing Instance profiles."
      },
      "HasDeletedBaseline": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether patch policy contains a deleted custom patch baseline."
      },
      "QSType": {
        "Type": "String",
        "AllowedValues": [
          "LA",
          "TA",
          "MA"
        ],
        "Default": "TA",
        "Description": "(Required) Specifies the type of the QuickSetup: either local or organizational."
      },
      "QSConfigurationId": {
        "Type": "String",
        "Default": "",
        "Description": "(Required) Unique identifier of the deployed configuration."
      },
      "QSAttachConfigurationPolicy": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether to attach Configuration permissions policy which sets boundaries of what configuration can do."
      },
      "PatchPolicyName": {
        "Type": "String",
        "Description": "(Required) The name of the patch policy."
      },
      "SelectedPatchBaselines": {
        "Type": "String",
        "Description": "(Required) Stringified JSON content of selected Patch baselines."
      },
      "PatchBaselineUseDefault": {
        "Type": "String",
        "Default": "default",
        "AllowedValues": [
          "default",
          "custom"
        ]
      },
      "ConfigurationOptionsPatchOperation": {
        "Type": "String",
        "Default": "Scan",
        "AllowedValues": [
          "Scan",
          "ScanAndInstall"
        ],
        "Description": "(Required) Whether to scan for patches or install patches."
      },
      "RateControlErrorThreshold": {
        "Type": "String",
        "Default": "2%",
        "Description": "(Optional) The number of errors that are allowed before the system stops sending requests to run the association on additional targets."
      },
      "RateControlConcurrency": {
        "Type": "String",
        "Default": "10%",
        "Description": "(Optional) The maximum number of targets allowed to run the association at the same time."
      },
      "ConfigurationOptionsScanValue": {
        "Type": "String",
        "Default": "cron(0 1 * * ? *)",
        "Description": "(Optional) CRON or Rate Expression at which to execute the association"
      },
      "ConfigurationOptionsScanNextInterval": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether or not to run the State Manager scan associations on next CRON interval."
      },
      "ConfigurationOptionsInstallValue": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) CRON or Rate Expression at which to execute the association"
      },
      "ConfigurationOptionsInstallNextInterval": {
        "Type": "String",
        "Default": "true",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether or not to run the State Manager install associations on next CRON interval."
      },
      "OutputLogEnableS3": {
        "Type": "String",
        "Default": "true",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether or not to send output to s3 bucket."
      },
      "OutputS3Location": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) JSON string containing the information of the S3 bucket used for storing command output logs"
      },
      "OutputBucketRegion": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The ID of the Region where the S3 bucket for storing command output logs is located."
      },
      "OutputS3BucketName": {
        "Type": "String",
        "Description": "(Optional) The name of the S3 bucket where command output logs are stored.",
        "AllowedPattern": "^[a-z0-9.-]{0,63}$",
        "Default": ""
      },
      "OutputS3KeyPrefix": {
        "Type": "String",
        "Description": "(Optional) The directory structure in the S3 bucket where command output logs are stored.",
        "Default": ""
      },
      "TargetType": {
        "Type": "String",
        "Default": "*",
        "AllowedValues": [
          "Tags",
          "InstanceIds",
          "ResourceGroups",
          "*"
        ],
        "Description": "(Optional) Specifies the way in which instances are targeted - applies only for local QuickSetup."
      },
      "TargetInstances": {
        "Type": "String",
        "Default": "*",
        "Description": "(Optional) Specifies the instances to be targeted when QSType=LA and ScanTargetType=InstanceIds."
      },
      "ResourceGroupName": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) Specifies the resource group name to be targeted when QSType=LA and ScanTargetType=ResourceGroups"
      },
      "RebootOption": {
        "Type": "String",
        "Default": "NoReboot",
        "AllowedValues": [
          "RebootIfNeeded",
          "NoReboot"
        ],
        "Description": "(Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant until a subsequent reboot and scan."
      },
      "TargetTagKey": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) Specifies the tag key of instances to be targeted when QSType=LA and ScanTargetType=Tags"
      },
      "TargetTagValue": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) Specifies the tag value of instances to be targeted when QSType=LA and ScanTargetType=Tags"
      },
      "PatchBaselineRegion": {
        "Type": "String",
        "Default": "",
        "Description": "(Required) The region from which Patch Baselines are pulled"
      },
      "QSOwnerAccountId": {
        "Type": "String",
        "Default": "",
        "Description": "(Required) Account Id that owns the S3 bucket for baseline_overrides.json object"
      },
      "QSTargetOrganizationalUnits": {
        "Type": "CommaDelimitedList",
        "Default": "",
        "Description": "(Optional) A list of all Organizational Units (OUs) targeted for deployment"
      },
      "QSPrincipalOrgId": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) Principal Organization Id of the AWS Organization"
      }
    },
    "Conditions": {
      "IsPatchBaselineRegion": {
        "Fn::Equals": [
          {
            "Ref": "PatchBaselineRegion"
          },
          {
            "Ref": "AWS::Region"
          }
        ]
      },
      "ShouldAttachConfigurationPolicy": {
        "Fn::Equals": [
          {
            "Ref": "QSAttachConfigurationPolicy"
          },
          "true"
        ]
      }
    },
    "Resources": {
      "BaselineOverridesAccessLogBucket": {
        "Type": "AWS::S3::Bucket",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "BucketName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::Sub": "aws-quicksetup-patchpolicy-access-log-${QSOwnerAccountId}"
                },
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "AccessControl": "Private",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "LifecycleConfiguration": {
            "Rules": [
              {
                "Id": "MoveToGlacierAfter90Days_DeleteAfter10Years",
                "ExpirationInDays": 3653,
                "Status": "Enabled",
                "Transitions": [
                  {
                    "StorageClass": "GLACIER_IR",
                    "TransitionInDays": 90
                  }
                ]
              }
            ]
          },
          "OwnershipControls": {
            "Rules": [
              {
                "ObjectOwnership": "BucketOwnerEnforced"
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "VersioningConfiguration": {
            "Status": "Enabled"
          }
        },
        "DeletionPolicy": "Retain"
      },
      "BaselineOverridesAccessLogBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "Bucket": {
            "Ref": "BaselineOverridesAccessLogBucket"
          },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "DenyInsecureTransport",
                "Effect": "Deny",
                "Principal": "*",
                "Action": "s3:*",
                "Resource": [
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${BaselineOverridesAccessLogBucket}"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${BaselineOverridesAccessLogBucket}/*"
                  }
                ],
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false"
                  }
                }
              },
              {
                "Sid": "S3ServerAccessLogsPolicy",
                "Effect": "Allow",
                "Principal": {
                  "Service": "logging.s3.amazonaws.com"
                },
                "Action": [
                  "s3:PutObject"
                ],
                "Resource": {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${BaselineOverridesAccessLogBucket}/*"
                },
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::aws-quicksetup-patchpolicy-${QSOwnerAccountId}-${QSConfigurationId}"
                    }
                  },
                  "StringEquals": {
                    "aws:SourceAccount": {
                      "Ref": "QSOwnerAccountId"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "BaselineOverridesLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "FunctionName": {
            "Fn::Join": [
              "-",
              [
                "baseline-overrides",
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Description": "Lambda function that responds to Delete and Create events from CloudFormation or performs baseline remediation when triggered by the State Manager Association executing the Automation Document",
          "Code": {
            "ZipFile": "# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# Licensed under the Apache License, Version 2.0 (the 'License'). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#     http://aws.amazon.com/apache2.0/\n# or in the 'license' file accompanying this file. This file is\n# distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n#\n# This handler performs CRUD operations on an S3 object.\n# This handler also adds a Quick Setup specific bucket policy to the bucket\n# to enable target nodes to pull down the S3 object during patching operations.\n\n\nimport boto3\nimport json\nimport urllib3\nimport time\nimport os\n\n\nSUCCESS = 'SUCCESS'\nFAILED = 'FAILED'\n\n# Events sent in by CloudFormation\nCREATE = 'Create'\nUPDATE = 'Update'\nDELETE = 'Delete'\n\n# Event sent in by Automation\nREMEDIATE = 'Remediate'\n\nDEFAULT_REGION = 'us-east-1'\n\nregion = os.environ['REGION']\ns3_client = boto3.client('s3', region_name=region)\nssm_client = boto3.client('ssm', region_name=region)\ns3_resource = boto3.resource('s3', region_name=region)\nhttp = urllib3.PoolManager()\n\n\ndef create_bucket(bucket_name):\n    bucket_creation_params = {\n        'ACL': 'private',\n        'Bucket': bucket_name,\n        'CreateBucketConfiguration': {\n            'LocationConstraint': region\n        },\n        'ObjectOwnership': 'BucketOwnerEnforced'\n    }\n\n    if region == DEFAULT_REGION:\n        del bucket_creation_params['CreateBucketConfiguration']\n        print('Creating a bucket in', DEFAULT_REGION, '...', '\\n')\n    else:\n        print('Creating a bucket in', region, '...', '\\n')\n\n    s3_client.create_bucket(**bucket_creation_params)\n    waiter = s3_client.get_waiter('bucket_exists')\n    waiter.wait(Bucket=bucket_name)\n    print('Successfully created the bucket:', bucket_name, '\\n')\n\n\ndef put_bucket_versioning(bucket_name):\n    print('Enabling bucket versioning... \\n')\n    s3_client.put_bucket_versioning(\n        Bucket=bucket_name,\n        VersioningConfiguration={\n            'MFADelete': 'Disabled',\n            'Status': 'Enabled'\n        }\n    )\n    print('Bucket versioning enabled \\n')\n\n\ndef put_bucket_encryption(bucket_name):\n    print('Applying server side encryption to the bucket... \\n')\n    s3_client.put_bucket_encryption(\n        Bucket=bucket_name,\n        ServerSideEncryptionConfiguration={\n            'Rules': [\n                {\n                    'ApplyServerSideEncryptionByDefault': {\n                        'SSEAlgorithm': 'AES256'\n                    }\n                }\n            ]\n        }\n    )\n    print('Encryption applied to the bucket \\n')\n\n\ndef put_public_access_block(bucket_name):\n    print('Turning on public access block for the bucket... \\n')\n    s3_client.put_public_access_block(\n        Bucket=bucket_name,\n        PublicAccessBlockConfiguration={\n            'BlockPublicAcls': True,\n            'IgnorePublicAcls': True,\n            'BlockPublicPolicy': True,\n            'RestrictPublicBuckets': True\n        }\n    )\n    print('Public access block turned on for the bucket \\n')\n\n\ndef put_bucket_lifecycle_configuration(bucket_name):\n    print('Applying lifecycle configuration to the bucket... \\n')\n    s3_client.put_bucket_lifecycle_configuration(\n        Bucket=bucket_name,\n        LifecycleConfiguration={\n            'Rules': [\n                {\n                    'ID': 'DeleteVersionsOlderThan90Days',\n                    'Filter': {\n                        'Prefix': 'baseline_overrides.json'\n                    },\n                    'Status': 'Enabled',\n                    'NoncurrentVersionExpiration': {\n                        'NoncurrentDays': 90\n                    }\n                }\n            ]\n        }\n    )\n    print('Lifecycle configuration applied to the bucket \\n')\n\n\ndef put_bucket_policy(bucket_name, resource_properties):\n    print('Constructing and applying bucket policy... \\n')\n    partition = resource_properties['Partition']\n    baseline_overrides_json = f'arn:{partition}:s3:::{bucket_name}/baseline_overrides.json'\n    qs_configuration_id = resource_properties['QSConfigId']\n    target_entities = resource_properties['TargetEntities']\n    organizational_units = resource_properties['OrgUnits']\n    principal_org_id = resource_properties['PrincipalOrgId']\n    account_id = resource_properties['AccountId']\n\n    bucket_policy = {\n        'Version': '2012-10-17',\n        'Statement': [\n            {\n                'Sid': 'DenyInsecureTransport',\n                'Effect': 'Deny',\n                'Principal': '*',\n                'Action': 's3:*',\n                'Resource': [\n                    f'arn:{partition}:s3:::{bucket_name}/*'\n                ],\n                'Condition': {\n                    'Bool': {\n                        'aws:SecureTransport': 'false'\n                    }\n                }\n            },\n            {\n                'Sid': 'DenyAllButPrincipalsWithTag',\n                'Effect': 'Deny',\n                'Principal': {\n                    'AWS': '*'\n                },\n                'Action': 's3:GetObject',\n                'Resource': [\n                    baseline_overrides_json\n                ],\n                'Condition': {\n                    'StringNotEquals': {\n                        f'aws:PrincipalTag/QSConfigId-{qs_configuration_id}': f'{qs_configuration_id}'\n                    }\n                }\n            }\n        ]\n    }\n\n    target_statement = {\n        'Sid': 'Target',\n        'Effect': 'Allow',\n        'Action': 's3:GetObject',\n        'Resource': baseline_overrides_json\n    }\n\n    if (target_entities.upper() == 'TA' or target_entities.upper() == 'MA') and len(organizational_units) and organizational_units[0].startswith('ou-') :\n        if len(organizational_units) == 0:\n            raise ValueError('Was expecting at least one OU')\n\n        principal_org_paths = [\n            f'{principal_org_id}/*/{ou}/*' for ou in organizational_units if ou.startswith('ou-')]\n\n        if len(principal_org_paths) == 0:\n            raise ValueError('Was expecting at least one OU')\n\n        target_statement['Principal'] = '*'\n        target_statement['Condition'] = {\n            'ForAnyValue:StringLike': {\n                'aws:PrincipalOrgPaths': principal_org_paths\n            }\n        }\n    elif (target_entities.upper() == 'TA' or target_entities.upper() == 'MA') and len(organizational_units) and organizational_units[0].startswith('r-'):\n        target_statement['Principal'] = '*'\n        target_statement['Condition'] = {\n            'StringEquals': {\n                'aws:PrincipalOrgID': [\n                    f'{principal_org_id}'\n                ]\n            }\n        }\n    elif target_entities.upper() == 'LA':\n        target_statement['Principal'] = {\"AWS\": account_id}\n    else:\n        raise ValueError(\n            'Got an unexpected value for target entities; was expecting ENTIRE_ORG, LOCAL, or OU')\n\n    bucket_policy['Statement'].append(target_statement)\n\n    s3_client.put_bucket_policy(\n        Bucket=bucket_name,\n        Policy=json.dumps(bucket_policy)\n    )\n    print('Bucket policy applied \\n')\n\n\ndef put_bucket_logging(bucket_name, access_log_bucket_name):\n    print('Enabling logging for the bucket... \\n')\n    s3_client.put_bucket_logging(\n        Bucket=bucket_name,\n        BucketLoggingStatus={\n            'LoggingEnabled': {\n                'TargetBucket': access_log_bucket_name,\n                'TargetPrefix': ''\n            }\n        }\n    )\n    print('Logging enabled for the bucket \\n')\n\n\ndef get_patch_baselines(patch_baseline_ids, request_type) -> dict:\n    print('Retrieving patch baselines... \\n')\n    patch_baselines = []\n    non_existent_baseline_ids = []\n\n    if request_type in (CREATE, UPDATE):\n        try:\n            for baseline_id in patch_baseline_ids:\n                baseline = ssm_client.get_patch_baseline(\n                    BaselineId=baseline_id\n                )\n                patch_baselines.append(baseline)\n\n            print('Patch baselines retrieved \\n')\n            return {\n                'PatchBaselines': json.dumps(patch_baselines, default=str),\n                'NonExistentBaselineIds': non_existent_baseline_ids\n            }\n        except ssm_client.exceptions.DoesNotExistException as err:\n            print(f'Baseline id {baseline_id} does not exist')\n            print(err, '\\n')\n            raise err\n\n    elif request_type == REMEDIATE:  # Different behavior for Remediate by design\n        for baseline_id in patch_baseline_ids:\n            try:\n                baseline = ssm_client.get_patch_baseline(\n                    BaselineId=baseline_id\n                )\n                patch_baselines.append(baseline)\n            except ssm_client.exceptions.DoesNotExistException:\n                non_existent_baseline_ids.append(baseline_id)\n\n        print('Patch baselines retrieved \\n')\n        return {\n            'PatchBaselines': json.dumps(patch_baselines, default=str),\n            'NonExistentBaselineIds': non_existent_baseline_ids\n        }\n\n\ndef place_baselines_into_bucket(bucket_name, baselines):\n    print('Loading the baselines... \\n')\n    s3_client.put_object(\n        Body=baselines['PatchBaselines'],\n        Bucket=bucket_name,\n        Key='baseline_overrides.json',\n    )\n    print('Baselines loaded \\n')\n\n    if baselines['NonExistentBaselineIds']:\n        print('The following baseline ids could not be found:',\n              baselines['NonExistentBaselineIds'], '\\n')\n        raise ValueError(\n            f'The following baseline ids could not be found: {baselines[\"NonExistentBaselineIds\"]}')\n\n\ndef permanently_delete_all_objects(bucket_name):\n    print('Deleting all objects in the bucket permanently... \\n')\n    bucket = s3_resource.Bucket(bucket_name)\n    bucket.object_versions.all().delete()\n    time.sleep(2)\n    print('Bucket has been emptied \\n')\n\n\ndef delete_bucket(bucket_name):\n    print('Deleting the bucket... \\n')\n    s3_client.delete_bucket(\n        Bucket=bucket_name\n    )\n    waiter = s3_client.get_waiter('bucket_not_exists')\n    waiter.wait(\n        Bucket=bucket_name\n    )\n    print('Bucket deleted successfully \\n')\n\n\ndef empty_and_delete_bucket(bucket_name):\n    try:\n        s3_client.head_bucket(\n            Bucket=bucket_name\n        )\n        permanently_delete_all_objects(bucket_name)\n        delete_bucket(bucket_name)\n    except Exception as err:\n        # Bucket does not exist or is not owned by the account\n        if err.response['Error']['Code'] == '404':\n            return\n        else:\n            raise err\n\n\ndef send(event, context, responseStatus, responseData=None, physicalResourceId=None, noEcho=False, reason=None):\n    request_type = event.get('RequestType')\n    if not request_type in (CREATE, UPDATE, DELETE):\n        return\n\n    print('Preparing response to CloudFormation... \\n')\n\n    responseUrl = event['ResponseURL']\n    responseBody = {\n        'Status': responseStatus,\n        'Reason': reason or f'See the details in CloudWatch Log Stream: {context.log_stream_name}',\n        'PhysicalResourceId': physicalResourceId or context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n        'NoEcho': noEcho,\n        'Data': responseData\n    }\n\n    print('Response body:', responseBody, '\\n')\n    json_responseBody = json.dumps(responseBody)\n\n    headers = {\n        'content-type': '',\n        'content-length': str(len(json_responseBody))\n    }\n\n    try:\n        print('Sending response to CloudFormation via http request... \\n')\n        response = http.request(\n            'PUT', responseUrl, headers=headers, body=json_responseBody, retries=5)\n        print('Status code:', response.status, '\\n')\n\n    # If this actually happens, the stack could get stuck for an hour\n    # waiting for a response from this custom resource.\n    # There is a manual way to send a response using curl\n    except Exception as err:\n        print('Send failed executing http.request:')\n        print(err, '\\n')\n        raise err\n\n\ndef lambda_handler(event, context):\n    request_type = event.get('RequestType')\n\n    # In case of Remediate, ResourceProperties only has BucketName and PatchBaselineIds\n    resource_properties = event['ResourceProperties']\n\n    bucket_name = resource_properties['BucketName']\n    patch_baseline_ids = [baseline.get('value') for baseline in json.loads(resource_properties['PatchBaselines']).values()]\n    access_log_bucket_name = resource_properties.get('AccessLogBucketName')\n\n    print('Event:', event, '\\n')\n\n    try:\n        if request_type == CREATE:\n            create_bucket(bucket_name)\n            put_bucket_versioning(bucket_name)\n            put_bucket_encryption(bucket_name)\n            put_public_access_block(bucket_name)\n            put_bucket_lifecycle_configuration(bucket_name)\n            put_bucket_policy(bucket_name, resource_properties)\n            put_bucket_logging(bucket_name, access_log_bucket_name)\n            place_baselines_into_bucket(\n                bucket_name, get_patch_baselines(patch_baseline_ids, request_type))\n            send(event, context, SUCCESS, physicalResourceId=bucket_name)\n\n        elif request_type == UPDATE:\n            # We are making an assumption that Update event will never cause creation of another bucket.\n            # Bucket name is dynamically constructed using AccountId and QSConfigId\n            put_bucket_policy(bucket_name, resource_properties)\n            place_baselines_into_bucket(\n                bucket_name, get_patch_baselines(patch_baseline_ids, request_type))\n            send(event, context, SUCCESS, physicalResourceId=bucket_name)\n\n        elif request_type == DELETE:\n            empty_and_delete_bucket(bucket_name)\n            send(event, context, SUCCESS, physicalResourceId=bucket_name)\n\n        elif request_type == REMEDIATE:\n            print('Starting remediation... \\n')\n            place_baselines_into_bucket(\n                bucket_name, get_patch_baselines(patch_baseline_ids, request_type))\n            print('Remediation completed \\n')\n\n        else:\n            print('Unexpected request type received:', request_type)\n            raise ValueError(\n                'A valid RequestType is Create, Update, Delete, or Remediate')\n\n        return SUCCESS\n    except Exception as err:\n        print(err, '\\n')\n        print('You can review the log for the Lambda function for details \\n')\n        send(event, context, FAILED, reason=str(err), physicalResourceId=bucket_name)\n        raise err  # To send signal to Automation Document of failure\n"
          },
          "Runtime": "python3.9",
          "Handler": "index.lambda_handler",
          "Environment": {
            "Variables": {
              "REGION": {
                "Ref": "PatchBaselineRegion"
              }
            }
          },
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "BaselineOverridesLambdaRole",
              "Arn"
            ]
          },
          "Timeout": 300
        }
      },
      "BaselineOverridesLambdaRole": {
        "Type": "AWS::IAM::Role",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "AWS-QuickSetup-BaselineOverrides-LambdaRole-${QSConfigurationId}"
          },
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": {
                "Fn::Sub": "AWS-QuickSetup-BaselineOverrides-LambdaPolicy-${QSConfigurationId}"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "AllowS3Actions",
                    "Effect": "Allow",
                    "Action": [
                      "s3:CreateBucket",
                      "s3:PutBucketVersioning",
                      "s3:PutBucketOwnershipControls",
                      "s3:PutBucketPublicAccessBlock",
                      "s3:PutEncryptionConfiguration",
                      "s3:GetObject",
                      "s3:PutBucketPolicy",
                      "s3:GetObjectVersion",
                      "s3:PutObject",
                      "s3:DeleteObject",
                      "s3:ListBucketVersions",
                      "s3:DeleteObjectVersion",
                      "s3:DeleteBucket",
                      "s3:PutLifecycleConfiguration",
                      "s3:ListBucket",
                      "s3:PutBucketLogging"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:s3:::aws-quicksetup-patchpolicy-${QSOwnerAccountId}-${QSConfigurationId}/*"
                      },
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:s3:::aws-quicksetup-patchpolicy-${QSOwnerAccountId}-${QSConfigurationId}"
                      }
                    ]
                  },
                  {
                    "Sid": "AllowLogging",
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogStream",
                      "logs:PutLogEvents",
                      "logs:CreateLogGroup"
                    ],
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${QSOwnerAccountId}:log-group:/aws/lambda/baseline-overrides-"
                            },
                            {
                              "Fn::Select": [
                                3,
                                {
                                  "Fn::Split": [
                                    "-",
                                    {
                                      "Fn::Select": [
                                        2,
                                        {
                                          "Fn::Split": [
                                            "/",
                                            {
                                              "Ref": "AWS::StackId"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            "-",
                            {
                              "Ref": "QSConfigurationId"
                            },
                            ":*"
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "Sid": "AllowSSMActions",
                    "Action": [
                      "ssm:GetPatchBaseline"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                ]
              }
            }
          ],
          "PermissionsBoundary": {
            "Fn::If": [
              "ShouldAttachConfigurationPolicy",
              {
                "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSQuickSetupPatchPolicyPermissionsBoundary"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }
      },
      "BaselineOverridesLambdaTrigger": {
        "Type": "Custom::S3Object",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "BaselineOverridesLambdaFunction",
              "Arn"
            ]
          },
          "AccountId": {
            "Ref": "QSOwnerAccountId"
          },
          "QSConfigId": {
            "Ref": "QSConfigurationId"
          },
          "BucketName": {
            "Fn::Sub": "aws-quicksetup-patchpolicy-${QSOwnerAccountId}-${QSConfigurationId}"
          },
          "AccessLogBucketName": {
            "Ref": "BaselineOverridesAccessLogBucket"
          },
          "Partition": {
            "Ref": "AWS::Partition"
          },
          "TargetEntities": {
            "Ref": "QSType"
          },
          "OrgUnits": {
            "Ref": "QSTargetOrganizationalUnits"
          },
          "PrincipalOrgId": {
            "Ref": "QSPrincipalOrgId"
          },
          "PatchBaselines": {
            "Ref": "SelectedPatchBaselines"
          }
        }
      },
      "BaselineOverridesStateManagerAssociation": {
        "Type": "AWS::SSM::Association",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "AssociationName": {
            "Fn::Sub": "AWS-QuickSetup-PatchPolicy-BaselineRemediation-${QSConfigurationId}"
          },
          "Name": {
            "Ref": "BaselineOverridesRemediationDocument"
          },
          "ApplyOnlyAtCronInterval": true,
          "ScheduleExpression": "cron(0 0/1 * * ? *)"
        }
      },
      "BaselineOverridesRemediationDocument": {
        "Type": "AWS::SSM::Document",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "Name": {
            "Fn::Sub": "AWSQuickSetup-PatchPolicy-Remediation-${QSConfigurationId}"
          },
          "DocumentType": "Automation",
          "UpdateMethod": "NewVersion",
          "Content": {
            "description": "This Document is to trigger the Lambda function to perform remediation only.",
            "schemaVersion": "0.3",
            "assumeRole": "{{ AutomationAssumeRole }}",
            "parameters": {
              "AutomationAssumeRole": {
                "type": "String",
                "default": {
                  "Fn::GetAtt": [
                    "BaselineOverridesRemediationAutomationRole",
                    "Arn"
                  ]
                }
              },
              "LambdaFunctionArn": {
                "type": "String",
                "default": {
                  "Fn::GetAtt": [
                    "BaselineOverridesLambdaFunction",
                    "Arn"
                  ]
                }
              },
              "BucketName": {
                "type": "String",
                "default": {
                  "Fn::Sub": "aws-quicksetup-patchpolicy-${QSOwnerAccountId}-${QSConfigurationId}"
                }
              },
              "PatchBaselines": {
                "type": "String",
                "default": {
                  "Ref": "SelectedPatchBaselines"
                }
              }
            },
            "mainSteps": [
              {
                "name": "invokeBaselineOverridesLambdaFunction",
                "action": "aws:invokeLambdaFunction",
                "timeoutSeconds": 300,
                "maxAttempts": 3,
                "inputs": {
                  "FunctionName": "{{ LambdaFunctionArn }}",
                  "InputPayload": {
                    "RequestType": "Remediate",
                    "ResourceProperties": {
                      "BucketName": "{{ BucketName }}",
                      "PatchBaselines": "{{ PatchBaselines }}"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "BaselineOverridesRemediationAutomationRole": {
        "Type": "AWS::IAM::Role",
        "Condition": "IsPatchBaselineRegion",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "AWS-QuickSetup-Remediation-AutomationRole-${QSConfigurationId}"
          },
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ssm.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": {
                "Fn::Sub": "AWS-QuickSetup-Remediation-AutomationPolicy-${QSConfigurationId}"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "BaselineOverridesLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "PermissionsBoundary": {
            "Fn::If": [
              "ShouldAttachConfigurationPolicy",
              {
                "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSQuickSetupPatchPolicyPermissionsBoundary"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }
      }
    }
  }
}
