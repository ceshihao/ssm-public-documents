{
  "description": "### Document Name - AWSConfigRemediation-ConfigureS3PublicAccessBlock\n\n## What does this document do?\nThis document is used to create or modify the S3 [PublicAccessBlock](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-options) configuration for an AWS account.\n\n## Input Parameters\n* AccountId: (Required) Account ID of the account for which the S3 Account Public Access Block is to be configured.\n* RestrictPublicBuckets: (Optional) Specifies whether Amazon S3 should restrict public bucket policies for buckets in this account. Setting this element to TRUE restricts access to buckets with public policies to only AWS services and authorized users within this account.\n  * Default: \"true\"\n* BlockPublicAcls: (Optional) Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account.\n  * Default: \"true\"\n* IgnorePublicAcls: (Optional) Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain.\n  * Default: \"true\"\n* BlockPublicPolicy: (Optional) Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.\n  * Default: \"true\"\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters  \n* GetPublicAccessBlock.Output - JSON formatted response from the GetPublicAccessBlock API call.\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AccountId": {
      "type": "String",
      "description": "(Required) The account ID for the AWS account whose PublicAccessBlock configuration you want to set.",
      "allowedPattern": "^\\d{12}$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:aws[a-z0-9-]*:iam::\\d{12}:role\\/[\\w-\\/.@+=,]{1,1017}$"
    },
    "RestrictPublicBuckets": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether Amazon S3 should restrict public bucket policies for buckets in this account. Setting this element to TRUE restricts access to buckets with public policies to only AWS services and authorized users within this account.",
      "default": true
    },
    "BlockPublicAcls": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account.",
      "default": true
    },
    "IgnorePublicAcls": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain.",
      "default": true
    },
    "BlockPublicPolicy": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.",
      "default": true
    }
  },
  "outputs": [
    "GetPublicAccessBlock.Output"
  ],
  "mainSteps": [
    {
      "name": "PutAccountPublicAccessBlock",
      "action": "aws:executeAwsApi",
      "description": "## PutAccountPublicAccessBlock\nCreates or modifies the S3 PublicAccessBlock configuration for an AWS account.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "s3control",
        "Api": "PutPublicAccessBlock",
        "AccountId": "{{ AccountId }}",
        "PublicAccessBlockConfiguration": {
          "RestrictPublicBuckets": "{{ RestrictPublicBuckets }}",
          "BlockPublicAcls": "{{ BlockPublicAcls }}",
          "IgnorePublicAcls": "{{ IgnorePublicAcls }}",
          "BlockPublicPolicy": "{{ BlockPublicPolicy }}"
        }
      },
      "outputs": [
        {
          "Name": "PutAccountPublicAccessBlockResponse",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "GetPublicAccessBlock",
      "action": "aws:executeScript",
      "description": "## GetPublicAccessBlock\nRetrieves the S3 PublicAccessBlock configuration for an AWS account.\n## Outputs\n* Output: JSON formatted response from the GetPublicAccessBlock API call.\n",
      "timeoutSeconds": 600,
      "isEnd": true,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "handler",
        "InputPayload": {
          "AccountId": "{{ AccountId }}",
          "RestrictPublicBuckets": "{{ RestrictPublicBuckets }}",
          "BlockPublicAcls": "{{ BlockPublicAcls }}",
          "IgnorePublicAcls": "{{ IgnorePublicAcls }}",
          "BlockPublicPolicy": "{{ BlockPublicPolicy }}"
        },
        "Script": "import boto3\nfrom time import sleep\n\ndef handler(event, context):\n    account_id       = event[\"AccountId\"]\n    s3control_client = boto3.client('s3control')\n    wait_time        = 30\n    max_time         = 480\n    retry_count      = 1\n    max_retries      = max_time/wait_time\n    \n    while retry_count <= max_retries:\n        sleep(wait_time)\n        retry_count    = retry_count + 1\n        account_pabs   = s3control_client.get_public_access_block(AccountId=account_id)['PublicAccessBlockConfiguration']\n        all_pabs       = [\"BlockPublicAcls\", \"IgnorePublicAcls\", \"BlockPublicPolicy\", \"RestrictPublicBuckets\"]\n        unmatched_pabs = [pab for pab in all_pabs if account_pabs[pab] != event[pab]]\n        \n        if not unmatched_pabs:\n            return {\n                \"output\": {\n                    \"message\": \"Verification successful. S3 Public Access Block Updated.\",\n                    \"HTTPResponse\": account_pabs\n                },\n            }\n        \n    info = \"VERFICATION FAILED. S3 GetPublicAccessBlock CONFIGURATION VALUES DO NOT MATCH WITH PARAMETERS PROVIDED VALUES \"\n    for pab in unmatched_pabs:\n        info += f\"{pab}: {account_pabs[pab]}, \"\n    info.rstrip(\", \")\n    raise Exception(info)\n    "
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
