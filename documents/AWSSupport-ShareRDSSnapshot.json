{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-ShareRDSSnapshot** runbook provides an automated solution to share an encrypted snapshot of your Amazon Relational Database Service (Amazon RDS) DB instance. If your Amazon RDS snapshot is encrypted using the default AWS Key Management Service (AWS KMS) key, you cannot share the snapshot. In this case, you must copy the snapshot using a customer managed AWS KMS key, and then share the snapshot with the target account. \n\nThis automation performs the steps outlined in the Knowledge Center article [How can I share an encrypted Amazon RDS DB snapshot with another account?](https://repost.aws/knowledge-center/share-encrypted-rds-snapshot-kms-key) using the value you specify for the `SnapshotName` parameter, or the latest snapshot found for the specified Amazon RDS DB instance or cluster. \n### Limitations: \nSharing Multi-AZ DB cluster snapshots with other AWS accounts is not supported by this runbook.\n### Important: \nIf you do not specify a value for the `KmsKey` parameter, the automation creates a new AWS KMS customer managed key in your account that is used to encrypt the snapshot. In this case, the `AutomationAssumeRole` requires the following additional actions to successfully start the runbook. \n- kms:CreateKey \n- kms:ScheduleKeyDeletion \n- kms:PutKeyPolicy \n- kms:TagResource",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "Database": {
      "type": "String",
      "description": "(Optional) The name of the Amazon RDS DB instance or cluster whose snapshot you want to share. This parameter is required if you don't specify a value for the `SnapshotName` parameter.",
      "default": "",
      "allowedPattern": "^$|^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$",
      "maxChars": 63
    },
    "SnapshotName": {
      "type": "String",
      "description": "(Optional) The name (SnapshotIdentifier) of the Amazon RDS snapshot that you want to share. This parameter is required if you don't specify a value for the `Database` parameter.",
      "default": "",
      "allowedPattern": "^$|^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$|^rds:[A-Za-z0-9]+(-[A-Za-z0-9]+)*$",
      "maxChars": 255
    },
    "KmsKey": {
      "type": "String",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS KMS customer managed key used to encrypt the snapshot. If you do not specify a value for this parameter, this automation creates a new AWS KMS customer managed key in your account and uses it to encrypt the snapshot.",
      "allowedPattern": "^$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):kms:[-a-z0-9]*:[0-9]*:key/[-a-z0-9]*$",
      "default": ""
    },
    "AccountIds": {
      "type": "StringList",
      "allowedPattern": "^[0-9]{12}(,[0-9]{12})*$",
      "description": "(Required) Comma-separated list of AWS account IDs to share the DB snapshot with."
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "ValidateInputs",
      "action": "aws:executeScript",
      "description": "Validates automation inputs and determines the type of the given snapshot or database.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "InputPayload": {
          "DatabaseName": "{{Database}}",
          "SnapshotName": "{{SnapshotName}}"
        },
        "Attachment": "artifact.zip",
        "Handler": "validate_inputs.script_handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "SourceType",
          "Selector": "$.Payload.source_type",
          "Type": "String"
        },
        {
          "Name": "SourceIdentifier",
          "Selector": "$.Payload.source_identifier",
          "Type": "String"
        }
      ],
      "onFailure": "Abort",
      "nextStep": "CheckOrCreateKey"
    },
    {
      "name": "CheckOrCreateKey",
      "action": "aws:executeScript",
      "description": "Validates the KmsKey parameter input and creates a new AWS KMS key if no input provided.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "InputPayload": {
          "AccountIds": "{{AccountIds}}",
          "KMSkeyArn": "{{KmsKey}}"
        },
        "Attachment": "artifact.zip",
        "Handler": "check_kms_key.script_handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "KMSKey",
          "Selector": "$.Payload.key_arn",
          "Type": "String"
        },
        {
          "Name": "KMSKeyCreated",
          "Selector": "$.Payload.key_created",
          "Type": "Boolean"
        }
      ],
      "onFailure": "Abort",
      "nextStep": "BranchOnSourceType"
    },
    {
      "name": "BranchOnSourceType",
      "action": "aws:branch",
      "description": "Branches automation on snapshot source type.",
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "CopyDBSnapshot",
            "Variable": "{{ValidateInputs.SourceType}}",
            "StringEquals": "DBSnapshot"
          },
          {
            "NextStep": "CopyDBClusterSnapshot",
            "Variable": "{{ValidateInputs.SourceType}}",
            "StringEquals": "DBClusterSnapshot"
          },
          {
            "NextStep": "GetLatestDBSnapshot",
            "Variable": "{{ValidateInputs.SourceType}}",
            "StringEquals": "DBInstance"
          },
          {
            "NextStep": "GetLatestDBClusterSnapshot",
            "Variable": "{{ValidateInputs.SourceType}}",
            "StringEquals": "DBCluster"
          }
        ],
        "Default": "CleanupKmsKey"
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "isEnd": false
    },
    {
      "name": "CopyDBSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Copies the source DB instance snapshot and encrypts it using the customer KMS key.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "CopyDBSnapshot",
        "SourceDBSnapshotIdentifier": "{{SnapshotName}}",
        "TargetDBSnapshotIdentifier": "{{ValidateInputs.SourceIdentifier}}-{{automation:EXECUTION_ID}}",
        "KmsKeyId": "{{CheckOrCreateKey.KMSKey}}"
      },
      "outputs": [
        {
          "Name": "DBSnapshotIdentifier",
          "Selector": "$.DBSnapshot.DBSnapshotIdentifier",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "WaitForAvailableStateOfDBSnapshot"
    },
    {
      "name": "WaitForAvailableStateOfDBSnapshot",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits up to 2 hours for the copied DB snapshot to be available.",
      "maxAttempts": 12,
      "timeoutSeconds": 600,
      "isCritical": true,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBSnapshots",
        "DBSnapshotIdentifier": "{{CopyDBSnapshot.DBSnapshotIdentifier}}",
        "PropertySelector": "$.DBSnapshots[0].Status",
        "DesiredValues": [
          "available"
        ]
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "ShareDBSnapshot"
    },
    {
      "name": "ShareDBSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Shares the copied DB instance snapshot with given target AWS accounts.",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBSnapshotAttribute",
        "DBSnapshotIdentifier": "{{CopyDBSnapshot.DBSnapshotIdentifier}}",
        "AttributeName": "restore",
        "ValuesToAdd": "{{ AccountIds }}"
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "isEnd": true
    },
    {
      "name": "CopyDBClusterSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Copies the source DB cluster snapshot and encrypts it using the customer KMS key.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "CopyDBClusterSnapshot",
        "SourceDBClusterSnapshotIdentifier": "{{SnapshotName}}",
        "TargetDBClusterSnapshotIdentifier": "{{ValidateInputs.SourceIdentifier}}-{{automation:EXECUTION_ID}}",
        "KmsKeyId": "{{CheckOrCreateKey.KMSKey}}"
      },
      "outputs": [
        {
          "Name": "DBClusterSnapshotIdentifier",
          "Selector": "$.DBClusterSnapshot.DBClusterSnapshotIdentifier",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "WaitForAvailableStateOfDBClusterSnapshot"
    },
    {
      "name": "WaitForAvailableStateOfDBClusterSnapshot",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits up to 2 hours for the copied DB cluster snapshot to be available.",
      "maxAttempts": 12,
      "timeoutSeconds": 600,
      "isCritical": true,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBClusterSnapshots",
        "DBClusterSnapshotIdentifier": "{{CopyDBClusterSnapshot.DBClusterSnapshotIdentifier}}",
        "PropertySelector": "$.DBClusterSnapshots[0].Status",
        "DesiredValues": [
          "available"
        ]
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "ShareDBClusterSnapshot"
    },
    {
      "name": "ShareDBClusterSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Shares the copied DB cluster snapshot with given target AWS accounts.",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBClusterSnapshotAttribute",
        "DBClusterSnapshotIdentifier": "{{CopyDBClusterSnapshot.DBClusterSnapshotIdentifier}}",
        "AttributeName": "restore",
        "ValuesToAdd": "{{ AccountIds }}"
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "isEnd": true
    },
    {
      "name": "GetLatestDBSnapshot",
      "action": "aws:executeScript",
      "description": "Finds the latest snapshot for the given DB instance.",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "Database": "{{Database}}"
        },
        "Attachment": "artifact.zip",
        "Handler": "get_latest_snapshot.get_db_snapshot",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "LatestSnapshot",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "nextStep": "CopyLatestDBSnapshot"
    },
    {
      "name": "CopyLatestDBSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Copies the latest DB instance snapshot and encrypts it using the customer KMS key.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "CopyDBSnapshot",
        "SourceDBSnapshotIdentifier": "{{GetLatestDBSnapshot.LatestSnapshot}}",
        "TargetDBSnapshotIdentifier": "{{Database}}-{{automation:EXECUTION_ID}}",
        "KmsKeyId": "{{CheckOrCreateKey.KMSKey}}"
      },
      "outputs": [
        {
          "Name": "DBSnapshotIdentifier",
          "Selector": "$.DBSnapshot.DBSnapshotIdentifier",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "WaitForAvailableStateOfLatestDBSnapshot"
    },
    {
      "name": "WaitForAvailableStateOfLatestDBSnapshot",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits up to 2 hours for the copied DB snapshot to be available.",
      "maxAttempts": 12,
      "timeoutSeconds": 600,
      "isCritical": true,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBSnapshots",
        "DBSnapshotIdentifier": "{{CopyLatestDBSnapshot.DBSnapshotIdentifier}}",
        "PropertySelector": "$.DBSnapshots[0].Status",
        "DesiredValues": [
          "available"
        ]
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "ShareLatestDBSnapshot"
    },
    {
      "name": "ShareLatestDBSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Shares the copied DB instance snapshot with given target AWS accounts.",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBSnapshotAttribute",
        "DBSnapshotIdentifier": "{{CopyLatestDBSnapshot.DBSnapshotIdentifier}}",
        "AttributeName": "restore",
        "ValuesToAdd": "{{ AccountIds }}"
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "isEnd": true
    },
    {
      "name": "GetLatestDBClusterSnapshot",
      "action": "aws:executeScript",
      "description": "Finds the latest snapshot for the given DB cluster.",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "Database": "{{Database}}"
        },
        "Attachment": "artifact.zip",
        "Handler": "get_latest_snapshot.get_db_cluster_snapshot",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "LatestSnapshot",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "nextStep": "CopyLatestDBClusterSnapshot"
    },
    {
      "name": "CopyLatestDBClusterSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Copies the latest DB cluster snapshot and encrypts it using the customer KMS key.",
      "isCritical": true,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "CopyDBClusterSnapshot",
        "SourceDBClusterSnapshotIdentifier": "{{GetLatestDBClusterSnapshot.LatestSnapshot}}",
        "TargetDBClusterSnapshotIdentifier": "{{Database}}-{{automation:EXECUTION_ID}}",
        "KmsKeyId": "{{CheckOrCreateKey.KMSKey}}"
      },
      "outputs": [
        {
          "Name": "DBClusterSnapshotIdentifier",
          "Selector": "$.DBClusterSnapshot.DBClusterSnapshotIdentifier",
          "Type": "String"
        }
      ],
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "WaitForAvailableStateOfLatestDBClusterSnapshot"
    },
    {
      "name": "WaitForAvailableStateOfLatestDBClusterSnapshot",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits up to 2 hours for the copied DB cluster snapshot to be available.",
      "maxAttempts": 12,
      "timeoutSeconds": 600,
      "isCritical": true,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBClusterSnapshots",
        "DBClusterSnapshotIdentifier": "{{CopyLatestDBClusterSnapshot.DBClusterSnapshotIdentifier}}",
        "PropertySelector": "$.DBClusterSnapshots[0].Status",
        "DesiredValues": [
          "available"
        ]
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "nextStep": "ShareLatestDBClusterSnapshot"
    },
    {
      "name": "ShareLatestDBClusterSnapshot",
      "action": "aws:executeAwsApi",
      "description": "Shares the copied DB cluster snapshot with given target AWS accounts.",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBClusterSnapshotAttribute",
        "DBClusterSnapshotIdentifier": "{{CopyLatestDBClusterSnapshot.DBClusterSnapshotIdentifier}}",
        "AttributeName": "restore",
        "ValuesToAdd": "{{ AccountIds }}"
      },
      "onFailure": "step:CleanupKmsKey",
      "onCancel": "step:CleanupKmsKey",
      "isEnd": true
    },
    {
      "name": "CleanupKmsKey",
      "action": "aws:executeScript",
      "description": "Schedules the deletion of the KMS key created by the automation after 30 days.",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "IsKMSKeyCreated": "{{CheckOrCreateKey.KMSKeyCreated}}",
          "KMSKeyArn": "{{CheckOrCreateKey.KMSKey}}"
        },
        "Attachment": "artifact.zip",
        "Handler": "cleanup_kms_key.script_handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "CleanupMessage",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "onFailure": "Abort",
      "isEnd": true
    }
  ],
  "files": {
    "artifact.zip": {
      "checksums": {
        "SHA256": "e2f46f58d055aa0e03660a8b190863559bf70b986a7be5e48015596ff2c83e85"
      }
    }
  }
}
