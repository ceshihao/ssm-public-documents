{
  "description": "# AWSSupport-ModifyRDSSnapshotPermission\n---\nThe AWSSupport-ModifyRDSSnapshotPermission document will allow to automatically modify permissions of multiple RDS snapshots from Public to Private or share RDS snapshots with other accounts. Snapshots encrypted with your default KMS key cannot be shared with other accounts automatically. For more information about modifying snapshot permissions, see Sharing a DB snapshot in the RDS Public Document.\n\nFor more information, you can refer to the [public documentation (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ShareSnapshot.html) for this runbook.\n---\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "outputs": [
    "ValidateSnapshots.EncryptedSnapshots",
    "SharewithOtherAccounts.Result",
    "MakePrivate.Result",
    "MakePrivate.Commands"
  ],
  "parameters": {
    "SnapshotIdentifiers": {
      "type": "StringList",
      "description": "Enter list of DB snapshot Identifiers",
      "allowedPattern": "^$|^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$|^rds:[A-Za-z0-9]+(-[A-Za-z0-9]+)*$"
    },
    "Private": {
      "type": "String",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "description": "Allowed Values: \"Yes\" or \"No\". Please select  no, if you want to share snapshot with specific account ids and you are providing input of AccountIds in \"AccountIds\" parameter section."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:iam::\\d{12}:role\\/[\\w+=,.@_\\/-]+|^$"
    },
    "AccountIds": {
      "type": "StringList",
      "description": "AccountIds to Share Snapshot. This is only applicable if you select \"No\" in \"Private\" parameter. Please keep this \"None\" if you have selected \"Yes\" in private parameters",
      "default": [
        "None"
      ],
      "allowedPattern": "^[0-9]{12}(,[0-9]{12})*$|(^None$)"
    },
    "AccountPermissionOperation": {
      "type": "String",
      "description": "Enter \"Add\" or \"Remove\"",
      "default": "None",
      "allowedValues": [
        "Add",
        "Remove",
        "None"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "ValidateSnapshots",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "import boto3\nimport botocore\ndef script_handler(events, context):\n    client = boto3.client('rds')\n    SnapshotIds = events['Snapshot_Id']\n    Result = {}\n    message = \"Please follow document 'https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ShareSnapshot.html#USER_ShareSnapshot.Encrypted.KeyPolicy' to share KMS key with destination account. The following snapshot(s) are encrypted:  \"\n    for snaps in SnapshotIds:\n        try:\n            response = client.describe_db_snapshots(DBSnapshotIdentifier=snaps)\n            if response[\"DBSnapshots\"][0]['Encrypted'] == True:\n                message = message + (snaps) +  \", \"\n            #print(response)\n        except botocore.exceptions.ClientError as error:\n            Result[snaps] = 'Validation Failed - ' + str(error)\n            raise error\n    message= message[:-2]\n    return{'EncryptedSnaps':message, 'Result':Result}\n",
        "InputPayload": {
          "Snapshot_Id": "{{SnapshotIdentifiers}}",
          "Account_Id": "{{AccountIds}}"
        }
      },
      "outputs": [
        {
          "Name": "EncryptedSnapshots",
          "Selector": "$.Payload.EncryptedSnaps",
          "Type": "String"
        }
      ]
    },
    {
      "name": "Branch",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "SharewithOtherAccounts",
            "Variable": "{{Private}}",
            "StringEquals": "No"
          },
          {
            "NextStep": "MakePrivate",
            "Variable": "{{Private}}",
            "StringEquals": "Yes"
          }
        ]
      },
      "description": ""
    },
    {
      "name": "SharewithOtherAccounts",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "import boto3\nimport botocore\ndef script_handler(events, context):\n    client = boto3.client('rds')\n    SnapshotIds= events['Snapshot_Id']\n    permissions = events['AccountOperation']\n    Accountids= events['Account_Id']\n    Result = {}\n    for snaps in SnapshotIds:\n        if Accountids != ['None']:\n            if permissions == 'Add':\n                try:\n                    response = client.modify_db_snapshot_attribute(\n                        DBSnapshotIdentifier=snaps,\n                        AttributeName='restore',\n                        ValuesToAdd=Accountids\n                    )\n                    if (response['ResponseMetadata']['HTTPStatusCode']==200):\n                                Result[snaps] = 'Snapshot is shared successfully with AccountIds'\n                except botocore.exceptions.ClientError as error:\n                    Result[snaps] = 'Failed - ' + str(error)\n            else:\n                try:\n                    response = client.modify_db_snapshot_attribute(\n                        DBSnapshotIdentifier=snaps,\n                        AttributeName='restore',\n                        ValuesToRemove=Accountids\n                    )\n                    if (response['ResponseMetadata']['HTTPStatusCode']==200):\n                                Result[snaps] = 'Snapshot sharing removed for provided AccountIds'\n                except botocore.exceptions.ClientError as error:\n                    Result[snaps] = 'Failed - ' + str(error)\n        else:\n            Result[snaps] = 'No Account Ids provided, Changing Snapshot permissions to Private'\n        return {'Result':Result}\n",
        "InputPayload": {
          "Snapshot_Id": "{{SnapshotIdentifiers}}",
          "Account_Id": "{{AccountIds}}",
          "AccountOperation": "{{AccountPermissionOperation}}"
        }
      },
      "outputs": [
        {
          "Name": "Result",
          "Selector": "$.Payload.Result",
          "Type": "StringMap"
        }
      ],
      "isEnd": true
    },
    {
      "name": "MakePrivate",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "import boto3\nimport botocore\ndef script_handler(events, context):\n    client = boto3.client('rds')\n    SnapshotIds= events['Snapshot_Id']\n    permissions= events['PrivatePerm']\n    ModifiedPermission = {'Yes':'Remove'}\n    Result = {}\n    Commands = {}\n    response = client.describe_snapshots(SnapshotIds=SnapshotIds)\n    for snaps in SnapshotIds:\n        try:\n            response = client.modify_db_snapshot_attribute(\n                DBSnapshotIdentifier=snaps,\n                AttributeName='restore',\n                ValuesToRemove=[\n                    'all',\n                ]\n            )\n            if (response['ResponseMetadata']['HTTPStatusCode']==200):\n                        #print(snaps + 'Snapshot is successful made ' + permissions)\n                        Result[snaps] = 'Snapshot is Successfully changed to Private'\n                        command = '\"aws rds modify-db-snapshot-attribute --db-snapshot-identifier '+ snaps +'--attribute-name restore --values-to-add all\"'\n                        Commands[snaps] = 'You can use AWSCli command '+ command +' to make snapshot Public again'\n                    #else:\n                        #print('Unsuccessul')\n        except botocore.exceptions.ClientError as error:\n            #print(error)\n            Result[snaps] = 'Failed - ' + str(error)\n    return {'Result':Result,'Commands':Commands}\n",
        "InputPayload": {
          "Snapshot_Id": "{{SnapshotIdentifiers}}",
          "PrivatePerm": "{{Private}}"
        }
      },
      "outputs": [
        {
          "Name": "Result",
          "Selector": "$.Payload.Result",
          "Type": "StringMap"
        },
        {
          "Name": "Commands",
          "Selector": "$.Payload.Commands",
          "Type": "StringMap"
        }
      ],
      "isEnd": true
    }
  ]
}
