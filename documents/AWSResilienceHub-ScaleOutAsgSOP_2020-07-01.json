{
  "description": "## Intent\nScale out an Amazon EC2 Auto Scaling group increasing the number of Amazon EC2 instances.\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n* Available ASG\n\n## Permission required for AutomationAssumeRole\n* autoscaling:UpdateAutoScalingGroup\n* autoscaling:DescribeAutoScalingGroups\n* autoscaling:StartInstanceRefresh\n* autoscaling:DescribeInstanceRefreshes\n* ec2:DescribeLaunchTemplateVersions\n* ec2:DescribeInstanceTypeOfferings\n* ec2:CreateLaunchTemplateVersion\n* ec2:DeleteLaunchTemplateVersions\n* ec2:RunInstances\n* iam:PassRole\n\n## Supports Rollback\nYes\n\n## Cancellation behavior\nFail\n\n## Inputs\n### AutoScalingGroupName:\n* type: String\n* description: (Required) The ASG Group Name\n### AutomationAssumeRole:\n* type: String\n* description: \n    (Optional) The ARN of the role that allows Automation to perform\n    the actions on your behalf. If no role is specified, Systems Manager Automation\n    uses your IAM permissions to run this document.\n    default: ''\n\n## Details\nThe document fetches the existing ASG capacity, calculates the new capacity for the scale-out, \nand then updates the ASG capacity to the new one and waits for the scale-out to complete.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * FetchExistingCapacity\n  * CalculateNewCapacity\n  * UpdateCapacity\n  * WaitForScaleOut\n  * OutputRecoveryTime\n\n## Outputs\n* `NewDesiredCapacity`: The new desired capacity for the ASG\n* `NewMaxSize`: The new max size for the ASG\n* `OutputRecoveryTime.RecoveryTime`: recovery time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "Dryrun": {
      "type": "Boolean",
      "default": true,
      "description": "(Optional) Dryrun indicates a testing run, changes will be rolled back.",
      "allowedPattern": "^(true|false)$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:[0-9]{12}:[^\n\r]*$"
    },
    "AutoScalingGroupName": {
      "type": "String",
      "description": "(Required) The Name of the ASG to scaleOut",
      "allowedPattern": "^[!-9;-~]+$"
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  return datetime.now(timezone.utc).isoformat()"
      },
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "name": "FetchExistingCapacity",
      "description": "Fetch the existing desired and max instance capacity of the Amazon ASG.",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "autoscaling",
        "Api": "DescribeAutoScalingGroups",
        "AutoScalingGroupNames": [
          "{{AutoScalingGroupName}}"
        ]
      },
      "outputs": [
        {
          "Name": "CurrentDesiredCapacity",
          "Selector": "$.AutoScalingGroups[0].DesiredCapacity",
          "Type": "Integer"
        },
        {
          "Name": "CurrentMaxSize",
          "Selector": "$.AutoScalingGroups[0].MaxSize",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "CalculateNewCapacity",
      "description": "Calculate the new desired and max instance capacity for the Amazon ASG.",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "InputPayload": {
          "CurrentDesiredCapacity": "{{FetchExistingCapacity.CurrentDesiredCapacity}}",
          "CurrentMaxSize": "{{FetchExistingCapacity.CurrentMaxSize}}"
        },
        "Script": "import math\ndef script_handler(events, context):\n  return {\n      'NewDesiredCapacity': math.ceil(events['CurrentDesiredCapacity'] * 1.5),\n      'NewMaxSize': max(math.ceil(events['CurrentDesiredCapacity'] * 1.5), events['CurrentMaxSize'])\n  }"
      },
      "outputs": [
        {
          "Name": "NewDesiredCapacity",
          "Selector": "$.Payload.NewDesiredCapacity",
          "Type": "Integer"
        },
        {
          "Name": "NewMaxSize",
          "Selector": "$.Payload.NewMaxSize",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "UpdateCapacity",
      "action": "aws:executeAwsApi",
      "description": "Update Capacity on an Asg",
      "inputs": {
        "Service": "autoscaling",
        "Api": "UpdateAutoScalingGroup",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "DesiredCapacity": "{{CalculateNewCapacity.NewDesiredCapacity}}",
        "MaxSize": "{{CalculateNewCapacity.NewMaxSize}}"
      }
    },
    {
      "name": "WaitForScaleOut",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "wait_for_in_service",
        "InputPayload": {
          "AutoScalingGroupName": "{{AutoScalingGroupName}}",
          "NewDesiredCapacity": "{{CalculateNewCapacity.NewDesiredCapacity}}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef wait_for_in_service(events, context):\n    client = boto3.client('autoscaling')\n    while True:\n        res = client.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])\n        instances = res['AutoScalingGroups'][0]['Instances']\n        num_in_service = sum(instance['LifecycleState'] == 'InService' for instance in instances)\n        if num_in_service >= events['NewDesiredCapacity']:\n            return True\n        time.sleep(15)"
      },
      "description": "Wait for Asg to update capacity",
      "timeoutSeconds": 1200,
      "maxAttempts": 4
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  from dateutil import parser\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{RecordStartTime.StartTime}}"
        }
      },
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "DryrunBranch",
      "description": "If this is NOT a dryrun, skip to the end. If it is a dryrun, proceed to rollback.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "EmptyStepForEnd",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": false
          },
          {
            "NextStep": "RollBackCapacityChange",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": true
          }
        ]
      }
    },
    {
      "name": "RollBackCapacityChange",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "description": "Rollback Capacity on an Amazon ASG.",
      "inputs": {
        "Service": "autoscaling",
        "Api": "UpdateAutoScalingGroup",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "DesiredCapacity": "{{FetchExistingCapacity.CurrentDesiredCapacity}}",
        "MaxSize": "{{FetchExistingCapacity.CurrentMaxSize}}"
      }
    },
    {
      "name": "EmptyStepForEnd",
      "description": "An empty step to end the execution.",
      "action": "aws:sleep",
      "isEnd": true,
      "inputs": {
        "Duration": "PT1S"
      }
    }
  ]
}
