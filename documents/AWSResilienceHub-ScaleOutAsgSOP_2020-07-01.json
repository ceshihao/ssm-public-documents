{
  "description": "SOP By AWS ResilienceHub. Manually force an ASG to scale out, increase the number of instances",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "Dryrun": {
      "type": "Boolean",
      "default": true,
      "description": "(Optional) Dryrun indicates a testing run, changes will be rolled back."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "AutoScalingGroupName": {
      "type": "String",
      "description": "(Required) The Name of the ASG to scaleOut"
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  return datetime.now(timezone.utc).isoformat()"
      },
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "name": "FetchExistingCapacity",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "autoscaling",
        "Api": "DescribeAutoScalingGroups",
        "AutoScalingGroupNames": [
          "{{AutoScalingGroupName}}"
        ]
      },
      "outputs": [
        {
          "Name": "CurrentDesiredCapacity",
          "Selector": "$.AutoScalingGroups[0].DesiredCapacity",
          "Type": "Integer"
        },
        {
          "Name": "CurrentMaxSize",
          "Selector": "$.AutoScalingGroups[0].MaxSize",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "CalculateNewCapacity",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "InputPayload": {
          "CurrentDesiredCapacity": "{{FetchExistingCapacity.CurrentDesiredCapacity}}",
          "CurrentMaxSize": "{{FetchExistingCapacity.CurrentMaxSize}}"
        },
        "Script": "import math\ndef script_handler(events, context):\n  return {\n      'NewDesiredCapacity': math.ceil(events['CurrentDesiredCapacity'] * 1.5),\n      'NewMaxSize': max(math.ceil(events['CurrentDesiredCapacity'] * 1.5), events['CurrentMaxSize'])\n  }"
      },
      "outputs": [
        {
          "Name": "NewDesiredCapacity",
          "Selector": "$.Payload.NewDesiredCapacity",
          "Type": "Integer"
        },
        {
          "Name": "NewMaxSize",
          "Selector": "$.Payload.NewMaxSize",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "UpdateCapacity",
      "action": "aws:executeAwsApi",
      "description": "Update Capacity on an Asg",
      "inputs": {
        "Service": "autoscaling",
        "Api": "UpdateAutoScalingGroup",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "DesiredCapacity": "{{CalculateNewCapacity.NewDesiredCapacity}}",
        "MaxSize": "{{CalculateNewCapacity.NewMaxSize}}"
      }
    },
    {
      "name": "WaitForScaleOut",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "wait_for_in_service",
        "InputPayload": {
          "AutoScalingGroupName": "{{AutoScalingGroupName}}",
          "NewDesiredCapacity": "{{CalculateNewCapacity.NewDesiredCapacity}}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef wait_for_in_service(events, context):\n    client = boto3.client('autoscaling')\n    while (True):\n        res = client.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])\n        instances = res['AutoScalingGroups'][0]['Instances']\n        num_in_service = sum(instance['LifecycleState'] == 'InService' for instance in instances)\n        if (num_in_service >= events['NewDesiredCapacity']):\n            return True\n        time.sleep(15)"
      },
      "description": "Wait for Asg to update capacity",
      "timeoutSeconds": 1200,
      "maxAttempts": 4
    },
    {
      "name": "OutputRecoveryTime",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  from dateutil import parser\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{RecordStartTime.StartTime}}"
        }
      },
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "DryrunBranch",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "EmptyStepForEnd",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": false
          },
          {
            "NextStep": "RollBackCapacityChange",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": true
          }
        ]
      }
    },
    {
      "name": "RollBackCapacityChange",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "description": "Rollback Capacity on an Asg",
      "inputs": {
        "Service": "autoscaling",
        "Api": "UpdateAutoScalingGroup",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "DesiredCapacity": "{{FetchExistingCapacity.CurrentDesiredCapacity}}",
        "MaxSize": "{{FetchExistingCapacity.CurrentMaxSize}}"
      }
    },
    {
      "name": "EmptyStepForEnd",
      "action": "aws:sleep",
      "isEnd": true,
      "inputs": {
        "Duration": "PT1S"
      }
    }
  ]
}
