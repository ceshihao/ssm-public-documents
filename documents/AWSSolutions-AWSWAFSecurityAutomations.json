{
  "schemaVersion": "1.0",
  "description": "(SO0006) - AWS WAF Security Automations v3.1.0: This AWS CloudFormation template helps you provision the AWS WAF Security Automations stack without worrying about creating and configuring the underlying AWS infrastructure.\n**WARNING** This template creates multiple AWS Lambda functions, an AWS WAFv2 Web ACL, an Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you create a stack from this template.",
  "templateBody": {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0006) - AWS WAF Security Automations v3.1.0: This AWS CloudFormation template helps you provision the AWS WAF Security Automations stack without worrying about creating and configuring the underlying AWS infrastructure.\n**WARNING** This template creates multiple AWS Lambda functions, an AWS WAFv2 Web ACL, an Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Protection List"
            },
            "Parameters": [
              "ActivateAWSManagedRulesParam",
              "ActivateSqlInjectionProtectionParam",
              "ActivateCrossSiteScriptingProtectionParam",
              "ActivateHttpFloodProtectionParam",
              "ActivateScannersProbesProtectionParam",
              "ActivateReputationListsProtectionParam",
              "ActivateBadBotProtectionParam"
            ]
          },
          {
            "Label": {
              "default": "Settings"
            },
            "Parameters": [
              "EndpointType",
              "AppAccessLogBucket"
            ]
          },
          {
            "Label": {
              "default": "Advanced Settings"
            },
            "Parameters": [
              "ErrorThreshold",
              "RequestThreshold",
              "WAFBlockPeriod",
              "KeepDataInOriginalS3Location"
            ]
          }
        ],
        "ParameterLabels": {
          "ActivateAWSManagedRulesParam": {
            "default": "Activate AWS Managed Rules Protection"
          },
          "ActivateSqlInjectionProtectionParam": {
            "default": "Activate SQL Injection Protection"
          },
          "ActivateCrossSiteScriptingProtectionParam": {
            "default": "Activate Cross-site Scripting Protection"
          },
          "ActivateHttpFloodProtectionParam": {
            "default": "Activate HTTP Flood Protection"
          },
          "ActivateScannersProbesProtectionParam": {
            "default": "Activate Scanner & Probe Protection"
          },
          "ActivateReputationListsProtectionParam": {
            "default": "Activate Reputation List Protection"
          },
          "ActivateBadBotProtectionParam": {
            "default": "Activate Bad Bot Protection"
          },
          "EndpointType": {
            "default": "Endpoint Type"
          },
          "AppAccessLogBucket": {
            "default": "Application Access Log Bucket Name"
          },
          "ErrorThreshold": {
            "default": "Error Threshold"
          },
          "RequestThreshold": {
            "default": "Request Threshold"
          },
          "WAFBlockPeriod": {
            "default": "WAF Block Period"
          },
          "KeepDataInOriginalS3Location": {
            "default": "Keep Data in Original s3 location"
          }
        }
      }
    },
    "Parameters": {
      "ActivateAWSManagedRulesParam": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Choose yes to enable the AWS Managed Rules."
      },
      "ActivateSqlInjectionProtectionParam": {
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Choose yes to enable the component designed to block common SQL injection attacks."
      },
      "ActivateCrossSiteScriptingProtectionParam": {
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Choose yes to enable the component designed to block common XSS attacks."
      },
      "ActivateHttpFloodProtectionParam": {
        "Type": "String",
        "Default": "yes - AWS WAF rate based rule",
        "AllowedValues": [
          "yes - AWS WAF rate based rule",
          "yes - AWS Lambda log parser",
          "yes - Amazon Athena log parser",
          false
        ],
        "Description": "Choose yes to enable the component designed to block HTTP flood attacks."
      },
      "ActivateScannersProbesProtectionParam": {
        "Type": "String",
        "Default": "yes - AWS Lambda log parser",
        "AllowedValues": [
          "yes - AWS Lambda log parser",
          "yes - Amazon Athena log parser",
          false
        ],
        "Description": "Choose yes to enable the component designed to block scanners and probes."
      },
      "ActivateReputationListsProtectionParam": {
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Choose yes to block requests from IP addresses on third-party reputation lists (supported lists: spamhaus, torproject, and emergingthreats)."
      },
      "ActivateBadBotProtectionParam": {
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Choose yes to enable the component designed to block bad bots and content scrapers."
      },
      "EndpointType": {
        "Type": "String",
        "Default": "CloudFront",
        "AllowedValues": [
          "CloudFront",
          "ALB"
        ],
        "Description": "Select the type of resource being used."
      },
      "AppAccessLogBucket": {
        "Type": "String",
        "Default": "",
        "AllowedPattern": "(^$|^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d]$)",
        "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter a name for the  Amazon S3 bucket where you want to store access logs for your CloudFront distribution or Application  Load Balancer. More about bucket name restriction here: http://amzn.to/1p1YlU5.  If you chose to deactivate this protection, ignore this parameter. "
      },
      "ErrorThreshold": {
        "Type": "Number",
        "Default": 50,
        "MinValue": 0,
        "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter the maximum acceptable bad requests per minute per IP. If you chose to deactivate this protection protection, ignore this parameter."
      },
      "RequestThreshold": {
        "Type": "Number",
        "Default": 100,
        "MinValue": 0,
        "Description": "If you chose yes for the Activate HTTP Flood Protection parameter, enter the maximum acceptable requests per FIVE-minute period per IP address. Please note that AWS WAF rate based rule requires values greater than 100 (if you chose Lambda/Athena log parser options, you can use any value greater than zero). If you chose to deactivate this protection, ignore this parameter."
      },
      "WAFBlockPeriod": {
        "Type": "Number",
        "Default": 240,
        "MinValue": 0,
        "Description": "If you chose yes for the Activate Scanners & Probes Protection or HTTP Flood Lambda/Athena log parser parameters, enter the period (in minutes) to block applicable IP addresses. If you chose to deactivate log parsing, ignore this parameter."
      },
      "KeepDataInOriginalS3Location": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "If you chose Amazon Athena log parser for the Activate Scanners & Probes Protection parameter,  partitioning will be applied to log files and Athena queries. By default log files will be moved from their original location to a partitioned folder structure in s3. Choose Yes if you also want to keep a copy of the logs in their original location. Selecting \"Yes\" will duplicate your log storage. If you did not choose to activate Athena log parsing, ignore this parameter."
      }
    },
    "Conditions": {
      "HttpFloodProtectionRateBasedRuleActivated": [
        "ActivateHttpFloodProtectionParam",
        "yes - AWS WAF rate based rule"
      ],
      "HttpFloodLambdaLogParser": [
        "ActivateHttpFloodProtectionParam",
        "yes - AWS Lambda log parser"
      ],
      "HttpFloodAthenaLogParser": [
        "ActivateHttpFloodProtectionParam",
        "yes - Amazon Athena log parser"
      ],
      "HttpFloodProtectionLogParserActivated": [
        {
          "Condition": "HttpFloodLambdaLogParser"
        },
        {
          "Condition": "HttpFloodAthenaLogParser"
        }
      ],
      "ScannersProbesLambdaLogParser": [
        "ActivateScannersProbesProtectionParam",
        "yes - AWS Lambda log parser"
      ],
      "ScannersProbesAthenaLogParser": [
        "ActivateScannersProbesProtectionParam",
        "yes - Amazon Athena log parser"
      ],
      "ScannersProbesProtectionActivated": [
        {
          "Condition": "ScannersProbesLambdaLogParser"
        },
        {
          "Condition": "ScannersProbesAthenaLogParser"
        }
      ],
      "AthenaLogParser": [
        {
          "Condition": "HttpFloodAthenaLogParser"
        },
        {
          "Condition": "ScannersProbesAthenaLogParser"
        }
      ],
      "LogParser": [
        {
          "Condition": "HttpFloodProtectionLogParserActivated"
        },
        {
          "Condition": "ScannersProbesProtectionActivated"
        }
      ],
      "CreateFirehoseAthenaStack": [
        {
          "Condition": "HttpFloodProtectionLogParserActivated"
        },
        {
          "Condition": "AthenaLogParser"
        }
      ],
      "ReputationListsProtectionActivated": [
        "ActivateReputationListsProtectionParam",
        true
      ],
      "BadBotProtectionActivated": [
        "ActivateBadBotProtectionParam",
        true
      ],
      "AlbEndpoint": [
        "EndpointType",
        "ALB"
      ],
      "CustomResourceLambdaAccess": [
        {
          "Condition": "ReputationListsProtectionActivated"
        },
        {
          "Condition": "AthenaLogParser"
        }
      ]
    },
    "Mappings": {
      "SourceCode": {
        "General": {
          "TemplateBucket": "solutions-reference",
          "SourceBucket": "solutions",
          "KeyPrefix": "aws-waf-security-automations/v3.1.0"
        }
      },
      "Solution": {
        "Data": {
          "SendAnonymousUsageData": true,
          "LogLevel": "INFO",
          "SolutionID": "SO0006",
          "MetricsURL": "https://metrics.awssolutionsbuilder.com/generic"
        },
        "Action": {
          "WAFWhitelistRule": "ALLOW",
          "WAFBlacklistRule": "BLOCK",
          "WAFSqlInjectionRule": "BLOCK",
          "WAFXssRule": "BLOCK",
          "WAFHttpFloodRateBasedRule": "BLOCK",
          "WAFHttpFloodRegularRule": "BLOCK",
          "WAFScannersProbesRule": "BLOCK",
          "WAFIPReputationListsRule": "BLOCK",
          "WAFBadBotRule": "BLOCK"
        },
        "Athena": {
          "QueryScheduledRunTime": 5
        }
      }
    },
    "Resources": {
      "CheckRequirements": {
        "Type": "Custom::CheckRequirements",
        "Properties": {
          "AthenaLogParser": [
            "AthenaLogParser",
            true,
            false
          ],
          "ServiceToken": "Helper.Arn",
          "HttpFloodProtectionRateBasedRuleActivated": [
            "HttpFloodProtectionRateBasedRuleActivated",
            true,
            false
          ],
          "HttpFloodProtectionLogParserActivated": [
            "HttpFloodProtectionLogParserActivated",
            true,
            false
          ],
          "ProtectionActivatedScannersProbes": [
            "ScannersProbesProtectionActivated",
            true,
            false
          ],
          "AppAccessLogBucket": "AppAccessLogBucket",
          "Region": "AWS::Region",
          "EndpointType": "EndpointType",
          "RequestThreshold": "RequestThreshold"
        }
      },
      "FirehoseAthenaStack": {
        "Type": "AWS::CloudFormation::Stack",
        "Condition": "CreateFirehoseAthenaStack",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "TemplateURL": [
            "https://${S3Bucket}.s3.amazonaws.com/${KeyPrefix}/aws-waf-security-automations-firehose-athena.template",
            {
              "S3Bucket": [
                "SourceCode",
                "General",
                "TemplateBucket"
              ],
              "KeyPrefix": [
                "SourceCode",
                "General",
                "KeyPrefix"
              ]
            }
          ],
          "Parameters": {
            "ActivateHttpFloodProtectionParam": "ActivateHttpFloodProtectionParam",
            "ActivateScannersProbesProtectionParam": "ActivateScannersProbesProtectionParam",
            "EndpointType": "EndpointType",
            "AppAccessLogBucket": "AppAccessLogBucket",
            "ParentStackName": "AWS::StackName",
            "WafLogBucket": [
              "HttpFloodProtectionLogParserActivated",
              "WafLogBucket",
              ""
            ],
            "WafLogBucketArn": [
              "HttpFloodProtectionLogParserActivated",
              "WafLogBucket.Arn",
              ""
            ],
            "ErrorThreshold": "ErrorThreshold",
            "RequestThreshold": "RequestThreshold",
            "WAFBlockPeriod": "WAFBlockPeriod",
            "GlueDatabaseName": [
              "AthenaLogParser",
              "CreateGlueDatabaseName.DatabaseName",
              ""
            ],
            "DeliveryStreamName": [
              "HttpFloodProtectionLogParserActivated",
              "CreateDeliveryStreamName.DeliveryStreamName",
              ""
            ]
          }
        }
      },
      "WebACLStack": {
        "Type": "AWS::CloudFormation::Stack",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "TemplateURL": [
            "https://${S3Bucket}.s3.amazonaws.com/${KeyPrefix}/aws-waf-security-automations-webacl.template",
            {
              "S3Bucket": [
                "SourceCode",
                "General",
                "TemplateBucket"
              ],
              "KeyPrefix": [
                "SourceCode",
                "General",
                "KeyPrefix"
              ]
            }
          ],
          "Parameters": {
            "ActivateAWSManagedRulesParam": "ActivateAWSManagedRulesParam",
            "ActivateSqlInjectionProtectionParam": "ActivateSqlInjectionProtectionParam",
            "ActivateCrossSiteScriptingProtectionParam": "ActivateCrossSiteScriptingProtectionParam",
            "ActivateHttpFloodProtectionParam": "ActivateHttpFloodProtectionParam",
            "ActivateScannersProbesProtectionParam": "ActivateScannersProbesProtectionParam",
            "ActivateReputationListsProtectionParam": "ActivateReputationListsProtectionParam",
            "ActivateBadBotProtectionParam": "ActivateBadBotProtectionParam",
            "RequestThreshold": "RequestThreshold",
            "RegionScope": [
              "AlbEndpoint",
              "REGIONAL",
              "CLOUDFRONT"
            ],
            "ParentStackName": "AWS::StackName",
            "GlueAccessLogsDatabase": [
              "AthenaLogParser",
              "FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase",
              ""
            ],
            "GlueAppAccessLogsTable": [
              "ScannersProbesAthenaLogParser",
              "FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable",
              ""
            ],
            "GlueWafAccessLogsTable": [
              "HttpFloodAthenaLogParser",
              "FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable",
              ""
            ],
            "LogLevel": [
              "Solution",
              "Data",
              "LogLevel"
            ]
          }
        }
      },
      "LambdaRoleHelper": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "S3Access",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetBucketLocation",
                      "s3:GetObject",
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "WAFAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "wafv2:ListWebACLs"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:regional/webacl/*",
                      "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:global/webacl/*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*Helper*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "LogsAccess permission restricted to account, region and log group name substring (Helper)."
              },
              {
                "id": "W76",
                "reason": "The policy is long as it is scoped down to all the IP set ARNs and function ARNs."
              }
            ]
          }
        }
      },
      "LambdaRoleBadBot": {
        "Type": "AWS::IAM::Role",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*BadBotParser*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "CloudFormationAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudformation:DescribeStacks",
                    "Resource": [
                      "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "WAFGetAndUpdateIPSet",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "wafv2:GetIPSet",
                      "wafv2:UpdateIPSet"
                    ],
                    "Resource": [
                      "WebACLStack.Outputs.WAFBadBotSetV4Arn",
                      "WebACLStack.Outputs.WAFBadBotSetV6Arn"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "CloudWatchAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudwatch:GetMetricStatistics",
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "LogsAccess - permission restricted to account, region and log group name substring (BadBotParser); CloudFormationAccess - account, region and stack name; CloudWatchAccess - this actions does not support resource-level permissions"
              }
            ]
          }
        }
      },
      "LambdaRoleReputationListsParser": {
        "Type": "AWS::IAM::Role",
        "Condition": "ReputationListsProtectionActivated",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "CloudWatchLogs",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*ReputationListsParser*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "WAFGetAndUpdateIPSet",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "wafv2:GetIPSet",
                      "wafv2:UpdateIPSet"
                    ],
                    "Resource": [
                      "WebACLStack.Outputs.WAFReputationListsSetV4Arn",
                      "WebACLStack.Outputs.WAFReputationListsSetV6Arn"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "CloudFormationAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudformation:DescribeStacks",
                    "Resource": [
                      "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "CloudWatchAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudwatch:GetMetricStatistics",
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "CloudWatchLogs - permission restricted to account, region and log group name substring (ReputationListsParser); CloudFormationAccess - account, region and stack name; CloudWatchAccess - this actions does not support resource-level permissions"
              }
            ]
          }
        }
      },
      "LambdaRoleLogParser": {
        "Type": "AWS::IAM::Role",
        "Condition": "LogParser",
        "DependsOn": "WebACLStack",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            [
              "ScannersProbesProtectionActivated",
              {
                "PolicyName": "ScannersProbesProtectionActivatedAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "s3:GetObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": "s3:PutObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_out.json",
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_conf.json"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "wafv2:GetIPSet",
                        "wafv2:UpdateIPSet"
                      ],
                      "Resource": [
                        "WebACLStack.Outputs.WAFScannersProbesSetV4Arn",
                        "WebACLStack.Outputs.WAFScannersProbesSetV6Arn"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "ScannersProbesAthenaLogParser",
              {
                "PolicyName": "ScannersProbesAthenaLogParserAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "athena:GetNamedQuery",
                        "athena:StartQueryExecution"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetBucketLocation",
                        "s3:GetObject",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads",
                        "s3:ListMultipartUploadParts",
                        "s3:AbortMultipartUpload",
                        "s3:CreateBucket",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/athena_results/*",
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "glue:GetTable",
                        "glue:GetPartitions"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueAppAccessLogsTable}"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "HttpFloodProtectionLogParserActivated",
              {
                "PolicyName": "HttpFloodProtectionLogParserActivatedAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "s3:GetObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": "s3:PutObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_out.json",
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_conf.json"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "wafv2:GetIPSet",
                        "wafv2:UpdateIPSet"
                      ],
                      "Resource": [
                        "WebACLStack.Outputs.WAFHttpFloodSetV4Arn",
                        "WebACLStack.Outputs.WAFHttpFloodSetV6Arn"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "HttpFloodAthenaLogParser",
              {
                "PolicyName": "HttpFloodAthenaLogParserAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "athena:GetNamedQuery",
                        "athena:StartQueryExecution"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetBucketLocation",
                        "s3:GetObject",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads",
                        "s3:ListMultipartUploadParts",
                        "s3:AbortMultipartUpload",
                        "s3:CreateBucket",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/athena_results/*",
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "glue:GetTable",
                        "glue:GetPartitions"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueWafAccessLogsTable}"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LogParser*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "CloudWatchAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudwatch:GetMetricStatistics",
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "LogsAccess - permission restricted to account, region and log group name substring (LogParser); CloudWatchAccess - this actions does not support resource-level permissions"
              }
            ]
          }
        }
      },
      "LambdaRoleCustomResource": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "S3AccessGeneralAppAccessLog",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:CreateBucket",
                      "s3:GetBucketNotification",
                      "s3:PutBucketNotification",
                      "s3:PutEncryptionConfiguration",
                      "s3:PutBucketPublicAccessBlock"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                    ]
                  }
                ]
              }
            },
            [
              "HttpFloodProtectionLogParserActivated",
              {
                "PolicyName": "S3AccessGeneralWafLog",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:CreateBucket",
                        "s3:GetBucketNotification",
                        "s3:PutBucketNotification"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "S3Access",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetBucketLocation",
                      "s3:GetObject",
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                    ]
                  }
                ]
              }
            },
            [
              "ScannersProbesLambdaLogParser",
              {
                "PolicyName": "S3AppAccessPut",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "s3:PutObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_conf.json"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "HttpFloodLambdaLogParser",
              {
                "PolicyName": "S3WafAccessPut",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "s3:PutObject",
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_conf.json"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "CustomResourceLambdaAccess",
              {
                "PolicyName": "LambdaAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "lambda:InvokeFunction",
                      "Resource": [
                        "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}*"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "WAFAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "wafv2:GetWebACL",
                      "wafv2:UpdateWebACL",
                      "wafv2:DeleteLoggingConfiguration"
                    ],
                    "Resource": [
                      "WebACLStack.Outputs.WAFWebACLArn"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "IPSetAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "wafv2:GetIPSet",
                      "wafv2:DeleteIPSet"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:regional/ipset/${AWS::StackName}*",
                      "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:global/ipset/${AWS::StackName}*"
                    ]
                  }
                ]
              }
            },
            [
              "HttpFloodProtectionLogParserActivated",
              {
                "PolicyName": "WAFLogsAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "wafv2:PutLoggingConfiguration"
                      ],
                      "Resource": [
                        "WebACLStack.Outputs.WAFWebACLArn"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": "iam:CreateServiceLinkedRole",
                      "Resource": [
                        "arn:${AWS::Partition}:iam::*:role/aws-service-role/wafv2.amazonaws.com/AWSServiceRoleForWAFV2Logging"
                      ],
                      "Condition": {
                        "StringLike": {
                          "iam:AWSServiceName": "wafv2.amazonaws.com"
                        }
                      }
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "CloudFormationAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "cloudformation:DescribeStacks",
                    "Resource": [
                      "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                    ]
                  }
                ]
              }
            },
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CustomResource*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "WAFAccess, WAFRuleAccess, WAFIPSetAccess and WAFRateBasedRuleAccess - restricted to WafArnPrefix/AccountId; CloudFormationAccess - account, region and stack name; LogsAccess - permission restricted to account, region and log group name substring (CustomResource);"
              },
              {
                "id": "W76",
                "reason": "The policy is long as it is scoped down to all the IP set ARNs and function ARNs."
              }
            ]
          }
        }
      },
      "LambdaRolePartitionS3Logs": {
        "Type": "AWS::IAM::Role",
        "Condition": "ScannersProbesAthenaLogParser",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "LogsAccess - permission restricted to account, region and log group name substring (MoveS3LogsForPartition)"
              }
            ]
          }
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            [
              "ScannersProbesAthenaLogParser",
              {
                "PolicyName": "PartitionS3LogsAccess",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:DeleteObject",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*MoveS3LogsForPartition*"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "LambdaRoleAddAthenaPartitions": {
        "Type": "AWS::IAM::Role",
        "Condition": "AthenaLogParser",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "LogsAccess - permission restricted to account, region and log group name substring (AddAthenaPartitions)"
              }
            ]
          }
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            [
              "ScannersProbesAthenaLogParser",
              {
                "PolicyName": "AddAthenaPartitionsForAppAccessLog",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:GetBucketLocation",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads",
                        "s3:ListMultipartUploadParts",
                        "s3:AbortMultipartUpload",
                        "s3:CreateBucket"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/athena_results/*",
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}",
                        "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "athena:StartQueryExecution"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "glue:GetTable",
                        "glue:GetDatabase",
                        "glue:UpdateDatabase",
                        "glue:CreateDatabase",
                        "glue:BatchCreatePartition"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/default",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueAppAccessLogsTable}"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            [
              "HttpFloodAthenaLogParser",
              {
                "PolicyName": "AddAthenaPartitionsForWAFLog",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:GetBucketLocation",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads",
                        "s3:ListMultipartUploadParts",
                        "s3:AbortMultipartUpload",
                        "s3:CreateBucket"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/athena_results/*",
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}",
                        "arn:${AWS::Partition}:s3:::${WafLogBucket}/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "athena:StartQueryExecution"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "glue:GetTable",
                        "glue:GetDatabase",
                        "glue:UpdateDatabase",
                        "glue:CreateDatabase",
                        "glue:BatchCreatePartition"
                      ],
                      "Resource": [
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/default",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}",
                        "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueWafAccessLogsTable}"
                      ]
                    }
                  ]
                }
              },
              "AWS::NoValue"
            ],
            {
              "PolicyName": "LogsAccess",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*AddAthenaPartitions*"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "Helper": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "This lambda function verifies the main project's dependencies, requirements and implement auxiliary functions.",
          "Handler": "helper.lambda_handler",
          "Role": "LambdaRoleHelper.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "helper.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "SCOPE": [
                "AlbEndpoint",
                "REGIONAL",
                "CLOUDFRONT"
              ]
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 128,
          "Timeout": 300
        }
      },
      "CreateUniqueID": {
        "Type": "Custom::CreateUUID",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "ServiceToken": "Helper.Arn"
        }
      },
      "CreateDeliveryStreamName": {
        "Type": "Custom::CreateDeliveryStreamName",
        "Condition": "HttpFloodProtectionLogParserActivated",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "ServiceToken": "Helper.Arn",
          "StackName": "AWS::StackName"
        }
      },
      "CreateGlueDatabaseName": {
        "Type": "Custom::CreateGlueDatabaseName",
        "Condition": "AthenaLogParser",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "ServiceToken": "Helper.Arn",
          "StackName": "AWS::StackName"
        }
      },
      "WafLogBucket": {
        "Type": "AWS::S3::Bucket",
        "Condition": "HttpFloodProtectionLogParserActivated",
        "DependsOn": "CheckRequirements",
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Properties": {
          "AccessControl": "Private",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W35",
                "reason": "WafLogBucket does not require access logging to be configured by default."
              },
              {
                "id": "W51",
                "reason": "WafLogBucket does not require a bucket policy."
              }
            ]
          }
        }
      },
      "LogParser": {
        "Type": "AWS::Lambda::Function",
        "Condition": "LogParser",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRoleLogParser policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This function parses access logs to identify suspicious behavior, such as an abnormal amount of errors. It then blocks those IP addresses for a customer-defined period of time.",
          "Handler": "log-parser.lambda_handler",
          "Role": "LambdaRoleLogParser.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "log_parser.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "APP_ACCESS_LOG_BUCKET": [
                "ScannersProbesProtectionActivated",
                "AppAccessLogBucket",
                "AWS::NoValue"
              ],
              "WAF_ACCESS_LOG_BUCKET": [
                "HttpFloodProtectionLogParserActivated",
                "WafLogBucket",
                "AWS::NoValue"
              ],
              "SEND_ANONYMOUS_USAGE_DATA": [
                "Solution",
                "Data",
                "SendAnonymousUsageData"
              ],
              "UUID": "CreateUniqueID.UUID",
              "LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION": "10000",
              "MAX_AGE_TO_UPDATE": "30",
              "REGION": "AWS::Region",
              "SCOPE": [
                "AlbEndpoint",
                "REGIONAL",
                "CLOUDFRONT"
              ],
              "LOG_TYPE": [
                "AlbEndpoint",
                "alb",
                "cloudfront"
              ],
              "METRIC_NAME_PREFIX": [
                "",
                [
                  "-",
                  "AWS::StackName"
                ]
              ],
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "STACK_NAME": "AWS::StackName",
              "IP_SET_ID_HTTP_FLOODV4": [
                "HttpFloodProtectionLogParserActivated",
                "WebACLStack.Outputs.WAFHttpFloodSetV4Arn",
                "AWS::NoValue"
              ],
              "IP_SET_ID_HTTP_FLOODV6": [
                "HttpFloodProtectionLogParserActivated",
                "WebACLStack.Outputs.WAFHttpFloodSetV6Arn",
                "AWS::NoValue"
              ],
              "IP_SET_NAME_HTTP_FLOODV4": [
                "HttpFloodProtectionLogParserActivated",
                "WebACLStack.Outputs.NameHttpFloodSetV4",
                "AWS::NoValue"
              ],
              "IP_SET_NAME_HTTP_FLOODV6": [
                "HttpFloodProtectionLogParserActivated",
                "WebACLStack.Outputs.NameHttpFloodSetV6",
                "AWS::NoValue"
              ],
              "IP_SET_ID_SCANNERS_PROBESV4": [
                "ScannersProbesProtectionActivated",
                "WebACLStack.Outputs.WAFScannersProbesSetV4Arn",
                "AWS::NoValue"
              ],
              "IP_SET_ID_SCANNERS_PROBESV6": [
                "ScannersProbesProtectionActivated",
                "WebACLStack.Outputs.WAFScannersProbesSetV6Arn",
                "AWS::NoValue"
              ],
              "IP_SET_NAME_SCANNERS_PROBESV4": [
                "ScannersProbesProtectionActivated",
                "WebACLStack.Outputs.NameScannersProbesSetV4",
                "AWS::NoValue"
              ],
              "IP_SET_NAME_SCANNERS_PROBESV6": [
                "ScannersProbesProtectionActivated",
                "WebACLStack.Outputs.NameScannersProbesSetV6",
                "AWS::NoValue"
              ],
              "WAF_BLOCK_PERIOD": "WAFBlockPeriod",
              "ERROR_THRESHOLD": "ErrorThreshold",
              "REQUEST_THRESHOLD": "RequestThreshold",
              "SOLUTION_ID": [
                "Solution",
                "Data",
                "SolutionID"
              ],
              "METRICS_URL": [
                "Solution",
                "Data",
                "MetricsURL"
              ]
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 512,
          "Timeout": 300
        }
      },
      "MoveS3LogsForPartition": {
        "Type": "AWS::Lambda::Function",
        "Condition": "ScannersProbesAthenaLogParser",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRolePartitionS3Logs policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This function is triggered by S3 event to move log files(upon their arrival in s3) from their original location to a partitioned folder structure created per timestamps in file names, hence allowing the usage of partitioning within AWS Athena.",
          "Handler": "partition_s3_logs.lambda_handler",
          "Role": "LambdaRolePartitionS3Logs.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "log_parser.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "KEEP_ORIGINAL_DATA": "KeepDataInOriginalS3Location",
              "ENDPOINT": "EndpointType"
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 512,
          "Timeout": 300
        }
      },
      "AddAthenaPartitions": {
        "Type": "AWS::Lambda::Function",
        "Condition": "AthenaLogParser",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRoleAddAthenaPartitions policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This function adds a new hourly partition to athena table. It runs every hour, triggered by a CloudWatch event.",
          "Handler": "add_athena_partitions.lambda_handler",
          "Role": "LambdaRoleAddAthenaPartitions.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "log_parser.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ]
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 512,
          "Timeout": 300
        }
      },
      "LambdaInvokePermissionAppLogParserS3": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "LogParser",
        "Properties": {
          "FunctionName": "LogParser.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "s3.amazonaws.com",
          "SourceAccount": "AWS::AccountId"
        }
      },
      "LambdaInvokePermissionMoveS3LogsForPartition": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "ScannersProbesAthenaLogParser",
        "Properties": {
          "FunctionName": "MoveS3LogsForPartition.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "s3.amazonaws.com",
          "SourceAccount": "AWS::AccountId"
        }
      },
      "LambdaPermissionAddAthenaPartitions": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "AthenaLogParser",
        "Properties": {
          "FunctionName": "AddAthenaPartitions.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "LambdaAddAthenaPartitionsEventsRule.Arn"
        }
      },
      "LambdaAthenaWAFLogParser": {
        "Type": "AWS::Events::Rule",
        "Condition": "HttpFloodAthenaLogParser",
        "Properties": {
          "Description": "Security Automation - WAF Logs Athena parser",
          "ScheduleExpression": [
            "",
            [
              "rate(",
              [
                "Solution",
                "Athena",
                "QueryScheduledRunTime"
              ],
              " minutes)"
            ]
          ],
          "Targets": [
            {
              "Arn": "LogParser.Arn",
              "Id": "LogParser",
              "Input": "{\n  \"resourceType\": \"LambdaAthenaWAFLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${WafLogBucket}\",\n  \"glueWafAccessLogsTable\": \"${FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable}\",\n  \"athenaWorkGroup\":\"${FirehoseAthenaStack.Outputs.WAFLogAthenaQueryWorkGroup}\"\n}\n"
            }
          ]
        }
      },
      "LambdaInvokePermissionWafLogParserCloudWatch": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "HttpFloodAthenaLogParser",
        "Properties": {
          "FunctionName": "LogParser",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "LambdaAthenaWAFLogParser.Arn"
        }
      },
      "LambdaAthenaAppLogParser": {
        "Type": "AWS::Events::Rule",
        "Condition": "ScannersProbesAthenaLogParser",
        "Properties": {
          "Description": "Security Automation - App Logs Athena parser",
          "ScheduleExpression": "rate(5 minutes)",
          "Targets": [
            {
              "Arn": "LogParser.Arn",
              "Id": "LogParser",
              "Input": "{\n  \"resourceType\": \"LambdaAthenaAppLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"glueAppAccessLogsTable\": \"${FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable}\",\n  \"athenaWorkGroup\": \"${FirehoseAthenaStack.Outputs.WAFAppAccessLogAthenaQueryWorkGroup}\"\n}\n"
            }
          ]
        }
      },
      "LambdaAddAthenaPartitionsEventsRule": {
        "Type": "AWS::Events::Rule",
        "Condition": "AthenaLogParser",
        "Properties": {
          "Description": "Security Automations - Add partitions to Athena table",
          "ScheduleExpression": "rate(1 hour)",
          "State": "ENABLED",
          "Targets": [
            {
              "Arn": "AddAthenaPartitions.Arn",
              "Id": "LambdaAddAthenaPartitions",
              "Input": [
                "{\n  \"resourceType\": \"LambdaAddAthenaPartitionsEventsRule\",\n  \"glueAccessLogsDatabase\": \"${GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"glueAppAccessLogsTable\": \"${GlueAppAccessLogsTable}\",\n  \"glueWafAccessLogsTable\": \"${GlueWafAccessLogsTable}\",\n  \"wafLogBucket\": \"${WafLogBucket}\",\n  \"athenaWorkGroup\": \"${AthenaWorkGroup}\"\n}",
                {
                  "GlueAccessLogsDatabase": "FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase",
                  "AppAccessLogBucket": [
                    "ScannersProbesAthenaLogParser",
                    "AppAccessLogBucket",
                    ""
                  ],
                  "GlueAppAccessLogsTable": [
                    "ScannersProbesAthenaLogParser",
                    "FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable",
                    ""
                  ],
                  "GlueWafAccessLogsTable": [
                    "HttpFloodAthenaLogParser",
                    "FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable",
                    ""
                  ],
                  "WafLogBucket": [
                    "HttpFloodAthenaLogParser",
                    "WafLogBucket",
                    ""
                  ],
                  "AthenaWorkGroup": "FirehoseAthenaStack.Outputs.WAFAddPartitionAthenaQueryWorkGroup"
                }
              ]
            }
          ]
        }
      },
      "LambdaInvokePermissionAppLogParserCloudWatch": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "ScannersProbesAthenaLogParser",
        "Properties": {
          "FunctionName": "LogParser",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "LambdaAthenaAppLogParser.Arn"
        }
      },
      "ReputationListsParser": {
        "Type": "AWS::Lambda::Function",
        "Condition": "ReputationListsProtectionActivated",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRoleReputationListsParser policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This lambda function checks third-party IP reputation lists hourly for new IP ranges to block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list.",
          "Handler": "reputation-lists.lambda_handler",
          "Role": "LambdaRoleReputationListsParser.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "reputation_lists_parser.zip"
              ]
            ]
          },
          "Runtime": "python3.8",
          "MemorySize": 512,
          "Timeout": 300,
          "Environment": {
            "Variables": {
              "IP_SET_ID_REPUTATIONV4": "WebACLStack.Outputs.WAFReputationListsSetV4Arn",
              "IP_SET_ID_REPUTATIONV6": "WebACLStack.Outputs.WAFReputationListsSetV6Arn",
              "IP_SET_NAME_REPUTATIONV4": "WebACLStack.Outputs.NameReputationListsSetV4",
              "IP_SET_NAME_REPUTATIONV6": "WebACLStack.Outputs.NameReputationListsSetV6",
              "SCOPE": [
                "AlbEndpoint",
                "REGIONAL",
                "CLOUDFRONT"
              ],
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "URL_LIST": "[{\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},{\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},{\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},{\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}]",
              "SOLUTION_ID": [
                "Solution",
                "Data",
                "SolutionID"
              ],
              "METRICS_URL": [
                "Solution",
                "Data",
                "MetricsURL"
              ],
              "STACK_NAME": "AWS::StackName",
              "LOG_TYPE": [
                "AlbEndpoint",
                "alb",
                "cloudfront"
              ],
              "SEND_ANONYMOUS_USAGE_DATA": [
                "Solution",
                "Data",
                "SendAnonymousUsageData"
              ],
              "IPREPUTATIONLIST_METRICNAME": "WebACLStack.Outputs.IPReputationListsMetricName"
            }
          }
        }
      },
      "ReputationListsParserEventsRule": {
        "Condition": "ReputationListsProtectionActivated",
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Description": "Security Automation - WAF Reputation Lists",
          "ScheduleExpression": "rate(1 hour)",
          "Targets": [
            {
              "Arn": "ReputationListsParser.Arn",
              "Id": "ReputationListsParser",
              "Input": [
                "{\n  \"URL_LIST\": [\n    {\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},\n    {\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},\n    {\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},\n    {\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}\n  ],\n  \"IP_SET_ID_REPUTATIONV4\": \"${IP_SET_ID_REPUTATIONV4}\",\n  \"IP_SET_ID_REPUTATIONV6\": \"${IP_SET_ID_REPUTATIONV6}\",\n  \"IP_SET_NAME_REPUTATIONV4\": \"${IP_SET_NAME_REPUTATIONV4}\",\n  \"IP_SET_NAME_REPUTATIONV6\": \"${IP_SET_NAME_REPUTATIONV6}\",\n  \"SCOPE\": \"${SCOPE}\"\n}",
                {
                  "IP_SET_ID_REPUTATIONV4": "WebACLStack.Outputs.WAFReputationListsSetV4Arn",
                  "IP_SET_ID_REPUTATIONV6": "WebACLStack.Outputs.WAFReputationListsSetV6Arn",
                  "IP_SET_NAME_REPUTATIONV4": "WebACLStack.Outputs.NameReputationListsSetV4",
                  "IP_SET_NAME_REPUTATIONV6": "WebACLStack.Outputs.NameReputationListsSetV6",
                  "SCOPE": "CLOUDFRONT"
                }
              ]
            }
          ]
        }
      },
      "UpdateReputationListsOnLoad": {
        "Condition": "ReputationListsProtectionActivated",
        "Type": "Custom::UpdateReputationLists",
        "DependsOn": "WebACLStack",
        "Properties": {
          "ServiceToken": "ReputationListsParser.Arn"
        }
      },
      "LambdaInvokePermissionReputationListsParser": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "ReputationListsProtectionActivated",
        "Properties": {
          "FunctionName": "ReputationListsParser",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "ReputationListsParserEventsRule.Arn"
        }
      },
      "BadBotParser": {
        "Type": "AWS::Lambda::Function",
        "Condition": "BadBotProtectionActivated",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRoleBadBot policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This lambda function will intercepts and inspects trap endpoint requests to extract its IP address, and then add it to an AWS WAF block list.",
          "Handler": "access-handler.lambda_handler",
          "Role": "LambdaRoleBadBot.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "access_handler.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "SCOPE": [
                "AlbEndpoint",
                "REGIONAL",
                "CLOUDFRONT"
              ],
              "IP_SET_ID_BAD_BOTV4": "WebACLStack.Outputs.WAFBadBotSetV4Arn",
              "IP_SET_ID_BAD_BOTV6": "WebACLStack.Outputs.WAFBadBotSetV6Arn",
              "IP_SET_NAME_BAD_BOTV4": "WebACLStack.Outputs.NameBadBotSetV4",
              "IP_SET_NAME_BAD_BOTV6": "WebACLStack.Outputs.NameBadBotSetV6",
              "SEND_ANONYMOUS_USAGE_DATA": [
                "Solution",
                "Data",
                "SendAnonymousUsageData"
              ],
              "UUID": "CreateUniqueID.UUID",
              "REGION": "AWS::Region",
              "LOG_TYPE": [
                "AlbEndpoint",
                "alb",
                "cloudfront"
              ],
              "METRIC_NAME_PREFIX": [
                "",
                [
                  "-",
                  "AWS::StackName"
                ]
              ],
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "SOLUTION_ID": [
                "Solution",
                "Data",
                "SolutionID"
              ],
              "METRICS_URL": [
                "Solution",
                "Data",
                "MetricsURL"
              ],
              "STACK_NAME": "AWS::StackName"
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 128,
          "Timeout": 300
        }
      },
      "LambdaInvokePermissionBadBot": {
        "Type": "AWS::Lambda::Permission",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "FunctionName": "BadBotParser.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com"
        }
      },
      "ApiGatewayBadBot": {
        "Type": "AWS::ApiGateway::RestApi",
        "Condition": "BadBotProtectionActivated",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "Name": "Security Automation - WAF Bad Bot API",
          "Description": "API created by AWS WAF Security Automation CloudFormation template. This endpoint will be used to capture bad bots."
        }
      },
      "ApiGatewayBadBotResource": {
        "Type": "AWS::ApiGateway::Resource",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "RestApiId": "ApiGatewayBadBot",
          "ParentId": "ApiGatewayBadBot.RootResourceId",
          "PathPart": "{proxy+}"
        }
      },
      "ApiGatewayBadBotMethodRoot": {
        "Type": "AWS::ApiGateway::Method",
        "Condition": "BadBotProtectionActivated",
        "DependsOn": "LambdaInvokePermissionBadBot",
        "Properties": {
          "RestApiId": "ApiGatewayBadBot",
          "ResourceId": "ApiGatewayBadBot.RootResourceId",
          "HttpMethod": "ANY",
          "AuthorizationType": "NONE",
          "RequestParameters": {
            "method.request.header.X-Forwarded-For": false
          },
          "Integration": {
            "Type": "AWS_PROXY",
            "IntegrationHttpMethod": "POST",
            "Uri": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations"
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W59",
                "reason": "Creating a honeypot to lure badbots away."
              }
            ]
          }
        }
      },
      "ApiGatewayBadBotMethod": {
        "Type": "AWS::ApiGateway::Method",
        "Condition": "BadBotProtectionActivated",
        "DependsOn": "LambdaInvokePermissionBadBot",
        "Properties": {
          "RestApiId": "ApiGatewayBadBot",
          "ResourceId": "ApiGatewayBadBotResource",
          "HttpMethod": "ANY",
          "AuthorizationType": "NONE",
          "RequestParameters": {
            "method.request.header.X-Forwarded-For": false
          },
          "Integration": {
            "Type": "AWS_PROXY",
            "IntegrationHttpMethod": "POST",
            "Uri": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations"
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W59",
                "reason": "Creating a honeypot to lure badbots away."
              }
            ]
          }
        }
      },
      "ApiGatewayBadBotDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "Condition": "BadBotProtectionActivated",
        "DependsOn": "ApiGatewayBadBotMethod",
        "Properties": {
          "RestApiId": "ApiGatewayBadBot",
          "Description": "CloudFormation Deployment Stage",
          "StageName": "CFDeploymentStage"
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W45",
                "reason": "Log not needed for this component."
              },
              {
                "id": "W68",
                "reason": "Usage Plan not required."
              }
            ]
          }
        }
      },
      "ApiGatewayBadBotStage": {
        "Type": "AWS::ApiGateway::Stage",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "DeploymentId": "ApiGatewayBadBotDeployment",
          "Description": "Production Stage",
          "RestApiId": "ApiGatewayBadBot",
          "StageName": "ProdStage",
          "AccessLogSetting": {
            "DestinationArn": "ApiGatewayBadBotStageAccessLogGroup.Arn",
            "Format": "{\"sourceIp\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\", \"user\": \"$context.identity.user\", \"requestTime\": \"$context.requestTime\", \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\", \"protocol\": \"$context.protocol\", \"status\": \"$context.status\", \"responseLength\": \"$context.responseLength\", \"requestId\": \"$context.requestId\"}"
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W64",
                "reason": "Usage Plan not required."
              }
            ]
          }
        }
      },
      "ApiGatewayBadBotStageAccessLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Condition": "BadBotProtectionActivated"
      },
      "ApiGatewayBadBotCloudWatchRole": {
        "Type": "AWS::IAM::Role",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "apigateway.amazonaws.com"
                }
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "LambdaRestApiCloudWatchRole",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams",
                      "logs:PutLogEvents",
                      "logs:GetLogEvents",
                      "logs:FilterLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "ApiGatewayBadBotAccount": {
        "Type": "AWS::ApiGateway::Account",
        "Condition": "BadBotProtectionActivated",
        "Properties": {
          "CloudWatchRoleArn": "ApiGatewayBadBotCloudWatchRole.Arn"
        },
        "DependsOn": [
          "ApiGatewayBadBot"
        ]
      },
      "CustomResource": {
        "Type": "AWS::Lambda::Function",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "Log permissions are defined in the LambdaRoleCustomResource policies"
              }
            ]
          }
        },
        "Properties": {
          "Description": "This lambda function configures the Web ACL rules based on the features enabled in the CloudFormation template.",
          "Handler": "custom-resource.lambda_handler",
          "Role": "LambdaRoleCustomResource.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "SourceBucket"
                ],
                "AWS::Region"
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "custom_resource.zip"
              ]
            ]
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": [
                "Solution",
                "Data",
                "LogLevel"
              ],
              "SCOPE": [
                "AlbEndpoint",
                "REGIONAL",
                "CLOUDFRONT"
              ],
              "SOLUTION_ID": [
                "Solution",
                "Data",
                "SolutionID"
              ],
              "METRICS_URL": [
                "Solution",
                "Data",
                "MetricsURL"
              ]
            }
          },
          "Runtime": "python3.8",
          "MemorySize": 128,
          "Timeout": 300
        }
      },
      "ConfigureAWSWAFLogs": {
        "Type": "Custom::ConfigureAWSWAFLogs",
        "Condition": "HttpFloodProtectionLogParserActivated",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "WAFWebACLArn": "WebACLStack.Outputs.WAFWebACLArn",
          "DeliveryStreamArn": "FirehoseAthenaStack.Outputs.FirehoseWAFLogsDeliveryStreamArn"
        }
      },
      "ConfigureAppAccessLogBucket": {
        "Type": "Custom::ConfigureAppAccessLogBucket",
        "Condition": "ScannersProbesProtectionActivated",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Region": "AWS::Region",
          "AppAccessLogBucket": "AppAccessLogBucket",
          "LogParser": [
            "LogParser",
            "LogParser.Arn",
            "AWS::NoValue"
          ],
          "ScannersProbesLambdaLogParser": [
            "ScannersProbesLambdaLogParser",
            true,
            false
          ],
          "ScannersProbesAthenaLogParser": [
            "ScannersProbesAthenaLogParser",
            true,
            false
          ],
          "MoveS3LogsForPartition": [
            "ScannersProbesAthenaLogParser",
            "MoveS3LogsForPartition.Arn",
            "AWS::NoValue"
          ]
        }
      },
      "ConfigureWafLogBucket": {
        "Type": "Custom::ConfigureWafLogBucket",
        "Condition": "HttpFloodProtectionLogParserActivated",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "WafLogBucket": "WafLogBucket",
          "LogParser": [
            "LogParser",
            "LogParser.Arn",
            "AWS::NoValue"
          ],
          "HttpFloodLambdaLogParser": [
            "HttpFloodLambdaLogParser",
            true,
            false
          ],
          "HttpFloodAthenaLogParser": [
            "HttpFloodAthenaLogParser",
            true,
            false
          ]
        }
      },
      "GenerateAppLogParserConfFile": {
        "Type": "Custom::GenerateAppLogParserConfFile",
        "Condition": "ScannersProbesLambdaLogParser",
        "DependsOn": "ConfigureAppAccessLogBucket",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "StackName": "AWS::StackName",
          "AppAccessLogBucket": "AppAccessLogBucket",
          "ErrorThreshold": "ErrorThreshold",
          "WAFBlockPeriod": "WAFBlockPeriod"
        }
      },
      "GenerateWafLogParserConfFile": {
        "Type": "Custom::GenerateWafLogParserConfFile",
        "Condition": "HttpFloodLambdaLogParser",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "StackName": "AWS::StackName",
          "WafAccessLogBucket": "WafLogBucket",
          "RequestThreshold": "RequestThreshold",
          "WAFBlockPeriod": "WAFBlockPeriod"
        }
      },
      "ConfigureWebAcl": {
        "Type": "Custom::ConfigureWebAcl",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "ActivateSqlInjectionProtectionParam": "ActivateSqlInjectionProtectionParam",
          "ActivateCrossSiteScriptingProtectionParam": "ActivateCrossSiteScriptingProtectionParam",
          "ActivateHttpFloodProtectionParam": "ActivateHttpFloodProtectionParam",
          "ActivateScannersProbesProtectionParam": "ActivateScannersProbesProtectionParam",
          "ActivateReputationListsProtectionParam": "ActivateReputationListsProtectionParam",
          "ActivateBadBotProtectionParam": "ActivateBadBotProtectionParam",
          "ActivateAWSManagedRulesParam": "ActivateAWSManagedRulesParam",
          "KeepDataInOriginalS3Location": "KeepDataInOriginalS3Location",
          "WAFWebACL": "WebACLStack.Outputs.WAFWebACL",
          "WAFWhitelistSetIPV4": "WebACLStack.Outputs.WAFWhitelistSetV4Id",
          "WAFBlacklistSetIPV4": "WebACLStack.Outputs.WAFBlacklistSetV4Id",
          "WAFHttpFloodSetIPV4": [
            "HttpFloodProtectionLogParserActivated",
            "WebACLStack.Outputs.WAFHttpFloodSetV4Id",
            "AWS::NoValue"
          ],
          "WAFScannersProbesSetIPV4": [
            "ScannersProbesProtectionActivated",
            "WebACLStack.Outputs.WAFScannersProbesSetV4Id",
            "AWS::NoValue"
          ],
          "WAFReputationListsSetIPV4": [
            "ReputationListsProtectionActivated",
            "WebACLStack.Outputs.WAFReputationListsSetV4Id",
            "AWS::NoValue"
          ],
          "WAFBadBotSetIPV4": [
            "BadBotProtectionActivated",
            "WebACLStack.Outputs.WAFBadBotSetV4Id",
            "AWS::NoValue"
          ],
          "WAFWhitelistSetIPV6": "WebACLStack.Outputs.WAFWhitelistSetV6Id",
          "WAFBlacklistSetIPV6": "WebACLStack.Outputs.WAFBlacklistSetV6Id",
          "WAFHttpFloodSetIPV6": [
            "HttpFloodProtectionLogParserActivated",
            "WebACLStack.Outputs.WAFHttpFloodSetV6Id",
            "AWS::NoValue"
          ],
          "WAFScannersProbesSetIPV6": [
            "ScannersProbesProtectionActivated",
            "WebACLStack.Outputs.WAFScannersProbesSetV6Id",
            "AWS::NoValue"
          ],
          "WAFReputationListsSetIPV6": [
            "ReputationListsProtectionActivated",
            "WebACLStack.Outputs.WAFReputationListsSetV6Id",
            "AWS::NoValue"
          ],
          "WAFBadBotSetIPV6": [
            "BadBotProtectionActivated",
            "WebACLStack.Outputs.WAFBadBotSetV6Id",
            "AWS::NoValue"
          ],
          "WAFWhitelistSetIPV4Name": "WebACLStack.Outputs.NameWAFWhitelistSetV4",
          "WAFBlacklistSetIPV4Name": "WebACLStack.Outputs.NameWAFBlacklistSetV4",
          "WAFHttpFloodSetIPV4Name": [
            "HttpFloodProtectionLogParserActivated",
            "WebACLStack.Outputs.NameHttpFloodSetV4",
            "AWS::NoValue"
          ],
          "WAFScannersProbesSetIPV4Name": [
            "ScannersProbesProtectionActivated",
            "WebACLStack.Outputs.NameScannersProbesSetV4",
            "AWS::NoValue"
          ],
          "WAFReputationListsSetIPV4Name": [
            "ReputationListsProtectionActivated",
            "WebACLStack.Outputs.NameReputationListsSetV4",
            "AWS::NoValue"
          ],
          "WAFBadBotSetIPV4Name": [
            "BadBotProtectionActivated",
            "WebACLStack.Outputs.NameBadBotSetV4",
            "AWS::NoValue"
          ],
          "WAFWhitelistSetIPV6Name": "WebACLStack.Outputs.NameWAFWhitelistSetV6",
          "WAFBlacklistSetIPV6Name": "WebACLStack.Outputs.NameWAFBlacklistSetV6",
          "WAFHttpFloodSetIPV6Name": [
            "HttpFloodProtectionLogParserActivated",
            "WebACLStack.Outputs.NameHttpFloodSetV6",
            "AWS::NoValue"
          ],
          "WAFScannersProbesSetIPV6Name": [
            "ScannersProbesProtectionActivated",
            "WebACLStack.Outputs.NameScannersProbesSetV6",
            "AWS::NoValue"
          ],
          "WAFReputationListsSetIPV6Name": [
            "ReputationListsProtectionActivated",
            "WebACLStack.Outputs.NameReputationListsSetV6",
            "AWS::NoValue"
          ],
          "WAFBadBotSetIPV6Name": [
            "BadBotProtectionActivated",
            "WebACLStack.Outputs.NameBadBotSetV6",
            "AWS::NoValue"
          ],
          "UUID": "CreateUniqueID.UUID",
          "Region": "AWS::Region",
          "RequestThreshold": "RequestThreshold",
          "ErrorThreshold": "ErrorThreshold",
          "WAFBlockPeriod": "WAFBlockPeriod",
          "Version": "v3.1.0",
          "SendAnonymousUsageData": [
            "Solution",
            "Data",
            "SendAnonymousUsageData"
          ]
        }
      },
      "CustomAddAthenaPartitions": {
        "Type": "Custom::AddAthenaPartitions",
        "Condition": "AthenaLogParser",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "AddAthenaPartitionsLambda": "AddAthenaPartitions.Arn",
          "ResourceType": "CustomResource",
          "GlueAccessLogsDatabase": "FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase",
          "AppAccessLogBucket": [
            "ScannersProbesAthenaLogParser",
            "AppAccessLogBucket",
            ""
          ],
          "GlueAppAccessLogsTable": [
            "ScannersProbesAthenaLogParser",
            "FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable",
            ""
          ],
          "GlueWafAccessLogsTable": [
            "HttpFloodAthenaLogParser",
            "FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable",
            ""
          ],
          "WafLogBucket": [
            "HttpFloodAthenaLogParser",
            "WafLogBucket",
            ""
          ],
          "AthenaWorkGroup": "FirehoseAthenaStack.Outputs.WAFAddPartitionAthenaQueryWorkGroup"
        }
      },
      "MonitoringDashboard": {
        "Type": "AWS::CloudWatch::Dashboard",
        "DependsOn": "CheckRequirements",
        "Properties": {
          "DashboardName": "${AWS::StackName}-${AWS::Region}",
          "DashboardBody": [
            "{\n  \"widgets\": [{\n    \"type\": \"metric\",\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 15,\n    \"height\": 10,\n    \"properties\": {\n      \"view\": \"timeSeries\",\n      \"stacked\": false,\n      \"stat\": \"Sum\",\n      \"period\": 300,\n      \"metrics\": [\n        [\"WAF\", \"BlockedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\",\n\"ALL\" ${RegionMetric}],\n        [\"WAF\", \"AllowedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\",\n\"ALL\" ${RegionMetric}]\n      ],\n      \"region\": \"${RegionProperties}\"\n    }\n  }]\n}",
            {
              "WAFWebACLMetricName": "WebACLStack.Outputs.WAFWebACLMetricName",
              "RegionMetric": [
                "AlbEndpoint",
                ", \"Region\", \"${AWS::Region}\"",
                ""
              ],
              "RegionProperties": [
                "AlbEndpoint",
                "${AWS::Region}",
                "us-east-1"
              ]
            }
          ]
        }
      }
    },
    "Outputs": {
      "BadBotHoneypotEndpoint": {
        "Description": "Bad Bot Honeypot Endpoint",
        "Value": "https://${ApiGatewayBadBot}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayBadBotStage}",
        "Condition": "BadBotProtectionActivated"
      },
      "WAFWebACL": {
        "Description": "AWS WAF WebACL",
        "Value": "WebACLStack.Outputs.WAFWebACL"
      },
      "WAFWebACLArn": {
        "Description": "AWS WAF WebACL Arn",
        "Value": "WebACLStack.Outputs.WAFWebACLArn"
      },
      "WafLogBucket": {
        "Value": "WafLogBucket",
        "Condition": "HttpFloodProtectionLogParserActivated"
      },
      "AppAccessLogBucket": {
        "Value": "AppAccessLogBucket",
        "Condition": "ScannersProbesProtectionActivated"
      },
      "SolutionVersion": {
        "Description": "Solution Version Number",
        "Value": "v3.1.0"
      }
    }
  }
}
