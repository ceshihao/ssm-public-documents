{
  "description": "## Id\nAWSResilienceHub-ScaleDownDocumentDBClusterSOP_2020-09-21\n\n## Intent\nScale down Amazon Document DB cluster.\n\n## Type\nSOP\n\n## Risk\nHigh\n\n## Requirements\n  * An Amazon Document DB cluster in \"available\" state with at least 3 DB instances in \"available\" state.\n\n## Permissions required for AutomationAssumeRole\n  * rds:CreateDBInstance\n  * rds:DeleteDBInstance\n  * rds:DescribeDBClusters\n  * rds:DescribeDBInstances\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above.\n\n### (Required) DBClusterIdentifier\n  * type: String\n  * description: Amazon Document DB cluster identifier.\n  * allowedPattern: \"[a-zA-Z0-9_.-]+\"\n\n### (Optional) NumberOfInstancesToDelete\n* type: Integer\n* description: The number of DB instances to delete. Ignored if at least one DBInstancesIdentifiersToDelete specified.\n* default: 1\n\n### (Optional) DBInstancesIdentifiersToDelete\n  * type: StringList\n  * description: The list of identifiers of instances to be deleted.\n  * default: []\n\n## Details\nThe cluster after modification should satisfy the condition: 1 Primary + 1 Replica instances are available.\nNote, that either 'NumberOfInstancesToDelete' or 'DBInstancesIdentifiersToDelete' should be provided.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * VerifyDBClusterAvailableStatusBeforeModification\n  * GetDbClusterMembers\n  * ValidateClusterMembersAmount\n  * GetDBInstancesToDelete\n  * ScaleDownDocDbCLuster\n  * WaitForInstancesAvailableStatus\n  * OutputRecoveryTime\n\n## Outputs\n### OutputRecoveryTime.RecoveryTime\n  * type: String\n  * description: overall recovery time for scaling up Amazon Document DB cluster.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "parameters": {
    "DBClusterIdentifier": {
      "type": "String",
      "description": "(Required) Amazon Document DB cluster identifier.",
      "allowedPattern": "[a-zA-Z0-9_.-]+"
    },
    "NumberOfDBInstancesToDelete": {
      "type": "Integer",
      "description": "(Optional) The number of DB instances to delete. Ignored if at least one DBInstancesIdentifiersToDelete specified.",
      "default": 1
    },
    "DBInstancesIdentifiersToDelete": {
      "type": "StringList",
      "description": "(Optional) The list of identifiers of instances to be deleted.",
      "default": []
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "VerifyDBClusterAvailableStatusBeforeModification",
      "description": "On this step check, if the cluster is in \"available\" state.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "docdb",
        "Api": "DescribeDBClusters",
        "DBClusterIdentifier": "{{ DBClusterIdentifier }}",
        "PropertySelector": "$.DBClusters[0].Status",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "GetDbClusterMembers",
      "description": "On this step retrieve DBClusterMembers.",
      "action": "aws:executeAwsApi",
      "outputs": [
        {
          "Name": "DBClusterMembers",
          "Selector": "$.DBClusters[0].DBClusterMembers",
          "Type": "MapList"
        }
      ],
      "inputs": {
        "Service": "docdb",
        "Api": "DescribeDBClusters",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ DBClusterIdentifier }}"
            ]
          }
        ]
      }
    },
    {
      "name": "ValidateClusterMembersAmount",
      "description": "On this step validate that cluster contains at least 3 memebers.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "validate_cluster_members_amount",
        "Script": "import logging\nimport random\nimport time\nimport uuid\nfrom concurrent.futures import ThreadPoolExecutor\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom typing import List\n\nimport boto3\nfrom botocore.config import Config\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\nif len(logging.getLogger().handlers) > 0:\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\n    # `.basicConfig` does not execute. Thus we set the level directly.\n    logging.getLogger().setLevel(logging.INFO)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef validate_cluster_members_amount(events, context):\n    \"\"\"\n    Ensure 2 instances before scaling down the cluster.\n    These 2 instances will satisfy the condition 1 Primary + 1 Replica.\n    \"\"\"\n    required_params = [\n        'DBClusterMembers'\n    ]\n    check_required_params(required_params, events)\n\n    if len(events['DBClusterMembers']) <= 2:\n        raise AssertionError('The amount of DBClusterMembers should be greater than 2 to perform scaling down.')",
        "InputPayload": {
          "DBClusterMembers": "{{ GetDbClusterMembers.DBClusterMembers }}"
        }
      }
    },
    {
      "name": "GetDBInstancesToDelete",
      "description": "On this step define the instances to delete according to the input parameters. Consider that the cluster should have 1 Primary and 1 Replica after the follow-up modification.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "DBInstancesIdentifiersToDelete",
          "Selector": "$.Payload.DBInstancesIdentifiersToDelete",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_instances_to_delete",
        "Script": "import logging\nimport random\nimport time\nimport uuid\nfrom concurrent.futures import ThreadPoolExecutor\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom typing import List\n\nimport boto3\nfrom botocore.config import Config\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\nif len(logging.getLogger().handlers) > 0:\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\n    # `.basicConfig` does not execute. Thus we set the level directly.\n    logging.getLogger().setLevel(logging.INFO)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef get_instances_to_delete_by_number(number, cluster_members):\n    \"\"\"\n    Get list of random instances identifiers from cluster replicas members.\n    Ensure 1 Primary + 1 Replica remain after following deletion.\n    \"\"\"\n    cluster_replicas_identifiers = []\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    docdb = boto3.client('docdb', config=config)\n    for member in cluster_members:\n        db_instance_identifer = member['DBInstanceIdentifier']\n        response = docdb.describe_db_instances(DBInstanceIdentifier=db_instance_identifer)\n        if not member['IsClusterWriter'] and response['DBInstances'][0]['DBInstanceStatus'] == 'available':\n            cluster_replicas_identifiers.append(db_instance_identifer)\n\n    cluster_members_amount = len(cluster_members)\n    if cluster_members_amount - 2 < number:\n        raise ValueError(f'Impossible to delete {number} instances. '\n                         f'Max allowed for removal amount is {cluster_members_amount - 2}.')\n    return random.sample(cluster_replicas_identifiers, number)\n\n\n\ndef get_instances_to_delete_by_ids(ids, cluster_members):\n    \"\"\"\n    Get list of instances identifiers to delete. Ensure 1 Primary + 1 Replica remain after following deletion.\n    \"\"\"\n    cluster_writer_identifier = [\n        member['DBInstanceIdentifier'] for member in cluster_members if member['IsClusterWriter']\n    ][0]\n    if cluster_writer_identifier in ids:\n        raise ValueError(f'DBInstancesIdentifiersToDelete contains Primary identifier {cluster_writer_identifier}.')\n\n    cluster_replicas_identifiers = [\n        member['DBInstanceIdentifier'] for member in cluster_members if not member['IsClusterWriter']\n    ]\n    # at least 1 item should remain in (cluster_replicas_identifiers - ids)\n    difference = [i for i in cluster_replicas_identifiers if i not in ids]\n    if not difference:\n        raise AssertionError(f'The condition `1 Primary + 1 Replica` is not satisfied if we remove instances: {ids}.')\n    if len(difference) == len(cluster_replicas_identifiers):\n        raise ValueError('DBInstancesIdentifiersToDelete does not contain identifiers belonging to cluster.')\n\n    return ids\n\n\n\ndef get_instances_to_delete(events, context):\n    \"\"\"\n    Get list of instances to delete, considering 1 condition: cluster should have 1 Primary and at least 1 Replica\n    instance after following deletion.\n    \"\"\"\n    required_params = [\n        'DBClusterMembers'\n    ]\n    check_required_params(required_params, events)\n\n    if not events.get('DBInstancesIdentifiersToDelete'):\n        logging.info('Parameter \"DBInstancesIdentifiersToDelete\" will be ignored')\n        check_required_params(['NumberOfDBInstancesToDelete'], events)\n        return {\n            'DBInstancesIdentifiersToDelete': get_instances_to_delete_by_number(events['NumberOfDBInstancesToDelete'],\n                                                                                events['DBClusterMembers'])}\n    else:\n        logging.info('Parameter \"NumberOfDBInstancesToDelete\" will be ignored')\n        return {\n            'DBInstancesIdentifiersToDelete': get_instances_to_delete_by_ids(events['DBInstancesIdentifiersToDelete'],\n                                                                             events['DBClusterMembers'])}",
        "InputPayload": {
          "DBClusterMembers": "{{ GetDbClusterMembers.DBClusterMembers }}",
          "NumberOfDBInstancesToDelete": "{{ NumberOfDBInstancesToDelete }}",
          "DBInstancesIdentifiersToDelete": "{{ DBInstancesIdentifiersToDelete }}"
        }
      }
    },
    {
      "name": "ScaleDownDocDbCLuster",
      "description": "On this step delete instances by ids provided in the previous step.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "scale_down_cluster",
        "Script": "import logging\nimport random\nimport time\nimport uuid\nfrom concurrent.futures import ThreadPoolExecutor\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom typing import List\n\nimport boto3\nfrom botocore.config import Config\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\nif len(logging.getLogger().handlers) > 0:\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\n    # `.basicConfig` does not execute. Thus we set the level directly.\n    logging.getLogger().setLevel(logging.INFO)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef scale_down_cluster(events, context):\n    \"\"\"\n    Delete instances from the cluster.\n    \"\"\"\n    required_params = [\n        'DBInstancesIdentifiersToDelete'\n    ]\n    check_required_params(required_params, events)\n\n    docdb = boto3.client('docdb')\n    for identifier in events['DBInstancesIdentifiersToDelete']:\n        docdb.delete_db_instance(DBInstanceIdentifier=identifier)",
        "InputPayload": {
          "DBInstancesIdentifiersToDelete": "{{ GetDBInstancesToDelete.DBInstancesIdentifiersToDelete }}"
        }
      }
    },
    {
      "name": "WaitForInstancesAvailableStatus",
      "description": "On this step wait for instances are in \"available\" state.",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 900,
      "onFailure": "Abort",
      "inputs": {
        "Service": "docdb",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ DBClusterIdentifier }}"
            ]
          }
        ],
        "PropertySelector": "$.DBInstances..DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      },
      "isEnd": true
    }
  ]
}
