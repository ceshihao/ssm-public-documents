{
  "description": "Verify a list of tags on a given instance",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "outputs": [
    "VerifyTags.SucceededTags",
    "VerifyTags.FailedTags"
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": ""
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the instance whose tags will be verified."
    },
    "TagsToVerify": {
      "type": "String",
      "description": "(Required) The list of tags in the form of tagname1=value,tagname2,tagname3=value.",
      "allowedPattern": "^([a-zA-Z_0-9+.:/@\\\\-]{1,50}(=[a-zA-Z_0-9+.:/@ \\\\-]{1,50})?(,[a-zA-Z_0-9+.:/@\\\\-]{1,50}(=[a-zA-Z_0-9+.:/@ \\\\-]{1,50})?){0,49})$"
    }
  },
  "mainSteps": [
    {
      "name": "DescribeInstance",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{InstanceId}}"
        ]
      },
      "outputs": [
        {
          "Name": "InstanceDescription",
          "Selector": "$.Reservations[0].Instances[0]",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyTags",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.9",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    desc_tags = events['InstanceDescription'].get('Tags', [])\n    instance_tags = {tag['Key']: tag['Value'] for tag in desc_tags}\n    tags_to_verify = events['TagsToVerify'].split(',')\n\n    res = {\n      'succeeded_tags': [],\n      'failed_tags': []\n    }\n\n    for tag in tags_to_verify:\n        key_val = tag.split('=')\n        key = key_val[0]\n        val = key_val[1] if len(key_val) == 2 else ''\n\n        if key in instance_tags:\n            if not val:\n                res['succeeded_tags'].append(f\"{key}: Ignoring value\") \n            elif instance_tags[key] == val:\n                res['succeeded_tags'].append(f\"{key}: Value '{val}' ok\")\n            else:\n                res['failed_tags'].append(f\"{key},'{val}': Not found\")\n        else:\n            res['failed_tags'].append(f\"{key},'{val}': Not found\")\n\n    return res\n",
        "InputPayload": {
          "TagsToVerify": "{{TagsToVerify}}",
          "InstanceDescription": "{{DescribeInstance.InstanceDescription}}"
        }
      },
      "outputs": [
        {
          "Name": "SucceededTags",
          "Selector": "$.Payload.succeeded_tags",
          "Type": "StringList"
        },
        {
          "Name": "FailedTags",
          "Selector": "$.Payload.failed_tags",
          "Type": "StringList"
        }
      ]
    },
    {
      "name": "FailDocumentOnFailedTagVerification",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.9",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    if events[\"FailedTags\"]:\n        raise Exception(\"Tag verification failed. One or more tags are missing or do not match. See output for details.\")",
        "InputPayload": {
          "FailedTags": "{{VerifyTags.FailedTags}}"
        }
      }
    }
  ]
}
