{
  "description": "### Document name - AWS-BulkResolveOpsItems\n\n## What does this document do?\nThis document retrieves the list of OpsItems that matches the filter pattern, resolves them, adds OpsInsightId as a related resource if specified.Writes the result summary to S3. Notifies via SNS when execution completes\n\n\n## Input Parameters\n* Filters: Filters to resolve OpsItems. By default, filters are empty if not provided.\n* OpsInsightId : OpsInsightId to be added as a related-resource to resolved ops-items.\n* S3BucketName: Amazon S3 bucket where you want to download the output file.\n* SnsTopicArn: Amazon Simple Notification Service (SNS) topic ARN to notify when the download completes.\n* AutomationAssumeRoleARN: The ARN of the role that allows Automation to perform the actions on your behalf.\n* DoNotResolveOne: True if BulkResolve should resolve all but one OpsItem, False if it should resolve all OpsItems.\n\n## Output parameters\n* Status\n* NumberOfOpsItemsResolved\n* NumberOfOpsItemsFailedToResolve\n\n## Minimum Permissions Required\n* ssm:UpdateOpsItem\n* ssm:DescribeOpsItem\n* s3:PutObject\n* s3:GetBucketAcl\n* sns:Publish\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "outputs": [
    "BulkResolveOpsItemsStep.Status",
    "BulkResolveOpsItemsStep.NumberOfOpsItemsResolved",
    "BulkResolveOpsItemsStep.NumberOfOpsItemsFailedResolve"
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The role ARN to assume during automation execution.",
      "default": ""
    },
    "Filters": {
      "type": "String",
      "description": "(Required) Filters for the DescribeOpsitems request."
    },
    "OpsInsightId": {
      "type": "String",
      "description": "(Optional) OpsInsightId to be added as a related resource to resolved ops-items.",
      "default": ""
    },
    "S3BucketName": {
      "type": "String",
      "description": "(Optional) Amazon S3 bucket where you want to export the result summary.",
      "default": ""
    },
    "SnsTopicArn": {
      "type": "String",
      "description": "(Optional) Amazon Simple Notification Service (SNS) topic ARN to notify when the download completes.",
      "default": ""
    },
    "SnsMessage": {
      "type": "String",
      "description": "(Optional) Message to send when execution of AWS-BulkResolveOpsItems runbook completes.",
      "default": ""
    },
    "DoNotResolveOne": {
      "type": "Boolean",
      "default": false,
      "description": "(Optional) True if BulkResolve should resolve all but one OpsItem, False if it should resolve all OpsItems."
    }
  },
  "mainSteps": [
    {
      "name": "BulkResolveOpsItemsStep",
      "action": "aws:executeScript",
      "description": "### What does the step do?\nRetrieves opsItems that matches the crieria and resolves them. Writes output to S3\n\n### What is the output of the step?\nThe list of opsitems successfully resolved and list of opsitems failed to resolve as an object in an Amazon S3 bucket. Publish an SNS message and inform success or failure.\nThe output file name along with the s3 bucket name will be included in the message when script finishes successfully.\n",
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "function_start",
        "InputPayload": {
          "Filters": "{{Filters}}",
          "OpsInsightId": "{{OpsInsightId}}",
          "S3BucketName": "{{S3BucketName}}",
          "DoNotResolveOne": "{{DoNotResolveOne}}"
        },
        "Script": "import boto3\nimport botocore\nimport time\nimport random\nimport json\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\nfrom functools import partial, wraps\nfrom datetime import datetime\n\nimport os\nregion = os.environ['AWS_REGION']\nMAXIMUM_OPS_ITEMS = 1000\nMAX_RESULTS = 50\nSUCCESS = \"success\"\nFAILED = \"failed\"\nSTATUS = \"status\"\n\nconfig = Config(\n   retries = {\n      'max_attempts': 5,\n      'mode': 'standard'\n   }\n)\n\nssm_client = boto3.client(\"ssm\", region_name=region, config=config)\n\ndef describe_ops_items(filters, next_token):\n    filter_json = json.loads(filters)\n\n    response = {}\n    if next_token is not None:\n        response = ssm_client.describe_ops_items(OpsItemFilters=filter_json,MaxResults=MAX_RESULTS, NextToken=next_token)\n    else:\n        response = ssm_client.describe_ops_items(OpsItemFilters=filter_json, MaxResults=MAX_RESULTS)\n\n    return response\n\ndef update_opsitems(ops_item_id, ops_insight_id):\n    success = True\n    try:\n        if not ops_insight_id:\n            ssm_client.update_ops_item(OpsItemId=ops_item_id, Status='Resolved')\n        else:\n            related_ops_items = []\n            related_ops_item = { 'OpsItemId': ops_insight_id }\n            related_ops_items.append(related_ops_item)\n            ssm_client.update_ops_item(OpsItemId=ops_item_id, Status='Resolved', RelatedOpsItems=related_ops_items)\n    except Exception as e:\n        print(\"Error updating opsItem : %s\", e)\n        success = False\n\n    return success\n\ndef get_opsitems_and_update(filters, ops_insight_id, doNotResolveOne = False):\n    print(\"Retrieving ops summaries...\")\n    next_token = None\n    describe_response = {}\n    ops_items_resolved = []\n    ops_items_failed_to_resolve = []\n    result = {}\n    status = True\n    totalOpsItemsProcessed = 0\n    while True:\n        count_ops_items_processed = 0\n        describe_response = describe_ops_items(filters, next_token)\n        if describe_response[\"OpsItemSummaries\"]:\n            for ops_item_summary in describe_response[\"OpsItemSummaries\"]:\n                #Skip one iteration of resolving OpsItems leaving one OpsItem unresolved\n                #doNotResolveOne is passed in as a parameter by the customer\n                if doNotResolveOne:\n                  doNotResolveOne = False\n                  continue\n                ops_item_id = ops_item_summary[\"OpsItemId\"]\n                if ops_item_id in ops_items_resolved or ops_item_id in ops_items_failed_to_resolve:\n                    continue\n                success = update_opsitems(ops_item_id, ops_insight_id)\n                count_ops_items_processed += 1\n                status = status or success\n                if success:\n                    ops_items_resolved.append(ops_item_id)\n\n                else:\n                    ops_items_failed_to_resolve.append(ops_item_id)\n        if describe_response.get(\"NextToken\"):\n          next_token = describe_response.get(\"NextToken\")\n\n        totalOpsItemsProcessed = totalOpsItemsProcessed + count_ops_items_processed\n        if totalOpsItemsProcessed >= MAXIMUM_OPS_ITEMS or len(describe_response[\"OpsItemSummaries\"]) < MAX_RESULTS:\n            break;\n    result[SUCCESS] = ops_items_resolved\n    result[FAILED] = ops_items_failed_to_resolve\n    result[STATUS] = status\n    return result\n\ndef function_start(event, context):\n  ops_insight_id = event.get('OpsInsightId')\n  if not ops_insight_id:\n    print(\"OpsInsightId is empty...\")\n\n  filters = event.get('Filters')\n  if not filters:\n    print (\"No input filters\")\n    raise ValueError('Filters cannot be None')\n\n  s3_bucket_name = event.get('S3BucketName')\n\n  try:\n    response = {}\n     #Get data\n    response = get_opsitems_and_update(filters, ops_insight_id, event.get('DoNotResolveOne'))\n\n    #write to s3\n    write_to_s3(s3_bucket_name, response)\n\n  except Exception as e:\n     print(\"Bulk resolve OpsItems or write to s3 failed : %s\", e)\n     raise Exception(str(e)) from e\n\n  output = {\n          \"status\": response[STATUS],\n          \"number_of_opsitems_resolved\": len(response[SUCCESS]),\n          \"number_of_opsitems_failed_to_resolve\": len(response[FAILED])\n        }\n  return output\n\ndef get_output_filename():\n    output_string = \"bulk_resolve_opsitems_summary_\"\n    curr_date_time = datetime.now()\n    timestamp_str = curr_date_time.strftime(\"%Y-%m-%d-%H:%M:%S.%f\")\n    return output_string + timestamp_str + \".json\"\n\ndef verify_s3_bucket(s3_bucket_name):\n    print('Verifying user can write to S3 Bucket')\n    s3 = boto3.client('s3')\n    try:\n      s3.get_bucket_acl(Bucket=s3_bucket_name)\n    except:\n      print('User does not have permission to write to S3 bucket or the bucket does not exist, stopping execution')\n      raise\n\ndef write_results_to_s3(file_name, bucket_name, data):\n    print(\"Writing result summary to s3 :\" + bucket_name)\n    s3 = boto3.resource('s3')\n    obj = s3.Object(bucket_name, file_name)\n    obj.put(Body=json.dumps(data))\n\ndef write_to_s3(s3_bucket_name, response):\n    if s3_bucket_name:\n        verify_s3_bucket(s3_bucket_name)\n        output_file_name = get_output_filename()\n        data = {}\n        data[\"opsItemsResolved\"] = response[SUCCESS]\n        data[\"opsItemsFailedToResolve\"] = response[FAILED]\n        data[\"status\"] = response[STATUS]\n        write_results_to_s3(output_file_name, s3_bucket_name, data)\n    else:\n        print('S3BucketName is be empty. Skipping publishing resuts to s3')\n"
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.status",
          "Type": "Boolean"
        },
        {
          "Name": "NumberOfOpsItemsResolved",
          "Selector": "$.Payload.number_of_opsitems_resolved",
          "Type": "Integer"
        },
        {
          "Name": "NumberOfOpsItemsFailedResolve",
          "Selector": "$.Payload.number_of_opsitems_failed_to_resolve",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "PublishMessageToSNSTopicStep",
      "action": "aws:executeScript",
      "description": "### What does the step do?\nWrites results to S3 if bucket name is specified as an input parameter\n\n### What is the output of the step?\nNo output\n",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "publish_sns_message",
        "InputPayload": {
          "SnsMessage": "{{SnsMessage}}",
          "SnsTopicArn": "{{SnsTopicArn}}"
        },
        "Script": "import json\nimport boto3\nimport botocore\nimport json\nfrom botocore.exceptions import ClientError\n\ndef publish_sns_message(event, context):\n    sns_topic_arn = event.get('SnsTopicArn')\n    sns_message = event.get('SnsMessage')\n    if sns_topic_arn:\n        if not sns_message:\n            sns_message = \"AWS-ResolveBulkOpsItems runbook execution completed\"\n        publish_message(sns_topic_arn, sns_message)\n\n    else:\n        print(\"SnsTopicArn is empty. Skipping notification to SNS topic\")\n\ndef publish_message(sns_topic_arn, sns_message):\n        print('Publishing an sns message to: ' + sns_topic_arn)\n        sns = boto3.client('sns')\n        try:\n            sns.publish(TopicArn=sns_topic_arn, Message=sns_message)\n        except ClientError as error:\n            print('Failed to publish the message to: ' + sns_topic_arn)\n            raise\n"
      },
      "isEnd": true
    }
  ]
}
