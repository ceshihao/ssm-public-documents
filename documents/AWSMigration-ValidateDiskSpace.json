{
  "schemaVersion": "2.2",
  "description": "This document verifies that all mounted partitions have % free space per user input",
  "parameters": {
    "FreeSpacePercents": {
      "type": "String",
      "description": "(Optional) Expected % of free space (for example: 30).",
      "allowedPattern": "^([1-9][0-9]?|100)$",
      "default": "15"
    },
    "ExcludeVolumes": {
      "type": "String",
      "description": "(Optional) List of partitions to exclude from validation, separated by a semicolon (for example: E:\\Project\\SourceCode;F:\\Documents\\Reports).",
      "allowedPattern": "^((([a-zA-Z]:(\\\\[\\w\\s]+)*)|\\/|(\\/[\\w\\/\\-\\s]+))(;(([a-zA-Z]:(\\\\[\\w\\s]+)*)|\\/|(\\/[\\w\\/\\-\\s]+))){0,49})?$",
      "maxChars": 1000,
      "default": ""
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "ValidateWindowsDiskSpace",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "$excludedVolumes = '{{ExcludeVolumes}}'.Split(\";\", [System.StringSplitOptions]::RemoveEmptyEntries)\n$expectedFreeSpacePcent= [int]'{{FreeSpacePercents}}'\n\ntry {\n  $volumes = @(Get-WmiObject Win32_Volume | Where { $_.Name -notmatch '\\\\\\?\\\\Volume{.*' })\n} catch {\n    Write-Host \"Error: Failed to get volumes: $_\"\n    exit 1\n}\n\nif ($volumes.Count -eq 0) {\n    Write-Host \"Error: Failed to get volumes\"\n    exit 1\n}\n\n$volumes = $volumes | ForEach-Object { $_.Name = $_.Name.TrimEnd('\\'); $_ }\n\n$volumeNames = $volumes | ForEach-Object { $_.Name }\n$verifiedExcludedVolumes = @()\nforeach ($volume in $excludedVolumes) {\n    if ($volume -in $volumeNames) {\n        $verifiedExcludedVolumes += $volume\n    } else {\n        Write-Host \"Warning: Excluded volume $volume not found\"\n    }\n}\n\n$ret = 0\nforeach ($volume in $volumes) {\n    if ($volume.Name -in $verifiedExcludedVolumes) {\n        Write-Host \"Success: $($volume.Name) excluded\"\n        continue\n    }\n\n    if ($volume.Capacity -eq 0 -or $volume.Capacity -eq $null) {\n        Write-Host \"Warning: $($volume.Name) Size=0. Skipping...\"\n        continue\n    }\n\n    $freeSpacePcent = [math]::Truncate(($volume.FreeSpace / $volume.Capacity) * 100)\n    $freeSpaceGB = [math]::Round($volume.FreeSpace / 1GB, 2)\n\n    if ($freeSpacePcent -ge $expectedFreeSpacePcent) {\n        Write-Host \"Success: $($volume.Name) Size=$($volume.Capacity) FreeSpace%=$freeSpacePcent FreeSpaceGB=$freeSpaceGb\"\n    } else {\n        Write-Host \"Error: $($volume.Name) Size=$($volume.Capacity) FreeSpace%=$freeSpacePcent FreeSpaceGB=$freeSpaceGb\"\n        $ret = 1\n    }\n}\n\nexit $ret\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "ValidateLinuxDiskSpace",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "#!/bin/bash\n\nIFS=\";\" read -ra excluded_volumes <<< '{{ExcludeVolumes}}'\nexpected_free_space_pcent='{{FreeSpacePercents}}'\n\nin_array() {\n    local search_val=\"$1\"\n    shift\n\n    for element; do\n        if [[ \"$search_val\" == \"$element\" ]]; then\n            return 0\n        fi\n    done\n\n    return 1\n}\n\n\nret=0\n\nreadarray -t volumes < <(df -B1 -x tmpfs -x devtmpfs -x squashfs --output=target,size,avail | tail -n +2)\nif [ \"${#volumes[@]}\" -eq 0 ]; then\n    echo \"Error: Failed to get volumes\"\n    exit 1\nfi\n\ndeclare -a volume_names\nfor volume in \"${volumes[@]}\"; do\n    IFS=\" \" read -r name _ <<< \"$volume\"\n    volume_names+=(\"$name\")\ndone\n\ndeclare -a verified_excluded_volumes\nfor volume in \"${excluded_volumes[@]}\"; do\n    if in_array \"$volume\" \"${volume_names[@]}\"; then\n        verified_excluded_volumes+=(\"$volume\")\n    else\n        echo \"Warning: Excluded volume $volume not found\"\n    fi\ndone\n\nfor volume in \"${volumes[@]}\"; do\n    IFS=\" \" read -r name size free_space <<< \"$volume\"\n\n    if in_array \"$name\" \"${verified_excluded_volumes[@]}\"; then\n        echo \"Success: $name excluded\"\n        continue\n    fi\n\n    if (( size == 0 )); then\n        echo \"Warning: $name Size=0. Skipping...\"\n        continue\n    fi\n\n    free_space_pcent=$(( (free_space * 100) / size ))\n    free_space_gb=$(awk -v size_bytes=\"$free_space\" 'BEGIN { printf \"%.2f\", size_bytes / (1024 ^ 3) }')\n\n    if (( free_space_pcent >= expected_free_space_pcent )); then\n        echo \"Success: $name Size=$size FreeSpace%=$free_space_pcent FreeSpaceGB=$free_space_gb\"\n    else\n        echo \"Error: $name Size=$size FreeSpace%=$free_space_pcent FreeSpaceGB=$free_space_gb\"\n        ret=1\n    fi\ndone\n\nexit $ret\n"
        ]
      }
    }
  ]
}
