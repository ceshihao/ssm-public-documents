{
  "schemaVersion": "0.3",
  "description": "# Document name - AWS-EnableS3BucketEventNotifications\n\n## What does this document do\nThe AWS-EnableS3BucketEventNotifications runbook will create or update Amazon S3 Event Notifications for the specified \nAmazon S3 Bucket when the selected S3 events occur. Enabling notifications can alert relevant teams to accidental or \nintentional modifications that may lead to unauthorized data access. Only one notification destination (i.e. Lambda \nFunction, SNS Topic, SQS Queue) in addition to Amazon EventBridge can be selected for runbook execution. If the \ndestination SNS topic or SQS queue is encrypted, the KMS key in use must include a custom key policy that gives Amazon \nS3 sufficient key usage permissions. For more information see Amazon S3 Event Notifications in the \n[Amazon S3 User Guide](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventNotifications.html).\n\n## Input Parameters\n* AutomationAssumeRole: (Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n  that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified,\n  Systems Manager Automation uses the permissions of the user that starts this runbook.\n  * Default: \"\"\n* BucketName: (Required) The name of the bucket for which to set the configuration.\n* ConfigurationId: (Required) A unique identifier for configurations in a notification configuration.\n* S3EventNotificationTypes:  (Required) The Amazon S3 Bucket event about which to send notifications. Selected event \ntypes must not overlap and should be explicit. Therefore, within an event type group, you should either select the \nwildcard `*` or explicit event types, but not both. For more information, see Supported event types for SQS, SNS, and \nLambda within the [Amazon S3 User Guide](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-ev\\\nent-types-and-destinations.html#supported-notification-event-types).\n* EnableEventBridge: (Optional) Enables delivery of events to Amazon EventBridge. Selecting `false` will either result \nin EventBridge Notifications not being configured, or being removed from the S3 Bucket if already configured.\n  * Default: false\n* LambdaFunctionArn: (Optional) The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when\nthe specified event type occurs.\n  * Default: \"\"\n* Prefix: (Optional) Limit the notifications to objects with key starting with specified characters.\n  * Default: \"\"\n* QueueArn:  (Optional) The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message\nwhen it detects events of the specified type.\n  * Default: \"\"\n* Suffix:  (Optional) Limit the notifications to objects with key ending with specified characters.\n  * Default: \"\"\n* TopicArn: (Optional) The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message\nwhen it detects events of the specified type.\n  * Default: \"\"\n\n## Outputs\n* CreateEventNotificationConfiguration.EventNotificationConfiguration\n* VerifyEventNotificationConfiguration.VerifyEventNotificationConfigured\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\nallows Systems Manager Automation to perform the actions on your behalf. If no role is specified,\nSystems Manager Automation uses the permissions of the user that starts this runbook.\n",
      "default": ""
    },
    "BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) The name of the bucket for which to set the configuration."
    },
    "ConfigurationId": {
      "type": "String",
      "description": "(Required) A unique identifier for configurations in a notification configuration.",
      "allowedPattern": "^[a-zA-Z0-9_-]{1,1024}$"
    },
    "S3EventNotificationTypes": {
      "type": "StringList",
      "description": "(Required) The Amazon S3 Bucket event about which to send notifications. Selected event types must not overlap and\nshould be explicit. Therefore, within an event type group, you should either select the wildcard `*` or explicit \nevent types, but not both.\n",
      "allowedPattern": "^(\\w{1,1024}:\\w{1,1024}(:(\\w{1,1024}|\\*)){0,})$"
    },
    "EnableEventBridge": {
      "type": "Boolean",
      "description": "(Optional) Enables delivery of events to Amazon EventBridge. Selecting `false` will either result in EventBridge \nNotifications not being configured, or being removed from the S3 Bucket if already configured.\n",
      "default": false
    },
    "LambdaFunctionArn": {
      "type": "String",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when the specified \nevent type occurs.\n",
      "allowedPattern": "^$|^arn:aws[a-z0-9\\-]*:lambda:[a-z0-9\\-]+:\\d{12}:function:([\\w\\-]{1,1024})$",
      "default": ""
    },
    "Prefix": {
      "type": "String",
      "description": "(Optional) Limit the notifications to objects with key starting with specified characters.",
      "allowedPattern": "^(|[^\\/]{1,1024})$",
      "default": ""
    },
    "QueueArn": {
      "type": "String",
      "description": "(Optional) The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when \nit detects events of the specified type.\n",
      "allowedPattern": "^$|^arn:aws[a-z0-9\\-]*:sqs:[a-z0-9\\-]+:\\d{12}:([\\w\\-]{1,1024})$",
      "default": ""
    },
    "Suffix": {
      "type": "String",
      "description": "(Optional) Limit the notifications to objects with key ending with specified characters.",
      "allowedPattern": "^(|[^\\/]{1,1024})$",
      "default": ""
    },
    "TopicArn": {
      "type": "String",
      "description": "(Optional) The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when \nit detects events of the specified type.\n",
      "allowedPattern": "^$|^arn:aws[a-z0-9\\-]*:sns:[a-z0-9\\-]+:\\d{12}:([\\w\\-]{1,1024})$",
      "default": ""
    }
  },
  "outputs": [
    "CreateEventNotificationConfiguration.EventNotificationConfiguration",
    "VerifyEventNotificationConfiguration.VerifyEventNotificationConfigured"
  ],
  "mainSteps": [
    {
      "name": "CreateEventNotificationConfiguration",
      "description": "## CreateEventNotificationConfiguration\nThis step creates an Amazon S3 event notification configuration object.\n## Outputs\nEventNotificationConfiguration: Event Notification Configuration object created by the step using the input \nparameters to be put on the specified Amazon S3 Bucket.\n",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "handler",
        "InputPayload": {
          "BucketName": "{{ BucketName }}",
          "ConfigurationId": "{{ ConfigurationId }}",
          "S3EventNotificationTypes": "{{ S3EventNotificationTypes }}",
          "EnableEventBridge": "{{ EnableEventBridge }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}",
          "Prefix": "{{ Prefix }}",
          "QueueArn": "{{ QueueArn }}",
          "Suffix": "{{ Suffix }}",
          "TopicArn": "{{ TopicArn }}"
        },
        "Script": "import boto3\n\n\ndef create_event_filter(prefix, suffix):\n    filter_rules = []\n    if prefix:\n        filter_rules.append({\"Name\": \"prefix\", \"Value\": prefix})\n    if suffix:\n        filter_rules.append({\"Name\": \"suffix\", \"Value\": suffix})\n    if filter_rules:\n        return {\"Key\": {\"FilterRules\": filter_rules}}\n    return None\n\n\ndef handler(event, context):\n    enable_event_bridge = event.get(\"EnableEventBridge\")\n    lambda_function_arn = event.get(\"LambdaFunctionArn\")\n    prefix = event.get(\"Prefix\")\n    queue_arn = event.get(\"QueueArn\")\n    suffix = event.get(\"Suffix\")\n    topic_arn = event.get(\"TopicArn\")\n\n    destination_count = 0\n    for destination in [lambda_function_arn, queue_arn, topic_arn]:\n        if destination:\n            destination_count += 1\n    if destination_count != 1:\n        raise Exception(\"RUNBOOK MUST BE EXECUTED WITH EXACTLY ONE NOTIFICATION DESTINATION.\")\n\n    s3_client = boto3.client(\"s3\")\n\n    current_configuration = s3_client.get_bucket_notification_configuration(Bucket=event[\"BucketName\"])\n    lambda_configurations = current_configuration.get(\"LambdaFunctionConfigurations\", [])\n    queue_configurations = current_configuration.get(\"QueueConfigurations\", [])\n    topic_configurations = current_configuration.get(\"TopicConfigurations\", [])\n\n    new_configuration = {\n        \"Id\": event[\"ConfigurationId\"],\n        \"Events\": event[\"S3EventNotificationTypes\"],\n    }\n\n    event_filter = create_event_filter(prefix=prefix, suffix=suffix)\n\n    if event_filter:\n        new_configuration[\"Filter\"] = event_filter\n\n    if lambda_function_arn:\n        new_configuration[\"LambdaFunctionArn\"] = lambda_function_arn\n        lambda_configurations.append(new_configuration)\n\n    if queue_arn:\n        new_configuration[\"QueueArn\"] = queue_arn\n        queue_configurations.append(new_configuration)\n\n    if topic_arn:\n        new_configuration[\"TopicArn\"] = topic_arn\n        topic_configurations.append(new_configuration)\n\n    notification_configuration = {\n        \"LambdaFunctionConfigurations\": lambda_configurations,\n        \"QueueConfigurations\": queue_configurations,\n        \"TopicConfigurations\": topic_configurations,\n    }\n\n    if enable_event_bridge:\n        notification_configuration[\"EventBridgeConfiguration\"] = {}\n\n    return notification_configuration\n"
      },
      "outputs": [
        {
          "Name": "EventNotificationConfiguration",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "EnableEventNotificationConfiguration",
      "description": "## EnableEventNotificationConfiguration\nThis step enables event notifications on the specified S3 Bucket using the output configuration from \nBuildEventNotificationConfiguration.\n",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "s3",
        "Api": "PutBucketNotificationConfiguration",
        "Bucket": "{{ BucketName }}",
        "NotificationConfiguration": "{{ CreateEventNotificationConfiguration.EventNotificationConfiguration }}"
      }
    },
    {
      "name": "VerifyEventNotificationConfiguration",
      "description": "## VerifyEventNotificationConfiguration\nThis step verifies that event notification was successfully configured on the S3 Bucket.\n## Outputs\n* VerifyEventNotificationConfigured: Output of the step indicating successful modification of the Amazon S3\nBucket notification configuration.\n",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "handler",
        "InputPayload": {
          "BucketName": "{{ BucketName }}",
          "ConfigurationId": "{{ ConfigurationId }}",
          "EnableEventBridge": "{{ EnableEventBridge }}"
        },
        "Script": "import boto3\n\n\ndef handler(event, context):\n    bucket_name = event.get(\"BucketName\")\n    configuration_id = event.get(\"ConfigurationId\")\n    enable_event_bridge = event.get(\"EnableEventBridge\")\n\n    s3_client = boto3.client(\"s3\")\n\n    response = s3_client.get_bucket_notification_configuration(Bucket=bucket_name)\n    lambda_configurations = response.get(\"LambdaFunctionConfigurations\", [])\n    queue_configurations = response.get(\"QueueConfigurations\", [])\n    topic_configurations = response.get(\"TopicConfigurations\", [])\n    event_bridge_configuration = response.get(\"EventBridgeConfiguration\")\n\n    if enable_event_bridge and event_bridge_configuration != {}:\n        raise Exception(f\"FAILED TO VERIFY EVENT BRIDGE NOTIFICATION CONFIGURATION ON AMAZON S3 BUCKET {bucket_name}\")\n\n    configuration_ids = []\n\n    if lambda_configurations:\n        for lambda_configuration in lambda_configurations:\n            configuration_ids.append(lambda_configuration[\"Id\"])\n\n    if queue_configurations:\n        for queue_configuration in queue_configurations:\n            configuration_ids.append(queue_configuration[\"Id\"])\n\n    if topic_configurations:\n        for topic_configuration in topic_configurations:\n            configuration_ids.append(topic_configuration[\"Id\"])\n\n    if configuration_id in configuration_ids:\n        success_message = \"Verification of event notifications configured for Amazon S3 Bucket is successful.\"\n        return {\"VerifyEventNotificationConfigured\": success_message}\n\n    raise Exception(\n        f\"FAILED TO VERIFY EVENT NOTIFICATION CONFIGURATION WITH ID {configuration_id} ON AMAZON S3 BUCKET\"\n        f\" {bucket_name}\"\n    )\n"
      },
      "outputs": [
        {
          "Name": "VerifyEventNotificationConfigured",
          "Type": "StringMap",
          "Selector": "$.Payload"
        }
      ]
    }
  ]
}
