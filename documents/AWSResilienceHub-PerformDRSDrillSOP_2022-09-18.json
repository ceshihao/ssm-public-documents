{
  "description": "\n\n# Id\nDigito-PerformDRSDrillSOP_2022-09-18\n\n## Intent\nLaunches recovery instances for the specified source-servers as a drill operation\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * Configured DRS source server\n\n## Permissions required for AutomationAssumeRole\n  * drs:StartRecovery\n  * drs:TagResource\n  * ec2:DetachVolume\n  * ec2:DescribeInstances\n  * ec2:TerminateInstances\n  * ec2:CreateTags\n  * ec2:DescribeLaunchTemplateVersions\n  * ec2:RunInstances\n  * ec2:DescribeSnapshots\n  * ec2:StopInstances\n  * ec2:CreateLaunchTemplateVersion\n  * ec2:DeleteVolume\n  * ec2:StartInstances\n  * ec2:DescribeVolumes\n  * ec2:DeleteLaunchTemplateVersions\n  * ec2:AttachVolume\n  * ec2:AuthorizeSecurityGroupEgress\n  * ec2:AuthorizeSecurityGroupIngress\n  * ec2:CreateLaunchTemplate\n  * ec2:CreateSnapshot\n  * ec2:CreateVolume\n  * ec2:DeleteSnapshot\n  * ec2:DescribeImages\n  * ec2:DescribeInstanceAttribute\n  * ec2:DescribeInstanceStatus\n  * ec2:DescribeLaunchTemplates\n  * ec2:DescribeSecurityGroups\n  * ec2:DescribeSubnets\n  * ec2:ModifyInstanceAttribute\n  * ec2:ModifyLaunchTemplate\n  * ec2:RevokeSecurityGroupEgress\n  * ec2:DescribeAccountAttributes\n  * ec2:DescribeAvailabilityZones\n  * ec2:DescribeInstanceTypes\n  * iam:PassRole\n  * drs:CreateRecoveryInstanceForDrs\n  * drs:ListTagsForResource\n\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) sourceServerIDs\n  * type: StringList\n  * description: (Required) List of source-server IDs required to perform drill operation for creating new recovery instance.\n\n\n## Details\nInvokes the start recovery API with the provided resource servers\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * PerformDrill\n  * OutputRecoveryTime\n\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "sourceServerIDs": {
      "type": "StringList",
      "description": "(Required) List of source-server IDs required to perform drill operation for creating new recovery instance."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "description": "Start the timer when SOP starts",
      "name": "RecordStartTime",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "from datetime import datetime, timezone\n\ndef script_handler(params: dict, context):\n    return get_current_time().isoformat()\n\ndef get_current_time():\n    return datetime.now(timezone.utc)\n",
        "InputPayload": {}
      },
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "description": "Launches recovery instances for the specified source-servers from the latest point in time.The recovery operation will be executed as a drill.",
      "name": "PerformDrill",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "import boto3\n\ndef script_handler(params: dict, context):\n    response = boto3.client('drs').start_recovery(\n        isDrill=True,\n        sourceServers=get_source_server_id(params))\n    return response[\"job\"]\n\ndef get_source_server_id(params):\n    return [{\"sourceServerID\": s} for s in params[\"sourceServerIDs\"]]\n",
        "InputPayload": {
          "sourceServerIDs": "{{ sourceServerIDs }}"
        }
      },
      "outputs": [
        {
          "Name": "Job",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ]
    },
    {
      "description": "Record the runtime in seconds",
      "name": "OutputRecoveryTime",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "from datetime import datetime, timezone\nfrom dateutil import parser\n\ndef script_handler(params: dict, context):\n    return (get_current_time() - parser.parse(params['StartTime'])).seconds\n\ndef get_current_time():\n    return datetime.now(timezone.utc)\n",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      },
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ]
    }
  ]
}
