{
  "schemaVersion": "0.3",
  "description": "### Document Name - AWSConfigRemediation-DeleteEgressOnlyInternetGateway\n\n## What does this document do?\nThe document deletes a specified egress-only internet gateway.\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* EgressOnlyInternetGatewayId: (Required) The ID of the egress-only internet gateway to be deleted.\n\n## Output Parameters\n* DeleteResponse.Output: The response of the DeleteEgressOnlyInternetGateway API call.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/[\\w+=,.@-]+"
    },
    "EgressOnlyInternetGatewayId": {
      "type": "String",
      "description": "(Required) The ID of the egress-only internet gateway to be deleted.",
      "allowedPattern": "^eigw-[a-z0-9]+$"
    }
  },
  "outputs": [
    "DeleteEgressOnlyInternetGateway.Output"
  ],
  "mainSteps": [
    {
      "name": "DeleteEgressOnlyInternetGateway",
      "action": "aws:executeAwsApi",
      "description": "## DeleteEgressOnlyInternetGateway\nDeletes the given egress-only internet gateway using the DeleteEgressOnlyInternetGateway API.\n## Outputs\n* Output: The response of the DeleteEgressOnlyInternetGateway API call.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "ec2",
        "Api": "DeleteEgressOnlyInternetGateway",
        "EgressOnlyInternetGatewayId": "{{ EgressOnlyInternetGatewayId }}"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyEgressOnlyInternetGatewayDeletion",
      "action": "aws:executeScript",
      "description": "## VerifyEgressOnlyInternetGatewayDeletion\nVerifies that the egress-only internet gateway is deleted in the previous step.\n## Outputs\n* Output: A success message or failure exception.\n",
      "isEnd": true,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "handler",
        "InputPayload": {
          "EgressOnlyInternetGatewayId": "{{ EgressOnlyInternetGatewayId }}"
        },
        "Script": "import boto3\nimport botocore\n\ndef handler(event, context):\n    ec2_client = boto3.client(\"ec2\")\n    egress_only_internet_gateway_id = event[\"EgressOnlyInternetGatewayId\"]\n    response = ec2_client.describe_egress_only_internet_gateways(EgressOnlyInternetGatewayIds=[egress_only_internet_gateway_id])\n    if not response[\"EgressOnlyInternetGateways\"]:\n        return {\"output\": \"Verification of delete egress-only internet gateway is successful.\"}\n    else:\n        error_message = f\"VERIFICATION FAILED. EGRESS-ONLY INTERNET GATEWAY {egress_only_internet_gateway_id} DELETION UNSUCCESSFUL.\"\n        raise Exception(error_message)"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ]
}
