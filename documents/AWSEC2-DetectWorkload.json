{
  "schemaVersion": "2.2",
  "description": "Detect the workload that installed on the host",
  "parameters": {},
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "workloadDetection",
      "inputs": {
        "runCommand": [
          "Function getIISLogPath{",
          "foreach($WebSite in $(get-website)){",
          "return \"$($Website.logFile.directory)\\**\".replace(\"%SystemDrive%\",$env:SystemDrive)",
          "}",
          "}",
          "Function getSQLServerLogPath{",
          "$instanceName = Get-ItemProperty -Path HKLM:\"SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\" -ErrorAction SilentlyContinue | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name | Where-Object { (-not($_ -match 'PSChildName|PSDrive|PSParentPath|PSPath|PSProvider')) }",
          "$directoryName = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\").$instanceName",
          "return \"C:\\Program Files\\Microsoft SQL Server\\%DIRECTORY%\\MSSQL\\Log\\ERRORLOG\".replace(\"%DIRECTORY%\", $directoryName)",
          "}",
          "Function getPostgreLogPath{",
          "$dataDirectory = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\PostgreSQL\\Services\\*\").\"Data Directory\"",
          "return \"$dataDirectory\\log\\*.log\"",
          "}",
          "Function checkIISWorkload{",
          "$workload = Get-WindowsFeature Web*Server* | Where-Object {$_.InstallState -eq 'Installed'} | foreach {$_.DisplayName}",
          "if($workload){",
          "$logPath = getIISLogPath",
          "return $jsonResult = @{",
          "DOT_NET_WEB_TIER= @{",
          "Priority= \"4\"",
          "LogPath= \"$logPath\"",
          "}",
          "}",
          "}",
          "}",
          "Function checkMySQLWorkload{",
          "$mysql = net start | Out-String -stream | Select-String \"MySQL\"",
          "if($mysql){",
          "return $jsonResult = @{",
          "MYSQL= @{",
          "Priority= \"3\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkSQLServerWorkload{",
          "$inst = (get-itemproperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\").InstalledInstances",
          "foreach ($i in $inst) {",
          "$p = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\").$i",
          "$v = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\\\$p\\Setup\").Version",
          "if ($v) {",
          "$logPath = getSQLServerLogPath",
          "return $jsonResult = @{",
          "SQL_SERVER= @{",
          "Priority= \"3\"",
          "LogPath= \"$logPath\"",
          "}",
          "}",
          "}",
          "}",
          "}",
          "Function checkPostgreWorkload{",
          "$version = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\PostgreSQL\\Services\\*\").\"Product Code\"",
          "if($version){",
          "$logPath = getPostgreLogPath",
          "return $jsonResult = @{",
          "POSTGRESQL= @{",
          "Priority= \"3\"",
          "LogPath= \"$logPath\"",
          "}",
          "}",
          "}",
          "}",
          "Function checkDotNetWorkload{",
          "$dotnet = Get-WindowsFeature NET*Framework* | Where-Object {$_.InstallState -eq 'Installed'} | foreach {$_.DisplayName}",
          "if($dotnet){",
          "return $jsonResult = @{",
          "DOT_NET_CORE= @{",
          "Priority= \"2\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}",
          "}",
          "Function checkJavaWorkload{",
          "$version = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\JavaSoft\\JDK\").\"CurrentVersion\"",
          "if($version){",
          "return $jsonResult = @{",
          "JAVA_JMX= @{",
          "Priority= \"2\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}",
          "}",
          "$ErrorActionPreference = 'Ignore'",
          "try{",
          "$iis = checkIISWorkload",
          "} Catch {",
          "$iis = @{}",
          "}",
          "try{",
          "$mysql = checkMySQLWorkload",
          "} Catch {",
          "$mysql = @{}",
          "}",
          "try{",
          "$sqlserver = checkSQLServerWorkload",
          "} Catch {",
          "$sqlserver = @{}",
          "}",
          "try{",
          "$postgresql = checkPostgreWorkload",
          "} Catch {",
          "$postgresql = @{}",
          "}",
          "try{",
          "$dotnet = checkDotNetWorkload",
          "} Catch {",
          "$dotnet = @{}",
          "}",
          "try{",
          "$java = checkJavaWorkload",
          "} Catch {",
          "$java = @{}",
          "}",
          "$iis + $mysql + $sqlserver + $postgresql + $dotnet + $java | ConvertTo-Json"
        ]
      }
    }
  ]
}
