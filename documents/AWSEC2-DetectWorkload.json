{
  "schemaVersion": "2.2",
  "description": "Detect the workload that installed on the host",
  "parameters": {
    "returnProcesses": {
      "description": "(Optional) Select True to return running processes associated with each workload.",
      "type": "String",
      "allowedValues": [
        "True",
        "False"
      ],
      "default": "False"
    }
  },
  "mainSteps": [
    {
      "name": "WINDOWS",
      "action": "aws:runPowerShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "runCommand": [
          "[boolean]$returnProcesses = [System.Convert]::ToBoolean(\"{{returnProcesses}}\")",
          "$runningProcesses=$null",
          "if ($returnProcesses) {",
          "  $runningProcesses = Get-Process | Foreach {\"$($_.ProcessName)\"}",
          "}",
          "Function ConvertTo-Json20 {",
          "[CmdletBinding()]",
          "param(",
          "[Parameter(Mandatory=$True,",
          "ValueFromPipeline=$True)]",
          "$inputObject)",
          "add-type -assembly system.web.extensions;",
          "$serializer=new-object system.web.script.serialization.javascriptSerializer;",
          "return $serializer.Serialize($inputObject)}",
          "Function getIISLogPath{",
          "foreach($WebSite in $(get-website)){",
          "return \"$($Website.logFile.directory)\\**\".replace(\"%SystemDrive%\",$env:SystemDrive)",
          "}",
          "}",
          "Function getRunningProcesses {",
          "param(",
          "$processes",
          ")",
          "return ($processes | Foreach {If ($($runningProcesses.contains($_))) {$($_)}}) -join ','",
          "}",
          "Function getSQLServerLogPath{",
          "$instanceName = Get-ItemProperty -Path HKLM:\"SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\" -ErrorAction SilentlyContinue | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name | Where-Object { (-not($_ -match 'PSChildName|PSDrive|PSParentPath|PSPath|PSProvider')) }",
          "$directoryName = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\").$instanceName",
          "return \"C:\\Program Files\\Microsoft SQL Server\\%DIRECTORY%\\MSSQL\\Log\\ERRORLOG\".replace(\"%DIRECTORY%\", $directoryName)",
          "}",
          "Function getPostgreLogPath{",
          "$dataDirectory = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\PostgreSQL\\Services\\*\").\"Data Directory\"",
          "return \"$dataDirectory\\log\\*.log\"",
          "}",
          "Function getOracleLogPath{",
          "$oracle_base = (Get-ItemProperty -Path HKLM:\\SOFTWARE\\ORACLE\\*).ORACLE_BASE",
          "$oracle_sid = (Get-ItemProperty -Path HKLM:\\SOFTWARE\\ORACLE\\*).ORACLE_SID",
          "$path_builder = \"%oracle_base%\\diag\\rdbms\\%sid%\\%sid%\\trace\\alert_%sid%.log\".replace(\"%oracle_base%\",$oracle_base)",
          "$path_builder = $path_builder.replace(\"%sid%\",$oracle_sid)",
          "$alert_path = $path_builder.replace(\" \",\"\")",
          "$lstn_builder = \"%oracle_base%\\diag\\tnslsnr\\**\\**\\trace\\*listener.log\".replace(\"%oracle_base%\",$oracle_base).replace(\" \", \"\")",
          "$listener_path = (Get-ChildItem $lstn_builder | Select-Object -ExpandProperty Fullname)",
          "$log_paths = @($alert_path, $listener_path)",
          "return $log_paths",
          "}",
          "Function checkADWorkload{",
          "try{",
          "$adPresent = Get-Service | Where-Object {$_.Name -eq 'NTDS' -and $_.Status -eq 'Running'}",
          "if($adPresent){",
          "return $jsonResult = @{",
          "ACTIVE_DIRECTORY= @{",
          "Priority= \"8\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}",
          "}",
          "Catch { ",
          "return @{}",
          "}",
          "return @{}",
          "}",
          "Function checkIISWorkload{",
          "$workload = Get-ItemProperty -Path registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp\\ | Select-Object",
          "if($workload){",
          "$logPath = getIISLogPath",
          "$processes = \"w3wp\"",
          "$jsonWorkload = @{",
          "Priority= \"4\"",
          "LogPath= \"$logPath\"",
          "}",
          "if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }",
          "return $jsonResult = @{ DOT_NET_WEB_TIER=$jsonWorkload }",
          "}",
          "}",
          "Function checkMySQLWorkload{",
          "$mysql = net start | Out-String -stream | Select-String \"MySQL\"",
          "if($mysql){",
          "return $jsonResult = @{",
          "MYSQL= @{",
          "Priority= \"3\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkSQLServerWorkload{",
          "$inst = (get-itemproperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\").InstalledInstances",
          "if($inst){",
          "foreach ($i in $inst) {",
          "$p = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\").$i",
          "$v = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\\\$p\\Setup\").Version",
          "if ($v) {",
          "$logPath = getSQLServerLogPath",
          "$processes = \"SQLAGENT\",\"sqlservr\",\"sqlwriter\",\"ReportingServicesService\",\"MsDtsSrvr\",\"Msmdsrv\"",
          "$jsonWorkload = @{",
          "Priority= \"3\"",
          "LogPath= \"$logPath\"",
          "}",
          "if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }",
          "return $jsonResult = @{ SQL_SERVER=$jsonWorkload }",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkSQLFCIWorkload{",
          "$inst = (get-itemproperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\").InstalledInstances",
          "if($inst){",
          "foreach ($i in $inst) {",
          "$instanceName = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL\").$i",
          "$clusterExists = Test-Path \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\\\$instanceName\\Cluster\"",
          "if($clusterExists){",
          "$clusterName = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\\\$instanceName\\Cluster\").ClusterName",
          "$root = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\\\$instanceName\\Setup\").SQLDataRoot",
          "$logPath = $root + \"\\Log\\ERRORLOG\"",
          "$dnsName = $root.split(\"\\\")[2]",
          "return $jsonResult = @{",
          "SQL_SERVER_FAILOVER_CLUSTER_INSTANCE= @{",
          "Priority= \"4\"",
          "ClusterName= \"$clusterName\"",
          "LogPath= \"$logPath\"",
          "DNSName= \"$dnsName\"",
          "}",
          "}",
          "}",
          "}",
          "return @{}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkPostgreWorkload{",
          "$version = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\PostgreSQL\\Services\\*\").\"Product Code\"",
          "if($version){",
          "$logPath = getPostgreLogPath",
          "return $jsonResult = @{",
          "POSTGRESQL= @{",
          "Priority= \"3\"",
          "LogPath= \"$logPath\"",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkOracleWorkload {",
          "$ora = (Get-ChildItem -Path \"C:\\Program Files\\Oracle\" -Filter inventory.xml -Recurse -ErrorAction SilentlyContinue -Force | Select-Object -ExpandProperty FullName)",
          "$version = (Get-Content $ora ) -match \".*OraDB.*\"",
          "if($version){",
          "$log_path = getOracleLogPath",
          "return $jsonResult = @{",
          "ORACLE= @{",
          "Priority= \"3\"",
          "LogPath1= $log_path[0]",
          "LogPath2= $log_path[1]",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkDotNetWorkload{",
          "try{",
          "$dotnet = (dotnet --info 2>&1 | Select-String 'Version:\\s*.*\\..*\\..*')",
          "}catch{",
          "$dotnet = Get-WindowsFeature NET*Framework* | Where-Object {$_.InstallState -eq 'Installed'} | foreach {$_.DisplayName}",
          "}",
          "if($dotnet){",
          "$processes = \"w3wp\"",
          "$jsonWorkload = @{",
          "Priority= \"2\"",
          "LogPath= \"\"",
          "}",
          "if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }",
          "return $jsonResult = @{ DOT_NET_CORE=$jsonWorkload }",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkJavaWorkload{",
          "try{",
          "$version = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\JavaSoft\\JDK\").\"CurrentVersion\"",
          "} catch {",
          "$version = (Get-ItemProperty -Path HKLM:\"SOFTWARE\\JavaSoft\\Java Runtime Environment\").\"CurrentVersion\"",
          "}",
          "if($version){",
          "return $jsonResult = @{",
          "JAVA_JMX= @{",
          "Priority= \"2\"",
          "LogPath= \"\"",
          "}",
          "}",
          "}else{",
          "return @{}",
          "}",
          "}",
          "Function checkSharePointWorkload{",
          "try{",
          "$sharepoint=wmic product get Name | findstr /bi /c:'Microsoft SharePoint Server'",
          "if($sharepoint){",
          "return $jsonResult = @{",
          "SHAREPOINT= @{",
          "Priority= \"7\"",
          "LogPath= '' ",
          "}",
          "}",
          "}",
          "}",
          "Catch { ",
          "return @{}",
          "}",
          "return @{}",
          "}",
          "$ErrorActionPreference = 'Stop'",
          "try{",
          "$iis = checkIISWorkload",
          "} Catch {",
          "$iis = @{}",
          "}",
          "try{",
          "$ad = checkADWorkload",
          "} Catch {",
          "$ad = @{}",
          "}",
          "try{",
          "$mysql = checkMySQLWorkload",
          "} Catch {",
          "$mysql = @{}",
          "}",
          "try{",
          "$sqlserver = checkSQLServerWorkload",
          "} Catch {",
          "$sqlserver = @{}",
          "}",
          "try{",
          "$sqlfci = checkSQLFCIWorkload",
          "} Catch {",
          "$sqlfci = @{}",
          "}",
          "try{",
          "$postgresql = checkPostgreWorkload",
          "} Catch {",
          "$postgresql = @{}",
          "}",
          "try{",
          "$dotnet = checkDotNetWorkload",
          "} Catch {",
          "$dotnet = @{}",
          "}",
          "try{",
          "$java = checkJavaWorkload",
          "} Catch {",
          "$java = @{}",
          "}",
          "try{",
          "$oracle = checkOracleWorkload",
          "} Catch {",
          "$oracle = @{}",
          "}",
          "try{ ",
          "$sp = checkSharePointWorkload",
          "} Catch { ",
          "$sp = @{} ",
          "}",
          "if($host.Version.Major -lt 3){",
          "$iis + $mysql + $sqlserver + $sqlfci + $postgresql + $dotnet + $java  + $oracle + $ad + $sp | ConvertTo-Json20",
          "}else{",
          "$iis + $mysql + $sqlserver + $sqlfci + $postgresql + $dotnet + $java  + $oracle + $ad + $sp | ConvertTo-Json",
          "}"
        ]
      }
    },
    {
      "name": "LINUX",
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "function getContainerWorkload {",
          "CLUSTER=$(sudo kubectl config view 2>&1 | sed -n ';6s/name: \\(.*\\)/\\1/p;')",
          "if [ ! -z \"$CLUSTER\" ]; then",
          "IFS=$' \\n' read -r -d '' -a NODES < <( sudo kubectl get nodes && printf '\\0' )",
          "echo $(cat <<EOF",
          "\"Kubernetes\": {",
          "\"CLUSTER_NAME\": \"$CLUSTER\",",
          "\"CLUSTER_NODES\": \"${NODES[@]}\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getJavaWorkload {",
          "VER=$(java -version 2>&1 | sed -n ';s/.* version \"\\(.*\\)\\.\\(.*\\)\\..*\"/\\1\\2/p;')",
          "if [ ! -z \"$VER\" ]; then",
          "echo $(cat <<EOF",
          "\"JAVA_JMX\": {",
          "\"Priority\": \"2\",",
          "\"LogPath\": \"\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getDotNetWorkload {",
          "VER=$(dotnet --info 2>&1 | sed -n ';s/Version: \\(.*\\)\\..*\\..*/\\1/p;')",
          "if [ ! -z \"$VER\" ]; then",
          "echo $(cat <<EOF",
          "\"DOT_NET_CORE\": {",
          "\"Priority\": \"2\",",
          "\"LogPath\": \"\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getSqlServerWorkload {",
          "STATUS=$(systemctl status mssql-server 2>&1 | sed -n ';s/Active: \\(.*\\)/\\1/p;')",
          "if [ ! -z \"$STATUS\" ]; then",
          "echo $(cat <<EOF",
          "\"SQL_SERVER\": {",
          "\"Priority\": \"3\",",
          "\"LogPath\": \"/var/opt/mssql/log/errorlog\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getMySqlWorkload {",
          "LOC=$(type mysql 2>&1 | sed -n ';s/mysql is \\(.*\\)/\\1/p;')",
          "if [ ! -z \"$LOC\" ]; then",
          "echo $(cat <<EOF",
          "\"MYSQL\": {",
          "\"Priority\": \"3\",",
          "\"LogPath\": \"/var/log/mysql\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getPostgreSqlWorkload {",
          "LOC=$(type psql 2>&1 | sed -n ';s/psql is \\(.*\\)/\\1/p;')",
          "if [ ! -z \"$LOC\" ]; then",
          "echo $(cat <<EOF",
          "\"POSTGRESQL\": {",
          "\"Priority\": \"3\",",
          "\"LogPath\": \"/var/lib/pgsql/data/log\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getSqlServerWorkload {",
          "STATUS=$(systemctl status mssql-server 2>&1 | sed -n ';s/Active: \\(.*\\)/\\1/p;')",
          "if [ -n \"$STATUS\" ]; then",
          "echo $(cat <<EOF",
          "\"SQL_SERVER\": {",
          "\"Priority\": \"3\",",
          "\"LogPath\": \"/var/opt/mssql/log/errorlog\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getOracleWorkload {",
          "sid=$(pgrep  -lf _pmon_ | cut -d '_' -f3 | sed 's/[^a-zA-Z0-9]*//g')",
          "sid_case_sensative=$(cat /etc/oratab 2>/dev/null | grep -i $sid 2> /dev/null| cut -d ':' -f1)",
          "ORACLE_HOME=$(cat /etc/oratab 2>/dev/null | grep -i $sid 2> /dev/null| cut -d ':' -f2)",
          "lsnrctl=$ORACLE_HOME'/bin/lsnrctl'",
          "if [ -d \"$ORACLE_HOME\" ]; then",
          "export ORACLE_HOME=$ORACLE_HOME",
          "ORACLE_BASE=$($ORACLE_HOME/bin/orabase)",
          "cd $ORACLE_BASE/diag/rdbms/",
          "dbname=$(ls -ltar | tail -1| awk '{print $9}')",
          "listener_log=$($lsnrctl status | awk '/Listener Parameter File/ {print $NF}')",
          "listener_name=$(basename $listener_log 2>/dev/null | cut -d '.' -f1)",
          "lsnr=$(ps aux | grep tnslsnr | grep inherit |  awk '/tnslsnr/ {print $(NF-1)}')",
          "lsnr_lower=$(echo $lsnr | tr '[:upper:]' '[:lower:]' 2> /dev/null)",
          "log1_test1=$($procdir/lsnrctl show trc_directory 2>/dev/null | awk '/set to / {print $NF}')\"/\"$lsnr\".log\"",
          "log1_test2=$($procdir/lsnrctl show trc_directory 2>/dev/null | awk '/set to / {print $NF}')\"/\"$lsnr_lower\".log\"",
          "if [ -f \"$log1_test1\" ]; then",
          "log1=$log1_test1",
          "fi",
          "if [ -f \"$log1_test2\" ]; then",
          "log1=$log1_test2",
          "fi",
          "log2=$($lsnrctl status | awk '/Listener Log File/ {print $NF}'  | awk -F 'oracle' '{print $1 FS \"\"}')\"/diag/rdbms/$dbname/$sid_case_sensative/trace/alert_$sid_case_sensative.log\"",
          "echo $(cat <<EOF",
          "\"ORACLE\": {",
          "\"Priority\": \"3\",",
          "\"LogPath1\": \"$log1\",",
          "\"LogPath2\": \"$log2\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getHanaWorkload {",
          "HANAPATH=$(find /usr/sap/*/HDB* 2>/dev/null)",
          "if [ -n \"$HANAPATH\" ]; then",
          "SID=$(find /usr/sap/*/HDB* | cut -c 10-12 | uniq)",
          "INSTANCENR=$(find /usr/sap/*/HDB* | cut -c 17-18 | uniq)",
          "PRIORITY=8",
          "HANAPORT=$\"3${INSTANCENR}13\"",
          "HOSTNAME=$(hostname)",
          "HOSTS=$(/usr/sap/hostctrl/exe/sapcontrol -nr $INSTANCENR -function GetSystemInstanceList | tail -n +6 | awk '{ print $1 }' | tr -d \"\\n\" | sed 's/.$//')",
          "HANALOGPATH=$\"/usr/sap/$SID/HDB$INSTANCENR/$HOSTNAME/trace\"",
          "HA_SIMPLE_STATUS=$(eval \"crm_mon -s 2>/dev/null | grep 'CLUSTER OK'\")",
          "ISHAPRIMARY=\"\"",
          "VOLUMEMETADATA=$(lsblk --json -o name,serial,mountpoint | sed \"s,\\\",\\\\\\\\\\\",g\")",
          "NODES=\"\"",
          "if [ -z \"$HA_SIMPLE_STATUS\" ]; then IS_HA=\"false\"; else IS_HA=\"true\"; fi",
          "if [ \"$IS_HA\" = \"true\" ]; then",
          "    PRIORITY=9",
          "    NODES=\"$HOSTNAME\"",
          "    isPri=$(eval \"crm_mon -1 | grep 'Master' | grep $HOSTNAME\")",
          "    if [ -z \"$isPri\" ]; then ISHAPRIMARY=\"false\"; else ISHAPRIMARY=\"true\"; fi ;",
          "fi",
          "echo $(cat <<EOF",
          "\"SAP_HANA\": [{",
          "\"Priority\": \"$PRIORITY\",",
          "\"Host\": \"$HOSTNAME\",",
          "\"SID\": \"$SID\",",
          "\"HanaPort\": \"$HANAPORT\",",
          "\"InstanceNumber\": \"$INSTANCENR\",",
          "\"LogPath\" : \"$HANALOGPATH\",",
          "\"Hosts\": \"$HOSTS\",",
          "\"IsHA\": \"$IS_HA\",",
          "\"IsHAPrimary\": \"$ISHAPRIMARY\",",
          "\"Nodes\": \"$NODES\",",
          "\"VolumeMetadata\": \"$VOLUMEMETADATA\"",
          "}],",
          "EOF",
          ")",
          "fi",
          "}",
          "function getNetWeaverWorkload {",
          "SAPSID=$(find /sapmnt/*/profile 2>/dev/null | cut -c 9-11 | uniq)",
          "if [[ ${#SAPSID} -gt 3 ]]; then",
          "SAPSID=\"${SAPSID:0:3}\"",
          "fi",
          "SAPSID=${SAPSID^^}",
          "if [ -n \"$SAPSID\" ]; then",
          "HOSTNAME=$(hostname)",
          "ASCS_INSTANCE_NUMBERS=$(find /usr/sap/$SAPSID/ASCS* -type d 2>/dev/null | cut -c 18-19 | grep -Eo '[0-9]{2}' | sort -u | tr [:space:] , | sed 's/.$//')",
          "APP_SERVER_INSTANCE_NUMBERS=$(find /usr/sap/$SAPSID/D* -type d 2>/dev/null | cut -c 15-16 | grep -Eo '[0-9]{2}' | sort -u | tr [:space:] , | sed 's/,$//')",
          "if [ -d /usr/sap/$SAPSID/DVEBMGS* ]; then",
          "if [ ! -z \"$APP_SERVER_INSTANCE_NUMBERS\" ]; then",
          "APP_SERVER_INSTANCE_NUMBERS+=\",\"",
          "fi",
          "APP_SERVER_INSTANCE_NUMBERS+=$(find /usr/sap/$SAPSID/DVEBMGS* -type d 2>/dev/null | cut -c 21-22 | grep -Eo '[0-9]{2}' | sort -u | tr [:space:] , | sed 's/.$//')",
          "fi",
          "ERS_INSTANCE_NUMBERS=\"\"",
          "HA_SIMPLE_STATUS=$(eval \"crm_mon -s 2>/dev/null | grep 'CLUSTER OK'\")",
          "if [ -z \"$HA_SIMPLE_STATUS\" ]; then IS_HA=\"false\"; else IS_HA=\"true\"; fi",
          "if [ \"$IS_HA\" = \"true\" ]; then",
          "    ERS_INSTANCE_NUMBERS=$(find /usr/sap/$SAPSID/ERS* -type d 2>/dev/null | cut -c 17-18  | grep -Eo '[0-9]{2}' | sort -u | tr [:space:] , | sed 's/.$//')",
          "fi",
          "echo $(cat <<EOF",
          "\"SAP_NETWEAVER\": {",
          "\"Priority\": \"6\",",
          "\"Host\": \"$HOSTNAME\",",
          "\"SAPSID\": \"$SAPSID\",",
          "\"ASCSInstanceNumbers\": \"$ASCS_INSTANCE_NUMBERS\",",
          "\"AppServerInstanceNumbers\": \"$APP_SERVER_INSTANCE_NUMBERS\",",
          "\"ERSInstanceNumbers\": \"$ERS_INSTANCE_NUMBERS\",",
          "\"IsHA\": \"$IS_HA\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "function getASEWorkload {",
          "LISTDATABASES=$(sudo /usr/sap/hostctrl/exe/saphostctrl -function ListDatabases 2>&1)",
          "ASE_EXISTS=$(echo \"$LISTDATABASES\" | grep -i 'SYBASE')",
          "if [ -n \"$ASE_EXISTS\" ]; then",
          "PRIORITY=5",
          "LISTDATABASESYSTEMS=$(sudo /usr/sap/hostctrl/exe/saphostctrl -function ListDatabaseSystems)",
          "readarray -t MULTIPLE_SID <<< \"$(echo \"$LISTDATABASESYSTEMS\" | grep -B1 'Instance Type=SAP ASE Database Server' | awk -F': ' '/Instance name:/ { if (!seen[$2]++) {print $2} }' | cut -d',' -f1)\"",
          "for SID in \"${MULTIPLE_SID[@]}\"; do",
          "VERSION=$(echo \"$LISTDATABASES\" | awk -F ': |, ' '/Instance name: '\"$SID\"'/{print $10}')",
          "if [[ $VERSION == 16.0.* ]]; then",
          "ASEINFO=$(echo \"$LISTDATABASESYSTEMS\" | awk '/Database name:/ {for(i=0;i<=11;i++) getline;} /Instance name: '\"$SID\"',/ {print; for(i=1;i<=3;i++) {getline; print}}')",
          "ASEHAINFO=$(echo \"$LISTDATABASESYSTEMS\" | awk '/Database name:/ {for(i=0;i<=11;i++) getline;} /Instance name: '\"$SID\"',/ {print; for(i=1;i<=12;i++) {getline; print}}')",
          "ASESTATUS=$(echo \"$ASEINFO\" | awk -F': ' '/Status:/ {print $4}')",
          "ASEPORT=$(echo \"$ASEINFO\" | grep 'ConnectAddress=Protocol=tcp;Host=' | awk -F'Port=' '{print $2}' | cut -d';' -f1)",
          "HOSTNAME=$(echo \"$ASEINFO\" | awk -F';Host=|;' '/ConnectAddress=/{print $2}')",
          "ENABLEMONITORING=$(sudo grep -i \"enable monitoring = 1\" /sybase/$SID/ASE-16_0/$SID.cfg)",
          "if [ -n $ENABLEMONITORING ]; then MONITORINGENABLED=\"true\"; else MONITORINGENABLED=\"false\"; fi;",
          "IS_HA=$(echo \"$ASEHAINFO\" | grep -i 'SAP Replication Server')",
          "if [ -n \"$IS_HA\" ]; then",
          "HADRMODE=$(sudo grep -i \"HADR mode = 1\" /sybase/$SID/ASE-16_0/$SID.cfg)",
          "if [ -n \"$HADRMODE\" ]; then ISHAPRIMARY=\"true\"; else ISHAPRIMARY=\"false\"; fi;",
          "REPSERVERPORT=$(echo \"$ASEHAINFO\" | grep 'Instance Type=SAP Replication Server' -A 2 | awk -F= '/Port=/{print $5}')",
          "PRIORITY=7",
          "REPSERVER_HOSTNAME=$(echo \"$ASEHAINFO\" | grep 'Instance Type=SAP Replication Server' -A 2 | awk -F';Host=|;' '/ConnectAddress=/{print $2}')",
          "INTERFACES_MAP=$(sudo awk '/^[[:alnum:]_]+/{service = $0} /^(\\s*)master/{print \"(\" $4 \", \" $5 \") : \\\"\" service \"\\\"\"}' /sybase/$SID/DM/interfaces)",
          "REPSERVERNAME=$(echo \"$INTERFACES_MAP\" | awk -F ' : ' -v host=\"$REPSERVER_HOSTNAME\" -v port=\"$REPSERVERPORT\" '$0 ~ \"(\" host \", \" port \")\" {print $2}')",
          "echo $(cat <<EOF",
          "\"SAP_ASE_HIGH_AVAILABILITY_$SID\":{",
          "\"SID\":\"$SID\",",
          "\"ASEPort\":\"$ASEPORT\",",
          "\"Priority\":\"$PRIORITY\",",
          "\"ServerStatus\":\"$ASESTATUS\",",
          "\"RepServerPort\":\"$REPSERVERPORT\",",
          "\"IsPrimary\":\"$ISHAPRIMARY\", \"RepServerName\":$REPSERVERNAME, \"HostName\":\"$HOSTNAME\", \"MonitoringEnabled\":\"$MONITORINGENABLED\"",
          "},",
          "EOF",
          ")",
          "else",
          "echo $(cat <<EOF",
          "\"SAP_ASE_SINGLE_NODE_$SID\":{",
          "\"SID\":\"$SID\",",
          "\"ASEPort\":\"$ASEPORT\",",
          "\"ServerStatus\":\"$ASESTATUS\",",
          "\"Priority\":\"$PRIORITY\",",
          "\"HostName\":\"$HOSTNAME\",",
          "\"MonitoringEnabled\":\"$MONITORINGENABLED\"",
          "},",
          "EOF",
          ")",
          "fi",
          "fi",
          "done",
          "else",
          "FAULT_MANAGER_EXISTS=$(sudo find /opt/sap/ -type f -path '*bin/sybdbfm' 2>/dev/null)",
          "if [ -n \"$FAULT_MANAGER_EXISTS\" ]; then",
          "FM_DIRNAME=$(echo \"$FAULT_MANAGER_EXISTS\" | xargs dirname | xargs dirname)",
          "cd $FM_DIRNAME",
          "PROFILE_FILE_NAME=$(ls -1 *.PFL | head -n 1)",
          "SID=$(sudo cat $PROFILE_FILE_NAME | grep -i \"primary/ase_instance_name\" | awk -F'=' '{print $2}' | tr -d ' ')",
          "echo $(cat <<EOF",
          "\"SAP_ASE_HIGH_AVAILABILITY_$SID\":{",
          "\"SID\": \"$SID\",",
          "\"FaultManagerDirectoryName\": \"$FM_DIRNAME\",",
          "\"Priority\":\"7\"",
          "},",
          "EOF",
          ")",
          "else",
          "ASEPATH=$(find /usr/sap/*/SYS 2>/dev/null)",
          "if [ -n \"$ASEPATH\" ]; then",
          "echo $(cat <<EOF",
          "\"SAP_DB_DETECTED_WITH_HOSTCTRLERROR\":{",
          "\"SAPHOSTCTRLERROR\": \"$LISTDATABASES\"",
          "},",
          "EOF",
          ")",
          "fi",
          "fi",
          "fi",
          "}",
          "function getEFSComponent {",
          "EFS_IDS=$(sudo findmnt -t nfs4 -o SOURCE,TARGET -n | grep fs- | cut -d \".\" -f 1 | sed 's/$//')",
          "if [ ! -z \"$EFS_IDS\" ]; then",
          "EFS_IDS_arr=($EFS_IDS)",
          "y=$( IFS=$',';echo \"${EFS_IDS_arr[*]}\")",
          "echo $(cat <<EOF",
          "\"EFS\":{",
          "\"ids\":\"$y\"",
          "},",
          "EOF",
          ")",
          "fi",
          "}",
          "echo \"{$(getContainerWorkload)$(getJavaWorkload)$(getDotNetWorkload)$(getMySqlWorkload)$(getSqlServerWorkload)$(getPostgreSqlWorkload)$(getOracleWorkload)$(getHanaWorkload)$(getNetWeaverWorkload)$(getEFSComponent)$(getASEWorkload)}\" | sed 's/,\\(.\\)$/\\1/'"
        ]
      }
    }
  ]
}
