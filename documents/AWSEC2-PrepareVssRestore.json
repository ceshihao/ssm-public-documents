{
  "schemaVersion": "2.2",
  "description": "This document initiates the preparation process for a restore using application consistent snapshots created by AWS VSS. It returns a snapshot set ID based on the provided input parameters. For optimal execution, we recommend that you invoke this document through the automation document 'AWSEC2-RestoreSqlServerDatabaseWithVss'.",
  "parameters": {
    "MetadataPath": {
      "type": "String",
      "default": "",
      "description": "(Optional) Fully qualified path to where the VSS metadata files are stored. If not specified, default path (%PROGRAMDATA%\\Amazon\\AwsVss\\VssMetadata) is used.",
      "maxChars": 255,
      "allowedPattern": "^$|^\\w:$|^\\w:\\\\[^\"'|\\r\\n]*$|^\\/[^\"'|\\r\\n]*$|^([A-Za-z0-9-_\\/+]{4})*([A-Za-z0-9-_\\/+]{4}|[A-Za-z0-9-_\\/+]{3}=|[A-Za-z0-9-_\\/+]{2}==)$"
    },
    "SnapshotSetId": {
      "type": "String",
      "description": "(Optional) The VSS snapshot set id of the snapshot to use for recovery. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If RestorePointOfTime is specified, SnapshotSetId can be left empty.",
      "default": "",
      "allowedPattern": "^$|^(?:[{]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[}]?)?$"
    },
    "RestorePointOfTime": {
      "type": "String",
      "default": "",
      "description": "(Optional) The last created snapshot set before this date time is chosen. The format is MM-dd-yyyy:hh-mm. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If SnapshotSetId is specified, RestorePointOfTime can be left empty.",
      "allowedPattern": "^$|^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}:(0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]$"
    },
    "executionTimeout": {
      "type": "String",
      "default": "600",
      "description": "(Optional) The time in seconds for this command to be completed before it is considered to have failed. Default is 600 seconds. Maximum is 172800 (48 hours). Minimum is 120.",
      "allowedPattern": "^((1[2-9][0-9]{1})|([2-9][0-9]{2})|([1-9][0-9]{3,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800))$"
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "runPowerShellScript",
      "inputs": {
        "runCommand": [
          "Set-StrictMode -Version Latest",
          "$ErrorActionPreference = \"Stop\"",
          "$script:AgentPath = \"$env:ProgramFiles\\Amazon\\AwsVssComponents\\ec2-vss-agent.exe\"",
          "$script:ERROR_CODES = @{",
          "\"1001\" = \"SnapshotSetId and RestorePointOfTime are both specified and evaluate to different ids. Specify either one, or provide matching values\";",
          "\"1002\" = \"EC2 VSS Agent (AwsVssComponents) is not installed on the instance\";",
          "\"1003\" = \"The installed version of EC2 VSS Agent (AwsVssComponents) must be equal to or newer than 2.5.0\";",
          "\"1004\" = \"Restore is not supported on Dynamic Disks or Storage Spaces configurations\";",
          "\"2001\" = \"Failed to find any metadata files under the metadata path\";",
          "\"2002\" = \"Failed to obtain the snaphot set id for any snapshot set taken before the specified restore point of time\";",
          "\"2003\" = \"Failed to obtain both BCD and SqlSeverWriter metadata files for the obtained snapshot set id\";",
          "}",
          "function Format-Error {",
          "param (",
          "[Parameter(ValueFromPipelineByPropertyName, ValueFromPipeline)]",
          "[System.Management.Automation.ErrorRecord]",
          "$ErrorRecord",
          ")",
          "process {",
          "if ($null -ne $ErrorRecord) {",
          "return $ErrorRecord.Exception.GetType().FullName + \": `n\" + (Out-String -InputObject $ErrorRecord) + \"`n\" + ($ErrorRecord.ScriptStackTrace)",
          "}",
          "}",
          "}",
          "function Write-StandardError($message) {",
          "[Console]::Error.WriteLine($message)",
          "}",
          "function Exit-WithFailure {",
          "param(",
          "[Parameter(Mandatory=$true)][int]$errorCode",
          ")",
          "if ($errorCode -ne 0 ) {",
          "Write-StandardError \"$($script:ERROR_CODES[[string]$errorCode])\"",
          "}",
          "exit $errorCode",
          "}",
          "trap {",
          "Write-Host \"Encountered unexpected error. Please see error details below.\"",
          "Write-StandardError \"$(Format-Error -ErrorRecord $_)\"",
          "exit 4000",
          "}",
          "function Test-OnlySimpleDiskConfig {",
          "$dynamicDisks = Get-CimInstance -Class Win32_DiskPartition | Where-Object { $_.Type -eq \"Logical Disk Manager\" }",
          "if ($dynamicDisks) {",
          "Write-Host \"Dynamic Disks is configured on the instance.\"",
          "return $false",
          "}",
          "$virtualDisks = Get-VirtualDisk -ErrorAction SilentlyContinue",
          "if ($virtualDisks) {",
          "Write-Host \"Storage Spaces is configured on the instance.\"",
          "return $false",
          "}",
          "$disks = Get-Disk",
          "foreach ($disk in $disks) {",
          "if ($disk.PartitionStyle -ne \"MBR\" -and $disk.PartitionStyle -ne \"GPT\" -and $disk.PartitionStyle -ne \"RAW\") {",
          "return $false",
          "}",
          "}",
          "return $true",
          "}",
          "function Get-SnapshotSetId {",
          "param (",
          "[string]$RestorePointOfTime = \"\"",
          ")",
          "if (-not [string]::IsNullOrEmpty($RestorePointOfTime)) {",
          "$targetDate = [DateTime]::ParseExact($RestorePointOfTime, \"MM-dd-yyyy:HH-mm\", $null)",
          "}",
          "$latestFile = $null",
          "$latestDate = $null",
          "foreach ($file in $files) {",
          "if (-not ($file.Name -match '\\{.*\\}-(\\d{2}-\\d{2}-\\d{4}-\\d{2}-\\d{2})-.*\\.xml')) {",
          "continue",
          "}",
          "$fileDateString = $matches[1]",
          "$fileDate = [DateTime]::ParseExact($fileDateString, \"MM-dd-yyyy-HH-mm\", $null)",
          "if (-not [string]::IsNullOrEmpty($RestorePointOfTime)) {",
          "if ($fileDate -lt $targetDate -and ($null -eq $latestDate -or $fileDate -gt $latestDate)) {",
          "$latestFile = $file",
          "$latestDate = $fileDate",
          "}",
          "} else {",
          "if ($null -eq $latestDate -or $fileDate -gt $latestDate) {",
          "$latestFile = $file",
          "$latestDate = $fileDate",
          "}",
          "}",
          "}",
          "if ($null -eq $latestFile) {",
          "Exit-WithFailure 2002",
          "}",
          "$obtainedSnapshotSetId = $latestFile.Name.Substring(1, 36)",
          "return $obtainedSnapshotSetId",
          "}",
          "function PrepareVssRestore() {",
          "param (",
          "[string]$SnapshotSetId = \"\",",
          "[string]$RestorePointOfTime = \"\",",
          "[string]$MetadataPath = \"\"",
          ")",
          "$snapshotSetIdSpecified = -not ([string]::IsNullOrEmpty($SnapshotSetId))",
          "$restorePointOfTimeSpecified = -not ([string]::IsNullOrEmpty($RestorePointOfTime))",
          "if (-not (Test-Path -Path $script:AgentPath )) {",
          "Write-Host \"$script:AgentPath does not exist. EC2 VSS Agent is not installed.\"",
          "Exit-WithFailure 1002",
          "}",
          "$vssAgentVersion = [version]::new((Get-Item $script:AgentPath).VersionInfo.FileVersion)",
          "if ($vssAgentVersion -lt [version]::new(\"2.5.0\")) {",
          "Write-Host \"$vssAgentVersion version of EC2 VSS Agent is installed. 2.5.0 or above is required for restore.\"",
          "Exit-WithFailure 1003",
          "}",
          "if (-not (Test-OnlySimpleDiskConfig)) {",
          "Exit-WithFailure 1004",
          "}",
          "if ($null -eq $MetadataPath -or \"\" -eq $MetadataPath) {",
          "$MetadataPath = \"$env:ProgramData\\Amazon\\AwsVss\\VssMetadata\";",
          "}",
          "if (-not (Test-Path -Path $MetadataPath)) {",
          "Write-Host \"$MetadataPath folder does not exist.\"",
          "Exit-WithFailure 2001",
          "}",
          "$files = Get-ChildItem -Path $MetadataPath -Filter \"*.xml\"",
          "if ($null -eq $files) {",
          "Write-Host \"There is no metadata file under $MetadataPath folder.\"",
          "Exit-WithFailure 2001",
          "}",
          "$obtainedSnapshotSetId = $null",
          "if ((-not $RestorePointOfTimeSpecified) -and $SnapshotSetIdSpecified) {",
          "$ObtainedSnapshotSetId = $SnapshotSetId",
          "} else {",
          "$ObtainedSnapshotSetId = Get-SnapshotSetId $RestorePointOfTime",
          "if ($SnapshotSetIdSpecified -and $RestorePointOfTimeSpecified) {",
          "if ($ObtainedSnapshotSetId.ToUpper() -ne $SnapshotSetId.ToUpper()) {",
          "Write-Host \"Specified snapshot set id in parameter: $SnapshotSetId\"",
          "Write-Host \"Obtained snapshot set id using restore point of time: $ObtainedSnapshotSetId\"",
          "Exit-WithFailure 1001",
          "}",
          "}",
          "}",
          "$backupCompsDoc = $files | Where-Object { $_.Name -match $ObtainedSnapshotSetId -and $_.Name -match \"BCD\" }",
          "$writerXmlDoc = $files | Where-Object { $_.Name -match $ObtainedSnapshotSetId -and $_.Name -match \"SqlServerWriter\" }",
          "if ($null -eq $backupCompsDoc) {",
          "Write-Host \"Backup components document of snapshot set $ObtainedSnapshotSetId is not found under $MetadataPath\"",
          "Exit-WithFailure 2003",
          "}",
          "if ($null -eq $writerXmlDoc) {",
          "Write-Host \"SQL Server Writer metadata of snapshot set $ObtainedSnapshotSetId is not found under $MetadataPath\"",
          "Exit-WithFailure 2003",
          "}",
          "Write-Host \"$($ObtainedSnapshotSetId.ToUpper())\" -NoNewline",
          "Exit-WithFailure 0",
          "}",
          "",
          "$MetadataPath = @'",
          "{{MetadataPath}}",
          "'@",
          "$SnapshotSetId = @'",
          "{{SnapshotSetId}}",
          "'@",
          "$RestorePointOfTime = @'",
          "{{RestorePointOfTime}}",
          "'@",
          "",
          "PrepareVssRestore $SnapshotSetId $RestorePointOfTime $MetadataPath",
          "exit $lastexitcode",
          ""
        ],
        "workingDirectory": "",
        "timeoutSeconds": "{{executionTimeout}}"
      }
    }
  ]
}
