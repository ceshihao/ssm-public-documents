{
  "schemaVersion": "0.3",
  "description": "## Intent\nTest application performance and the high CPU usage alarm under high CPU load.\n\n## Type\nTest\n\n## Risk\nHigh\n\n## Requirements\n  * ASG has more than 1 instances\n  * Only AmazonLinux instances are supported\n  * CPU Alarm is setup for ASG\n\n## Permissions required for AutomationAssumeRole\n  * ssm:GetParameters\n  * ssm:DescribeInstanceInformation\n  * ssm:SendCommand\n  * ssm:ListCommands\n  * ssm:ListCommandInvocations\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * cloudwatch:DescribeAlarms\n  * cloudwatch:GetMetricStatistics\n  * cloudwatch:DescribeAlarmHistory\n  * autoscaling:DescribeAutoScalingGroups\n  * iam:PassRole (restricted to same role)\n\n## Supports Rollback\n   Yes.\n\n## Cancellation behavior\n  Trigger rollback for previous execution.\n\n## Inputs\n### (Required) AutomationAssumeRole:\n  * type: String\n  * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf\n\n### (Required) AutoScalingGroupName:\n  * type: String\n  * description: (Required) Name of auto scaling group\n\n### (Required) CpuUtilizationAlarmName:\n  * type: String\n  * description: (Required) ASG CPUUtilization alarm which should be green after test\n\n### (Optional) DurationSeconds:\n  * type: String\n  * description: (Optional) The duration - in seconds - of the CPU stress.\n  * allowedPattern: \"^[0-9]+$\"\n  * default: '300'\n\n### (Optional) Cpu:\n  * type: String\n  * description: (Optional) Specify the number of CPU stressors to use (default - 0 which means \"all CPUs\")\n  * default: \"0\"\n  * allowedPattern: \"^[0-9]+$\"\n\n### (Optional) LoadPercent:\n  * type: String\n  * description: (Optional) Specify the target CPU load percentage. Valid values are between 0 (no load) and 100 (full load) (default - 100)\n  * default: \"100\"\n  * allowedPattern: \"^(100|[1-9]?[0-9])$\"\n\n### (Optional) PercentageOfInstances:\n  * type: Integer\n  * description: (Optional) Percentage of ASG EC2 instances to be impacted, default is 70 percent if not provided\n  * default: 70\n\n### (Optional) ExpectedRecoveryTime:\n  * type: String\n  * description: (Optional) Expected ASG EC2 instances recovery time in seconds\n  * default: '1'\n\n### (Optional) IsRollback:\n   * type: String\n   * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.\n   * default: 'false'\n\n### (Optional) PreviousExecutionId:\n   * type: String\n   * description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.\n   * default: ''\n\n## Details\n   * Get healthy ASG EC2 instance ids.\n   * Get list of ASG EC2 instance ids which size is based on given percentage of instances should be stressed.\n   * Run CPU stress on chosen instances based on the previous step for given time duration.\n   * Verify cpu utilization alarm is in state 'Alarm' during CPU stress test.\n   * Wait for the given expected recovery time duration.\n   * Verify cpu utilization alarm is in state 'OK' after recovery.\n   * Verify stress testing actually happened, by checking EC2 corresponding metric data points.\n   * In case of rollback stress testing will be terminated on EC2 machines.\n\n## Steps executed in normal flow\n  * SelectExecutionMode\n  * AssertAlarmToBeGreenBeforeTest\n  * GetAsgInstanceIds\n  * GetInstancesByPercentage\n  * RunCpuStress\n  * AssertAlarmToBeRed\n  * WaitExpectedRecoveryTime\n  * AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n  * SelectExecutionMode\n  * GetInputsFromPreviousExecution\n  * AssertAutoScalingGroupName\n  * GetPreviousExecutionDetails\n  * KillStressCommandOnRollback\n\n## Outputs\n  None",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf",
      "allowedPattern": "^arn:(aws|aws-cn|aws-us-gov):[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:[0-9]{12}:[^\n\r]*$"
    },
    "AutoScalingGroupName": {
      "type": "String",
      "description": "(Required) Name of auto scaling group",
      "allowedPattern": "[ -ÌüøÓÄÄ-ÔøΩêÄÄ-Ùèøø\r\n\t]*"
    },
    "CpuUtilizationAlarmName": {
      "type": "String",
      "description": "(Required) ASG CPUUtilization alarm which should be green after test",
      "allowedPattern": "^[^\u0000-\u001f\u007f]+$"
    },
    "DurationSeconds": {
      "type": "String",
      "description": "(Optional) The duration - in seconds - of the CPU stress.",
      "allowedPattern": "^[0-9]+$",
      "default": "600"
    },
    "Cpu": {
      "type": "String",
      "description": "(Optional) Specify the number of CPU stressors to use (default - 0 which means \"all CPUs\")",
      "default": "0",
      "allowedPattern": "^[0-9]+$"
    },
    "LoadPercent": {
      "type": "String",
      "description": "(Optional) Specify the target CPU load percentage. Valid values are between 0 (no load) and 100 (full load) (default - 100)",
      "default": "100",
      "allowedPattern": "^(100|[1-9]?[0-9])$"
    },
    "PercentageOfInstances": {
      "type": "Integer",
      "description": "(Optional) Percentage of ASG EC2 instances to be impacted, default is 70 percent if not provided",
      "default": 70,
      "allowedPattern": "^[0-9]+$"
    },
    "ExpectedRecoveryTime": {
      "type": "String",
      "description": "(Optional) Expected ASG EC2 instances recovery time in seconds",
      "default": "1",
      "allowedPattern": "^[0-9]+$"
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Provide true to terminate stress testing",
      "default": "false",
      "allowedPattern": "^[a-zA-Z]+$"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Previous execution id for which resources stress testing should be terminated",
      "default": "",
      "allowedPattern": "^[a-zA-Z0-9-]*$"
    }
  },
  "mainSteps": [
    {
      "name": "SelectExecutionMode",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "AssertAlarmToBeGreenBeforeTest",
            "Variable": "{{IsRollback}}",
            "StringEquals": "false"
          }
        ],
        "Default": "GetInputsFromPreviousExecution"
      }
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "description": "Ensure alarm is green before starting test. Fail if alarm is not green within expected time.",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 900,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{CpuUtilizationAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "GetAsgInstanceIds",
      "description": "Get all healthy instances in ASG.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "InstanceIds",
          "Selector": "$.Payload.InstanceIds",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "get_healthy_instance_ids_in_asg",
        "InputPayload": {
          "AutoScalingGroupName": "{{AutoScalingGroupName}}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef get_healthy_instance_ids_in_asg(events, context):\n    if 'AutoScalingGroupName' not in events:\n        raise KeyError('Requires AutoScalingGroupName in events')\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    autoscaling = boto3.client('autoscaling', config=config)\n\n    auto_scaling_groups = autoscaling.describe_auto_scaling_groups(\n        AutoScalingGroupNames=[\n            events['AutoScalingGroupName']\n        ]\n    )\n\n    # Take all healthy ASG EC2 instances\n    asg_healthy_instances = []\n    for instance in auto_scaling_groups['AutoScalingGroups'][0]['Instances']:\n        if instance['HealthStatus'] == 'Healthy' and instance['LifecycleState'] == 'InService':\n            asg_healthy_instances.append(instance['InstanceId'])\n\n    output = {}\n    output['InstanceIds'] = asg_healthy_instances\n    return output"
      }
    },
    {
      "name": "GetInstancesByPercentage",
      "description": "Get instances based on input parameters on which cpu load will be injected.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "InstanceIds",
          "Selector": "$.Payload.InstanceIds",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "get_instance_ids_by_percentage",
        "InputPayload": {
          "InstanceIds": "{{GetAsgInstanceIds.InstanceIds}}",
          "Percentage": "{{PercentageOfInstances}}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef get_instance_ids_by_percentage(events, context):\n    if 'InstanceIds' not in events or 'Percentage' not in events:\n        raise KeyError('Requires InstanceIds and Percentage in events')\n    instance_ids = events['InstanceIds']\n    percentage = events['Percentage']\n    instance_count = len(instance_ids)\n    output = {}\n    output['InstanceIds'] = []\n    if instance_count < 1:\n        raise Exception('No given EC2 instances')\n    if percentage < 1:\n        raise Exception('Given percentage should not be lower than 1%')\n    instance_count = ceil(instance_count / 100 * percentage)\n    for i in range(instance_count):\n        output['InstanceIds'].append(instance_ids[i])\n    return output"
      }
    },
    {
      "name": "RunCpuStress",
      "description": "Run FIS command document to inject cpu stress.",
      "action": "aws:runCommand",
      "maxAttempts": 3,
      "onFailure": "step:TriggerRollback",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "DocumentName": "AWSFIS-Run-CPU-Stress",
        "InstanceIds": [
          "{{GetInstancesByPercentage.InstanceIds}}"
        ],
        "Parameters": {
          "LoadPercent": "{{LoadPercent}}",
          "CPU": "{{Cpu}}",
          "DurationSeconds": "{{DurationSeconds}}"
        }
      }
    },
    {
      "name": "AssertAlarmToBeRed",
      "description": "Wait for expected alarm to be red after failure is injected",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Abort",
      "maxAttempts": 1,
      "timeoutSeconds": 600,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{CpuUtilizationAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "WaitExpectedRecoveryTime",
      "description": "Wait for expected recovery time.",
      "action": "aws:sleep",
      "onFailure": "Abort",
      "inputs": {
        "Duration": "PT{{ExpectedRecoveryTime}}S"
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "description": "Wait for the alarm to be green after test is complete.",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{CpuUtilizationAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "AutoScalingGroupName",
          "Selector": "$.Payload.AutoScalingGroupName[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertAutoScalingGroupName",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetPreviousExecutionDetails",
            "Variable": "{{ GetInputsFromPreviousExecution.AutoScalingGroupName }}",
            "StringEquals": "{{ AutoScalingGroupName }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "GetPreviousExecutionDetails",
      "description": "Get instance ids from previous execution details for rollback.",
      "action": "aws:executeScript",
      "maxAttempts": 2,
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "InstanceIds",
          "Selector": "$.Payload.InstanceIds",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{PreviousExecutionId}}",
          "StepName": "GetInstancesByPercentage",
          "ResponseField": "InstanceIds"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    # Sets values in string type regardless of what is the original value type. In order to set\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "KillStressCommandOnRollback",
      "description": "Kill stress ng command running on ec2 instances during rollback to stop cpu injection.",
      "action": "aws:executeAutomation",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSResilienceHub-KillStressOnHealthyInstances_2020-07-28",
        "RuntimeParameters": {
          "AutomationAssumeRole": "{{AutomationAssumeRole}}",
          "AutoScalingGroupName": "{{AutoScalingGroupName}}",
          "InstanceIds": "{{GetPreviousExecutionDetails.InstanceIds}}"
        }
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress and starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
