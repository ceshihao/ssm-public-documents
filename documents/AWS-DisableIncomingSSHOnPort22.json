{
  "description": "#### Document Name - AWS-DisableIncomingSSHOnPort22\n\n## What does this document do?\nThis document disables unrestricted incoming SSH traffic on port 22 for EC2 security groups.\nTraffic to the targeted security groups is restricted by removing the ingress rule that allows unrestricted incoming SSH traffic from anywhere ('0.0.0.0/0' and '::/0').\n\n## Input Parameters\n* SecurityGroupIds: (Required) A comma separated list of security group IDs to restrict SSH traffic for.\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* DisableIncomingSSHTemplate.RestrictedSecurityGroupIds: The list of the security group IDs with disabled incoming SSH on port 22.\n\n## Minimum Permissions Required\n* `ec2:DescribeSecurityGroups` and `ec2:RevokeSecurityGroupIngress` on the target security groups\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "SecurityGroupIds": {
      "type": "StringList",
      "description": "(Required) A comma separated list of security group IDs to restrict SSH traffic for.",
      "allowedPattern": "^sg-[a-z0-9]{8,17}$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:iam::\\d{12}:role\\/[\\w+=,.@_\\/-]+|^$"
    }
  },
  "outputs": [
    "DisableIncomingSSHTemplate.RestrictedSecurityGroupIds"
  ],
  "mainSteps": [
    {
      "name": "DisableIncomingSSHTemplate",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "isCritical": true,
      "isEnd": true,
      "timeoutSeconds": 600,
      "description": "## DisableIncomingSSHTemplate\nDisables all incoming traffic on port 22 on the security groups.\n## Inputs\n* SecurityGroupIds: The list of targeted security group IDs.\n## Outputs\n* RestrictedSecurityGroupIds: The list of the security group IDs with disabled incoming SSH on port 22.\n",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "disable_incoming_ssh_handler",
        "InputPayload": {
          "SecurityGroupIds": "{{SecurityGroupIds}}"
        },
        "Script": "import boto3\n\nSSH_PORT = 22\nTCP = 'tcp'\nPUBLIC_IPV4_CIDR = '0.0.0.0/0'\nPUBLIC_IPV6_CIDR = '::/0'\n\nec2_resource = boto3.resource(\"ec2\")\nec2_client = boto3.client(\"ec2\")\n\n\ndef find_open_ssh_ip_in_sg(sg_description):\n  has_unrestricted = False\n  unrestricted_ipv4_ranges = []\n  unrestricted_ipv6_ranges = []\n  for rule in sg_description[\"SecurityGroups\"][0][\"IpPermissions\"]:\n    if ('FromPort' in rule and rule['FromPort'] == SSH_PORT) and ('ToPort' in rule and rule['ToPort'] == SSH_PORT):\n      for ip_range in rule['IpRanges']:\n        if ip_range['CidrIp'] == PUBLIC_IPV4_CIDR:\n          unrestricted_ipv4_ranges.append(ip_range)\n          has_unrestricted = True\n      for ip_range in rule['Ipv6Ranges']:\n        if ip_range['CidrIpv6'] == PUBLIC_IPV6_CIDR:\n          unrestricted_ipv6_ranges.append(ip_range)\n          has_unrestricted = True\n  \n  return has_unrestricted, unrestricted_ipv4_ranges, unrestricted_ipv6_ranges\n\n\ndef disable_incoming_ssh_handler(event, context):\n  sg_ids = event[\"SecurityGroupIds\"]\n  Restricted_sg_ids = []\n  Unrestricted_sg_ids = []\n  errorMsg = \"N/A\"\n  currentSg = None\n  successful = True\n  try:\n    for sg_id in sg_ids:\n      currentSg = sg_id\n      sg_description = ec2_client.describe_security_groups(GroupIds=[sg_id])\n      sg_resource = ec2_resource.SecurityGroup(sg_id)\n      has_unrestricted, unrestricted_ipv4_ranges, unrestricted_ipv6_ranges = find_open_ssh_ip_in_sg(sg_description)\n      \n      if has_unrestricted:\n        revoke_response = sg_resource.revoke_ingress(\n        GroupId=sg_id,\n        IpPermissions=[{\n        'FromPort': SSH_PORT,\n        'IpProtocol': TCP,\n        'ToPort': SSH_PORT,\n        'IpRanges': unrestricted_ipv4_ranges,\n        'Ipv6Ranges': unrestricted_ipv6_ranges\n      }],\n        DryRun=False\n        )\n        if revoke_response and 'Return' in revoke_response and revoke_response['Return']:\n          Restricted_sg_ids.append(sg_id)\n        else:\n          successful = False\n          Unrestricted_sg_ids.append(sg_id)\n  \n  except Exception as e:\n    errorMsg = str(e)\n    successful = False\n    if \"InvalidGroup.NotFound\" in errorMsg:\n      errorMsg = \"The security group '{}' does not exist\".format(currentSg)\n  \n  if not successful:\n      raise Exception(\n        \"Unable to restrict one or more of the security groups Unrestricted_sg_ids: '{}', Restricted_sg_ids: '{}'. errorMsg: '{}'\".format(\n                Unrestricted_sg_ids, Restricted_sg_ids, errorMsg))\n\n  return {\n  \"RestrictedSecurityGroupIds\": Restricted_sg_ids\n}\n"
      },
      "outputs": [
        {
          "Name": "RestrictedSecurityGroupIds",
          "Selector": "$.Payload.RestrictedSecurityGroupIds",
          "Type": "StringList"
        }
      ]
    }
  ]
}
