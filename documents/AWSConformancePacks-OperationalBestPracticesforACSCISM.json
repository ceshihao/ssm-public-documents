{
  "schemaVersion": "1.0",
  "description": "Operational Best Practices for ACSC ISM",
  "templateBody": {
    "Parameters": {
      "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyUnit": {
        "Default": "days",
        "Type": "String"
      },
      "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyValue": {
        "Default": "1",
        "Type": "String"
      },
      "BackupRecoveryPointMinimumRetentionCheckParamRequiredRetentionDays": {
        "Default": "35",
        "Type": "String"
      },
      "CwLoggroupRetentionPeriodCheckParamMinRetentionTime": {
        "Default": "3653",
        "Type": "String"
      },
      "ElbPredefinedSecurityPolicySslCheckParamPredefinedPolicyName": {
        "Default": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "Type": "String"
      },
      "IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns": {
        "Default": "kms:*, kms:Decrypt, kms:ReEncrypt*",
        "Type": "String"
      },
      "IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns": {
        "Default": "kms:*, kms:Decrypt, kms:ReEncrypt*",
        "Type": "String"
      },
      "IamPasswordPolicyParamMaxPasswordAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMinimumPasswordLength": {
        "Default": "14",
        "Type": "String"
      },
      "IamPasswordPolicyParamPasswordReusePrevention": {
        "Default": "24",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireLowercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireNumbers": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireSymbols": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireUppercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Default": "45",
        "Type": "String"
      },
      "RedshiftClusterConfigurationCheckParamClusterDbEncrypted": {
        "Default": "true",
        "Type": "String"
      },
      "RedshiftClusterConfigurationCheckParamLoggingEnabled": {
        "Default": "true",
        "Type": "String"
      },
      "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Default": "true",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort1": {
        "Default": "20",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort2": {
        "Default": "21",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort3": {
        "Default": "3389",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort4": {
        "Default": "3306",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort5": {
        "Default": "4333",
        "Type": "String"
      }
    },
    "Resources": {
      "AcmCertificateExpirationCheck": {
        "Properties": {
          "ConfigRuleName": "acm-certificate-expiration-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ACM::Certificate"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ACM_CERTIFICATE_EXPIRATION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AlbHttpToHttpsRedirectionCheck": {
        "Properties": {
          "ConfigRuleName": "alb-http-to-https-redirection-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AlbWafEnabled": {
        "Properties": {
          "ConfigRuleName": "alb-waf-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancingV2::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ALB_WAF_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwAssociatedWithWaf": {
        "Properties": {
          "ConfigRuleName": "api-gw-associated-with-waf",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_ASSOCIATED_WITH_WAF"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwCacheEnabledAndEncrypted": {
        "Properties": {
          "ConfigRuleName": "api-gw-cache-enabled-and-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwExecutionLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "api-gw-execution-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage",
              "AWS::ApiGatewayV2::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_EXECUTION_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwSslEnabled": {
        "Properties": {
          "ConfigRuleName": "api-gw-ssl-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_SSL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AuroraResourcesProtectedByBackupPlan": {
        "Properties": {
          "ConfigRuleName": "aurora-resources-protected-by-backup-plan",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBCluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AURORA_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupPlanMinFrequencyAndMinRetentionCheck": {
        "Properties": {
          "ConfigRuleName": "backup-plan-min-frequency-and-min-retention-check",
          "InputParameters": {
            "requiredFrequencyUnit": {
              "Fn::If": [
                "backupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyUnit",
                {
                  "Ref": "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyUnit"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "requiredFrequencyValue": {
              "Fn::If": [
                "backupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyValue",
                {
                  "Ref": "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyValue"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::BackupPlan"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupPlanMinFrequencyAndMinRetentionCheck2": {
        "Properties": {
          "ConfigRuleName": "backup-plan-min-frequency-and-min-retention-check-2",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::BackupPlan"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupRecoveryPointEncrypted": {
        "Properties": {
          "ConfigRuleName": "backup-recovery-point-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::RecoveryPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_RECOVERY_POINT_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupRecoveryPointManualDeletionDisabled": {
        "Properties": {
          "ConfigRuleName": "backup-recovery-point-manual-deletion-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::BackupVault"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupRecoveryPointMinimumRetentionCheck": {
        "Properties": {
          "ConfigRuleName": "backup-recovery-point-minimum-retention-check",
          "InputParameters": {
            "requiredRetentionDays": {
              "Fn::If": [
                "backupRecoveryPointMinimumRetentionCheckParamRequiredRetentionDays",
                {
                  "Ref": "BackupRecoveryPointMinimumRetentionCheckParamRequiredRetentionDays"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::RecoveryPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailCloudWatchLogsEnabled": {
        "Properties": {
          "ConfigRuleName": "cloud-trail-cloud-watch-logs-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailEnabled": {
        "Properties": {
          "ConfigRuleName": "cloudtrail-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailEncryptionEnabled": {
        "Properties": {
          "ConfigRuleName": "cloud-trail-encryption-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_ENCRYPTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudtrailS3DataeventsEnabled": {
        "Properties": {
          "ConfigRuleName": "cloudtrail-s3-dataevents-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUDTRAIL_S3_DATAEVENTS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudtrailSecurityTrailEnabled": {
        "Properties": {
          "ConfigRuleName": "cloudtrail-security-trail-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUDTRAIL_SECURITY_TRAIL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectArtifactEncryption": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-artifact-encryption",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_ARTIFACT_ENCRYPTION"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectEnvironmentPrivilegedCheck": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-environment-privileged-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_ENVIRONMENT_PRIVILEGED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectS3LogsEncrypted": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-s3-logs-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_S3_LOGS_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CwLoggroupRetentionPeriodCheck": {
        "Properties": {
          "ConfigRuleName": "cw-loggroup-retention-period-check",
          "InputParameters": {
            "MinRetentionTime": {
              "Fn::If": [
                "cwLoggroupRetentionPeriodCheckParamMinRetentionTime",
                {
                  "Ref": "CwLoggroupRetentionPeriodCheckParamMinRetentionTime"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CW_LOGGROUP_RETENTION_PERIOD_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DbInstanceBackupEnabled": {
        "Properties": {
          "ConfigRuleName": "db-instance-backup-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DB_INSTANCE_BACKUP_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DynamodbAutoscalingEnabled": {
        "Properties": {
          "ConfigRuleName": "dynamodb-autoscaling-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::DynamoDB::Table"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DYNAMODB_AUTOSCALING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DynamodbInBackupPlan": {
        "Properties": {
          "ConfigRuleName": "dynamodb-in-backup-plan",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DYNAMODB_IN_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DynamodbPitrEnabled": {
        "Properties": {
          "ConfigRuleName": "dynamodb-pitr-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::DynamoDB::Table"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DYNAMODB_PITR_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DynamodbTableEncryptedKms": {
        "Properties": {
          "ConfigRuleName": "dynamodb-table-encrypted-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::DynamoDB::Table"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DYNAMODB_TABLE_ENCRYPTED_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsInBackupPlan": {
        "Properties": {
          "ConfigRuleName": "ebs-in-backup-plan",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_IN_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2EbsEncryptionByDefault": {
        "Properties": {
          "ConfigRuleName": "ec2-ebs-encryption-by-default",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_EBS_ENCRYPTION_BY_DEFAULT"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2Imdsv2Check": {
        "Properties": {
          "ConfigRuleName": "ec2-imdsv2-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_IMDSV2_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceManagedBySsm": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-managed-by-systems-manager",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance",
              "AWS::SSM::ManagedInstanceInventory"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_MANAGED_BY_SSM"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceProfileAttached": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-profile-attached",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_PROFILE_ATTACHED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstanceAssociationComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-association-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::AssociationCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstancePatchComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-patch-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::PatchCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ResourcesProtectedByBackupPlan": {
        "Properties": {
          "ConfigRuleName": "ec2-resources-protected-by-backup-plan",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsContainersNonprivileged": {
        "Properties": {
          "ConfigRuleName": "ecs-containers-nonprivileged",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::TaskDefinition"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_CONTAINERS_NONPRIVILEGED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsContainersReadonlyAccess": {
        "Properties": {
          "ConfigRuleName": "ecs-containers-readonly-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::TaskDefinition"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_CONTAINERS_READONLY_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsFargateLatestPlatformVersion": {
        "Properties": {
          "ConfigRuleName": "ecs-fargate-latest-platform-version",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::Service"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_FARGATE_LATEST_PLATFORM_VERSION"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsTaskDefinitionNonrootUser": {
        "Properties": {
          "ConfigRuleName": "ecs-task-definition-nonroot-user",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::TaskDefinition"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_TASK_DEFINITION_NONROOT_USER"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsTaskDefinitionUserForHostModeCheck": {
        "Properties": {
          "ConfigRuleName": "ecs-task-definition-user-for-host-mode-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::TaskDefinition"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_TASK_DEFINITION_USER_FOR_HOST_MODE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsAccessPointEnforceUserIdentity": {
        "Properties": {
          "ConfigRuleName": "efs-access-point-enforce-user-identity",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EFS::AccessPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_ACCESS_POINT_ENFORCE_USER_IDENTITY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsEncryptedCheck": {
        "Properties": {
          "ConfigRuleName": "efs-encrypted-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_ENCRYPTED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsInBackupPlan": {
        "Properties": {
          "ConfigRuleName": "efs-in-backup-plan",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_IN_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticBeanstalkManagedUpdatesEnabled": {
        "Properties": {
          "ConfigRuleName": "elastic-beanstalk-managed-updates-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticBeanstalk::Environment"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTIC_BEANSTALK_MANAGED_UPDATES_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticacheRedisClusterAutomaticBackupCheck": {
        "Properties": {
          "ConfigRuleName": "elasticache-redis-cluster-automatic-backup-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchEncryptedAtRest": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-encrypted-at-rest",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_ENCRYPTED_AT_REST"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchLogsToCloudwatch": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-logs-to-cloudwatch",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Elasticsearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_LOGS_TO_CLOUDWATCH"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchNodeToNodeEncryptionCheck": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-node-to-node-encryption-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Elasticsearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbAcmCertificateRequired": {
        "Properties": {
          "ConfigRuleName": "elb-acm-certificate-required",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_ACM_CERTIFICATE_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbCrossZoneLoadBalancingEnabled": {
        "Properties": {
          "ConfigRuleName": "elb-cross-zone-load-balancing-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_CROSS_ZONE_LOAD_BALANCING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "elb-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer",
              "AWS::ElasticLoadBalancingV2::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbPredefinedSecurityPolicySslCheck": {
        "Properties": {
          "ConfigRuleName": "elb-predefined-security-policy-ssl-check",
          "InputParameters": {
            "predefinedPolicyName": {
              "Fn::If": [
                "elbPredefinedSecurityPolicySslCheckParamPredefinedPolicyName",
                {
                  "Ref": "ElbPredefinedSecurityPolicySslCheckParamPredefinedPolicyName"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_PREDEFINED_SECURITY_POLICY_SSL_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbTlsHttpsListenersOnly": {
        "Properties": {
          "ConfigRuleName": "elb-tls-https-listeners-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_TLS_HTTPS_LISTENERS_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Elbv2AcmCertificateRequired": {
        "Properties": {
          "ConfigRuleName": "elbv2-acm-certificate-required",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELBV2_ACM_CERTIFICATE_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EncryptedVolumes": {
        "Properties": {
          "ConfigRuleName": "encrypted-volumes",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Volume"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ENCRYPTED_VOLUMES"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "FsxResourcesProtectedByBackupPlan": {
        "Properties": {
          "ConfigRuleName": "fsx-resources-protected-by-backup-plan",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "FSX_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "GuarddutyEnabledCentralized": {
        "Properties": {
          "ConfigRuleName": "guardduty-enabled-centralized",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "GUARDDUTY_ENABLED_CENTRALIZED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamCustomerPolicyBlockedKmsActions": {
        "Properties": {
          "ConfigRuleName": "iam-customer-policy-blocked-kms-actions",
          "InputParameters": {
            "blockedActionsPatterns": {
              "Fn::If": [
                "iamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns",
                {
                  "Ref": "IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamGroupHasUsersCheck": {
        "Properties": {
          "ConfigRuleName": "iam-group-has-users-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Group"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_GROUP_HAS_USERS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamInlinePolicyBlockedKmsActions": {
        "Properties": {
          "ConfigRuleName": "iam-inline-policy-blocked-kms-actions",
          "InputParameters": {
            "blockedActionsPatterns": {
              "Fn::If": [
                "iamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns",
                {
                  "Ref": "IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Group",
              "AWS::IAM::Role",
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamNoInlinePolicyCheck": {
        "Properties": {
          "ConfigRuleName": "iam-no-inline-policy-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User",
              "AWS::IAM::Role",
              "AWS::IAM::Group"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_NO_INLINE_POLICY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPasswordPolicy": {
        "Properties": {
          "ConfigRuleName": "iam-password-policy",
          "InputParameters": {
            "MaxPasswordAge": {
              "Fn::If": [
                "iamPasswordPolicyParamMaxPasswordAge",
                {
                  "Ref": "IamPasswordPolicyParamMaxPasswordAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "MinimumPasswordLength": {
              "Fn::If": [
                "iamPasswordPolicyParamMinimumPasswordLength",
                {
                  "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PasswordReusePrevention": {
              "Fn::If": [
                "iamPasswordPolicyParamPasswordReusePrevention",
                {
                  "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireLowercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireLowercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireNumbers": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireNumbers",
                {
                  "Ref": "IamPasswordPolicyParamRequireNumbers"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireSymbols": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireSymbols",
                {
                  "Ref": "IamPasswordPolicyParamRequireSymbols"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireUppercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireUppercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_PASSWORD_POLICY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithAdminAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-admin-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithFullAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-full-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamRootAccessKeyCheck": {
        "Properties": {
          "ConfigRuleName": "iam-root-access-key-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_ROOT_ACCESS_KEY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserGroupMembershipCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-group-membership-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_GROUP_MEMBERSHIP_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "iam-user-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserUnusedCredentialsCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-unused-credentials-check",
          "InputParameters": {
            "maxCredentialUsageAge": {
              "Fn::If": [
                "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge",
                {
                  "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_UNUSED_CREDENTIALS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "KinesisStreamEncrypted": {
        "Properties": {
          "ConfigRuleName": "kinesis-stream-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Kinesis::Stream"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "KINESIS_STREAM_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "MfaEnabledForIamConsoleAccess": {
        "Properties": {
          "ConfigRuleName": "mfa-enabled-for-iam-console-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "MultiRegionCloudTrailEnabled": {
        "Properties": {
          "ConfigRuleName": "multi-region-cloudtrail-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "MULTI_REGION_CLOUD_TRAIL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchAuditLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "opensearch-audit-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_AUDIT_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchEncryptedAtRest": {
        "Properties": {
          "ConfigRuleName": "opensearch-encrypted-at-rest",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_ENCRYPTED_AT_REST"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchHttpsRequired": {
        "Properties": {
          "ConfigRuleName": "opensearch-https-required",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_HTTPS_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchLogsToCloudwatch": {
        "Properties": {
          "ConfigRuleName": "opensearch-logs-to-cloudwatch",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_LOGS_TO_CLOUDWATCH"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchNodeToNodeEncryptionCheck": {
        "Properties": {
          "ConfigRuleName": "opensearch-node-to-node-encryption-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsAutomaticMinorVersionUpgradeEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-automatic-minor-version-upgrade-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsClusterDeletionProtectionEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-cluster-deletion-protection-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBCluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_CLUSTER_DELETION_PROTECTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsClusterMultiAzEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-cluster-multi-az-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBCluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_CLUSTER_MULTI_AZ_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInBackupPlan": {
        "Properties": {
          "ConfigRuleName": "rds-in-backup-plan",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_IN_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstanceDeletionProtectionEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-instance-deletion-protection-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_DELETION_PROTECTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstanceIamAuthenticationEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-instance-iam-authentication-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_IAM_AUTHENTICATION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstancePublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "rds-instance-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsMultiAzSupport": {
        "Properties": {
          "ConfigRuleName": "rds-multi-az-support",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_MULTI_AZ_SUPPORT"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsSnapshotEncrypted": {
        "Properties": {
          "ConfigRuleName": "rds-snapshot-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBSnapshot",
              "AWS::RDS::DBClusterSnapshot"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_SNAPSHOT_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsStorageEncrypted": {
        "Properties": {
          "ConfigRuleName": "rds-storage-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_STORAGE_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftAuditLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-audit-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_AUDIT_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftBackupEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-backup-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_BACKUP_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterConfigurationCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-configuration-check",
          "InputParameters": {
            "clusterDbEncrypted": {
              "Fn::If": [
                "redshiftClusterConfigurationCheckParamClusterDbEncrypted",
                {
                  "Ref": "RedshiftClusterConfigurationCheckParamClusterDbEncrypted"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "loggingEnabled": {
              "Fn::If": [
                "redshiftClusterConfigurationCheckParamLoggingEnabled",
                {
                  "Ref": "RedshiftClusterConfigurationCheckParamLoggingEnabled"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_CONFIGURATION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterKmsEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-kms-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_KMS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterMaintenancesettingsCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-maintenancesettings-check",
          "InputParameters": {
            "allowVersionUpgrade": {
              "Fn::If": [
                "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade",
                {
                  "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftEnhancedVpcRoutingEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-enhanced-vpc-routing-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftRequireTlsSsl": {
        "Properties": {
          "ConfigRuleName": "redshift-require-tls-ssl",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_REQUIRE_TLS_SSL"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RestrictedIncomingTraffic": {
        "Properties": {
          "ConfigRuleName": "restricted-common-ports",
          "InputParameters": {
            "blockedPort1": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort1",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort2": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort2",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort3": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort3",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort4": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort4",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort5": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort5",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RESTRICTED_INCOMING_TRAFFIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RootAccountHardwareMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "root-account-hardware-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RootAccountMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "root-account-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ROOT_ACCOUNT_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketLoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-logging-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketReplicationEnabled": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-replication-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_REPLICATION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketServerSideEncryptionEnabled": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-server-side-encryption-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketSslRequestsOnly": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-ssl-requests-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_SSL_REQUESTS_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketVersioningEnabled": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-versioning-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_VERSIONING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3DefaultEncryptionKms": {
        "Properties": {
          "ConfigRuleName": "s3-default-encryption-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_DEFAULT_ENCRYPTION_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerEndpointConfigurationKmsKeyConfigured": {
        "Properties": {
          "ConfigRuleName": "sagemaker-endpoint-configuration-kms-key-configured",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerNotebookInstanceKmsKeyConfigured": {
        "Properties": {
          "ConfigRuleName": "sagemaker-notebook-instance-kms-key-configured",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecurityhubEnabled": {
        "Properties": {
          "ConfigRuleName": "securityhub-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECURITYHUB_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SnsEncryptedKms": {
        "Properties": {
          "ConfigRuleName": "sns-encrypted-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SNS::Topic"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SNS_ENCRYPTED_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcFlowLogsEnabled": {
        "Properties": {
          "ConfigRuleName": "vpc-flow-logs-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_FLOW_LOGS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcSgOpenOnlyToAuthorizedPorts": {
        "Properties": {
          "ConfigRuleName": "vpc-sg-open-only-to-authorized-ports",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "WafRegionalRuleNotEmpty": {
        "Properties": {
          "ConfigRuleName": "waf-regional-rule-not-empty",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::WAFRegional::Rule"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "WAF_REGIONAL_RULE_NOT_EMPTY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "WafRegionalRulegroupNotEmpty": {
        "Properties": {
          "ConfigRuleName": "waf-regional-rulegroup-not-empty",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::WAFRegional::RuleGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "WAF_REGIONAL_RULEGROUP_NOT_EMPTY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "WafRegionalWebaclNotEmpty": {
        "Properties": {
          "ConfigRuleName": "waf-regional-webacl-not-empty",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::WAFRegional::WebACL"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "WAF_REGIONAL_WEBACL_NOT_EMPTY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Wafv2LoggingEnabled": {
        "Properties": {
          "ConfigRuleName": "wafv2-logging-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "WAFV2_LOGGING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ResponsePlanExistsMaintained": {
        "Properties": {
          "ConfigRuleName": "response-plan-exists-maintained",
          "Description": "Ensure incident response plans are established, maintained, and distributed to responsible personnel.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecurityAwarenessProgramExists": {
        "Properties": {
          "ConfigRuleName": "security-awareness-program-exists",
          "Description": "Establish and maintain a security awareness program for your organization. Security awareness programs educate employees on how to protect their organization from various security breaches or incidents.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AuditLogPolicyExists": {
        "Properties": {
          "ConfigRuleName": "audit-log-policy-exists",
          "Description": "Establish and maintain an audit log management policy that defines your organization's logging requirements. This includes, but is not limited to, review and retention of audit logs.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      }
    },
    "Conditions": {
      "backupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyUnit": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyUnit"
              }
            ]
          }
        ]
      },
      "backupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyValue": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "BackupPlanMinFrequencyAndMinRetentionCheckParamRequiredFrequencyValue"
              }
            ]
          }
        ]
      },
      "backupRecoveryPointMinimumRetentionCheckParamRequiredRetentionDays": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "BackupRecoveryPointMinimumRetentionCheckParamRequiredRetentionDays"
              }
            ]
          }
        ]
      },
      "cwLoggroupRetentionPeriodCheckParamMinRetentionTime": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "CwLoggroupRetentionPeriodCheckParamMinRetentionTime"
              }
            ]
          }
        ]
      },
      "elbPredefinedSecurityPolicySslCheckParamPredefinedPolicyName": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "ElbPredefinedSecurityPolicySslCheckParamPredefinedPolicyName"
              }
            ]
          }
        ]
      },
      "iamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns"
              }
            ]
          }
        ]
      },
      "iamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMaxPasswordAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMaxPasswordAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMinimumPasswordLength": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamPasswordReusePrevention": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireLowercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireNumbers": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireNumbers"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireSymbols": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireSymbols"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireUppercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
              }
            ]
          }
        ]
      },
      "redshiftClusterConfigurationCheckParamClusterDbEncrypted": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterConfigurationCheckParamClusterDbEncrypted"
              }
            ]
          }
        ]
      },
      "redshiftClusterConfigurationCheckParamLoggingEnabled": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterConfigurationCheckParamLoggingEnabled"
              }
            ]
          }
        ]
      },
      "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort1": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort2": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort3": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort4": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort5": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
              }
            ]
          }
        ]
      }
    }
  }
}
