{
  "description": "## Id\nAWSResilienceHub-SimulateRestApiGwNetworkUnavailableTest_2020-09-21\n\n## Intent\nTest REST API Gateway with binding to VPC behavior when security groups are misconfigured and that the setup alarm alerts when network is unavailable\n\n## Type\nTEST\n\n## Risk\nHigh\n\n## Requirements\n  * REST API Gateway with VPC binding\n  * Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway\n  * There is constant traffic on API Gateway during test\n\n## Permissions required for AutomationAssumeRole\n  * apigateway:GET\n  * ec2:ModifyVpcEndpoint\n  * ec2:DescribeVpcEndpoints\n  * ec2:CreateSecurityGroup\n  * ec2:DescribeSecurityGroups\n  * cloudwatch:DescribeAlarms\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * ssm:GetParameters\n  * iam:PassRole\n  * ec2:CreateTags (for `ec2:CreateAction` value \"CreateSecurityGroup\")\n\n##### Permissions required for security groups with tag `ec2:ResourceTag/AWSResilienceHub` value \"api-gw:test:simulate_network_unavailable\"\n  * ec2:DeleteSecurityGroup\n\n##### Permissions required to log output to CloudWatch\n  * logs:PutLogEvents\n  * logs:DescribeLogGroups\n  * logs:DescribeLogStreams\n\n## Supports Rollback\nYes, restore original VPC endpoint(s) configuration\n\n## Cancellation behavior\nRestore original VPC endpoint(s) configuration\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) RestApiGwId\n  * type: String\n  * description: The ID of REST API Gateway\n\n### (Required) ApiGwCountAlarmName\n  * type: String\n  * description: Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway\n\n### (Optional) SecurityGroupIdListToUnassign\n  * type: StringList\n  * description: The list of Security Group Ids that should be unassigned from the the API. If not provided, all Security Groups will be unassigned from attached VPC endpoints. Max items: 15\n  * default: []\n\n### (Optional) IsRollback\n  * type: String\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\n  * default: false\n\n### (Optional) PreviousExecutionId\n  * type: String\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\n\n## Details\nThe document injects failure by removing security groups assigned for VPC endpoint(s). If `SecurityGroupIdListToUnassign` is provided, removes only security groups from this list. Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) should be trigger by traffic on the gateway. In case of issues users should manually restore original VPC endpoint(s) configuration from backup.\n\n## Steps executed in normal flow\n  * CheckIsRollback\n  * AssertAlarmToBeGreenBeforeTest\n  * BackupCurrentExecution\n  * InjectFailure\n  * AssertAlarmToBeRed\n  * RollbackCurrentExecution\n  * AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n  * CheckIsRollback\n  * GetInputsFromPreviousExecution\n  * AssertInputsFromPreviousExecution\n  * PrepareRollbackOfPreviousExecution\n  * RollbackPreviousExecution\n\n## Outputs\nNone",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "RestApiGwId": {
      "type": "String",
      "description": "(Required) The ID of REST API Gateway"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "ApiGwCountAlarmName": {
      "type": "String",
      "description": "(Required) Alarm for metric `Count` setup for the specified API Gateway"
    },
    "SecurityGroupIdListToUnassign": {
      "type": "StringList",
      "description": "(Optional) The list of Security Group Ids that should be unassigned from the the API. If not provided, all Security Groups will be unassigned from attached VPC endpoints",
      "maxItems": 15,
      "default": []
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Previous execution id for which resources need to be cleaned up.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetInputsFromPreviousExecution",
            "Variable": "{{ IsRollback }}",
            "EqualsIgnoreCase": "true"
          }
        ],
        "Default": "AssertAlarmToBeGreenBeforeTest"
      }
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwId",
          "Selector": "$.Payload.RestApiGwId[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertInputsFromPreviousExecution",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "PrepareRollbackOfPreviousExecution",
            "Variable": "{{ GetInputsFromPreviousExecution.RestApiGwId }}",
            "StringEquals": "{{ RestApiGwId }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get original VPC endpoint(s) configuration for rollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "VpcEndpointsSecurityGroupsMappingOriginalValue",
          "Selector": "$.Payload.VpcEndpointsSecurityGroupsMappingOriginalValue[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}",
          "StepName": "BackupCurrentExecution",
          "ResponseField": "VpcEndpointsSecurityGroupsMappingOriginalValue"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "RollbackPreviousExecution",
      "description": "Rollback VPC endpoint(s) configuration for the REST API Gateway",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "update_endpoint_security_group_config",
        "InputPayload": {
          "VpcEndpointsSecurityGroupsMapping": "{{ PrepareRollbackOfPreviousExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}",
          "Action": "ReplaceWithOriginalSg"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\n\ndef update_endpoint_security_group_config(events: dict, context: dict) -> None:\n    if 'VpcEndpointsSecurityGroupsMapping' not in events:\n        raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')\n\n    vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))\n    action: str = events.get('Action')\n\n    if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:\n        raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')\n\n    ec2_client = boto3.client('ec2')\n\n    for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():\n        original_security_group_ids = [security_group['GroupId']\n                                       for security_group in security_groups_config]\n\n        dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id\n        describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}\n        describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']\n        dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None\n\n        if action == 'ReplaceWithDummySg':\n            if not dummy_sg_id:\n                log.debug(f'Creating dummy security group {dummy_sg_name} ...')\n                vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']\n                log.debug(f'VPC ID: {vpc_id}')\n                create_dummy_sg_args = {\n                    'VpcId': vpc_id,\n                    'GroupName': dummy_sg_name,\n                    'Description': 'Dummy SG',\n                    'TagSpecifications': [\n                        {\n                            'ResourceType': 'security-group',\n                            'Tags': [\n                                {\n                                    'Key': 'AWSResilienceHub',\n                                    'Value': 'api-gw:test:simulate_network_unavailable'\n                                }\n                            ]\n                        }\n                    ]\n                }\n                dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']\n\n                # Security group may be not available right after creation\n                waiter = ec2_client.get_waiter('security_group_exists')\n                waiter.wait(GroupIds=[dummy_sg_id])\n                log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')\n            else:\n                log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')\n\n            add_security_group_ids = [dummy_sg_id]\n            remove_security_group_ids = original_security_group_ids\n\n        elif action == 'ReplaceWithOriginalSg':\n            add_security_group_ids = original_security_group_ids\n            remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []\n\n        log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')\n        log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')\n        log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')\n        response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,\n                                                  AddSecurityGroupIds=add_security_group_ids,\n                                                  RemoveSecurityGroupIds=remove_security_group_ids)\n        if not response['Return']:\n            log.error(response)\n            raise Exception('Could not modify VPC endpoint')\n        else:\n            log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')\n\n        if action == 'ReplaceWithOriginalSg' and dummy_sg_id:\n            log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')\n            delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)\n            log.debug(\n                f'Delete security group response code: {delete_sg_response[\"ResponseMetadata\"][\"HTTPStatusCode\"]}')"
      },
      "isEnd": true
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "description": "Ensure alarm is green before starting test. Fail if alarm is not green within expected time.",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ApiGwCountAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "BackupCurrentExecution",
      "description": "Backup VPC endpoint(s) configuration for REST API Gateway for rollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "VpcEndpointsSecurityGroupsMappingOriginalValue",
          "Selector": "$.Payload.VpcEndpointsSecurityGroupsMappingOriginalValue",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_endpoint_security_group_config",
        "InputPayload": {
          "RestApiGwId": "{{ RestApiGwId }}",
          "SecurityGroupIdListToUnassign": "{{ SecurityGroupIdListToUnassign }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\n\ndef get_endpoint_security_group_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwId' not in events:\n        raise KeyError('Requires RestApiGwId in events')\n\n    gateway_id: str = events['RestApiGwId']\n    provided_security_group_ids: list = events.get('SecurityGroupIdListToUnassign')\n\n    apigw_client = boto3.client('apigateway')\n    ec2_client = boto3.client('ec2')\n    vpc_endpoint_ids: list = apigw_client.get_rest_api(restApiId=gateway_id)['endpointConfiguration']['vpcEndpointIds']\n\n    if not vpc_endpoint_ids:\n        raise Exception('Provided REST API gateway does not have any configured VPC endpoint')\n\n    vpc_endpoint_configs: dict = ec2_client.describe_vpc_endpoints(VpcEndpointIds=vpc_endpoint_ids)['VpcEndpoints']\n    vpc_endpoint_security_groups_map: dict = {}\n\n    for vpc_endpoint in vpc_endpoint_configs:\n        vpc_endpoint_security_groups_map[vpc_endpoint['VpcEndpointId']] = vpc_endpoint['Groups']\n\n    if provided_security_group_ids:\n        security_group_found = False\n        for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():\n            for security_group in security_groups_config:\n                if security_group['GroupId'] not in provided_security_group_ids:\n                    vpc_endpoint_security_groups_map[vpc_endpoint_id].remove(security_group)\n                else:\n                    security_group_found = True\n        if not security_group_found:\n            raise Exception('Provided security groups were not found in any configured VPC endpoint')\n\n    return {\"VpcEndpointsSecurityGroupsMappingOriginalValue\": json.dumps(vpc_endpoint_security_groups_map)}"
      }
    },
    {
      "name": "InjectFailure",
      "description": "Inject failure by removing security group(s) from VPC endpoint(s) configuration for REST API Gateway",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "update_endpoint_security_group_config",
        "InputPayload": {
          "VpcEndpointsSecurityGroupsMapping": "{{ BackupCurrentExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}",
          "Action": "ReplaceWithDummySg"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\n\ndef update_endpoint_security_group_config(events: dict, context: dict) -> None:\n    if 'VpcEndpointsSecurityGroupsMapping' not in events:\n        raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')\n\n    vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))\n    action: str = events.get('Action')\n\n    if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:\n        raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')\n\n    ec2_client = boto3.client('ec2')\n\n    for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():\n        original_security_group_ids = [security_group['GroupId']\n                                       for security_group in security_groups_config]\n\n        dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id\n        describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}\n        describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']\n        dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None\n\n        if action == 'ReplaceWithDummySg':\n            if not dummy_sg_id:\n                log.debug(f'Creating dummy security group {dummy_sg_name} ...')\n                vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']\n                log.debug(f'VPC ID: {vpc_id}')\n                create_dummy_sg_args = {\n                    'VpcId': vpc_id,\n                    'GroupName': dummy_sg_name,\n                    'Description': 'Dummy SG',\n                    'TagSpecifications': [\n                        {\n                            'ResourceType': 'security-group',\n                            'Tags': [\n                                {\n                                    'Key': 'AWSResilienceHub',\n                                    'Value': 'api-gw:test:simulate_network_unavailable'\n                                }\n                            ]\n                        }\n                    ]\n                }\n                dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']\n\n                # Security group may be not available right after creation\n                waiter = ec2_client.get_waiter('security_group_exists')\n                waiter.wait(GroupIds=[dummy_sg_id])\n                log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')\n            else:\n                log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')\n\n            add_security_group_ids = [dummy_sg_id]\n            remove_security_group_ids = original_security_group_ids\n\n        elif action == 'ReplaceWithOriginalSg':\n            add_security_group_ids = original_security_group_ids\n            remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []\n\n        log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')\n        log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')\n        log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')\n        response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,\n                                                  AddSecurityGroupIds=add_security_group_ids,\n                                                  RemoveSecurityGroupIds=remove_security_group_ids)\n        if not response['Return']:\n            log.error(response)\n            raise Exception('Could not modify VPC endpoint')\n        else:\n            log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')\n\n        if action == 'ReplaceWithOriginalSg' and dummy_sg_id:\n            log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')\n            delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)\n            log.debug(\n                f'Delete security group response code: {delete_sg_response[\"ResponseMetadata\"][\"HTTPStatusCode\"]}')"
      }
    },
    {
      "name": "AssertAlarmToBeRed",
      "description": "Wait for expected alarm to be red after failure is injected",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ApiGwCountAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "RollbackCurrentExecution",
      "description": "Restore original VPC endpoint(s) configuration for REST API Gateway",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "maxAttempts": 5,
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "update_endpoint_security_group_config",
        "InputPayload": {
          "VpcEndpointsSecurityGroupsMapping": "{{ BackupCurrentExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}",
          "Action": "ReplaceWithOriginalSg"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\n\ndef update_endpoint_security_group_config(events: dict, context: dict) -> None:\n    if 'VpcEndpointsSecurityGroupsMapping' not in events:\n        raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')\n\n    vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))\n    action: str = events.get('Action')\n\n    if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:\n        raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')\n\n    ec2_client = boto3.client('ec2')\n\n    for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():\n        original_security_group_ids = [security_group['GroupId']\n                                       for security_group in security_groups_config]\n\n        dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id\n        describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}\n        describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']\n        dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None\n\n        if action == 'ReplaceWithDummySg':\n            if not dummy_sg_id:\n                log.debug(f'Creating dummy security group {dummy_sg_name} ...')\n                vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']\n                log.debug(f'VPC ID: {vpc_id}')\n                create_dummy_sg_args = {\n                    'VpcId': vpc_id,\n                    'GroupName': dummy_sg_name,\n                    'Description': 'Dummy SG',\n                    'TagSpecifications': [\n                        {\n                            'ResourceType': 'security-group',\n                            'Tags': [\n                                {\n                                    'Key': 'AWSResilienceHub',\n                                    'Value': 'api-gw:test:simulate_network_unavailable'\n                                }\n                            ]\n                        }\n                    ]\n                }\n                dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']\n\n                # Security group may be not available right after creation\n                waiter = ec2_client.get_waiter('security_group_exists')\n                waiter.wait(GroupIds=[dummy_sg_id])\n                log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')\n            else:\n                log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')\n\n            add_security_group_ids = [dummy_sg_id]\n            remove_security_group_ids = original_security_group_ids\n\n        elif action == 'ReplaceWithOriginalSg':\n            add_security_group_ids = original_security_group_ids\n            remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []\n\n        log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')\n        log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')\n        log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')\n        response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,\n                                                  AddSecurityGroupIds=add_security_group_ids,\n                                                  RemoveSecurityGroupIds=remove_security_group_ids)\n        if not response['Return']:\n            log.error(response)\n            raise Exception('Could not modify VPC endpoint')\n        else:\n            log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')\n\n        if action == 'ReplaceWithOriginalSg' and dummy_sg_id:\n            log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')\n            delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)\n            log.debug(\n                f'Delete security group response code: {delete_sg_response[\"ResponseMetadata\"][\"HTTPStatusCode\"]}')"
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "description": "Wait for the alarm to be green after test is complete",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ApiGwCountAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
