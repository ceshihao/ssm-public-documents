{
  "description": "## Id\nAWSResilienceHub-ForceDynamoDbTableReadThrottlingTest_2020-09-21\n\n## Intent\nTest that the ReadThrottleEvents metric alarm setup detects and alerts when table becomes unavailable\n\n## Type\nTEST\n\n## Risk\nSmall\n\n## Requirements\n  * Not on-demand DynamoDB table or a table with provisioned capacity with autoscaling enabled\n  * The DynamoDB Table should be actively read during the last minutes before the execution to get right average values of `ConsumedReadCapacityUnits` metric\n  * An alarm setup for ReadThrottleEvents metric\n\n## Permissions required for AutomationAssumeRole\n  * dynamodb:UpdateTable\n  * dynamodb:DescribeTable\n  * cloudwatch:DescribeAlarms\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * ssm:GetParameters\n  * iam:PassRole\n\n## Supports Rollback\nYes. Reverts provisioned read and write capacity units to original values\n\n## Cancellation behavior\nReverts provisioned read and write capacity units to original values\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) DynamoDBTableName\n  * type: String\n  * description: The DynamoDB Table Name with PROVISIONED billing mode\n\n### (Required) ReadThrottleAlarmName\n  * type: String\n  * description: Alarm for metric `ReadThrottleEvents` that triggers when any read throttle events occure\n\n### (Required) ReadCapacityUnitsLimit\n  * type: String\n  * description: ReadCapacityUnits value that should be lower than actual consumed value\n\n### (Optional) IsRollback\n  * type: String\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\n  * default: false\n\n### (Optional) PreviousExecutionId\n  * type: String\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\n\n## Details\nThe document updates DynamoDB table provisioned read capacity units (RCU) to the specified value that has\nto be lower than the usual consumption, and tests that alarm for metric `ReadThrottleEvents` is triggered.\nIn case of issues users should manually revert provisioned read capacity units value.\n\n## Steps executed in normal flow\n  * CheckIsRollback\n  * AssertBillingModeProvisioned\n  * ValidateReadCapacityUnitsLimit\n  * AssertAlarmToBeGreenBeforeTest\n  * BackupProvisionedThroughput\n  * UpdateTableRCU\n  * WaitForActiveStatusAfterUpdateTableRCU\n  * AssertAlarmToBeRed\n  * RollbackCurrentExecution\n  * WaitForActiveStatusAfterRollbackToPreviousTableRCU\n  * AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n  * CheckIsRollback\n  * GetPreviousExecutionInputs\n  * PrepareRollbackOfPreviousExecution\n  * ConvertParamTypes\n  * AssertDynamoDBTableName\n  * RollbackPreviousExecution\n  * WaitForActiveStatusAfterRollbackPrevious\n\n## Outputs\nNone",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "DynamoDBTableName": {
      "type": "String",
      "description": "(Required) The DynamoDB Table Name with PROVISIONED billing mode."
    },
    "ReadThrottleAlarmName": {
      "type": "String",
      "description": "(Required) Alarm which should be green after test."
    },
    "ReadCapacityUnitsLimit": {
      "type": "Integer",
      "description": "(Required) ReadCapacityUnits value that should be lower than actual consumed value"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run rollback step of the given previous execution (parameter PreviousExecutionId). Can be either true or false.",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Previous execution id for which resources need to be cleaned up.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetPreviousExecutionInputs",
            "Variable": "{{ IsRollback }}",
            "StringEquals": "true"
          }
        ],
        "Default": "AssertBillingModeProvisioned"
      }
    },
    {
      "name": "GetPreviousExecutionInputs",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "ReadCapacityUnitsLimit",
          "Selector": "$.Payload.ReadCapacityUnitsLimit[0]",
          "Type": "String"
        },
        {
          "Name": "DynamoDBTableName",
          "Selector": "$.Payload.DynamoDBTableName[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get original Read and Write Capacity Units",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "BackupReadCapacityUnits",
          "Selector": "$.Payload.BackupReadCapacityUnits[0]",
          "Type": "String"
        },
        {
          "Name": "BackupWriteCapacityUnits",
          "Selector": "$.Payload.BackupWriteCapacityUnits[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}",
          "StepName": "BackupProvisionedThroughput",
          "ResponseField": "BackupReadCapacityUnits,BackupWriteCapacityUnits"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    # Sets values in string type regardless of what is the original value type. In order to set\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "ConvertParamTypes",
      "description": "Cast float RCU and WCU values to integers",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "BackupReadCapacityUnits",
          "Selector": "$.Payload.BackupReadCapacityUnits",
          "Type": "Integer"
        },
        {
          "Name": "BackupWriteCapacityUnits",
          "Selector": "$.Payload.BackupWriteCapacityUnits",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "convert_param_types",
        "InputPayload": {
          "Parameters": [
            {
              "Name": "BackupReadCapacityUnits",
              "Value": "{{ PrepareRollbackOfPreviousExecution.BackupReadCapacityUnits }}",
              "OutputType": "Integer"
            },
            {
              "Name": "BackupWriteCapacityUnits",
              "Value": "{{ PrepareRollbackOfPreviousExecution.BackupWriteCapacityUnits }}",
              "OutputType": "Integer"
            }
          ]
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef convert_param_types(events, context):\n    \"\"\"\n    Use this script to convert value types from strings to specific OutputTypes\n    All outputs and inputs from SSM steps received through API calls have string type regardless of their actual type\n    On the other hand various AWS APIs expect params to be in types other than strings\n    \"\"\"\n    output = {}\n    params = events.get('Parameters', [])\n    for param in params:\n        param_name = param.get('Name')\n        value = param.get('Value')\n        output_type = param.get('OutputType')\n        if not param_name or not output_type or 'Value' not in param:\n            raise ValueError(f\"Failed to get function parameters from input payload: {param}\")\n        if output_type not in [\"Float\", \"Integer\", \"Boolean\"]:\n            raise ValueError(f\"Incorrect OutputType in events: {output_type}\")\n\n        if output_type == 'Float':\n            output[param_name] = float(value)\n        if output_type == 'Integer':\n            output[param_name] = int(value)\n        if output_type == 'Boolean':\n            output[param_name] = value.lower() == 'true'\n    return output"
      }
    },
    {
      "name": "AssertDynamoDBTableName",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "RollbackPreviousExecution",
            "Variable": "{{ GetPreviousExecutionInputs.DynamoDBTableName }}",
            "StringEquals": "{{ DynamoDBTableName }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "RollbackPreviousExecution",
      "description": "Revert original RCU value, WCU value is not changed but is required by API",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "dynamodb",
        "Api": "UpdateTable",
        "TableName": "{{ DynamoDBTableName }}",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "{{ ConvertParamTypes.BackupReadCapacityUnits }}",
          "WriteCapacityUnits": "{{ ConvertParamTypes.BackupWriteCapacityUnits }}"
        }
      }
    },
    {
      "name": "WaitForActiveStatusAfterRollbackPrevious",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "isEnd": true
    },
    {
      "name": "AssertBillingModeProvisioned",
      "description": "Asserts that billing mode iS PROVISIONED",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "validate_billing_mode",
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\n\nimport boto3\nfrom botocore.config import Config\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef _execute_boto3_dynamodb(delegate: Callable[[Any], dict]) -> dict:\n    \"\"\"\n    Executes the given delegate with dynamodb client parameter\n    :param delegate: The delegate to execute (with boto3 function)\n    :return: The output of the given function\n    \"\"\"\n    dynamo_db_client = boto3.client('dynamodb', config=boto3_config)\n    description = delegate(dynamo_db_client)\n    if not description['ResponseMetadata']['HTTPStatusCode'] == 200:\n        logging.error(description)\n        raise ValueError('Failed to execute request')\n    return description\n\n\n\ndef _describe_table(table_name: str) -> dict:\n    \"\"\"\n    Describes the given dynamodb table\n    :param table_name: The table name\n    :return: The dictionary of table description properties\n    \"\"\"\n    return _execute_boto3_dynamodb(\n        delegate=lambda x: x.describe_table(TableName=table_name))\n\n\n\ndef validate_billing_mode(events: dict, context: dict) -> None:\n    \"\"\"\n    Validate billing mode to be specific value.\n    :param events: The dictionary that supposed to have the following keys:\n    * `ExpectedValues` - The list of values the property expected to be\n    * `TableName` - The target table name\n    :return: The status of continuous backup\n    \"\"\"\n    if 'ExpectedValues' not in events:\n        raise KeyError('Requires ExpectedValues')\n    if 'TableName' not in events:\n        raise KeyError('Requires TableName')\n\n    table_name: str = events['TableName']\n    expected_values: List[str] = events['ExpectedValues']\n\n    description = _describe_table(table_name=table_name)\n    billing_mode = description.get('Table', {}).get('BillingModeSummary', {}).get('BillingMode', '')\n\n    # process empty property case\n    if not billing_mode and (not expected_values or '' in expected_values or None in expected_values):\n        return\n    else:\n        if billing_mode not in expected_values:\n            raise ValueError(\n                f'BillingMode is required to be one of the following values {expected_values}, '\n                'but was {match.value}')",
        "InputPayload": {
          "ExpectedValues": [
            "PROVISIONED",
            ""
          ],
          "TableName": "{{ DynamoDBTableName }}"
        }
      }
    },
    {
      "name": "ValidateReadCapacityUnitsLimit",
      "description": "Check that the requested RCU value is valid",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "AssertAlarmToBeGreenBeforeTest",
            "Variable": "{{ ReadCapacityUnitsLimit }}",
            "NumericGreaterOrEquals": 1
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "description": "Ensure alarm is green before starting test. Fail if alarm is not green within expected time.",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ ReadThrottleAlarmName }}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "BackupProvisionedThroughput",
      "description": "Backup original RCU and WCU values for rollback",
      "action": "aws:executeAwsApi",
      "outputs": [
        {
          "Name": "BackupReadCapacityUnits",
          "Selector": "$.Table.ProvisionedThroughput.ReadCapacityUnits",
          "Type": "Integer"
        },
        {
          "Name": "BackupWriteCapacityUnits",
          "Selector": "$.Table.ProvisionedThroughput.WriteCapacityUnits",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}"
      }
    },
    {
      "name": "UpdateTableRCU",
      "description": "Update RCU value, WCU is not changed but required by API",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "dynamodb",
        "Api": "UpdateTable",
        "TableName": "{{ DynamoDBTableName }}",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "{{ ReadCapacityUnitsLimit }}",
          "WriteCapacityUnits": "{{ BackupProvisionedThroughput.BackupWriteCapacityUnits }}"
        }
      }
    },
    {
      "name": "WaitForActiveStatusAfterUpdateTableRCU",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback"
    },
    {
      "name": "AssertAlarmToBeRed",
      "description": "Wait for expected alarm to be red after failure is injected",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ ReadThrottleAlarmName }}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "RollbackCurrentExecution",
      "description": "Revert original RCU value, WCU value is not changed but is required by API",
      "action": "aws:executeAwsApi",
      "maxAttempts": 5,
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Service": "dynamodb",
        "Api": "UpdateTable",
        "TableName": "{{ DynamoDBTableName }}",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "{{ BackupProvisionedThroughput.BackupReadCapacityUnits }}",
          "WriteCapacityUnits": "{{ BackupProvisionedThroughput.BackupWriteCapacityUnits }}"
        }
      }
    },
    {
      "name": "WaitForActiveStatusAfterRollbackToPreviousTableRCU",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "description": "Wait for the alarm to be green after test is complete",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ ReadThrottleAlarmName }}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
