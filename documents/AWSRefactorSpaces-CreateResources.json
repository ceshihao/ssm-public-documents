{
  "description": "Accelerates refactoring by creating a Migration Hub Refactor Spaces environment and routing to an EC2 instance. Required permissions: https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/security-iam-awsmanpol.html#SSMAutomationPolicy",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "ChooseEnvironmentId.EnvironmentId",
    "CreateApplication.ApplicationId",
    "CreateService.ServiceId",
    "CreateRoute.RouteId",
    "DescribeInstance.VpcId",
    "DescribeInstance.PrivateIpAddress",
    "GetSecurityGroupIdList.SecurityGroupIds"
  ],
  "parameters": {
    "EnvironmentName": {
      "type": "String",
      "description": "(Optional) The name of the newly created environment.",
      "allowedPattern": "^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$",
      "default": "RefactorSpacesEnvironment"
    },
    "EnvironmentId": {
      "type": "String",
      "description": "(Optional) The ID of an existing environment to use.",
      "allowedPattern": "^$|^env-[0-9A-Za-z]{10}$",
      "default": ""
    },
    "ApplicationVpcId": {
      "type": "String",
      "description": "(Optional) The ID of the existing VPC to create the new application in.",
      "allowedPattern": "^$|^vpc-[0-9A-Za-z]{17}$",
      "default": ""
    },
    "NetworkFabricType": {
      "type": "String",
      "description": "(Optional) The network fabric type of the environment.",
      "default": "NONE",
      "allowedValues": [
        "NONE",
        "TRANSIT_GATEWAY"
      ]
    },
    "AccountIdsToShareEnvironment": {
      "type": "StringList",
      "description": "(Optional) Comma separated list of AWS Account IDs to share the Refactor Spaces Environment.",
      "default": [],
      "allowedPattern": "^(\\d{12})(,\\s*\\d{12})*$"
    },
    "ApplicationName": {
      "type": "String",
      "description": "(Required) The name of the newly created application.",
      "allowedPattern": "^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$"
    },
    "ServiceName": {
      "type": "String",
      "description": "(Required) The name of the newly created service.",
      "allowedPattern": "^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$"
    },
    "Protocol": {
      "type": "String",
      "description": "(Required) The protocol (HTTP or HTTPS) of the URL endpoint.",
      "allowedValues": [
        "http",
        "https"
      ]
    },
    "Port": {
      "type": "String",
      "description": "(Required) The port number of the URL endpoint.",
      "allowedPattern": "^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-9]{1,4}))$"
    },
    "UriPath": {
      "type": "String",
      "description": "(Required) The HTTP path of the URL endpoint. Traffic will be sent to the EC2 instance's IP and this path by default.",
      "allowedPattern": "^(/([-a-zA-Z0-9+\\\\x38@#\\/%=~_|]?)+)+$"
    },
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the EC2 instance hosting the application.",
      "allowedPattern": "^i-[0-9A-Za-z]{17}$"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the service role that the automation script execution will assume."
    }
  },
  "mainSteps": [
    {
      "name": "VerifyInstanceExists",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "onFailure": "Abort",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "describe_instance_status",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "description": "## VerifyInstanceExists\nThis step checks that the given EC2 Instance Id exists. \n## Inputs\n- InstanceId\n## Outputs\nNone. It throws an error if the instance does not exist."
    },
    {
      "name": "FetchInstanceRefactorSpacesSSMTags",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "onFailure": "Abort",
      "onCancel": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "describe_tags",
        "Filters": [
          {
            "Name": "resource-id",
            "Values": [
              "{{ InstanceId }}"
            ]
          },
          {
            "Name": "key",
            "Values": [
              "refactor-spaces:ssm:environment-id",
              "refactor-spaces:ssm:optin"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "Tags",
          "Selector": "$.Tags",
          "Type": "MapList"
        }
      ],
      "description": "## FetchInstanceRefactorSpacesSSMTags\nThis step fetches the tags with the keys 'refactor-spaces:ssm:environment-id' and 'refactor-spaces:ssm:optin'.\n## Inputs\n- InstanceId\n## Outputs\n- Tags"
    },
    {
      "name": "VerifyInstanceTags",
      "isCritical": false,
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "verify_instance_tags",
        "InputPayload": {
          "Tags": "{{FetchInstanceRefactorSpacesSSMTags.Tags}}"
        },
        "Script": "def verify_instance_tags(events, context):\n\n  tags = events[\"Tags\"]\n  is_instance_opted_in = False;\n\n  for tag in tags:\n    if tag[\"Key\"] == 'refactor-spaces:ssm:environment-id':\n      raise Exception(f'The EC2 instance is already present in Refactor Spaces environment with ID: { tag[\"Value\"] }')\n    if tag[\"Key\"] == 'refactor-spaces:ssm:optin' and tag[\"Value\"] == 'true':\n      is_instance_opted_in = True;\n\n  if not is_instance_opted_in:\n    raise Exception(\"The EC2 instance does not have a tag with the key 'refactor-spaces:ssm:optin' with it's value set to true.\")\n"
      },
      "description": "## VerifyInstanceTags\nThis step checks if the EC2 instance has\n- a tag with the key 'refactor-spaces:ssm:environment-id' and \n- a tag with the key 'refactor-spaces:ssm:optin' and value 'true'.\n## Inputs\n- Tags\n## Outputs\n- None. Script execution is terminated if there is a tag with the key 'refactor-spaces:ssm:environment-id' or if the tag with key 'refactor-spaces:ssm:optin' is not set to true."
    },
    {
      "name": "DescribeInstance",
      "action": "aws:executeScript",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "onFailure": "Abort",
      "onCancel": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_instance_vpc_and_private_ip",
        "InputPayload": {
          "InstanceId": "{{InstanceId}}"
        },
        "Script": "def get_instance_vpc_and_private_ip(events, context):\n  import ipaddress\n  import boto3\n\n  instance_id = events[\"InstanceId\"]\n\n  #Initialize client\n  client = boto3.client('ec2')\n\n  # Fetch instance details\n  describe_instances_response = client.describe_instances(Filters=[{'Name': 'instance-id', 'Values': [instance_id]}])\n  \n  instance_details = describe_instances_response['Reservations'][0]['Instances'][0]\n\n  private_ip_address = instance_details.get('PrivateIpAddress', None)\n  vpc_id = instance_details.get('VpcId')\n\n  if private_ip_address is None:\n    raise Exception(f'No private IPv4 address found for the given EC2 instance: { instance_id }')\n\n  try:\n    ipaddress.IPv4Address(private_ip_address)\n  except ipaddress.AddressValueError:\n    raise Exception(f'The private ip address { privateIpAddress } is not a valid IPv4 address.')\n  \n  return { \"PrivateIpAddress\": private_ip_address, \"VpcId\": vpc_id }\n"
      },
      "outputs": [
        {
          "Name": "VpcId",
          "Selector": "$.Payload.VpcId",
          "Type": "String"
        },
        {
          "Name": "PrivateIpAddress",
          "Selector": "$.Payload.PrivateIpAddress",
          "Type": "String"
        }
      ],
      "description": "## DescribeInstance\nThis step fetches the VPC ID and the private IPv4 of the given EC2 instance.\n## Inputs\n- InstanceId\n## Outputs\n- VpcId\n- PrivateIpAddress"
    },
    {
      "name": "UseInstanceVpcOrVerifyApplicationVpc",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "ChooseApplicationVpcId",
            "Variable": "{{ ApplicationVpcId }}",
            "StringEquals": ""
          }
        ],
        "Default": "VerifyApplicationVpcExists"
      },
      "description": "## UseInstanceVpcOrVerifyApplicationVpc\nThis step checks whether an application VPC ID was provided, and if so, continues to verify if the VPC exists.\n## Inputs\n- ApplicationVpcId\n## Outputs\nNone. Picks either ChooseApplicationVpcId or VerifyApplicationVpcExists as the next step."
    },
    {
      "name": "VerifyApplicationVpcExists",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "onFailure": "Abort",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "describe_vpcs",
        "VpcIds": [
          "{{ ApplicationVpcId }}"
        ]
      },
      "description": "## VerifyApplicationVpcExists\nThis step checks that the given VPC ID to create an application exists. \n## Inputs\n- ApplicationVpcId\n## Outputs\nNone. It throws an error if the VPC does not exist."
    },
    {
      "name": "ChooseApplicationVpcId",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "choose_application_vpc_id",
        "InputPayload": {
          "InstanceVpcId": "{{DescribeInstance.VpcId}}",
          "ApplicationVpcId": "{{ ApplicationVpcId }}"
        },
        "Script": "def choose_application_vpc_id(events, context):\n  instanceVpcId = events[\"InstanceVpcId\"]\n  applicationVpcId = events[\"ApplicationVpcId\"]\n  vpcIdToUse = applicationVpcId if applicationVpcId != \"\" else instanceVpcId\n  return { \"ApplicationVpcId\": vpcIdToUse }\n"
      },
      "outputs": [
        {
          "Name": "ApplicationVpcId",
          "Selector": "$.Payload.ApplicationVpcId",
          "Type": "String"
        }
      ],
      "description": "## ChooseApplicationVpcId\nThis step picks either the instance's VPC ID or the provided VPC ID to create the Refactor Spaces application.\n## Inputs\n- InstanceVpcId\n- ApplicationVpcId\n## Outputs\n- ApplicationVpcId (to use in future steps)"
    },
    {
      "name": "GetOrCreateEnvironment",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CreateEnvironment",
            "Variable": "{{EnvironmentId}}",
            "StringEquals": ""
          }
        ],
        "Default": "GetEnvironment"
      },
      "description": "## GetOrCreateEnvironment\nThis step checks whether an existing environment ID was provided, and if so, uses that environment. Otherwise, it decides to create a new environment.\n## Inputs\n- EnvironmentId\n## Outputs\nNone. Picks either CreateEnvironment or GetEnvironment as the next step."
    },
    {
      "name": "CreateEnvironment",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "Abort",
      "onCancel": "Abort",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "create_environment",
        "Name": "{{ EnvironmentName }}",
        "NetworkFabricType": "{{ NetworkFabricType }}",
        "Tags": {
          "refactor-spaces:ssm:automation": "create-resources"
        }
      },
      "outputs": [
        {
          "Name": "EnvironmentId",
          "Selector": "$.EnvironmentId",
          "Type": "String"
        }
      ],
      "nextStep": "VerifyEnvironmentCreation",
      "description": "## CreateEnvironment\nThis step creates an environment with given environment name. It uses default name if a name was not provided. \n## Inputs\n- EnvironmentName\n## Outputs\n- EnvironmentId"
    },
    {
      "name": "VerifyEnvironmentCreation",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 480,
      "maxAttempts": 1,
      "onFailure": "step:DeleteEnvironmentAndPollForDeletion",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "get_environment",
        "EnvironmentIdentifier": "{{ CreateEnvironment.EnvironmentId }}",
        "PropertySelector": "$.State",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "description": "## VerifyEnvironmentCreation\nThis step waits until the created environment has turned to an active state.\n## Inputs\n- EnvironmentId\n## Outputs\nNone"
    },
    {
      "name": "AddRefactorSpacesSSMTagToInstance",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "step:DeleteEnvironmentAndPollForDeletion",
      "inputs": {
        "Service": "ec2",
        "Api": "create_tags",
        "Resources": [
          "{{ InstanceId }}"
        ],
        "Tags": [
          {
            "Key": "refactor-spaces:ssm:environment-id",
            "Value": "{{ CreateEnvironment.EnvironmentId }}"
          }
        ]
      },
      "nextStep": "ChooseEnvironmentId",
      "description": "## AddRefactorSpacesSSMTagToInstance\nThis step adds 'refactor-spaces:ssm:environment-id' tag to the EC2 instance.\n## Inputs\n- InstanceId\n- EnvironmentId\n## Outputs\nNone"
    },
    {
      "name": "GetEnvironment",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Abort",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "get_environment",
        "EnvironmentIdentifier": "{{ EnvironmentId }}",
        "PropertySelector": "$.State",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "nextStep": "ChooseEnvironmentId",
      "description": "## GetEnvironment\nThis step verifies that the provided Environment ID exists.\n## Inputs\n- EnvironmentId\n## Outputs\nNone"
    },
    {
      "name": "ChooseEnvironmentId",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "choose_environment",
        "InputPayload": {
          "CreatedEnvironmentId": "{{ CreateEnvironment.EnvironmentId }}",
          "ExistingEnvironmentId": "{{ EnvironmentId }}"
        },
        "Script": "def choose_environment(events, context):\n  createdEnvironmentId = events[\"CreatedEnvironmentId\"]\n  existingEnvironmentId = events[\"ExistingEnvironmentId\"]\n  environmentIdToUse = existingEnvironmentId if existingEnvironmentId != \"\" else createdEnvironmentId\n  return { \"EnvironmentId\": environmentIdToUse }\n"
      },
      "outputs": [
        {
          "Name": "EnvironmentId",
          "Selector": "$.Payload.EnvironmentId",
          "Type": "String"
        }
      ],
      "description": "## ChooseEnvironmentId\nThis step picks either the created environment ID or provided environment ID, so it can be used by subsequent steps.\n## Inputs\n- ExistingEnvironmentId\n- CreatedEnvironmentId\n## Outputs\n- EnvironmentId (to use in future steps)"
    },
    {
      "name": "ParseAccountIds",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_number_of_account_ids",
        "InputPayload": {
          "AccountIds": "{{ AccountIdsToShareEnvironment }}"
        },
        "Script": "def get_number_of_account_ids(events, context):\n  accountIds = events[\"AccountIds\"]\n  accountIdsList = []\n  for accountId in accountIds:\n    accountIdsList += [account.replace(\" \",\"\") for account in accountId.split(\",\")]\n  numberOfAccountIds = len(accountIdsList)\n  return { \"NumberOfAccountIds\": numberOfAccountIds,\n           \"AccountIds\": accountIdsList}\n"
      },
      "outputs": [
        {
          "Name": "NumberOfAccountIds",
          "Selector": "$.Payload.NumberOfAccountIds",
          "Type": "Integer"
        },
        {
          "Name": "AccountIds",
          "Selector": "$.Payload.AccountIds",
          "Type": "StringList"
        }
      ],
      "description": "## ParseAccountIds\nThis step returns the number of AWS account Ids to share the Refactor Spaces environment.\n## Inputs\n- AccountIdsToShareEnvironment\n## Outputs\n- NumberOfAccountIds"
    },
    {
      "name": "SkipOrShareEnvironment",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CreateApplication",
            "Variable": "{{ ParseAccountIds.NumberOfAccountIds }}",
            "NumericEquals": 0
          }
        ],
        "Default": "SendEnvironmentShareInvitation"
      },
      "description": "## SkipOrShareEnvironment\nThis step checks if there are any account IDs to share the Refactor Spaces Environment with. If yes, it proceeds to send the share environment invitation.\n## Inputs\n- AccountIdsToShareEnvironment\n## Outputs\nNone. Picks either CreateApplication or SendEnvironmentShareInvitation as the next step."
    },
    {
      "name": "SendEnvironmentShareInvitation",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "step:FinishOrDeleteCreatedEnvironment",
      "inputs": {
        "Service": "ram",
        "Api": "create_resource_share",
        "name": "{{ EnvironmentName }}",
        "principals": "{{ ParseAccountIds.AccountIds }}",
        "resourceArns": [
          "arn:aws:refactor-spaces:{{ global:REGION }}:{{ global:ACCOUNT_ID }}:environment/{{ ChooseEnvironmentId.EnvironmentId }}"
        ]
      },
      "outputs": [
        {
          "Name": "ResourceShareArn",
          "Selector": "$.resourceShare.resourceShareArn",
          "Type": "String"
        }
      ],
      "description": "## SendEnvironmentShareInvitation\nThis step sends an invitation to share the Refactor Spaces Environment\n## Inputs\n- EnvironmentName\n- EnvironmentId\n- AccountId\n## Outputs\n- ResourceShareArn"
    },
    {
      "name": "CreateApplication",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "step:FinishOrDeleteCreatedEnvironment",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "create_application",
        "ProxyType": "API_GATEWAY",
        "Name": "{{ ApplicationName }}",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "VpcId": "{{ChooseApplicationVpcId.ApplicationVpcId}}",
        "Tags": {
          "refactor-spaces:ssm:automation": "create-resources"
        }
      },
      "outputs": [
        {
          "Name": "ApplicationId",
          "Selector": "$.ApplicationId",
          "Type": "String"
        }
      ],
      "description": "## CreateApplication\nThis step creates an application with given application name. It uses default name if a name was not provided. \n## Inputs\n- EnvironmentId\n- VpcId\n- ApplicationName\n## Outputs\n- ApplicationId"
    },
    {
      "name": "VerifyApplicationCreation",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "maxAttempts": 1,
      "onFailure": "step:DeleteApplicationAndPollForDeletion",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "get_application",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "ApplicationIdentifier": "{{ CreateApplication.ApplicationId }}",
        "PropertySelector": "$.State",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "description": "## VerifyApplicationCreation\nThis step waits until the created application has turned to an active state.\n## Inputs\n- EnvironmentId\n- ApplicationId\n## Outputs\nNone"
    },
    {
      "name": "CreateService",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "step:DeleteApplicationAndPollForDeletion",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "create_service",
        "EndpointType": "URL",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "ApplicationIdentifier": "{{ CreateApplication.ApplicationId }}",
        "Name": "{{ServiceName}}",
        "VpcId": "{{DescribeInstance.VpcId}}",
        "UrlEndpoint": {
          "Url": "{{ Protocol }}://{{ DescribeInstance.PrivateIpAddress }}:{{ Port }}{{ UriPath }}"
        },
        "Tags": {
          "refactor-spaces:ssm:automation": "create-resources"
        }
      },
      "outputs": [
        {
          "Name": "ServiceId",
          "Selector": "$.ServiceId",
          "Type": "String"
        }
      ],
      "description": "## CreateService\nThis step creates a service with given service name. It uses default name if a name was not provided. \n## Inputs\n- EnvironmentId\n- ApplicationId\n- ServiceName\n## Outputs\n- ServiceId"
    },
    {
      "name": "VerifyServiceCreation",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 240,
      "maxAttempts": 1,
      "onFailure": "step:DeleteServiceAndPollForDeletion",
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "get_service",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "ApplicationIdentifier": "{{ CreateApplication.ApplicationId }}",
        "ServiceIdentifier": "{{ CreateService.ServiceId }}",
        "PropertySelector": "$.State",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "description": "## VerifyServiceCreation\nThis step waits until the created service has turned to an active state.\n## Inputs\n- EnvironmentId\n- ApplicationId\n- ServiceId\n## Outputs\nNone"
    },
    {
      "name": "SkipOrModifyInstanceSecurityGroups",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CreateRoute",
            "Variable": "{{NetworkFabricType}}",
            "StringEquals": "NONE"
          }
        ],
        "Default": "GetRefactorSpacesSecurityGroup"
      },
      "description": "## SkipOrModifyInstanceSecurityGroups\nThis step checks if the NetworkFabricType is NONE, and if so, skips adding RefactorSpacesSecurityGroup to the instance.\n## Inputs\n- NetworkFabricType\n## Outputs\nNone. Picks either CreateRoute or GetRefactorSpacesSecurityGroup as the next step."
    },
    {
      "name": "GetRefactorSpacesSecurityGroup",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "inputs": {
        "Service": "ec2",
        "Api": "describe_security_groups",
        "Filters": [
          {
            "Name": "vpc-id",
            "Values": [
              "{{DescribeInstance.VpcId}}"
            ]
          },
          {
            "Name": "group-name",
            "Values": [
              "RefactorSpacesSecurityGroup"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "RefactorSpacesSecurityGroupId",
          "Selector": "$.SecurityGroups[0].GroupId",
          "Type": "String"
        }
      ],
      "description": "## GetRefactorSpacesSecurityGroup\nThis step fetches the ID of the Refactor Spaces security group. It is created when an application is created.\n## Inputs\n- VpcId\n## Outputs\n- RefactorSpacesSecurityGroupId"
    },
    {
      "name": "GetInstanceSecurityGroups",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "inputs": {
        "Service": "ec2",
        "Api": "describe_instances",
        "Filters": [
          {
            "Name": "instance-id",
            "Values": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "OriginalSecurityGroups",
          "Selector": "$.Reservations[0].Instances[0].NetworkInterfaces[0].Groups",
          "Type": "MapList"
        }
      ],
      "description": "## GetInstanceSecurityGroups\nThis step fetches the security groups that exist on the instance. \n## Inputs\n - InstanceId\n## Outputs\n- OriginalSecurityGroups"
    },
    {
      "name": "GetSecurityGroupIdList",
      "action": "aws:executeScript",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_security_group_id_list",
        "InputPayload": {
          "RefactorSpacesSecurityGroupId": "{{ GetRefactorSpacesSecurityGroup.RefactorSpacesSecurityGroupId }}",
          "OriginalSecurityGroups": "{{ GetInstanceSecurityGroups.OriginalSecurityGroups }}"
        },
        "Script": "def get_security_group_id_list(events, context):\n  refactorSpacesId = events[\"RefactorSpacesSecurityGroupId\"]\n  originalSecurityGroups = events[\"OriginalSecurityGroups\"]\n  securityGroupIds = [sg.get(\"GroupId\") for sg in originalSecurityGroups]\n  securityGroupIds.append(refactorSpacesId)\n  return { \"SecurityGroupIds\": securityGroupIds }\n"
      },
      "outputs": [
        {
          "Name": "SecurityGroupIds",
          "Selector": "$.Payload.SecurityGroupIds",
          "Type": "StringList"
        }
      ],
      "description": "## GetSecurityGroupIdList\nThis step creates a list of security group IDs from the Refactor Spaces Security Group and the existing security groups on the instance.\n## Inputs\n - RefactorSpacesSecurityGroupId\n- OriginalSecurityGroups\n## Outputs\n- SecurityGroupIds"
    },
    {
      "name": "ModifyInstanceSecurityGroups",
      "isCritical": false,
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "onFailure": "Abort",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "modify_instance_attribute",
        "InstanceId": "{{ InstanceId }}",
        "Groups": "{{ GetSecurityGroupIdList.SecurityGroupIds }}"
      },
      "description": "## ModifyInstanceSecurityGroups\nThis step updates the security groups of the instance to include the Refactor Spaces security group. \n## Inputs\n- InstanceId\n- Groups\n## Outputs\nNone"
    },
    {
      "name": "CreateRoute",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "create_route",
        "ApplicationIdentifier": "{{ CreateApplication.ApplicationId }}",
        "ServiceIdentifier": "{{ CreateService.ServiceId }}",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "RouteType": "DEFAULT",
        "Tags": {
          "refactor-spaces:ssm:automation": "create-resources"
        }
      },
      "outputs": [
        {
          "Name": "RouteId",
          "Selector": "$.RouteId",
          "Type": "String"
        }
      ],
      "description": "## CreateRoute\nThis step creates a default route to the created service.\n## Inputs\n- EnvironmentId\n- ApplicationId\n## Outputs\n- RouteId"
    },
    {
      "name": "VerifyRouteCreation",
      "isCritical": false,
      "onFailure": "Abort",
      "isEnd": true,
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 480,
      "maxAttempts": 1,
      "inputs": {
        "Service": "migration-hub-refactor-spaces",
        "Api": "get_route",
        "EnvironmentIdentifier": "{{ ChooseEnvironmentId.EnvironmentId }}",
        "ApplicationIdentifier": "{{ CreateApplication.ApplicationId }}",
        "RouteIdentifier": "{{ CreateRoute.RouteId }}",
        "PropertySelector": "$.State",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "description": "## VerifyRouteCreation\nThis step waits until the created route has turned to an active state.\n## Inputs\n- EnvironmentId\n- ApplicationId\n- RouteId\n## Outputs\nNone"
    },
    {
      "name": "DeleteServiceAndPollForDeletion",
      "action": "aws:executeScript",
      "timeoutSeconds": 240,
      "maxAttempts": 1,
      "nextStep": "DeleteApplicationAndPollForDeletion",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "delete_service_and_poll",
        "InputPayload": {
          "environment_id": "{{ ChooseEnvironmentId.EnvironmentId }}",
          "application_id": "{{ CreateApplication.ApplicationId }}",
          "service_id": "{{ CreateService.ServiceId }}"
        },
        "Script": "def delete_service_and_poll(events,context):\n  import boto3\n  import time\n\n  SERVICE_DELETION_TIMEOUT_SEC = 180 # 3 min\n\n  environment_id = events['environment_id']\n  application_id = events['application_id']\n  service_id = events['service_id']\n\n  #Initialize client\n  client = boto3.client('migration-hub-refactor-spaces')\n\n  # Delete service\n  client.delete_service(EnvironmentIdentifier=environment_id, ApplicationIdentifier=application_id, ServiceIdentifier=service_id)\n\n  # Poll for the service to be deleted\n  time_elapsed = 0\n  while time_elapsed < SERVICE_DELETION_TIMEOUT_SEC:\n      try:\n          client.get_service(EnvironmentIdentifier=environment_id, ApplicationIdentifier=application_id, ServiceIdentifier=service_id)\n      except client.exceptions.ResourceNotFoundException:\n          return\n      else:\n          time.sleep(5)\n          time_elapsed += 5\n\n  raise TimeoutError(f'Service {service_id} not deleted after {SERVICE_DELETION_TIMEOUT_SEC} seconds')"
      },
      "description": "## DeleteServiceAndPollForDeletion\nThis step deletes the service and waits for it to be fully deleted. \n## Inputs\n- EnvironmentId\n- ApplicationId\n- ServiceId\n## Outputs\nNone. It throws an exception if the service takes more than 3 minutes to delete."
    },
    {
      "name": "DeleteApplicationAndPollForDeletion",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "maxAttempts": 1,
      "nextStep": "FinishOrDeleteCreatedEnvironment",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "delete_application_and_poll",
        "InputPayload": {
          "environment_id": "{{ ChooseEnvironmentId.EnvironmentId }}",
          "application_id": "{{ CreateApplication.ApplicationId }}"
        },
        "Script": "def delete_application_and_poll(events,context):\n  import boto3\n  import time\n\n  APPLICATION_DELETION_TIMEOUT_SEC = 600 # 10 min (max time of execute script step)\n\n  environment_id = events['environment_id']\n  application_id = events['application_id']\n\n  #Initialize client\n  client = boto3.client('migration-hub-refactor-spaces')\n\n  # Delete application\n  client.delete_application(EnvironmentIdentifier=environment_id, ApplicationIdentifier=application_id)\n\n  # Poll for the application to be deleted\n  time_elapsed = 0\n  while time_elapsed < APPLICATION_DELETION_TIMEOUT_SEC:\n      try:\n          client.get_application(EnvironmentIdentifier=environment_id, ApplicationIdentifier=application_id)\n      except client.exceptions.ResourceNotFoundException:\n          return\n      else:\n          time.sleep(5)\n          time_elapsed += 5\n\n  raise TimeoutError(f'Application {application_id} not deleted after {APPLICATION_DELETION_TIMEOUT_SEC} seconds')"
      },
      "description": "## DeleteApplicationAndPollForDeletion\nThis step deletes the application and waits for it to be fully deleted. \n## Inputs\n- EnvironmentId\n- ApplicationId\n## Outputs\nNone. It throws an exception if the application takes more than 10 minutes to delete."
    },
    {
      "name": "DeleteEnvironmentAndPollForDeletion",
      "action": "aws:executeScript",
      "timeoutSeconds": 660,
      "maxAttempts": 1,
      "nextStep": "RemoveRefactorSpacesSSMTagFromInstance",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "delete_environment_and_poll",
        "InputPayload": {
          "environment_id": "{{ CreateEnvironment.EnvironmentId }}"
        },
        "Script": "def delete_environment_and_poll(events,context):\n  import boto3\n  import time\n\n  ENVIRONMENT_DELETION_TIMEOUT_SEC = 300 # 5 min\n\n  environment_id = events['environment_id']\n\n  #Initialize client\n  client = boto3.client('migration-hub-refactor-spaces')\n\n  # Delete environment\n  client.delete_environment(EnvironmentIdentifier=environment_id)\n\n  # Poll for the environment to be deleted\n  time_elapsed = 0\n  while time_elapsed < ENVIRONMENT_DELETION_TIMEOUT_SEC:\n      try:\n          client.get_environment(EnvironmentIdentifier=environment_id)\n      except client.exceptions.ResourceNotFoundException:\n          return\n      else:\n          time.sleep(5)\n          time_elapsed += 5\n\n  raise TimeoutError(f'Environment {environment_id} not deleted after {ENVIRONMENT_DELETION_TIMEOUT_SEC} seconds')"
      },
      "description": "## DeleteEnvironmentAndPollForDeletion\nThis step deletes the environment and waits for it to be fully deleted. \n## Inputs\n- EnvironmentId\n## Outputs\nNone. It throws an exception if the environment takes more than 5 minutes to delete."
    },
    {
      "name": "RemoveRefactorSpacesSSMTagFromInstance",
      "timeoutSeconds": 120,
      "maxAttempts": 1,
      "action": "aws:executeAwsApi",
      "isEnd": true,
      "inputs": {
        "Service": "ec2",
        "Api": "delete_tags",
        "Resources": [
          "{{ InstanceId }}"
        ],
        "Tags": [
          {
            "Key": "refactor-spaces:ssm:environment-id"
          }
        ]
      },
      "description": "## RemoveRefactorSpacesSSMTagFromInstance\nThis step removes the Refactor Spaces SSM tag from the EC2 instance. \n## Inputs\n- InstanceId\n## Outputs\nNone."
    },
    {
      "name": "FinishOrDeleteCreatedEnvironment",
      "timeoutSeconds": 120,
      "maxAttempts": 2,
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "DeleteEnvironmentAndPollForDeletion",
            "Variable": "{{EnvironmentId}}",
            "StringEquals": ""
          }
        ]
      },
      "description": "## FinishOrDeleteCreatedEnvironment\nThis step checks if the script execution created an environment or used an existing one. If it created an environment, it decides to delete the environment. \n## Inputs\n- EnvironmentId\n## Outputs\nNone. Either decides to delete environment and remove the tag or end the script."
    }
  ]
}
