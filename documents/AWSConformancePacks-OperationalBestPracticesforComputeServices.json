{
  "schemaVersion": "1.0",
  "description": "Operational Best Practices for Compute Services",
  "templateBody": {
    "Parameters": {
      "CloudwatchAlarmResourceCheckParamMetricName": {
        "Default": "CPUUtilization",
        "Type": "String"
      },
      "CloudwatchAlarmResourceCheckParamResourceType": {
        "Default": "AWS::EC2::Instance",
        "Type": "String"
      },
      "Ec2VolumeInuseCheckParamDeleteOnTermination": {
        "Default": "TRUE",
        "Type": "String"
      },
      "LambdaConcurrencyCheckParamConcurrencyLimitHigh": {
        "Default": "1000",
        "Type": "String"
      },
      "LambdaConcurrencyCheckParamConcurrencyLimitLow": {
        "Default": "500",
        "Type": "String"
      },
      "ServiceVpcEndpointEnabledLambdaParamServiceName": {
        "Default": "lambda",
        "Type": "String"
      },
      "ServiceVpcEndpointEnabledParamServiceName": {
        "Default": "ec2",
        "Type": "String"
      }
    },
    "Resources": {
      "AutoscalingGroupElbHealthcheckRequired": {
        "Properties": {
          "ConfigRuleName": "autoscaling-group-elb-healthcheck-required",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::AutoScaling::AutoScalingGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AutoscalingLaunchConfigPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "autoscaling-launch-config-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::AutoScaling::LaunchConfiguration"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudwatchAlarmResourceCheck": {
        "Properties": {
          "ConfigRuleName": "cloudwatch-alarm-resource-check",
          "InputParameters": {
            "metricName": {
              "Fn::If": [
                "cloudwatchAlarmResourceCheckParamMetricName",
                {
                  "Ref": "CloudwatchAlarmResourceCheckParamMetricName"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "resourceType": {
              "Fn::If": [
                "cloudwatchAlarmResourceCheckParamResourceType",
                {
                  "Ref": "CloudwatchAlarmResourceCheckParamResourceType"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUDWATCH_ALARM_RESOURCE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsInBackupPlan": {
        "Properties": {
          "ConfigRuleName": "ebs-in-backup-plan",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_IN_BACKUP_PLAN"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsOptimizedInstance": {
        "Properties": {
          "ConfigRuleName": "ebs-optimized-instance",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_OPTIMIZED_INSTANCE"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsSnapshotPublicRestorableCheck": {
        "Properties": {
          "ConfigRuleName": "ebs-snapshot-public-restorable-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2EbsEncryptionByDefault": {
        "Properties": {
          "ConfigRuleName": "ec2-ebs-encryption-by-default",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_EBS_ENCRYPTION_BY_DEFAULT"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2Imdsv2Check": {
        "Properties": {
          "ConfigRuleName": "ec2-imdsv2-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_IMDSV2_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceDetailedMonitoringEnabled": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-detailed-monitoring-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_DETAILED_MONITORING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceManagedBySsm": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-managed-by-systems-manager",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance",
              "AWS::SSM::ManagedInstanceInventory"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_MANAGED_BY_SSM"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceProfileAttached": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-profile-attached",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_PROFILE_ATTACHED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstanceAssociationComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-association-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::AssociationCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstancePatchComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-patch-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::PatchCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2StoppedInstance": {
        "Properties": {
          "ConfigRuleName": "ec2-stopped-instance",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_STOPPED_INSTANCE"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2VolumeInuseCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-volume-inuse-check",
          "InputParameters": {
            "deleteOnTermination": {
              "Fn::If": [
                "ec2VolumeInuseCheckParamDeleteOnTermination",
                {
                  "Ref": "Ec2VolumeInuseCheckParamDeleteOnTermination"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Volume"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_VOLUME_INUSE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EipAttached": {
        "Properties": {
          "ConfigRuleName": "eip-attached",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::EIP"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EIP_ATTACHED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EncryptedVolumes": {
        "Properties": {
          "ConfigRuleName": "encrypted-volumes",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Volume"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ENCRYPTED_VOLUMES"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IncomingSshDisabled": {
        "Properties": {
          "ConfigRuleName": "restricted-ssh",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INCOMING_SSH_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InstancesInVpc": {
        "Properties": {
          "ConfigRuleName": "ec2-instances-in-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INSTANCES_IN_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaConcurrencyCheck": {
        "Properties": {
          "ConfigRuleName": "lambda-concurrency-check",
          "InputParameters": {
            "ConcurrencyLimitHigh": {
              "Fn::If": [
                "lambdaConcurrencyCheckParamConcurrencyLimitHigh",
                {
                  "Ref": "LambdaConcurrencyCheckParamConcurrencyLimitHigh"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ConcurrencyLimitLow": {
              "Fn::If": [
                "lambdaConcurrencyCheckParamConcurrencyLimitLow",
                {
                  "Ref": "LambdaConcurrencyCheckParamConcurrencyLimitLow"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_CONCURRENCY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaDlqCheck": {
        "Properties": {
          "ConfigRuleName": "lambda-dlq-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_DLQ_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaFunctionPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "lambda-function-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaInsideVpc": {
        "Properties": {
          "ConfigRuleName": "lambda-inside-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_INSIDE_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ServiceVpcEndpointEnabled": {
        "Properties": {
          "ConfigRuleName": "service-vpc-endpoint-enabled",
          "InputParameters": {
            "serviceName": {
              "Fn::If": [
                "serviceVpcEndpointEnabledParamServiceName",
                {
                  "Ref": "ServiceVpcEndpointEnabledParamServiceName"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SERVICE_VPC_ENDPOINT_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ServiceVpcEndpointEnabledLambda": {
        "Properties": {
          "ConfigRuleName": "service-vpc-endpoint-enabled-lambda",
          "InputParameters": {
            "serviceName": {
              "Fn::If": [
                "serviceVpcEndpointEnabledlambdaParamServiceName",
                {
                  "Ref": "ServiceVpcEndpointEnabledLambdaParamServiceName"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SERVICE_VPC_ENDPOINT_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      }
    },
    "Conditions": {
      "cloudwatchAlarmResourceCheckParamMetricName": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "CloudwatchAlarmResourceCheckParamMetricName"
              }
            ]
          }
        ]
      },
      "cloudwatchAlarmResourceCheckParamResourceType": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "CloudwatchAlarmResourceCheckParamResourceType"
              }
            ]
          }
        ]
      },
      "ec2VolumeInuseCheckParamDeleteOnTermination": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "Ec2VolumeInuseCheckParamDeleteOnTermination"
              }
            ]
          }
        ]
      },
      "lambdaConcurrencyCheckParamConcurrencyLimitHigh": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "LambdaConcurrencyCheckParamConcurrencyLimitHigh"
              }
            ]
          }
        ]
      },
      "lambdaConcurrencyCheckParamConcurrencyLimitLow": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "LambdaConcurrencyCheckParamConcurrencyLimitLow"
              }
            ]
          }
        ]
      },
      "serviceVpcEndpointEnabledlambdaParamServiceName": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "ServiceVpcEndpointEnabledLambdaParamServiceName"
              }
            ]
          }
        ]
      },
      "serviceVpcEndpointEnabledParamServiceName": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "ServiceVpcEndpointEnabledParamServiceName"
              }
            ]
          }
        ]
      }
    }
  }
}
