{
  "description": "### Document name - AWS-EnableExplorer\n\n## What does this document do?\nThis document enables the Systems Manager Explorer feature.\n\n## Input Parameters\n* AutomationAssumeRole: The ARN of the role that allows Systems Manager Automation to perform actions on your behalf.\n\n## Output Paramaters\nNone\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Systems Manager Automation to perform actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "name": "enableExplorer",
      "action": "aws:executeScript",
      "description": "## What does the step do?\nThis step enables the Systems Manager Explorer feature. It creates the Systems Manager service-linked role, enables all OpsData sources, and sets the ExplorerOnboarded service setting. You can learn more about the Systems Manager Explorer feature and OpsData sources in the Systems Manager Explorer documentation.\n",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "enable_explorer_handler",
        "Script": "import boto3\nimport time\nimport random\nfrom botocore.exceptions import ClientError\nfrom functools import partial, wraps\n\nimport os\nregion = os.environ['AWS_REGION']\n\nSUPPORTED_OPSDATA_SOURCES = [\n    \"ssm-patchmanager\",\n    \"EC2\",\n    \"ConfigCompliance\",\n    \"Association\",\n    \"OpsData-TrustedAdvisor\",\n    \"ComputeOptimizer\",\n    \"SupportCenterCase\"\n]\n\nSERVICE_SETTINGS = {\n    'ssm-patchmanager': '/ssm/opsitem/ssm-patchmanager',\n    'EC2': '/ssm/opsitem/EC2',\n    'ConfigCompliance': '/ssm/opsdata/ConfigCompliance',\n    'Association': '/ssm/opsdata/Association',\n    'OpsData-TrustedAdvisor': '/ssm/opsdata/OpsData-TrustedAdvisor',\n    'ComputeOptimizer': '/ssm/opsdata/ComputeOptimizer',\n    'SupportCenterCase': '/ssm/opsdata/SupportCenterCase'\n}\n\nRESOURCE_TYPE_EC2_INSTANCE = 'ResourceTypeEC2Instance'\n\n\ndef enable_explorer_handler(event, context):\n    opsdata_sources = set(SUPPORTED_OPSDATA_SOURCES)\n\n    # Ignore unsupported OpsData sources\n    if not has_ec2_recording_enabled():\n        opsdata_sources.discard('EC2')\n        opsdata_sources.discard('ConfigCompliance')\n    if not has_premium_support_plan_enabled():\n        opsdata_sources.discard('SupportCenterCase')\n        opsdata_sources.discard('OpsData-TrustedAdvisor')\n    if not should_enable_compute_optimizer():\n        opsdata_sources.discard('ComputeOptimizer')\n\n    iam_client = boto3.client(\"iam\")\n    if not has_ssm_slr(iam_client):\n        print('The service linked role for ssm.amazonaws.com does not exist in target account.',\n            'Attempting to create service linked role')\n        create_ssm_slr(iam_client)\n\n    ssm_client = boto3.client(\"ssm\", region_name=region)\n    for opsdata_source in opsdata_sources:\n        update_service_setting(\n            ssm_client, SERVICE_SETTINGS[opsdata_source], 'Enabled')\n    update_service_setting(\n        ssm_client, '/ssm/opsdata/ExplorerOnboarded', 'true')\n\n\ndef back_off_retry(retryable_api_call=None, api_name=''):\n\n    if retryable_api_call is None:\n        return partial(back_off_retry, api_name=api_name)\n\n    @wraps(retryable_api_call)\n    def retry(*args, **kwargs):\n        max_retry_times = 5\n        current_retry = 0\n        ssm_client = boto3.client(\"ssm\", region_name=region)\n        # Adding jitter to avoid high volume of API call simultaneously\n        jitter = random.random()\n        time.sleep(jitter)\n        retry_interval_time = 0\n        exception = None\n        while current_retry < max_retry_times:\n            try:\n                return retryable_api_call(*args, **kwargs)\n            except (ssm_client.exceptions.InternalServerError, ssm_client.exceptions.TooManyUpdates) as e:\n                print('Encountered recoverable Exception {0} when invoking API {1}.'.format(e, api_name),\n                    'Prepare to retry {0} times'.format(current_retry))\n                exception = e\n                retry_interval_time = calculate_sleep_interval(current_retry)\n            except ClientError as e:\n                if e.response['Error']['Code'] not in ['InternalFailure', 'ServiceUnavailable']:\n                    raise Exception(\n                        \"Exception %s occurs when invoking API %s\" % (e, api_name))\n                exception = e\n                retry_interval_time = calculate_sleep_interval(current_retry)\n            finally:\n                current_retry = current_retry + 1\n                time.sleep(retry_interval_time)\n        raise Exception(\n            'The following Exception persists after reaching maximum retry limit: %s' % (exception))\n    return retry\n\n\ndef calculate_sleep_interval(current_retry):\n    return 2 ** current_retry + random.random()\n\n\n@back_off_retry(api_name='ListRoles')\ndef has_ssm_slr(iam_client):\n    response = iam_client.list_roles(\n        PathPrefix='/aws-service-role/ssm.amazonaws.com/')\n    return len(response.get('Roles', [])) > 0\n\n\n@back_off_retry(api_name='CreateServiceLinkedRole')\ndef create_ssm_slr(iam_client):\n    iam_client.create_service_linked_role(AWSServiceName=\"ssm.amazonaws.com\")\n\n\n@back_off_retry(api_name='UpdateServiceSetting')\ndef update_service_setting(ssm_client, setting_id, setting_value):\n    get_service_setting_response = ssm_client.get_service_setting(\n        SettingId=setting_id)\n    # Only Enable Data Source if customer not intentionally disable the sources\n    if get_service_setting_response['ServiceSetting']['Status'] == 'Default':\n        ssm_client.update_service_setting(\n            SettingId=setting_id, SettingValue=setting_value)\n\n\n@back_off_retry(api_name='DescribeConfigurationRecorders')\ndef has_ec2_recording_enabled():\n    config_client = boto3.client(\"config\", region_name=region)\n    response = config_client.describe_configuration_recorders()\n    if len(response.get('ConfigurationRecorders', [])) > 0:\n        for configuration_recorder in response['ConfigurationRecorders']:\n            record_group = configuration_recorder.get('recordingGroup')\n            if (record_group and\n                    record_group.get('allSupported')):\n                return True\n            resource_types = record_group.get('resourceTypes')\n            if (resource_types and\n                    RESOURCE_TYPE_EC2_INSTANCE in resource_types):\n                return True\n    return False\n\n\n@back_off_retry(api_name='DescribeTrustedAdvisorCheck')\ndef has_premium_support_plan_enabled():\n    support_client = boto3.client('support', region_name='us-east-1')\n    try:\n        support_client.describe_trusted_advisor_checks(language='en')\n        return True\n    except Exception as e:\n        print(\n            'Trusted Advisor Data source is not enabled due to {0}'.format(e))\n        return False\n\n\n@back_off_retry(api_name='GetEnrollmentStatus')\ndef should_enable_compute_optimizer():\n    support_regions = [\n        'us-east-2',\n        'us-east-1',\n        'us-west-1',\n        'us-west-2',\n        'ap-south-1',\n        'ap-northeast-2',\n        'ap-southeast-1',\n        'ap-southeast-2',\n        'ap-northeast-1',\n        'ca-central-1',\n        'eu-central-1',\n        'eu-west-1',\n        'eu-west-2',\n        'eu-west-3',\n        'eu-north-1',\n        'sa-east-1'\n    ]\n    client = boto3.client('compute-optimizer', region_name=region)\n    if client.meta.region_name in support_regions:\n        response = client.get_enrollment_status()\n        if response.get('status', '') == 'Active':\n            return True\n    return False\n"
      }
    }
  ]
}
