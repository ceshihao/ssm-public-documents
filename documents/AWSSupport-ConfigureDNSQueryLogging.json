{
  "description": "The **AWSSupport-ConfigureDNSQueryLogging** automation runbook allows you to automate DNS query logs configuration. Query log data is published to the Amazon CloudWatch logs, Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis stream you choose. After you've created a DNS query log, you can retrieve and view its data in the chosen destination. For more information, see Public DNS query logs and Resolver DNS query logs.\n\n### Additional Information\nDNS query logs configuration is a feature that enables you to capture DNS queries traffic flow generated from your VPCs or Route53 hosted zones. The data can be used for investigating and troubleshooting connectivity issues.\n### Important\nPlease note that your account will be charged for the costs associated with the storage fees for the AWS Service you want to forward the logs to: CloudWatch logs, S3, or Amazon Kinesis Firehose. For more information see Public DNS query logs and Resolver DNS query logs\n\n Note: If you don't specify a value for `LogDestinationArn`, the runbook tries to create a new CloudWatch log group with the name `AWSSupport-ConfigureDNSQueryLogging-<automation:EXECUTION_ID>`. When the automation creates the new CloudWatch log group, it sets the number of days to retain the log data to 14 days. Public DNS query logs only support CloudWatch log group as `LogDestinationArn`. \n\n### Disabling DNS query logs\nTo disable the DNS query logs configuration after it has been run, follow these steps:\n\n1. For Public DNS query logs:\n - Open the Amazon Route 53 console.\n - Navigate to the Hosted Zones section.\n - Select the hosted zone for which you want to disable query logging.\n - In the Hosted Zone details pane, click the \"Query Logging\" tab.\n - Click the \"Delete\" button to remove the query logging configuration.\n\n2. For Resolver/Private DNS query logs:\n - Open the Amazon Route 53 console.\n - Navigate to the Resolver section.\n - Select the Resolver Query Logging Configurations tab.\n - Select the query logging configuration you want to disable.\n - Click the \"Delete\" button to remove the configuration.\n - If the configuration is associated with a VPC, you will also need to disassociate it from the VPC before deleting the configuration.\n\nBy following these steps, you can disable the DNS query logs configuration and stop capturing and forwarding the DNS query data to the specified destination.\n\nRun this Automation (console)",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "CreateDNSLogConfig.message"
  ],
  "parameters": {
    "ResourceId": {
      "type": "String",
      "allowedPattern": "(^Z[A-Z0-9_]{4,32}$|^vpc-[a-z0-9]{8,17}$)",
      "description": "(Required) The resource id for which the DNS logging is created.  If you specify `Public` in *QueryLogType*, the resource needs to be the Hosted Zone ID (ex. Z111111QQQQQQQ). If you specify `Resolver/Private`, the resouce needs to be the VPC Id (ex. vpc-1a2b3c4d)."
    },
    "QueryLogType": {
      "type": "String",
      "default": "Public",
      "description": "(Optional) Type of configuration for the DNS logging. The allowed types are `Public` or `Resolver/Private`. **Important**: `Public` DNS query logging is only supported in AWS public regions.",
      "allowedValues": [
        "Public",
        "Resolver/Private"
      ]
    },
    "LogDestinationArn": {
      "type": "String",
      "default": "",
      "description": "(Optional) CloudWatch log group, Amazon S3 bucket or a Kinesis stream ARN for the creation of the Resolver DNS log config. Route53 Public DNS query logging only supports CloudWatch log groups. *Note:* if nothing is specified, the automation will create a CloudWatch log group, stream and the IAM resource policy to put data in it on behalf of Route53.",
      "allowedPattern": "(^arn:(aws[a-zA-Z-]*)?:(logs|s3|kinesis):([\\w+-]+)?:(\\d{12})?:[\\w+-]+(:|\\/)?[\\w+=,.@\\-:\\/*]+$)?"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "ValidateResourceId",
      "description": "Validates the Resource existence and checks if it's the correct Resource type for the *QueryLogType* (Public or Resolver/Private).",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "#\n# Copyright 2010-2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the \"Software\"), to deal in the Software\n# without restriction, including without limitation the rights to use, copy, modify,\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\nimport re\n\nimport boto3\n\nec2 = boto3.client(\"ec2\")\nroute53 = boto3.client(\"route53\")\n\n\ndef script_handler(events, _):\n    \"\"\"\n    Validates the ResourceId exists in the hosted zone if Public, or VPC if Resolver/Private.\n\n    Args:\n        events (dict): A dictionary containing the event data, including the ResourceId and QueryLogType.\n        _ (dict): Unused parameter.\n\n    Returns:\n        None: If the validation passes\n        Raises an exception if the validation fails\n    \"\"\"\n\n    # @Parameters\n    resourceid = events[\"ResourceId\"]\n    querylogtype = events[\"QueryLogType\"]\n\n    vpc_pattern = re.compile(\"^vpc-[a-z0-9]{8,17}$\")\n    host_id_pattern = re.compile(\"^Z[A-Z0-9_]{4,32}$\")\n\n    if querylogtype == \"Public\":\n        if host_id_pattern.match(resourceid):\n            response = route53.get_hosted_zone(Id=resourceid)\n            if resourceid in response[\"HostedZone\"][\"Id\"]:\n                return\n            else:\n                raise RuntimeError(\"Resource Id not found in Route53\")\n        else:\n            raise RuntimeError(\"Resource Id Type is not correct\")\n    elif querylogtype == \"Resolver/Private\":\n        if vpc_pattern.match(resourceid):\n            response = ec2.describe_vpcs(VpcIds=[resourceid])\n            if response[\"Vpcs\"]:\n                return\n            else:\n                raise RuntimeError(\"Resource Id not found in VPCs\")\n        else:\n            raise RuntimeError(\"Resource Id Type is not correct\")\n",
        "InputPayload": {
          "ResourceId": "{{ResourceId}}",
          "QueryLogType": "{{QueryLogType}}",
          "LogDestinationArn": "{{LogDestinationArn}}"
        }
      },
      "onFailure": "Abort",
      "nextStep": "CheckDestinationARN",
      "timeoutSeconds": 120
    },
    {
      "name": "CheckDestinationARN",
      "action": "aws:executeScript",
      "description": "Checks if *LogDestinationArn* parameter it's the correct Destination type (s3, cloudwatch log, or kinesis stream) for the *QueryLogType* (Public or Resolver/Private).",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "#\n# Copyright 2010-2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the \"Software\"), to deal in the Software\n# without restriction, including without limitation the rights to use, copy, modify,\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\nimport re\nimport time\n\nimport boto3\n\n\n# This is the main handler function that will be executed\ndef script_handler(events, context):\n    \"\"\"\n    Check the query log type and log destination ARN, and create a new log group if necessary.\n    Returns the log destination ARN.\n\n    First check if the query log type is \"Public\". If so, create a new log group\n\n    Args:\n        events (dict): A dictionary containing the event data.\n        context (dict): A dictionary containing the context data.\n\n    Returns:\n        str: The log destination ARN.\n    \"\"\"\n\n    # Set the default log retention period to 14 days\n    retention_days = 14\n\n    # Get the account ID, region, execution ID, and AWS partition from the context\n    account_id = context[\"global:ACCOUNT_ID\"]\n    region = context[\"global:REGION\"]\n    executionid = context[\"automation:EXECUTION_ID\"]\n    partition = context[\"global:AWS_PARTITION\"]\n\n    # Get the resource ID, query log type, and log destination ARN from the events\n    querylogtype = events[\"QueryLogType\"]\n    logdestinationarn = events[\"LogDestinationArn\"]\n\n    # Define regular expressions to validate the log destination ARN\n    cwlog_pattern = re.compile(r\"(^arn:(aws[a-zA-Z-]*)?:logs:([\\w+-]+)?:(\\d{12})?:[\\w+-]+(:|\\/)?[\\w+=,.@\\-:\\/*]+$)?\")\n\n    s3_firehose_pattern = re.compile(\n        r\"(^arn:(aws[a-zA-Z-]*)?:(logs|s3|firehose):([\\w+-]+)?:(\\d{12})?:[\\w+-]+(:|\\/)?[\\w+=,.@\\-:\\/*]+$)?\"\n    )\n\n    # Handle public query logging\n    if querylogtype == \"Public\":\n        # If no log destination ARN is provided, create a new log group\n        if logdestinationarn == \"\":\n            logdestinationarn = create_log_group_with_retention(\n                \"us-east-1\", account_id, retention_days, executionid, partition\n            )\n            return logdestinationarn\n        # If the provided ARN is a valid CloudWatch Logs ARN\n        elif cwlog_pattern.match(logdestinationarn):\n            # Public query logging is only supported in commercial regions\n            # Extract the log group name prefix from the ARN\n            loggroupnameprefix = re.sub(\n                \"arn:\" + partition + r\":logs:([\\w+-]+)?:(\\d{12})?:log-group:\", \"\", logdestinationarn\n            )\n            loggroupnameprefix = re.sub(r\"(:\\*)?$\", \"\", loggroupnameprefix)\n\n            # Logs must be in us-east-1 as Route53 is a global service\n            logs = boto3.client(\"logs\", region_name=\"us-east-1\")\n            response = logs.describe_log_groups(logGroupNamePrefix=loggroupnameprefix, limit=1)\n\n            # If the provided ARN matches the log group, return it\n            if logdestinationarn in response[\"logGroups\"][0][\"arn\"]:\n                return logdestinationarn\n            else:\n                raise RuntimeError(\"Destination ARN not found\")\n        else:\n            raise RuntimeError(\n                \"Destination Type is not correct. The destination must be a valid CloudWatch log, S3 bucket, or Kinesis data stream ARN matching the pattern:\\n(^arn:(aws[a-zA-Z-]*)?:(logs|s3|kinesis):([\\\\w+-]+)?:(\\\\d{12})?:[\\\\w+-]+(:|\\\\/)?[\\\\w+=,.@\\\\-:\\\\/*]+$)?\"\n            )\n\n    # Handle private/resolver query logging\n    elif querylogtype == \"Resolver/Private\":\n        # If no log destination ARN is provided, create a new log group\n        if logdestinationarn == \"\":\n            logdestinationarn = create_log_group_with_retention(\n                region, account_id, retention_days, executionid, partition\n            )\n            return logdestinationarn\n        # If the provided ARN is a valid CloudWatch Logs, S3, or Kinesis Firehose ARN\n        elif s3_firehose_pattern.match(logdestinationarn):\n            return logdestinationarn\n        else:\n            raise RuntimeError(\n                \"Destination Type is not correct. The destination must be a valid CloudWatch log, S3 bucket, or Kinesis data stream ARN matching the pattern:\\n(^arn:(aws[a-zA-Z-]*)?:(logs|s3|kinesis):([\\\\w+-]+)?:(\\\\d{12})?:[\\\\w+-]+(:|\\\\/)?[\\\\w+=,.@\\\\-:\\\\/*]+$)?\"\n            )\n\n\n# Function to create a new log group with a specified retention period\ndef create_log_group_with_retention(region, account_id, retention_days, executionid, partition):\n    \"\"\"\n    Create a new log group with a specified retention period.\n\n    Args:\n        region (str): The AWS region.\n        account_id (str): The AWS account ID.\n        retention_days (int): The retention period in days.\n        executionid (str): The execution ID.\n        partition (str): The AWS partition.\n\n    Returns:\n        str: The ARN of the newly created log group.\n    \"\"\"\n\n    logs = boto3.client(\"logs\", region_name=region)\n\n    try:\n        # Create a new log group with a specific name and tag\n        response = logs.create_log_group(\n            logGroupName=\"AWSSupport-ConfigureDNSQueryLogging-\" + executionid,\n            tags={\"Author\": \"Created by AWSSupport-ConfigureDNSQueryLogging automation\"},\n        )\n\n        # If the log group creation is successful\n        if response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n            # Wait for 3 seconds to ensure the log group is created\n            time.sleep(3)\n\n            # Set the retention policy for the log group\n            response = logs.put_retention_policy(\n                logGroupName=\"AWSSupport-ConfigureDNSQueryLogging-\" + executionid, retentionInDays=retention_days\n            )\n\n            # Return the ARN of the newly created log group\n            return f\"arn:{partition}:logs:{region}:{account_id}:log-group:AWSSupport-ConfigureDNSQueryLogging-{executionid}:*\"\n\n    # Handle exceptions\n    except Exception as e:\n        # If the log group already exists, return its ARN\n        if \"ResourceAlreadyExistsException\" in str(e):\n            return f\"arn:{partition}:logs:{region}:{account_id}:log-group:AWSSupport-ConfigureDNSQueryLogging-{executionid}:*\"\n        else:\n            # Raise an exception with an error message\n            raise RuntimeError(\"Something went wrong on Log Group Creation, please check: \" + \"\\n\" + str(e))\n",
        "InputPayload": {
          "ResourceId": "{{ResourceId}}",
          "QueryLogType": "{{QueryLogType}}",
          "LogDestinationArn": "{{LogDestinationArn}}"
        }
      },
      "nextStep": "CheckResourcePolicy",
      "timeoutSeconds": 120,
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "message",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "name": "CheckResourcePolicy",
      "description": "Checks the permission for Route53 to put logs into the CloudWatch log group, and creates the resource policy if it doesn't exist",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "#\n# Copyright 2010-2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the \"Software\"), to deal in the Software\n# without restriction, including without limitation the rights to use, copy, modify,\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\nimport re\n\nimport boto3\n\nec2 = boto3.client(\"ec2\")\nroute53 = boto3.client(\"route53\")\n\n\ndef script_handler(events, _):\n    \"\"\"\n    Check if the Resource Id is a valid VPC ID or a valid Route 53 Hosted Zone ID.\n    If the Resource Id is invalid, it raises a RuntimeError.\n    If the Resource Id is valid, it returns without any output.\n    \"\"\"\n\n    resourceid = events[\"ResourceId\"]\n    querylogtype = events[\"QueryLogType\"]\n\n    vpc_pattern = re.compile(\"^vpc-[a-z0-9]{8,17}$\")\n    host_id_pattern = re.compile(\"^Z[A-Z0-9_]{4,32}$\")\n\n    if querylogtype == \"Public\":\n        if host_id_pattern.match(resourceid):\n            response = route53.get_hosted_zone(Id=resourceid)\n            if resourceid in response[\"HostedZone\"][\"Id\"]:\n                return\n            else:\n                raise RuntimeError(\"Resource Id not found in Route53\")\n        else:\n            raise RuntimeError(\"Resource Id Type is not correct\")\n    elif querylogtype == \"Resolver/Private\":\n        if vpc_pattern.match(resourceid):\n            response = ec2.describe_vpcs(VpcIds=[resourceid])\n            if response[\"Vpcs\"]:\n                return\n            else:\n                raise RuntimeError(\"Resource Id not found in VPCs\")\n        else:\n            raise RuntimeError(\"Resource Id Type is not correct\")\n",
        "InputPayload": {
          "ResourceId": "{{ResourceId}}",
          "QueryLogType": "{{QueryLogType}}",
          "LogDestinationArn": "{{LogDestinationArn}}"
        }
      },
      "onFailure": "Abort",
      "timeoutSeconds": 120,
      "nextStep": "CreateDNSLogConfig"
    },
    {
      "name": "CreateDNSLogConfig",
      "description": "Creates the DNS query logging on the selected destination, based on the Resource Id.",
      "action": "aws:executeScript",
      "timeoutSeconds": 180,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "#\n# Copyright 2010-2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the \"Software\"), to deal in the Software\n# without restriction, including without limitation the rights to use, copy, modify,\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\nimport time\nimport uuid\n\nimport boto3\n\nroute53 = boto3.client(\"route53\")\nroute53resolver = boto3.client(\"route53resolver\")\nroute53resolver = boto3.client(\"route53resolver\")\n\n\ndef script_handler(events, context):\n    \"\"\"\n    Create a Route53 DNS query logging configuration and associates it with a specified resource (e.g., a hosted zone).\n\n    Args:\n        events (dict): A dictionary containing the event data, which includes the ResourceId and QueryLogType.\n        context (dict): A dictionary containing the context data, which includes the account ID, region, and execution ID.\n\n    Returns:\n        dict: The response from the Route53 create_query_logging_config or route53resolver create_resolver_query_log_config API calls.\n\n    Raises:\n        RuntimeError: If there is an error creating the Route53 association or if there is an error with the input validation.\n    \"\"\"\n\n    account_id = context[\"global:ACCOUNT_ID\"]\n    region = context[\"global:REGION\"]\n    executionid = context[\"automation:EXECUTION_ID\"]\n    partition = context[\"global:AWS_PARTITION\"]\n    # @Parameters\n    resourceid = events[\"ResourceId\"]\n    querylogtype = events[\"QueryLogType\"]\n    logdestinationarn = events[\"LogDestinationArn\"]\n\n    # @ Input Validation\n\n    if querylogtype == \"Public\":\n        if logdestinationarn == \"\":\n            logdestinationarn = f\"arn:{partition}:logs:us-east-1:{account_id}:log-group:AWSSupport-ConfigureDNSQueryLogging-{executionid}\"\n        try:\n            response = route53.create_query_logging_config(\n                HostedZoneId=resourceid, CloudWatchLogsLogGroupArn=logdestinationarn\n            )\n            if response[\"QueryLoggingConfig\"][\"HostedZoneId\"] == resourceid:\n                return response\n            else:\n                rollback(None, logdestinationarn, \"us-east-1\", executionid)\n                raise RuntimeError(f\"Error creating the Route53 association: {str(response)}\")\n        except Exception as e:\n            raise RuntimeError(f\"Something went wrong on the DNS query log creation, please check:\\n{str(e)}\")\n    elif querylogtype == \"Resolver/Private\":\n        if logdestinationarn == \"\":\n            logdestinationarn = f\"arn:{partition}:logs:{region}:{account_id}:log-group:AWSSupport-ConfigureDNSQueryLogging-{executionid}\"\n        config_id = None  # Initialize config_id to None\n        try:\n            response = route53resolver.create_resolver_query_log_config(\n                Name=\"ConfigureDNSQueryLogging-\" + executionid,\n                DestinationArn=logdestinationarn,\n                CreatorRequestId=str(uuid.uuid4()),\n                Tags=[{\"Key\": \"Author\", \"Value\": \"Created by the SSM AWSSupport-ConfigureDNSQueryLogging automation\"}],\n            )\n            config_id = response[\"ResolverQueryLogConfig\"][\"Id\"]\n            if (\n                response[\"ResolverQueryLogConfig\"][\"DestinationArn\"] in logdestinationarn\n                and response[\"ResolverQueryLogConfig\"][\"Id\"] is not None\n            ):\n                response = route53resolver.associate_resolver_query_log_config(\n                    ResolverQueryLogConfigId=config_id, ResourceId=resourceid\n                )\n                if response[\"ResolverQueryLogConfigAssociation\"][\"ResourceId\"] == resourceid:\n                    return response\n                else:\n                    rollback(config_id, logdestinationarn, region, executionid)\n                    raise RuntimeError(f\"Error creating the Resolver association: {str(response)}\")\n            else:\n                rollback(config_id, logdestinationarn, region, executionid)\n                raise RuntimeError(f\"Error creating the Resolver log configuration: {str(response)}\")\n        except Exception as e:\n            rollback(config_id, logdestinationarn, region, executionid)\n            raise RuntimeError(f\"Something went wrong on the Resolver DNS query log creation, please check: {str(e)}\")\n\n\ndef rollback(config_id, logdestinationarn, region, executionid):\n    \"\"\"\n    Rolls back the Resolver configuration and log group created.\n\n    Args:\n        config_id: The Resolver configuration ID.\n        logdestinationarn: The log destination ARN.\n        region: The region for the config and logs.\n        executionid: The Execution ID of the runbook execution.\n\n    Returns:\n        Nothing if no issue.\n        RuntimeError if deleting the Resolver configuration or log group fails.\n    \"\"\"\n    logs = boto3.client(\"logs\", region_name=region)\n\n    if config_id is not None:\n        response = route53resolver.delete_resolver_query_log_config(ResolverQueryLogConfigId=config_id)\n        if response[\"ResolverQueryLogConfig\"][\"Id\"] is not config_id:\n            raise RuntimeError(f\"[Rollback] Error deleting the Resolver configuration Id: {config_id}\\n{str(response)}\")\n    if \"AWSSupport-ConfigureDNSQueryLogging\" in logdestinationarn:\n        try:\n            response = logs.delete_log_group(logGroupName=f\"AWSSupport-ConfigureDNSQueryLogging-{executionid}\")\n            time.sleep(3)\n        except Exception as e:\n            raise RuntimeError(f\"[Rollback] Something went wrong on the log group deletion, please check: {str(e)}\")\n    return\n",
        "InputPayload": {
          "ResourceId": "{{ResourceId}}",
          "QueryLogType": "{{QueryLogType}}",
          "LogDestinationArn": "{{LogDestinationArn}}"
        }
      },
      "outputs": [
        {
          "Name": "message",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ],
      "isEnd": true
    }
  ]
}
