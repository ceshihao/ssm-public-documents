{
  "description": "## Id\nAWSResilienceHub-ExceedRestApiGwQuotaTest_2020-09-21\n\n## Intent\nTest REST API Gateway behavior when hitting quota threshold\n\n## Type\nTEST\n\n## Risk\nHigh\n\n## Requirements\n  * REST API Gateway\n  * Alarm for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway\n  * There is constant traffic on API Gateway during test\n\n## Permissions required for AutomationAssumeRole\n  * apigateway:GET\n  * apigateway:PATCH\n  * servicequotas:GetServiceQuota\n  * cloudwatch:DescribeAlarms\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * ssm:GetParameters\n  * iam:PassRole\n\n##### Permissions required to log output to CloudWatch\n  * logs:PutLogEvents\n  * logs:DescribeLogGroups\n  * logs:DescribeLogStreams\n\n## Supports Rollback\nYes, restore original quota limit\n\n## Cancellation behavior\nRestore original quota limit\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) RestApiGwUsagePlanId\n  * type: String\n  * description: The ID of REST API Gateway usage plan to be modified\n\n### (Required) ApiGw4xxAlarmName\n  * type: String\n  * description: Alarm for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway\n\n### (Optional) RestApiGwQuotaLimit\n  * type: Integer\n  * description: The value of quota (requests per period)\n  * default: 1\n\n### (Optional) RestApiGwQuotaPeriod\n  * type: String\n  * description: The value of quota period. Possible values are DAY, WEEK, MONTH\n  * default: 'DAY'\n\n### (Optional) IsRollback\n  * type: String\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\n  * default: false\n\n### (Optional) PreviousExecutionId\n  * type: String\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\n\n## Details\nThe document injects failure by setting REST API Gateway quota limit to 1 request per day (or to the specified value). Alarm for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) should be trigger by traffic on the gateway. In case of issues users should manually restore original quota limit from backup.\n\n## Steps executed in normal flow\n  * CheckIsRollback\n  * AssertAlarmToBeGreenBeforeTest\n  * BackupQuotaConfiguration\n  * SetQuotaConfiguration\n  * AssertAlarmToBeRed\n  * RollbackCurrentExecution\n  * AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n  * CheckIsRollback\n  * GetInputsFromPreviousExecution\n  * AssertRestApiGwUsagePlanId\n  * PrepareRollbackOfPreviousExecution\n  * RollbackPreviousExecution\n\n## Outputs\nNone",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "RestApiGwUsagePlanId": {
      "type": "String",
      "description": "(Required) The ID of REST API Gateway usage plan."
    },
    "ApiGw4xxAlarmName": {
      "type": "String",
      "description": "(Required) Alarm for metric `4XXError` setup for the specified"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "RestApiGwQuotaLimit": {
      "type": "Integer",
      "description": "(Optional) The value of quota (requests per period).",
      "default": 1
    },
    "RestApiGwQuotaPeriod": {
      "type": "String",
      "description": "(Optional) The value of quota period. Possible values are DAY, WEEK, MONTH.",
      "default": "DAY"
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Previous execution id for which resources need to be cleaned up.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetInputsFromPreviousExecution",
            "Variable": "{{ IsRollback }}",
            "EqualsIgnoreCase": "true"
          }
        ],
        "Default": "AssertAlarmToBeGreenBeforeTest"
      }
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwUsagePlanId",
          "Selector": "$.Payload.RestApiGwUsagePlanId[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertRestApiGwUsagePlanId",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "PrepareRollbackOfPreviousExecution",
            "Variable": "{{ GetInputsFromPreviousExecution.RestApiGwUsagePlanId }}",
            "StringEquals": "{{ RestApiGwUsagePlanId }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get original quota limit value and period for rollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwQuotaLimitOriginalValue",
          "Selector": "$.Payload.RestApiGwQuotaLimitOriginalValue[0]",
          "Type": "String"
        },
        {
          "Name": "RestApiGwQuotaPeriodOriginalValue",
          "Selector": "$.Payload.RestApiGwQuotaPeriodOriginalValue[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}",
          "StepName": "BackupQuotaConfiguration",
          "ResponseField": "RestApiGwQuotaLimitOriginalValue,RestApiGwQuotaPeriodOriginalValue"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "RollbackPreviousExecution",
      "description": "Restore original quota limit value and period of the specified Usage Plan from the previous execution",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwQuotaLimitRestoredValue",
          "Selector": "$.Payload.Limit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwQuotaPeriodRestoredValue",
          "Selector": "$.Payload.Period",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "set_limit_and_period",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ GetInputsFromPreviousExecution.RestApiGwUsagePlanId }}",
          "RestApiGwQuotaLimit": "{{ PrepareRollbackOfPreviousExecution.RestApiGwQuotaLimitOriginalValue }}",
          "RestApiGwQuotaPeriod": "{{ PrepareRollbackOfPreviousExecution.RestApiGwQuotaPeriodOriginalValue }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}\n\n\n\ndef wait_limit_and_period_updated(events, context):\n    expected_quota_limit: int = int(events['RestApiGwQuotaLimit'])\n    expected_quota_period: str = events['RestApiGwQuotaPeriod']\n    max_retries: int = events.get('MaxRetries', 40)\n    timeout: int = events.get('Timeout', 15)\n    max_timeout = max_retries * timeout\n    while max_retries > 0:\n        actual_throttling_config = get_throttling_config(events, None)\n        actual_quota_limit = actual_throttling_config['QuotaLimit']\n        actual_quota_period = actual_throttling_config['QuotaPeriod']\n        if actual_quota_limit == expected_quota_limit and actual_quota_period == expected_quota_period:\n            log.info('Quota limit and period updated')\n            return\n        log.info(f'Waiting for expected values: '\n                 f'[QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}], '\n                 f'actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}]')\n        max_retries -= 1\n        time.sleep(timeout)\n\n    raise TimeoutError(f'Error to wait for updated values of QuotaLimit and QuotaPeriod. '\n                       f'Expected values: [QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}]. '\n                       f'Actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}] '\n                       f'Maximum timeout {max_timeout} seconds exceeded!')\n\n\n\ndef set_limit_and_period(events, context):\n    \"\"\"\n    Set usage plan limit and period\n    :return: New limit and period\n    \"\"\"\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId  in events')\n    if 'RestApiGwQuotaLimit' not in events:\n        raise KeyError('Requires RestApiGwQuotaLimit  in events')\n    if 'RestApiGwQuotaPeriod' not in events:\n        raise KeyError('Requires RestApiGwQuotaPeriod  in events')\n\n    usage_plan_id = events['RestApiGwUsagePlanId']\n    new_usage_plan_limit = events['RestApiGwQuotaLimit']\n    new_usage_plan_period = events['RestApiGwQuotaPeriod']\n\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    apigw_client = boto3.client('apigateway', config=config)\n\n    apigw_usage_plan = apigw_client.update_usage_plan(\n        usagePlanId=usage_plan_id,\n        patchOperations=[\n            {\n                'op': 'replace',\n                'path': '/quota/limit',\n                'value': str(new_usage_plan_limit)\n            },\n            {\n                'op': 'replace',\n                'path': '/quota/period',\n                'value': new_usage_plan_period\n            }\n        ])\n    log.debug(f'The response from the API : {apigw_usage_plan}')\n    if apigw_usage_plan['ResponseMetadata']['HTTPStatusCode'] != 200:\n        log.error(f'Failed to update usage plan with id {usage_plan_id}, response is {apigw_usage_plan}')\n        raise ValueError('Failed to update usage plan limit and period')\n\n    wait_limit_and_period_updated(events, None)\n\n    return {\"Limit\": apigw_usage_plan[\"quota\"][\"limit\"],\n            \"Period\": apigw_usage_plan[\"quota\"][\"period\"]}"
      },
      "isEnd": true
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "description": "Ensure alarm is green before starting test. Fail if alarm is not green within expected time.",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ ApiGw4xxAlarmName }}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "BackupQuotaConfiguration",
      "description": "Backup quota configuration of the specified Usage Plan for rollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwQuotaLimitOriginalValue",
          "Selector": "$.Payload.QuotaLimit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwQuotaPeriodOriginalValue",
          "Selector": "$.Payload.QuotaPeriod",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "get_throttling_config",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ RestApiGwUsagePlanId }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}"
      }
    },
    {
      "name": "SetQuotaConfiguration",
      "description": "Inject failure by setting the quota limit to 1 request per day (or to the specified value)",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwQuotaLimitNewValue",
          "Selector": "$.Payload.Limit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwQuotaPeriodNewValue",
          "Selector": "$.Payload.Period",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "set_limit_and_period",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ RestApiGwUsagePlanId }}",
          "RestApiGwQuotaLimit": "{{ RestApiGwQuotaLimit }}",
          "RestApiGwQuotaPeriod": "{{ RestApiGwQuotaPeriod }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}\n\n\n\ndef wait_limit_and_period_updated(events, context):\n    expected_quota_limit: int = int(events['RestApiGwQuotaLimit'])\n    expected_quota_period: str = events['RestApiGwQuotaPeriod']\n    max_retries: int = events.get('MaxRetries', 40)\n    timeout: int = events.get('Timeout', 15)\n    max_timeout = max_retries * timeout\n    while max_retries > 0:\n        actual_throttling_config = get_throttling_config(events, None)\n        actual_quota_limit = actual_throttling_config['QuotaLimit']\n        actual_quota_period = actual_throttling_config['QuotaPeriod']\n        if actual_quota_limit == expected_quota_limit and actual_quota_period == expected_quota_period:\n            log.info('Quota limit and period updated')\n            return\n        log.info(f'Waiting for expected values: '\n                 f'[QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}], '\n                 f'actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}]')\n        max_retries -= 1\n        time.sleep(timeout)\n\n    raise TimeoutError(f'Error to wait for updated values of QuotaLimit and QuotaPeriod. '\n                       f'Expected values: [QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}]. '\n                       f'Actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}] '\n                       f'Maximum timeout {max_timeout} seconds exceeded!')\n\n\n\ndef set_limit_and_period(events, context):\n    \"\"\"\n    Set usage plan limit and period\n    :return: New limit and period\n    \"\"\"\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId  in events')\n    if 'RestApiGwQuotaLimit' not in events:\n        raise KeyError('Requires RestApiGwQuotaLimit  in events')\n    if 'RestApiGwQuotaPeriod' not in events:\n        raise KeyError('Requires RestApiGwQuotaPeriod  in events')\n\n    usage_plan_id = events['RestApiGwUsagePlanId']\n    new_usage_plan_limit = events['RestApiGwQuotaLimit']\n    new_usage_plan_period = events['RestApiGwQuotaPeriod']\n\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    apigw_client = boto3.client('apigateway', config=config)\n\n    apigw_usage_plan = apigw_client.update_usage_plan(\n        usagePlanId=usage_plan_id,\n        patchOperations=[\n            {\n                'op': 'replace',\n                'path': '/quota/limit',\n                'value': str(new_usage_plan_limit)\n            },\n            {\n                'op': 'replace',\n                'path': '/quota/period',\n                'value': new_usage_plan_period\n            }\n        ])\n    log.debug(f'The response from the API : {apigw_usage_plan}')\n    if apigw_usage_plan['ResponseMetadata']['HTTPStatusCode'] != 200:\n        log.error(f'Failed to update usage plan with id {usage_plan_id}, response is {apigw_usage_plan}')\n        raise ValueError('Failed to update usage plan limit and period')\n\n    wait_limit_and_period_updated(events, None)\n\n    return {\"Limit\": apigw_usage_plan[\"quota\"][\"limit\"],\n            \"Period\": apigw_usage_plan[\"quota\"][\"period\"]}"
      }
    },
    {
      "name": "AssertAlarmToBeRed",
      "description": "Wait for expected alarm to be red after failure is injected",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ApiGw4xxAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "RollbackCurrentExecution",
      "description": "Restore quota configuration of the given Usage Plan",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "maxAttempts": 5,
      "outputs": [
        {
          "Name": "RestApiGwQuotaLimitRestoredValue",
          "Selector": "$.Payload.Limit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwQuotaPeriodRestoredValue",
          "Selector": "$.Payload.Period",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "set_limit_and_period",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ RestApiGwUsagePlanId }}",
          "RestApiGwQuotaLimit": "{{ BackupQuotaConfiguration.RestApiGwQuotaLimitOriginalValue }}",
          "RestApiGwQuotaPeriod": "{{ BackupQuotaConfiguration.RestApiGwQuotaPeriodOriginalValue }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}\n\n\n\ndef wait_limit_and_period_updated(events, context):\n    expected_quota_limit: int = int(events['RestApiGwQuotaLimit'])\n    expected_quota_period: str = events['RestApiGwQuotaPeriod']\n    max_retries: int = events.get('MaxRetries', 40)\n    timeout: int = events.get('Timeout', 15)\n    max_timeout = max_retries * timeout\n    while max_retries > 0:\n        actual_throttling_config = get_throttling_config(events, None)\n        actual_quota_limit = actual_throttling_config['QuotaLimit']\n        actual_quota_period = actual_throttling_config['QuotaPeriod']\n        if actual_quota_limit == expected_quota_limit and actual_quota_period == expected_quota_period:\n            log.info('Quota limit and period updated')\n            return\n        log.info(f'Waiting for expected values: '\n                 f'[QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}], '\n                 f'actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}]')\n        max_retries -= 1\n        time.sleep(timeout)\n\n    raise TimeoutError(f'Error to wait for updated values of QuotaLimit and QuotaPeriod. '\n                       f'Expected values: [QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}]. '\n                       f'Actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}] '\n                       f'Maximum timeout {max_timeout} seconds exceeded!')\n\n\n\ndef set_limit_and_period(events, context):\n    \"\"\"\n    Set usage plan limit and period\n    :return: New limit and period\n    \"\"\"\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId  in events')\n    if 'RestApiGwQuotaLimit' not in events:\n        raise KeyError('Requires RestApiGwQuotaLimit  in events')\n    if 'RestApiGwQuotaPeriod' not in events:\n        raise KeyError('Requires RestApiGwQuotaPeriod  in events')\n\n    usage_plan_id = events['RestApiGwUsagePlanId']\n    new_usage_plan_limit = events['RestApiGwQuotaLimit']\n    new_usage_plan_period = events['RestApiGwQuotaPeriod']\n\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    apigw_client = boto3.client('apigateway', config=config)\n\n    apigw_usage_plan = apigw_client.update_usage_plan(\n        usagePlanId=usage_plan_id,\n        patchOperations=[\n            {\n                'op': 'replace',\n                'path': '/quota/limit',\n                'value': str(new_usage_plan_limit)\n            },\n            {\n                'op': 'replace',\n                'path': '/quota/period',\n                'value': new_usage_plan_period\n            }\n        ])\n    log.debug(f'The response from the API : {apigw_usage_plan}')\n    if apigw_usage_plan['ResponseMetadata']['HTTPStatusCode'] != 200:\n        log.error(f'Failed to update usage plan with id {usage_plan_id}, response is {apigw_usage_plan}')\n        raise ValueError('Failed to update usage plan limit and period')\n\n    wait_limit_and_period_updated(events, None)\n\n    return {\"Limit\": apigw_usage_plan[\"quota\"][\"limit\"],\n            \"Period\": apigw_usage_plan[\"quota\"][\"period\"]}"
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "description": "Wait for the alarm to be green after test is complete",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{ApiGw4xxAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
