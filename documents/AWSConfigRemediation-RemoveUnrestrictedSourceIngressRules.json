{
  "schemaVersion": "0.3",
  "description": "### Document Name - AWSConfigRemediation-RemoveUnrestrictedSourceIngressRules\n\n## What does this document do?\nThis runbook removes all ingress rules from the security group you specify that allow traffic from all source addresses using the [RevokeSecurityGroupIngress](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RevokeSecurityGroupIngress.html) API.\n\n\n## Input Parameters\n* SecurityGroupId: (Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.\n* AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.\n\n## Output Parameters\n* RemoveUnrestrictedIngressRulesAndVerify.Response - The standard HTTP response from the RevokeSecurityGroupIngress API.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/[\\w+=,.@-]+"
    },
    "SecurityGroupId": {
      "type": "String",
      "description": "(Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.",
      "allowedPattern": "^sg-[a-z0-9]+$"
    }
  },
  "outputs": [
    "RemoveUnrestrictedIngressRulesAndVerify.Response"
  ],
  "mainSteps": [
    {
      "name": "RemoveUnrestrictedIngressRulesAndVerify",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "isEnd": true,
      "description": "## RemoveUnrestrictedIngressRulesAndVerify\nRemoves all ingress rules that allow traffic from all source addresses from the security group you specified in the SecurityGroupId parameter and verifies successful rules removal.\n## Outputs\n* Response: The standard HTTP response from the RevokeSecurityGroupIngress API.\n",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "remove_sg_unrestricted_ingress_rules",
        "InputPayload": {
          "SecurityGroupId": "{{ SecurityGroupId }}"
        },
        "Script": "import boto3\ndef remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id):\n  paginator = ec2.get_paginator('describe_security_groups')\n  response_iterator = paginator.paginate(\n  Filters=[ {'Name': 'ip-permission.cidr', 'Values': [ '0.0.0.0/0' ] },],\n  GroupIds=[security_group_id]\n  )\n\n  ip_permissions = []\n  for sgs in response_iterator:\n    for sg in sgs.get('SecurityGroups'):\n      for ip in sg.get('IpPermissions'):\n        for range in ip.get('IpRanges'):\n          if(range['CidrIp'] == '0.0.0.0/0'):\n            ip_permissions.append({'FromPort': ip['FromPort'], 'ToPort':ip['ToPort'], 'IpProtocol': ip['IpProtocol'], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]})\n  if ip_permissions:\n    return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)\n\ndef remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id):\n    paginator = ec2.get_paginator('describe_security_groups')\n    response_iterator = paginator.paginate(\n    Filters=[ {'Name': 'ip-permission.ipv6-cidr', 'Values': [ '::/0' ] },],\n    GroupIds=[security_group_id]\n    )\n\n    ip_permissions = []\n    for sgs in response_iterator:\n      for sg in sgs.get('SecurityGroups'):\n        for ip in sg.get('IpPermissions'):\n          for range in ip.get('Ipv6Ranges'):\n            if(range['CidrIpv6'] == '::/0'):\n              ip_permissions.append({'FromPort': ip['FromPort'], 'ToPort':ip['ToPort'], 'IpProtocol': ip['IpProtocol'], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]})\n    if ip_permissions:\n        return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)\n\ndef verify_sg_unrestricted_rules_removed(ec2, security_group_id):\n    error_message = f\"Verification Failed. Security Group {security_group_id} unrestricted ingress rules not removed \"\n\n    unrestricted_ingress_rules_ipv4 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[  {'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0' ]} ])\n    if unrestricted_ingress_rules_ipv4['SecurityGroups']:\n      raise Exception(error_message)\n\n    unrestricted_ingress_rules_ipv6 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[ {'Name': 'ip-permission.ipv6-cidr','Values': ['::/0' ]} ])\n    if unrestricted_ingress_rules_ipv6['SecurityGroups']:\n      raise Exception(error_message)\n\ndef remove_sg_unrestricted_ingress_rules(event, context):\n    \n    ec2 = boto3.client('ec2')\n    security_group_id = event['SecurityGroupId']\n    ipv4_response = remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id)\n    ipv6_response = remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id)\n    \n    verify_sg_unrestricted_rules_removed(ec2, security_group_id)\n\n    response = []\n    if ipv4_response:\n      response.append(ipv4_response)\n    if ipv6_response:\n      response.append(ipv6_response)\n    return response"
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$.Payload",
          "Type": "MapList"
        }
      ]
    }
  ]
}
