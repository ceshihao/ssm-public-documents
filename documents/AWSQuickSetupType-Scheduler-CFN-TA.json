{
  "schemaVersion": "1.0",
  "templateBody": {
    "Description": "(SO00121) - The CloudFormation template for Resource Scheduler Quick Setup",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "TargetTagKey": {
        "Type": "String",
        "Description": "TagKey for identifying instances"
      },
      "TargetTagValue": {
        "Description": "TagValue for identifying instances",
        "Type": "String"
      },
      "ICalendarString": {
        "Description": "iCal string format to create Change Calendar resource",
        "Type": "String"
      },
      "QSConfigurationId": {
        "Type": "String",
        "Description": "(Required) Unique identifier of the deployed configuration"
      },
      "QSType": {
        "Type": "String",
        "AllowedValues": [
          "LA",
          "TA"
        ],
        "Default": "TA",
        "Description": "(Required) Specifies whether the Quick Setup applies to the local account or an AWS organization."
      },
      "QSAttachConfigurationPolicy": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether to attach Configuration permissions policy which sets boundaries of what configuration can do."
      }
    },
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Tags for identifying instances"
            },
            "Parameters": [
              "TargetTagKey",
              "TargetTagValue"
            ]
          },
          {
            "Label": {
              "default": "ICalendarString"
            },
            "Parameters": [
              "ICalendarString"
            ]
          },
          {
            "Label": {
              "default": "Unique Identifier"
            },
            "Parameters": [
              "QSConfigurationId"
            ]
          }
        ],
        "ParameterLabels": {
          "TargetTagKey": {
            "default": "TagKey used to identify instances"
          },
          "TargetTagValue": {
            "default": "Tag value used to identify instances"
          },
          "QSConfigurationId": {
            "default": "Unique identifier of the deployed configuration."
          },
          "ICalendarString": {
            "default": "iCal string format to create Change Calendar resource"
          }
        }
      }
    },
    "Mappings": {
      "Artifact": {
        "Name": {
          "StartEC2InstancesAssociationName": "StartEC2Instances",
          "StopEC2InstancesAssociationName": "StopEC2Instances",
          "StartEC2InstancesDocumentName": "AWSQuickSetup-StartEC2Instances",
          "StopEC2InstancesDocumentName": "AWSQuickSetup-StopEC2Instances",
          "StartStateManagerAssociationDocumentName": "AWSQuickSetup-StartStateManagerAssociations",
          "ChangeCalendarDocumentName": "AWSQuickSetup-ChangeCalendar"
        }
      }
    },
    "Conditions": {
      "ShouldAttachConfigurationPolicy": {
        "Fn::Equals": [
          {
            "Ref": "QSAttachConfigurationPolicy"
          },
          "true"
        ]
      }
    },
    "Resources": {
      "ChangeCalendarDocument": {
        "Type": "AWS::SSM::Document",
        "Properties": {
          "DocumentType": "ChangeCalendar",
          "UpdateMethod": "NewVersion",
          "Name": {
            "Fn::Sub": [
              "${DocumentName}-${UniqueID}",
              {
                "DocumentName": {
                  "Fn::FindInMap": [
                    "Artifact",
                    "Name",
                    "ChangeCalendarDocumentName"
                  ]
                },
                "UniqueID": {
                  "Ref": "QSConfigurationId"
                }
              }
            ]
          },
          "Content": {
            "Ref": "ICalendarString"
          },
          "DocumentFormat": "TEXT"
        }
      },
      "StartStateManagerAssociationDocument": {
        "Type": "AWS::SSM::Document",
        "Properties": {
          "DocumentType": "Automation",
          "UpdateMethod": "NewVersion",
          "Name": {
            "Fn::Sub": [
              "${DocumentName}-${UniqueID}",
              {
                "DocumentName": {
                  "Fn::FindInMap": [
                    "Artifact",
                    "Name",
                    "StartStateManagerAssociationDocumentName"
                  ]
                },
                "UniqueID": {
                  "Ref": "QSConfigurationId"
                }
              }
            ]
          },
          "Content": {
            "description": "### Document Name - StartStateManagerAssociations\n## What does this document do?\nThis document starts the State Manager Association\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the IAM role that this runboon will use to execution automation.\n* Association IDs: (Required) The association IDs that you want to run immediately and only one time.\n",
            "schemaVersion": "0.3",
            "assumeRole": "{{ AutomationAssumeRole }}",
            "parameters": {
              "AssociationIDs": {
                "type": "StringList",
                "description": "List of the State Manager Association IDs to start"
              },
              "AutomationAssumeRole": {
                "type": "String",
                "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
              }
            },
            "mainSteps": [
              {
                "name": "StartAssociation",
                "action": "aws:executeAwsApi",
                "inputs": {
                  "Service": "ssm",
                  "Api": "StartAssociationsOnce",
                  "AssociationIds": "{{ AssociationIDs }}"
                }
              }
            ]
          }
        }
      },
      "EC2StartSSMDocument": {
        "Type": "AWS::SSM::Document",
        "Properties": {
          "DocumentType": "Automation",
          "UpdateMethod": "NewVersion",
          "Name": {
            "Fn::Sub": [
              "${DocumentName}-${UniqueID}",
              {
                "DocumentName": {
                  "Fn::FindInMap": [
                    "Artifact",
                    "Name",
                    "StartEC2InstancesDocumentName"
                  ]
                },
                "UniqueID": {
                  "Ref": "QSConfigurationId"
                }
              }
            ]
          },
          "Content": {
            "description": "### Document Name - EC2StartSSMDocument\n## What does this document do?\nThis document finds the tagged EC2 instances and start them.\n\n## Input Parameters\n* TagKey: (Required) Tag Key to filter list of EC2 Instances\n* TagValue: (Required) Tag Value to filter list of EC2 Instances\n* ResourceTagMapList: (Required) The tags to add to the resources.\n",
            "schemaVersion": "0.3",
            "assumeRole": "{{ AutomationAssumeRole }}",
            "parameters": {
              "TargetTagKey": {
                "type": "String",
                "description": "(Required) The tag name (key) to filter list of EC2 Instances"
              },
              "TargetTagValue": {
                "type": "String",
                "description": "(Required) The change calendar name to filter list of EC2 Instances"
              },
              "AutomationAssumeRole": {
                "type": "String",
                "description": "Automation role to be used by the runbook",
                "default": ""
              },
              "ChangeCalendarName": {
                "type": "String",
                "description": "Name of change calendar to use",
                "default": ""
              }
            },
            "outputs": [
              "startInstances.OutputPayload"
            ],
            "mainSteps": [
              {
                "name": "startInstances",
                "description": "Start the selected instances",
                "maxAttempts": 3,
                "action": "aws:executeScript",
                "timeoutSeconds": 600,
                "onFailure": "Abort",
                "inputs": {
                  "Runtime": "python3.11",
                  "Handler": "start_instances",
                  "InputPayload": {
                    "tagKey": "{{TargetTagKey}}",
                    "tagValue": "{{TargetTagValue}}",
                    "changeCalendarName": "{{ChangeCalendarName}}"
                  },
                  "Script": "def start_instances(events, context):\n    import boto3\n    import time\n\n    # Initialize boto clients\n    ec2_resource = boto3.resource('ec2')\n    ec2_client = boto3.client('ec2')\n    ssm_client = boto3.client('ssm')\n\n    # Get input values to the script\n    tag_key = events['tagKey']\n    tag_value = events['tagValue']\n    change_calendar_name = events['changeCalendarName']\n\n    # Define the constant batch size for number of instances started/stopped in one boto call\n    batch_size = 1000\n\n    def get_calendar_state(calendar_name):\n        return ssm_client.get_calendar_state(\n            CalendarNames=[calendar_name]\n        )\n\n    def get_tagged_instance_ids():\n        instances = ec2_resource.instances.filter(\n            Filters=[\n                {\n                    'Name': tag_key,\n                    'Values': [tag_value]\n                },\n                {\n                    'Name': 'instance-state-name',\n                    'Values': ['stopped']\n                }\n            ]\n        )\n\n        return [instance.id for instance in instances]\n\n    def create_batches(list_instance_ids):\n        for i in range(0, len(list_instance_ids), batch_size):\n            yield list_instance_ids[i:i + batch_size]\n\n    def start_tagged_instances(list_batches):\n        for batch in list_batches:\n            try:\n                ec2_client.start_instances(\n                    InstanceIds=batch\n                )\n            except Exception:\n                pass\n            time.sleep(0.5)\n\n    calendar_state = get_calendar_state(change_calendar_name)\n    if calendar_state.get('State') == 'OPEN':\n        list_tagged_instance_ids = get_tagged_instance_ids()\n        batches = create_batches(list_tagged_instance_ids)\n        start_tagged_instances(list(batches))\n        return list_tagged_instance_ids\n"
                }
              }
            ]
          }
        }
      },
      "EC2StopSSMDocument": {
        "Type": "AWS::SSM::Document",
        "Properties": {
          "DocumentType": "Automation",
          "UpdateMethod": "NewVersion",
          "Name": {
            "Fn::Sub": [
              "${DocumentName}-${UniqueID}",
              {
                "DocumentName": {
                  "Fn::FindInMap": [
                    "Artifact",
                    "Name",
                    "StopEC2InstancesDocumentName"
                  ]
                },
                "UniqueID": {
                  "Ref": "QSConfigurationId"
                }
              }
            ]
          },
          "Content": {
            "description": "### Document Name - EC2StopSSMDocument\n## What does this document do?\nThis document finds the tagged EC2 instances and stops them.\n\n## Input Parameters\n* TargetTagKey: (Required) Tag Key to filter list of EC2 Instances\n* TagValue: (Required) Tag Value to filter list of EC2 Instances\n* ResourceTagMapList: (Required) The tags to add to the resources.\n",
            "schemaVersion": "0.3",
            "assumeRole": "{{ AutomationAssumeRole }}",
            "parameters": {
              "TargetTagKey": {
                "type": "String",
                "description": "(Required) The tag name (key) to filter list of EC2 Instances"
              },
              "TargetTagValue": {
                "type": "String",
                "description": "(Required) The change calendar name (tag value) to filter list of EC2 Instances"
              },
              "AutomationAssumeRole": {
                "type": "String",
                "description": "Automation role to be used by the runbook",
                "default": ""
              },
              "ChangeCalendarName": {
                "type": "String",
                "description": "Name of change calendar to use",
                "default": ""
              }
            },
            "outputs": [
              "stopInstances.OutputPayload"
            ],
            "mainSteps": [
              {
                "name": "stopInstances",
                "description": "Start the selected instances",
                "maxAttempts": 3,
                "action": "aws:executeScript",
                "timeoutSeconds": 600,
                "onFailure": "Abort",
                "inputs": {
                  "Runtime": "python3.11",
                  "Handler": "stop_instances",
                  "InputPayload": {
                    "tagKey": "{{TargetTagKey}}",
                    "tagValue": "{{TargetTagValue}}",
                    "changeCalendarName": "{{ChangeCalendarName}}"
                  },
                  "Script": "def stop_instances(events, context):\n    import boto3\n    import time\n\n    # Initialize boto clients\n    ec2_resource = boto3.resource('ec2')\n    ec2_client = boto3.client('ec2')\n    ssm_client = boto3.client('ssm')\n\n    # Get input values to the script\n    tag_key = events['tagKey']\n    tag_value = events['tagValue']\n    change_calendar_name = events['changeCalendarName']\n\n    # Define the constant batch size for number of instances started/stopped in one boto call\n    batch_size = 1000\n\n    def get_calendar_state(calendar_name):\n        return ssm_client.get_calendar_state(\n            CalendarNames=[calendar_name]\n        )\n\n    def get_tagged_instance_ids():\n        instances = ec2_resource.instances.filter(\n            Filters=[\n                {\n                    'Name': tag_key,\n                    'Values': [tag_value]\n                },\n                {\n                    'Name': 'instance-state-name',\n                    'Values': ['running']\n                }\n            ]\n        )\n\n        return [instance.id for instance in instances]\n\n    def create_batches(list_instance_ids):\n        for i in range(0, len(list_instance_ids), batch_size):\n            yield list_instance_ids[i:i + batch_size]\n\n    def stop_tagged_instances(list_batches):\n        for batch in list_batches:\n            try:\n                ec2_client.stop_instances(\n                    InstanceIds=batch\n                )\n            except Exception:\n                pass\n            time.sleep(0.5)\n\n    calendar_state = get_calendar_state(change_calendar_name)\n    if calendar_state.get('State') == 'CLOSED':\n        list_tagged_instance_ids = get_tagged_instance_ids()\n        batches = create_batches(list_tagged_instance_ids)\n        stop_tagged_instances(list(batches))\n        return list_tagged_instance_ids\n"
                }
              }
            ]
          }
        }
      },
      "StartAssociation": {
        "Type": "AWS::SSM::Association",
        "Properties": {
          "AssociationName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-Scheduler-StartEC2Instances-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Name": {
            "Ref": "EC2StartSSMDocument"
          },
          "Parameters": {
            "TargetTagKey": [
              {
                "Fn::Sub": "tag:${TargetTagKey}"
              }
            ],
            "TargetTagValue": [
              {
                "Ref": "TargetTagValue"
              }
            ],
            "AutomationAssumeRole": [
              {
                "Fn::GetAtt": [
                  "ConfigurationAutomationRole",
                  "Arn"
                ]
              }
            ],
            "ChangeCalendarName": [
              {
                "Ref": "ChangeCalendarDocument"
              }
            ]
          }
        },
        "DependsOn": [
          "ConfigurationAutomationRole",
          "EC2SchedulePolicy"
        ]
      },
      "StopAssociation": {
        "Type": "AWS::SSM::Association",
        "Properties": {
          "AssociationName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-Scheduler-StopEC2Instances-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Name": {
            "Ref": "EC2StopSSMDocument"
          },
          "Parameters": {
            "TargetTagKey": [
              {
                "Fn::Sub": "tag:${TargetTagKey}"
              }
            ],
            "TargetTagValue": [
              {
                "Ref": "TargetTagValue"
              }
            ],
            "AutomationAssumeRole": [
              {
                "Fn::GetAtt": [
                  "ConfigurationAutomationRole",
                  "Arn"
                ]
              }
            ],
            "ChangeCalendarName": [
              {
                "Ref": "ChangeCalendarDocument"
              }
            ]
          }
        },
        "DependsOn": [
          "ConfigurationAutomationRole",
          "EC2SchedulePolicy"
        ]
      },
      "StartEC2InstancesEventRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": {
            "Fn::Join": [
              "",
              [
                "AWSQuickSetup-Scheduler-StartEC2Rule-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Description": "This rule will start the custom ssm document to start ec2 instances",
          "EventPattern": {
            "source": [
              "aws.ssm"
            ],
            "detail-type": [
              "Calendar State Change"
            ],
            "resources": [
              {
                "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${ChangeCalendarDocument}"
              }
            ],
            "detail": {
              "state": [
                "OPEN"
              ]
            }
          },
          "State": "ENABLED",
          "Targets": [
            {
              "Arn": {
                "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${StartStateManagerAssociationDocument}:$DEFAULT"
              },
              "Id": "Target0",
              "Input": {
                "Fn::Sub": [
                  "{\"AssociationIDs\":[\"${AssociationIDs}\"],\"AutomationAssumeRole\":[\"${AutomationAssumeRole}\"]}",
                  {
                    "AssociationIDs": {
                      "Fn::GetAtt": [
                        "StartAssociation",
                        "AssociationId"
                      ]
                    },
                    "AutomationAssumeRole": {
                      "Fn::GetAtt": [
                        "ConfigurationAutomationRole",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "EventRoleToInvokeSSM",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "StopEC2InstancesEventRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": {
            "Fn::Join": [
              "",
              [
                "AWSQuickSetup-Scheduler-StopEC2Rule-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Description": "This rule will start the custom ssm document to stop ec2 instances",
          "EventPattern": {
            "source": [
              "aws.ssm"
            ],
            "detail-type": [
              "Calendar State Change"
            ],
            "resources": [
              {
                "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${ChangeCalendarDocument}"
              }
            ],
            "detail": {
              "state": [
                "CLOSED"
              ]
            }
          },
          "State": "ENABLED",
          "Targets": [
            {
              "Arn": {
                "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${StartStateManagerAssociationDocument}:$DEFAULT"
              },
              "Id": "Target0",
              "Input": {
                "Fn::Sub": [
                  "{\"AssociationIDs\":[\"${AssociationIDs}\"],\"AutomationAssumeRole\":[\"${AutomationAssumeRole}\"]}",
                  {
                    "AssociationIDs": {
                      "Fn::GetAtt": [
                        "StopAssociation",
                        "AssociationId"
                      ]
                    },
                    "AutomationAssumeRole": {
                      "Fn::GetAtt": [
                        "ConfigurationAutomationRole",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "EventRoleToInvokeSSM",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "EC2SchedulePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeInstanceStatus",
                  "ec2:DescribeRegions",
                  "ec2:DescribeTags",
                  "tag:GetResources"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "ec2:StartInstances",
                  "ec2:StopInstances"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                }
              },
              {
                "Action": [
                  "ssm:GetCalendarState"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${ChangeCalendarDocument}"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "EC2SchedulePolicy",
          "Roles": [
            {
              "Ref": "ConfigurationAutomationRole"
            }
          ]
        }
      },
      "EventRoleToInvokeSSM": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "AWS-QuickSetup-Scheduler-TriggerRole-${QSConfigurationId}_${AWS::Region}"
          },
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "events.amazonaws.com"
                },
                "Condition": {
                  "StringEquals": {
                    "aws:SourceAccount": {
                      "Fn::Sub": "${AWS::AccountId}"
                    }
                  }
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Path": "/",
          "PermissionsBoundary": {
            "Fn::If": [
              "ShouldAttachConfigurationPolicy",
              {
                "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSQuickSetupSchedulerPermissionsBoundary"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }
      },
      "EventRoletoInvokeSSMPolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "ssm:StartAutomationExecution",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${StartStateManagerAssociationDocument}:$DEFAULT"
                  }
                ]
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "ConfigurationAutomationRole",
                    "Arn"
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "InvokeSSMDocumentPolicy",
          "Roles": [
            {
              "Ref": "EventRoleToInvokeSSM"
            }
          ]
        }
      },
      "StartAssociationRolePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "ssm:StartAssociationsOnce",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:association/${StartAssociation}"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:association/${StopAssociation}"
                  }
                ]
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "ConfigurationAutomationRole",
                      "Arn"
                    ]
                  }
                ]
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "StartAssociationPolicy",
          "Roles": [
            {
              "Ref": "ConfigurationAutomationRole"
            }
          ]
        }
      },
      "SystemAssociationForEnablingExplorer": {
        "Type": "AWS::SSM::Association",
        "Properties": {
          "Name": "AWS-EnableExplorer",
          "AssociationName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-Scheduler-EnableExplorer-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Parameters": {
            "AutomationAssumeRole": [
              {
                "Fn::GetAtt": [
                  "ConfigurationAutomationRole",
                  "Arn"
                ]
              }
            ]
          }
        },
        "DependsOn": [
          "ConfigurationAutomationRole",
          "EnableExplorerRolePolicy"
        ]
      },
      "ConfigurationAutomationRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "AWS-QuickSetup-Scheduler-ConfigurationRole-${QSConfigurationId}_${AWS::Region}"
          },
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ssm.amazonaws.com"
                },
                "Condition": {
                  "StringEquals": {
                    "aws:SourceAccount": {
                      "Fn::Sub": "${AWS::AccountId}"
                    }
                  },
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::Sub": "arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:automation-execution/*"
                    }
                  }
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Path": "/",
          "PermissionsBoundary": {
            "Fn::If": [
              "ShouldAttachConfigurationPolicy",
              {
                "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSQuickSetupSchedulerPermissionsBoundary"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }
      },
      "EnableExplorerRolePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "iam:ListRoles",
                  "config:DescribeConfigurationRecorders",
                  "compute-optimizer:GetEnrollmentStatus",
                  "support:DescribeTrustedAdvisorChecks"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ssm:UpdateServiceSetting",
                  "ssm:GetServiceSetting"
                ],
                "Resource": [
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsitem/EC2"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/Association"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor"
                  },
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:CreateServiceLinkedRole"
                ],
                "Resource": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/aws-service-role/ssm.${AWS::URLSuffix}/AWSServiceRoleForAmazonSSM"
                },
                "Condition": {
                  "StringEquals": {
                    "iam:AWSServiceName": "ssm.amazonaws.com"
                  }
                }
              }
            ]
          },
          "PolicyName": "SSMQuickSetupEnableExplorerInlinePolicy",
          "Roles": [
            {
              "Ref": "ConfigurationAutomationRole"
            }
          ]
        }
      }
    }
  }
}
