{
  "schemaVersion": "0.3",
  "description": "# AWSEC2-RestoreSqlServerDatabaseWithVss\n## What does this document do?\nThe AWSEC2-RestoreSqlServerDatabaseWithVss automation document is used to restore a SQL Server database on a Windows Instance using the application consistent snapshots taken by AWS VSS.\n\n1. Update or install the latest version of AWS VSS Components on the target instance.\n2. Obtain the VSS Snapshot Set ID corresponding to the snapshot set that you will use to restore the database with the PrepareVssRestore-pitr-test run command document.\n3. Obtain the EC2 snapshots that belong to the snapshot set and create new EBS volumes from them.\n4. Attach the newly created EBS volumes to the instance.\n5. Perform the database restore operation through VSS with the RunVssRestoreForSqlDatabase-pitr-test run command document.\n\n## Parameters\n- `InstanceId`: (Required) The ID of the EC2 instance where the restore will be performed.\n- `SourceDatabaseName`: (Required) Name of the database to restore.\n- `TargetDatabaseName`: (Optional) Name of the new database to restore the source database to. The target database is placed side by side with the source database. If not specified and left empty, the source database's file paths are modified to point to snapshot files.\n- `SnapshotSetId`: (Optional) The VSS snapshot set id of the snapshot to use for recovery. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If RestorePointOfTime is specified, SnapshotSetId can be left empty.\n- `RestorePointOfTime`: (Optional) The last created snapshot set before this date time is chosen. The format is MM-dd-yyyy:hh-mm. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If SnapshotSetId is specified, RestorePointOfTime can be left empty.\n- `RestoreWithNorecovery`: (Required) Select True to leave the database in restoring state so that you can apply transaction logs after the snapshot restore.\n- `MetadataPath`: (Optional) Fully qualified path to where the VSS metadata files are stored. If not specified, default path (%PROGRAMDATA%\\Amazon\\AwsVss\\VssMetadata) is used.\n- `AutomationAssumeRole`: (Optional) The ARN of the IAM role for the automation to assume. If not specified, the current session role is used.\n\n## Output\n- The returned output from the last step in the automation(RunVssRestoreForSqlDatabase) if it runs. The step invokes EC2 VSS Agent to restore the database, and returns the volume ID and status for each new volume that the automation created and attached to the instance, as well as the final status of the restore operation.\n\n",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "The ID of the EC2 instance where the restore will be performed",
      "allowedPattern": "^i-[a-f0-9]{8,17}$"
    },
    "SourceDatabaseName": {
      "type": "String",
      "description": "(Required) Name of the database to restore.",
      "allowedPattern": "^[a-zA-Z_@#][\\w@$#_]{0,127}$"
    },
    "TargetDatabaseName": {
      "type": "String",
      "allowedPattern": "^([a-zA-Z_][\\w@$#_]{0,127})?$",
      "description": "(Optional) Name of the new database to restore the source database to. The target database is placed side by side with the source database. If not specified and left empty, the source database's file paths are modified to point to snapshot files.",
      "default": "Db_Restore"
    },
    "SnapshotSetId": {
      "type": "String",
      "default": "",
      "description": "(Optional) (Optional) The VSS snapshot set id of the snapshot to use for recovery. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If RestorePointOfTime is specified, SnapshotSetId can be left empty.",
      "allowedPattern": "^(?:[{]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[}]?)?$"
    },
    "RestorePointOfTime": {
      "type": "String",
      "default": "",
      "description": "(Optional) The last created snapshot set before this date time is chosen. The format is MM-dd-yyyy:hh-mm. If neither SnapshotSetId nor RestorePointOfTime is specified, the most recent snapshot set is chosen. If SnapshotSetId is specified, RestorePointOfTime can be left empty.",
      "allowedPattern": "^$|^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}:(0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]$"
    },
    "RestoreWithNorecovery": {
      "type": "String",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ],
      "description": "(Required) Select True to leave the database in restoring state so that you can apply transaction logs after the snapshot restore."
    },
    "MetadataPath": {
      "type": "String",
      "default": "",
      "description": "(Optional) Fully qualified path to where the VSS metadata files are stored. If not specified, default path (%PROGRAMDATA%\\Amazon\\AwsVss\\VssMetadata) is used.",
      "allowedPattern": "^$|^\\w:$|^\\w:\\\\[^\"'|\\r\\n]*$|^\\/[^\"'|\\r\\n]*$|^([A-Za-z0-9-_\\/+]{4})*([A-Za-z0-9-_\\/+]{4}|[A-Za-z0-9-_\\/+]{3}=|[A-Za-z0-9-_\\/+]{2}==)$"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "default": "",
      "description": "(Optional) The ARN of the IAM role for the automation to assume. If not specified, the current session role is used.",
      "allowedPattern": "^$|^arn:aws:iam::\\d{12}:role/[a-zA-Z0-9+=,.@\\-_/]+$"
    },
    "ExecutionTimeout": {
      "type": "String",
      "allowedPattern": "^((1[2-9][0-9]{1})|([2-9][0-9]{2})|([1-9][0-9]{3,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800))$",
      "description": "(Optional) The time in seconds for the final RunVssRestoreForSqlDatabase step to be completed before it is considered to have failed. Default is 600 seconds. Maximum is 172800 (48 hours). Minimum is 120.\"",
      "default": "600"
    }
  },
  "variables": {
    "VolumeIdsFromSnapshots": {
      "type": "String",
      "default": "None",
      "description": "The EBS volumes IDd of the volumes created from the snapshots and attached to the instance."
    }
  },
  "assumeRole": "{{ AutomationAssumeRole }}",
  "mainSteps": [
    {
      "description": "## InstallLatestVersionOfAwsVssComponents\nThis step runs the AWS-ConfigureAwsPackage public RunCommand document to install or update to the latest version of AwsVssComponents.\n\n## Inputs\n- `Document name`: Name of the run command document, which is AWS-ConfigureAwsPackage.\n- `Instance ids`: Instance ids of the target instances, which is the same as the target instance of the automation execution.\n- `Parameters`: Input parameters to the run command. Action: \"Install\", InstallationType: \"Uninstall and reinstall\", Name: \"AwsVssComponents\".",
      "name": "InstallLatestVersionOfAwsVssComponents",
      "action": "aws:runCommand",
      "timeoutSeconds": 300,
      "nextStep": "RunPrepareVssRestore",
      "isCritical": false,
      "isEnd": false,
      "onCancel": "step:RunPrepareVssRestore",
      "onFailure": "step:RunPrepareVssRestore",
      "inputs": {
        "DocumentName": "AWS-ConfigureAWSPackage",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "action": "Install",
          "installationType": "Uninstall and reinstall",
          "name": "AwsVssComponents"
        }
      }
    },
    {
      "description": "## RunPrepareVssRestore\nThis step runs the AWSEC2-PrepareVssRestore public RunCommand document to perform precheck and obtain the snapshot set ID based on inputs.\n## Inputs\n- `Document name`: Name of the run command document, which is AWSEC2-PrepareVssRestore.\n- `Instance ids`: Instance ids of the target instances, which is the same as the target instance of the automation execution.\n- `Parameters`: Input parameters to the run command, which inlcude SnapshotSetId, RestorePointOfTime, and MetadataPath.\n\n## Outputs\n- `Output`: If the run command succeeds, the output will be the snapshot set id.",
      "name": "RunPrepareVssRestore",
      "action": "aws:runCommand",
      "timeoutSeconds": 330,
      "nextStep": "DescribeSnapshots",
      "isEnd": false,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSEC2-PrepareVssRestore",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "MetadataPath": "{{ MetadataPath }}",
          "SnapshotSetId": "{{ SnapshotSetId }}",
          "RestorePointOfTime": "{{ RestorePointOfTime }}",
          "executionTimeout": "300"
        }
      }
    },
    {
      "description": "## DescribeSnapshots\nThis step calls DescribeSnapshots API to obtain information on the EC2 snapshots asscoaited with the snapshot set ID.\n\n## Inputs\n- `Filters`: Filters provided to the API, which is \"tag key AwsVssConfig has a value containing the snapshot set ID\".\n\n## Outputs\n- `SnapshotIds`: Snapshot IDs of the obtained snapshots.\n- `SnapshotVolumeIds`: The corresponding original volume IDs of each obtained snapshot.",
      "name": "DescribeSnapshots",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 60,
      "nextStep": "DescribeInstanceBlockDeviceMapping",
      "isEnd": false,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSnapshots",
        "Filters": [
          {
            "Name": "tag:AwsVssConfig",
            "Values": [
              "*{{ RunPrepareVssRestore.Output }}*"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Type": "StringList",
          "Name": "SnapshotIds",
          "Selector": "$.Snapshots..SnapshotId"
        },
        {
          "Type": "StringList",
          "Name": "SnapshotVolumeIds",
          "Selector": "$.Snapshots..VolumeId"
        }
      ]
    },
    {
      "description": "## DescribeInstanceBlockDeviceMapping\nThis step calls DescribeInstanceAttribute API to obtain a list of used attachment points of the target instance.\n\n## Inputs\n- `InstanceId`: Instance ID of the target instance, which is the same as the target instance of the automation exeution.\n- `Attribute`: \"BlockDeviceMapping\".\n\n## Outputs\n- `InstanceDevices`: A list of the used device attachment points of the instance.",
      "name": "DescribeInstanceBlockDeviceMapping",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 60,
      "nextStep": "PrepareForVolumeCreation",
      "isEnd": false,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceAttribute",
        "Attribute": "blockDeviceMapping",
        "InstanceId": "{{ InstanceId }}"
      },
      "outputs": [
        {
          "Type": "StringList",
          "Name": "InstanceDevices",
          "Selector": "$.BlockDeviceMappings..DeviceName"
        }
      ]
    },
    {
      "description": "## PrepareForVolumeCreation\nThis step calls executes a Python script to generate an iterator to be used for the next Loop step, and generate a list of available device attachment points to be used by the volumes to be created.\n\n## Inputs\n- `InputPayload`: The list of snapshots obtained at DescribeSnapshots step, which will be used to generate the interator. The list of used attachment points obtained at DescribeInstanceBlockDeviceMapping step, which will be used to deduce the available attachment points.\n\n## Outputs\n- `Sequence`: The iterator.\n- `DeviceNames`: The list of available device attachment points",
      "name": "PrepareForVolumeCreation",
      "action": "aws:executeScript",
      "timeoutSeconds": 60,
      "nextStep": "Loop",
      "isEnd": false,
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  snapshot_count = int(len(events['SnapshotIds']))\n  used_devices = events['DeviceNames']\n  # generate a list of unused device names\n  format_strings = [\"xvd{0}\", \"xvdb{0}\"]\n  assigned_attachment_points = []\n\n  for format_string in format_strings:\n    attach_letter = ord('b')\n    while (attach_letter <= ord('z')) and (len(assigned_attachment_points) < snapshot_count):\n      attach_point = format_string.format(chr(attach_letter))\n      if attach_point not in used_devices:\n        assigned_attachment_points.append(attach_point)\n      attach_letter += 1\n\n  print(\"Assigned attachment points:\" + str(assigned_attachment_points))\n\n  if (len(assigned_attachment_points) != snapshot_count):\n    raise Exception(\"Not enough free attachment points\")\n  \n  return {'Sequence':[str(num) for num in list(range(snapshot_count))], 'DeviceNames':assigned_attachment_points}\n\n  ",
        "InputPayload": {
          "SnapshotIds": "{{ DescribeSnapshots.SnapshotIds }}",
          "DeviceNames": "{{ DescribeInstanceBlockDeviceMapping.InstanceDevices }}"
        }
      },
      "outputs": [
        {
          "Type": "StringList",
          "Name": "Sequence",
          "Selector": "$.Payload.Sequence"
        },
        {
          "Type": "StringList",
          "Name": "DeviceNames",
          "Selector": "$.Payload.DeviceNames"
        }
      ]
    },
    {
      "name": "Loop",
      "action": "aws:loop",
      "nextStep": "RunVssRestoreForSqlDatabase",
      "isEnd": false,
      "onFailure": "Abort",
      "inputs": {
        "Iterators": "{{ PrepareForVolumeCreation.Sequence }}",
        "Steps": [
          {
            "description": "## ExtractCurrIterValues\nExtract the snapshot ID, snapshot's original volume ID, and the available device attachment point for the current iteration.\n\n## Inputs\n- `InputPayload`: The list of snapshot IDs, snapshot's original volume IDs, and the available device attachment points.\n\n## Outputs\n- `CurrAttachPoint`: The available device attachment point. \n- `CurrSnapVolId`: The snapshot's original volume ID.\n- `CurrSnapId`: The snapshot ID.",
            "name": "ExtractCurrIterValues",
            "action": "aws:executeScript",
            "timeoutSeconds": 60,
            "nextStep": "DescribeVolumes",
            "isEnd": false,
            "inputs": {
              "Runtime": "python3.11",
              "Handler": "script_handler",
              "Script": "def script_handler(events, context):\n  index = int(events[\"Index\"])\n  res = {\n    \"CurrSnapId\": events[\"SnapshotIds\"][index],\n    \"CurrSnapVolId\": events[\"SnapVolIds\"][index],\n    \"CurrAttachPoint\": events[\"AttachPoints\"][index],\n  }\n  \n  return res",
              "InputPayload": {
                "Index": "{{ Loop.CurrentIteratorValue }}",
                "SnapshotIds": "{{ DescribeSnapshots.SnapshotIds }}",
                "SnapVolIds": "{{ DescribeSnapshots.SnapshotVolumeIds }}",
                "AttachPoints": "{{ PrepareForVolumeCreation.DeviceNames }}"
              }
            },
            "outputs": [
              {
                "Type": "String",
                "Name": "CurrAttachPoint",
                "Selector": "$.Payload.CurrAttachPoint"
              },
              {
                "Type": "String",
                "Name": "CurrSnapVolId",
                "Selector": "$.Payload.CurrSnapVolId"
              },
              {
                "Type": "String",
                "Name": "CurrSnapId",
                "Selector": "$.Payload.CurrSnapId"
              }
            ]
          },
          {
            "description": "## DescribeVolumes\nThis step calls DescribeVolumes API to obtain the availability zone and volume type of the snapshot's original volume.\n\n## Inputs\n- `VolumeIds`: The snapshot's orginal volume's volume ID.\n\n## Outputs\n- `VolumeType`: The volume type of the snapshot's original volume.\n- `VolumeAz`: The availability zone of the snapshot's original volume.",
            "name": "DescribeVolumes",
            "action": "aws:executeAwsApi",
            "timeoutSeconds": 60,
            "nextStep": "CreateVolume",
            "isEnd": false,
            "inputs": {
              "Service": "ec2",
              "Api": "DescribeVolumes",
              "VolumeIds": [
                "{{ ExtractCurrIterValues.CurrSnapVolId }}"
              ]
            },
            "outputs": [
              {
                "Type": "String",
                "Name": "VolumeType",
                "Selector": "$.Volumes[0].VolumeType"
              },
              {
                "Type": "String",
                "Name": "VolumeAz",
                "Selector": "$.Volumes[0].AvailabilityZone"
              }
            ]
          },
          {
            "description": "## CreateVolume\nThis step calls CreateVolumeAPI to create a new volume from the snapshot.\n\n## Inputs\n- `AvailabilityZone`: The availability zone of the newly created volume, which is the same as the snapshot's original volume's.\n- `VolumeType`: The volume type of the newly created volume, which is the same as the snapshot's original volume's.\n- `SnapshotId`: The current interation's snapshot ID.\n- `TagSpecification`: The newly created volume will have a AwsVssTag key with value RestoreVolume:{the snapshot set ID}\n\n## Outputs\n- `VolumeId`: The newly created volume's ID.",
            "name": "CreateVolume",
            "action": "aws:executeAwsApi",
            "timeoutSeconds": 60,
            "nextStep": "WaitOnVolumeBecomingAvailable",
            "isEnd": false,
            "inputs": {
              "Service": "ec2",
              "Api": "CreateVolume",
              "AvailabilityZone": "{{ DescribeVolumes.VolumeAz }}",
              "SnapshotId": "{{ ExtractCurrIterValues.CurrSnapId }}",
              "VolumeType": "{{ DescribeVolumes.VolumeType }}",
              "TagSpecifications": [
                {
                  "ResourceType": "volume",
                  "Tags": [
                    {
                      "Key": "AwsVssConfig",
                      "Value": "RestoreVolume:'{{ RunPrepareVssRestore.Output }}'"
                    }
                  ]
                }
              ]
            },
            "outputs": [
              {
                "Type": "String",
                "Name": "VolumeId",
                "Selector": "$.VolumeId"
              }
            ]
          },
          {
            "name": "WaitOnVolumeBecomingAvailable",
            "action": "aws:waitForAwsResourceProperty",
            "timeoutSeconds": 600,
            "nextStep": "AttachVolume",
            "isEnd": false,
            "inputs": {
              "Service": "ec2",
              "Api": "DescribeVolumes",
              "PropertySelector": "$.Volumes[0].State",
              "VolumeIds": [
                "{{ CreateVolume.VolumeId }}"
              ],
              "DesiredValues": [
                "available"
              ]
            }
          },
          {
            "description": "## AttachVolume\nThis step calls AttachVolume API to attach the newly created volume to the target instance.\n\n## Inputs\n- `Device`: Current iterations's available device attachment point.\n- `InstanceId`: The target instance ID, which is the same as the target instance of the automation execution.\n- `VolumeId`: Volume ID of the newly created volume.",
            "name": "AttachVolume",
            "action": "aws:executeAwsApi",
            "timeoutSeconds": 60,
            "nextStep": "WaitOnVolumeBecomingInUse",
            "isEnd": false,
            "inputs": {
              "Service": "ec2",
              "Api": "AttachVolume",
              "Device": "{{ ExtractCurrIterValues.CurrAttachPoint }}",
              "InstanceId": "{{ InstanceId }}",
              "VolumeId": "{{ CreateVolume.VolumeId }}"
            }
          },
          {
            "name": "WaitOnVolumeBecomingInUse",
            "action": "aws:waitForAwsResourceProperty",
            "timeoutSeconds": 600,
            "nextStep": "ConcatVolumeIds",
            "isEnd": false,
            "inputs": {
              "Service": "ec2",
              "Api": "DescribeVolumes",
              "PropertySelector": "$.Volumes[0].State",
              "DesiredValues": [
                "in-use"
              ],
              "VolumeIds": [
                "{{ CreateVolume.VolumeId }}"
              ]
            }
          },
          {
            "description": "## ConcatVolumeIds\nConcatenates current iteration's attached volume's volume ID to the list of previously attached volume IDs.\n\n## Inputs\n- `InputPayload`: The current iteration's attached volume's volume ID. And the VolumeIdsFromSnapshots variable, which holds a string of all the volumes that have been attached to the instance so far in the automation.\n\n## Outputs\n- `ConcatVolumeIds`: The concatenated string of volume IDs.",
            "name": "ConcatVolumeIds",
            "action": "aws:executeScript",
            "timeoutSeconds": 60,
            "nextStep": "UpdateVolumeIdsVariable",
            "isEnd": false,
            "inputs": {
              "Runtime": "python3.11",
              "Handler": "script_handler",
              "Script": "def script_handler(events, context):\n  curr_list = events[\"CurrVolumeIds\"]\n  new_vol_id = events[\"NewVolumeId\"]\n  device_name = events[\"DeviceNameUsed\"]\n\n  volumeDeviceNamePair = str(new_vol_id) + ':' + str(device_name)\n\n  if (curr_list == \"None\" or len(curr_list) == 0):\n    return {\"ConcatVolumeIds\": volumeDeviceNamePair}\n  \n\n  curr_list += (\";\" + volumeDeviceNamePair)\n  return {'ConcatVolumeIds': curr_list}",
              "InputPayload": {
                "CurrVolumeIds": "{{ variable:VolumeIdsFromSnapshots }}",
                "NewVolumeId": "{{ CreateVolume.VolumeId }}",
                "DeviceNameUsed": "{{ ExtractCurrIterValues.CurrAttachPoint }}"
              }
            },
            "outputs": [
              {
                "Type": "String",
                "Selector": "$.Payload.ConcatVolumeIds",
                "Name": "ConcatVolumeIds"
              }
            ]
          },
          {
            "description": "## UpdateVolumeIdsVariable\nUpdates the automation's variable VolumeIdsFromSnapshots with the value of last step's output.\n\n## Inputs\n- `VariableName`: \"variable:VolumeIdsFromSnapshots\"\n- `VariableValue`: The output of the last concatenation step.",
            "name": "UpdateVolumeIdsVariable",
            "action": "aws:updateVariable",
            "timeoutSeconds": 60,
            "isEnd": true,
            "inputs": {
              "Name": "variable:VolumeIdsFromSnapshots",
              "Value": "{{ ConcatVolumeIds.ConcatVolumeIds }}"
            }
          }
        ]
      }
    },
    {
      "description": "## RunVssRestoreForSqlDatabase\nThis step runs AWSEC2-RunVssRestoreForSqlDatabase public run command document to perform the actual database restoration on the target instance.\n## Inputs\n- `Document name`: Name of the run command document, which is AWSEC2-RunVssRestoreForSqlDatabase.\n- `Instance ids`: Instance IDs of the target instances, which is the same as the target instance of the automation execution.\n- `Parameters`: Input parameters to the run command, which inlcude SourceDatabase, TargetDatabase, SnapshotSetId, VolumeIds,  RestoreWithNorecovery, MetadataPath, and ExecutionTimeOut.",
      "name": "RunVssRestoreForSqlDatabase",
      "action": "aws:runCommand",
      "isEnd": true,
      "inputs": {
        "DocumentName": "AWSEC2-RunVssRestoreForSqlDatabase",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "SourceDatabase": "{{ SourceDatabaseName }}",
          "TargetDatabase": "{{ TargetDatabaseName }}",
          "SnapshotSetId": "{{ RunPrepareVssRestore.Output }}",
          "RestoreWithNorecovery": "{{ RestoreWithNorecovery }}",
          "MetadataPath": "{{ MetadataPath }}",
          "VolumeIdDeviceNamePairs": "{{ variable:VolumeIdsFromSnapshots }}",
          "ExecutionTimeout": "{{ ExecutionTimeout }}"
        }
      }
    }
  ],
  "outputs": [
    "RunVssRestoreForSqlDatabase.Output"
  ]
}
