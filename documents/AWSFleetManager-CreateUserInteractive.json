{
  "schemaVersion": "1.0",
  "description": "Creates a local user account.",
  "sessionType": "InteractiveCommands",
  "parameters": {
    "UserName": {
      "type": "String",
      "description": "The user to be created.",
      "allowedPattern": "^[^\"'\\/\\\\\\[\\]:;|=,+*?<>@\\r\\n]+$",
      "maxChars": 32
    },
    "SetPassword": {
      "type": "String",
      "description": "(Optional) Set this to 'Yes' to configure the user's password.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "Description": {
      "type": "String",
      "description": "(Optional) The user's description.",
      "default": " ",
      "allowedPattern": "^[^\"'\\/\\\\\\[\\]:;|=,+*?<>@\\r\\n]+$",
      "maxChars": 48
    },
    "CreateHomeDir": {
      "type": "String",
      "description": "(Optional) Set this to 'Yes' to create of user's home directory on linux systems.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "PerformAction": {
      "type": "String",
      "description": "(Optional) Set this to 'Yes' to perform the action.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    }
  },
  "properties": {
    "windows": {
      "commands": "$ErrorActionPreference = 'Stop'\n\nFunction ParseInputParameter {\n    param (\n        [string]$Name,\n        [string]$Value,\n        [string]$Regex\n    )\n\n    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'\n    if ($Value -notmatch $ValidParameterRegex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    }\n    $parameterValue = $Value.Substring(3)\n\n    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()\n    $trimmedParameterValue = $trimmedParameterValue.Substring(1)\n    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)\n\n    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    } else {\n        $trimmedParameterValue\n    }\n}\n\nfunction ExitWithFailureMessage {\n    param (\n        [string]$Message,\n        [string]$ExceptionMessage,\n        [Switch]$PrintJson\n    )\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\n        $errorMessage = $Message\n    } else {\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\n    }\n    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}\n    WriteStandardError -Message $errorMessage\n    [System.Environment]::Exit(1)\n}\n\nfunction ExitWithSuccessMessage {\n    param (\n        [string]$Message\n    )\n    Write-Host $Message\n    [System.Environment]::Exit(0)\n}\n\nfunction WriteStandardError {\n    param (\n        [string]$Message\n    )\n    $Host.UI.WriteErrorLine($Message)\n}\n\nfunction TestPerformAction {\n    param ( [string]$PerformAction )\n    if ($PerformAction -ne 'Yes') {\n        Write-Host \"No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes.\"\n        [System.Environment]::Exit(0)\n    }\n}\n\n$UserName = Write-Output --%{{{ UserName }}}\n$UserName = ParseInputParameter -Name 'UserName' -Value $UserName\n\n$Description = Write-Output --%{{{ Description }}}\n$Description = ParseInputParameter -Name 'Description' -Value $Description\n\n$SetPassword = Write-Output --%{{{ SetPassword }}}\n$SetPassword = ParseInputParameter -Name 'SetPassword' -Value $SetPassword\n\n$PerformAction = Write-Output --%{{{ PerformAction }}}\n$PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'\nTestPerformAction -PerformAction $PerformAction\n\n$net = [System.IO.Path]::Combine($env:SystemRoot, 'System32', 'net.exe')\ntry {\n    $null = & $net user \"$UserName\" /add /comment:\"$Description\" *>&1\n    if ($? -eq $true) {\n        Write-Host 'The specified user has been created.'\n        if ($SetPassword -eq 'Yes') {\n            & $net user \"$UserName\" *\n        }\n    } else {\n        ExitWithFailureMessage -Message 'Failed to create the specified user.'\n    }\n} catch {\n    ExitWithFailureMessage -Message 'Failed to create the specified user.'\n}\n",
      "runAsElevated": true
    },
    "linux": {
      "commands": "#!/bin/bash\nset -e\n\nExitWithFailureMessage() {\n    MESSAGE=\"$1\"\n    JSON=\"$2\"\n    if [[ \"$JSON\" == \"PRINT_JSON\" ]]; then\n        echo \"{\\\"error\\\":\\\"$MESSAGE\\\"}\"\n    fi\n    WriteStandardError \"$MESSAGE\"\n    exit 1\n}\n\nExitWithSuccessMessage() {\n    echo \"$1\"\n    exit 0\n}\n\nWriteStandardError() {\n    MESSAGE=\"$1\"\n    (>&2 echo \"$MESSAGE\")\n}\n\nTestPerformAction() {\n    if [[ \"$1\" != \"Yes\" ]]; then\n        echo \"No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes.\"\n        exit 0\n    fi\n}\n\nUser='{{ UserName }}'\nSetPassword='{{ SetPassword }}'\nDescription='{{ Description }}'\nCreateHomeDir='{{ CreateHomeDir }}'\n\nPERFORMACTION='{{ PerformAction }}'\nTestPerformAction \"$PERFORMACTION\"\n\nCREATE_HOME_ARGUMENT='--no-create-home'\nif grep -q \"^$User:\" /etc/passwd; then\n    ExitWithFailureMessage 'The specified user already exists.'\nfi\n\nif type useradd &>/dev/null; then\n    COMMAND='useradd'\n    if [ \"$CreateHomeDir\" = 'Yes' ]; then\n        CREATE_HOME_ARGUMENT='--create-home'\n    fi\nelif type adduser &>/dev/null; then\n    COMMAND='adduser'\n    if [ \"$CreateHomeDir\" = 'Yes' ]; then\n        CREATE_HOME_ARGUMENT=''\n    fi\nelse\n    ExitWithFailureMessage 'Neither of the required commands adduser or useradd exist.'\nfi\n\n$COMMAND \"$User\" --comment \"$Description\" \"$CREATE_HOME_ARGUMENT\" || ExitWithFailureMessage 'Failed to create the specified user.'\necho 'The specified user has been created.'\n\nif [ \"$SetPassword\" = 'Yes' ]; then\n    passwd \"$User\"\nfi\n",
      "runAsElevated": true
    }
  }
}
