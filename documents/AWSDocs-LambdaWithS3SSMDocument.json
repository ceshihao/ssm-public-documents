{
  "description": "Tutorial: Using AWS Lambda with Amazon S3\n===\nThis Automation document sets up a Lambda function that is triggered when a new object is placed into S3. It Automates the [Using AWS Lambda with Amazon S3 Tutorial](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html) \n\nOnce this document is executed, uploading a `.jpg` or `.png` image to the source S3 bucket will automatically trigger the lambda to create a resized thumbnail in the resized S3 bucket.\n\nThis tutorial will upload a test image so the source bucket and resized bucket will contain a source and resized image as an example. \nThe logs for the lambda can be found under the cloudwatch log group `/aws/lambda/CreateThumbnail`\n\nPrerequisites\n---\nTo run the following Automation document, you must have an [Automation Role](https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-permissions.html) with inline policies enabled to act on the following services: \n\n* cloudformation\n* iam\n* lambda\n* s3\n\nThis can be achieved by attaching an in-line policy with the following: \n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:*\",\n                \"iam:CreateRole\",\n                \"iam:DeleteRole\",\n                \"iam:DeleteRolePolicy\",\n                \"iam:GetRole\",\n                \"iam:GetRolePolicy\",\n                \"iam:PassRole\",\n                \"iam:PutRolePolicy\",\n                \"lambda:AddPermission\",\n                \"lambda:CreateFunction\",\n                \"lambda:DeleteFunction\",\n                \"lambda:GetFunction\",\n                \"lambda:GetFunctionConfiguration\",\n                \"lambda:InvokeFunction\",\n                \"lambda:RemovePermission\",\n                \"s3:CreateBucket\",\n                \"s3:DeleteBucket\",\n                \"s3:GetObject\",\n                \"s3:PutBucketNotification\",\n                \"s3:PutObject\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n  \nResources created\n---\n* S3 bucket containing the lambda code\n* Lambda function that will resize an image to a thumbnail\n* S3 bucket containing source image\n* S3 bucket containing resized image\n* IAM Role for executing the Lambda\n\nCleanup\n---\nTo remove resources created by this Automation document, navigate to the [AWS CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the two stacks created.\n\n**Important:** In order to properly clean up the stacks, all files in the three S3 buckets will need to be deleted before the stacks can be deleted.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf"
    }
  },
  "mainSteps": [
    {
      "name": "createCodeS3Bucket",
      "action": "aws:createStack",
      "inputs": {
        "StackName": "LambdaCodeS3Stack",
        "TemplateBody": "Resources:\n  LambdaCodeBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Join\n        - ''\n        - - {{ automation:EXECUTION_ID }}\n          - \"-lambda-code\"\n      AccessControl: BucketOwnerFullControl"
      },
      "description": "Creates an S3 bucket to host the prepared lambda code"
    },
    {
      "name": "getLambdaBucketName",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "cloudformation",
        "Api": "DescribeStackResources",
        "StackName": "{{createCodeS3Bucket.StackId}}"
      },
      "outputs": [
        {
          "Name": "CodeS3BucketName",
          "Selector": "$.StackResources[0].PhysicalResourceId",
          "Type": "String"
        }
      ],
      "description": "Retrieves the bucket name that will contain the lambda code",
      "onFailure": "step:deleteLambdaCodeS3Stack"
    },
    {
      "name": "uploadLambdaCode",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "import urllib.request\nimport boto3\nfrom botocore.exceptions import ClientError\n\ndef script_handler(events, context):\n  url = events['S3BucketName']\n  filename = download_code('https://docs.aws.amazon.com/lambda/latest/dg/samples/CreateThumbnail.zip')\n  print('downloaded code')\n  upload_code_to_S3(filename, events['S3BucketName'])\n  print('uploaded code to s3')\n\ndef download_code(url):\n    filename = \"CreateThumbnail.zip\"\n    # Adding information about user agent\n    opener=urllib.request.build_opener()\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]\n    urllib.request.install_opener(opener)\n    urllib.request.urlretrieve(url, filename)\n\n    return filename\n\ndef upload_code_to_S3(filename, bucket_name):\n    s3 = boto3.client('s3')\n    try:\n        response = s3.upload_file(filename, bucket_name, 'CreateThumbnail.zip')\n    except ClientError as e:\n              print(e)\n              \n              \n  \n",
        "InputPayload": {
          "S3BucketName": "{{getLambdaBucketName.CodeS3BucketName}}"
        }
      },
      "description": "Uploads lambda code to the designated S3 bucket",
      "onFailure": "step:deleteLambdaCodeS3Stack"
    },
    {
      "name": "createLambdaAndS3Stack",
      "action": "aws:createStack",
      "inputs": {
        "StackName": "LambdaAndS3Stack",
        "TemplateBody": "Resources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action: sts:AssumeRole\n      Path: '/'\n      \n  IAMPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      Roles: \n        - !Ref ExecutionRole\n      PolicyName: AWSLambdaS3Policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - logs:PutLogEvents\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action: s3:GetObject\n            Resource: !Join \n              - ''\n              - - \"arn:aws:s3:::\"\n                - !Ref LambdaAndS3Source\n                - \"/*\"\n          - Effect: Allow\n            Action: s3:PutObject\n            Resource: !Join \n              - ''\n              - - \"arn:aws:s3:::\"\n                - !Ref LambdaAndS3SourceResized\n                - \"/*\"\n      \n  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: nodejs12.x\n      FunctionName: CreateThumbnail\n      Timeout: 30\n      Role: !GetAtt ExecutionRole.Arn\n      Handler: index.handler\n      Code:\n        S3Bucket: {{getLambdaBucketName.CodeS3BucketName}}\n        S3Key: CreateThumbnail.zip\n  \n  LambdaAndS3Source:\n    DependsOn: LambdaS3Permission\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Join\n        - ''\n        - - {{ automation:EXECUTION_ID }}\n          - \"-lambda-s3-src\"\n      AccessControl: BucketOwnerFullControl\n      NotificationConfiguration:\n        LambdaConfigurations:\n          - Event: s3:ObjectCreated:*\n            Function: !GetAtt LambdaFunction.Arn\n      \n  LambdaAndS3SourceResized:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Join\n        - ''\n        - - {{ automation:EXECUTION_ID }}\n          - \"-lambda-s3-src-resized\"\n      AccessControl: BucketOwnerFullControl\n            \n  LambdaS3Permission:\n    DependsOn: LambdaFunction\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: CreateThumbnail\n      Principal: s3.amazonaws.com\n      Action: lambda:InvokeFunction\n      SourceAccount: !Ref AWS::AccountId\n      SourceArn: !Sub\n        - \"arn:aws:s3:::${ExecutionId}-lambda-s3-src\"\n        - { ExecutionId: {{ automation:EXECUTION_ID }} }\n        \n  \n\n",
        "Capabilities": [
          "CAPABILITY_NAMED_IAM"
        ]
      },
      "description": "Creates the resource stack for the tutorial",
      "onFailure": "step:deleteLambdaCodeFromS3"
    },
    {
      "name": "getStackInformation",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "cloudformation",
        "Api": "DescribeStackResources",
        "StackName": "{{createLambdaAndS3Stack.StackId}}"
      },
      "outputs": [
        {
          "Name": "S3BucketName",
          "Selector": "$.StackResources[2].PhysicalResourceId",
          "Type": "String"
        },
        {
          "Name": "S3ResizedBucketName",
          "Selector": "$.StackResources[3].PhysicalResourceId",
          "Type": "String"
        }
      ],
      "onFailure": "step:deleteLambdaCodeFromS3",
      "description": "Retrieves the bucket names of the two S3 resources created for later use"
    },
    {
      "name": "uploadImageToS3",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "import urllib.request\nimport boto3\nfrom botocore.exceptions import ClientError\n\ndef script_handler(events, context):\n\n  filename = download_image()\n  print('uploading image to ', events['S3BucketName'])\n  upload_image_to_S3(filename, events['S3BucketName'])\n\ndef download_image():\n    image_url = \"https://docs.aws.amazon.com/lambda/latest/dg/images/landing-page/features-destinations.png\"\n    filename = \"lambda.png\"\n    # Adding information about user agent\n    opener=urllib.request.build_opener()\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]\n    urllib.request.install_opener(opener)\n\n    urllib.request.urlretrieve(image_url, filename)\n\n    return filename\n\ndef upload_image_to_S3(filename, bucket_name):\n    s3 = boto3.client('s3')\n    try:\n        response = s3.upload_file(filename, bucket_name, 'lambda.png')\n    except ClientError as e:\n        print(e)\n\n",
        "InputPayload": {
          "S3BucketName": "{{getStackInformation.S3BucketName}}"
        }
      },
      "onFailure": "step:deleteLambdaCodeFromS3",
      "description": "Uploads an image to the source S3 bucket, which will trigger the lambda to create a resized image in the resized S3 bucket.",
      "isEnd": true
    },
    {
      "name": "deleteLambdaCodeFromS3",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "s3",
        "Api": "deleteObject",
        "Bucket": "{{getLambdaBucketName.CodeS3BucketName}}",
        "Key": "CreateThumbnail.zip"
      },
      "description": "Deletes the lambda code from the S3 bucket so that resources can be cleaned up",
      "nextStep": "deleteLambdaCodeS3Stack",
      "onFailure": "step:deleteLambdaCodeS3Stack"
    },
    {
      "name": "deleteLambdaCodeS3Stack",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "LambdaCodeS3Stack"
      },
      "isEnd": false,
      "onFailure": "step:deleteStack",
      "description": "Deletes the stack containing the S3 bucket that stores the lambda code",
      "nextStep": "deleteImageFromS3"
    },
    {
      "name": "deleteImageFromS3",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "s3",
        "Api": "deleteObject",
        "Bucket": "{{getStackInformation.S3BucketName}}",
        "Key": "lambda.png"
      },
      "onFailure": "step:deleteStack",
      "description": "Deletes the tutorial image from the S3 bucket so that resources can be cleaned up",
      "nextStep": "deleteResizedImageFromS3"
    },
    {
      "name": "deleteResizedImageFromS3",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "s3",
        "Api": "deleteObject",
        "Bucket": "{{getStackInformation.S3ResizedBucketName}}",
        "Key": "resized-lambda.png"
      },
      "onFailure": "step:deleteStack",
      "description": "Deletes the resized tutorial image from the resized S3 bucket so that resources can be cleaned up",
      "nextStep": "deleteStack"
    },
    {
      "name": "deleteStack",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "LambdaAndS3Stack"
      },
      "description": "Cleans up stack for the tutorial"
    }
  ]
}
