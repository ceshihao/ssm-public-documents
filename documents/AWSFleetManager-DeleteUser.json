{
  "schemaVersion": "2.2",
  "description": "Deletes a local user account",
  "parameters": {
    "UserName": {
      "type": "String",
      "description": "The user to be deleted",
      "allowedPattern": "^[^\"'\\/\\\\\\[\\]:;|=,+*?<>@\\r\\n]+$",
      "maxChars": 32
    },
    "PerformAction": {
      "type": "String",
      "description": "(Optional) Set this to 'Yes' to perform the action.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "InvokeWindowsScript",
      "inputs": {
        "runCommand": [
          "$ErrorActionPreference = 'Stop'\n\nFunction ParseInputParameter {\n    param (\n        [string]$Name,\n        [string]$Value,\n        [string]$Regex\n    )\n\n    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'\n    if ($Value -notmatch $ValidParameterRegex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    }\n    $parameterValue = $Value.Substring(3)\n\n    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()\n    $trimmedParameterValue = $trimmedParameterValue.Substring(1)\n    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)\n\n    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    } else {\n        $trimmedParameterValue\n    }\n}\n\nfunction ExitWithFailureMessage {\n    param (\n        [string]$Message,\n        [string]$ExceptionMessage,\n        [Switch]$PrintJson\n    )\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\n        $errorMessage = $Message\n    } else {\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\n    }\n    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}\n    WriteStandardError -Message $errorMessage\n    [System.Environment]::Exit(1)\n}\n\nfunction ExitWithSuccessMessage {\n    param (\n        [string]$Message\n    )\n    Write-Host $Message\n    [System.Environment]::Exit(0)\n}\n\nfunction WriteStandardError {\n    param (\n        [string]$Message\n    )\n    $Host.UI.WriteErrorLine($Message)\n}\n\nfunction TestPerformAction {\n    param ( [string]$PerformAction )\n    if ($PerformAction -ne 'Yes') {\n        Write-Host \"No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes.\"\n        [System.Environment]::Exit(0)\n    }\n}\n\n$UserName = Write-Output --%{{{ UserName }}}\n$UserName = ParseInputParameter -Name 'UserName' -Value $UserName\n\n$PerformAction = Write-Output --%{{{ PerformAction }}}\n$PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'\nTestPerformAction -PerformAction $PerformAction\n\nfunction TestLocalUserExists {\n    param (\n        [string]$Name\n    )\n    $getCimInstance = @{\n        Class = 'Win32_UserAccount'\n        Filter = 'LocalAccount=True'\n    }\n    if (Get-CimInstance @getCimInstance | Where-Object {$_.Name -eq $Name}) {\n        $true\n    } else {\n        $false\n    }\n}\n\nif (TestLocalUserExists -Name $UserName) {\n    try {\n        ([adsi]\"WinNT://$env:COMPUTERNAME\").Delete('User', $UserName)\n        ExitWithSuccessMessage 'The specified user has been deleted.'\n    } catch {\n        ExitWithFailureMessage -Message 'Failed to delete the specified user.' -PrintJson\n    }\n} else {\n    ExitWithSuccessMessage 'The specified user does not exist.'\n}\n"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "action": "aws:runShellScript",
      "name": "InvokeLinuxScript",
      "inputs": {
        "runCommand": [
          "#!/bin/bash\nset -e\n\nExitWithFailureMessage() {\n    MESSAGE=\"$1\"\n    JSON=\"$2\"\n    if [[ \"$JSON\" == \"PRINT_JSON\" ]]; then\n        echo \"{\\\"error\\\":\\\"$MESSAGE\\\"}\"\n    fi\n    WriteStandardError \"$MESSAGE\"\n    exit 1\n}\n\nExitWithSuccessMessage() {\n    echo \"$1\"\n    exit 0\n}\n\nWriteStandardError() {\n    MESSAGE=\"$1\"\n    (>&2 echo \"$MESSAGE\")\n}\n\nTestPerformAction() {\n    if [[ \"$1\" != \"Yes\" ]]; then\n        echo \"No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes.\"\n        exit 0\n    fi\n}\n\nUserName='{{ UserName }}'\n\nPERFORMACTION='{{ PerformAction }}'\nTestPerformAction \"$PERFORMACTION\"\n\nif ! grep -q \"^$UserName:\" /etc/passwd; then\n    ExitWithFailureMessage 'The specified user does not exist.' 'PRINT_JSON'\nfi\n\nif type -P userdel &>/dev/null; then\n    COMMAND='userdel'\n    ARGUMENT='--remove'\nelif type -P deluser &>/dev/null; then\n    COMMAND='deluser'\n    ARGUMENT='--remove-home'\nelse\n    ExitWithFailureMessage 'Neither of the required commands deluser or userdel exist.' 'PRINT_JSON'\nfi\n\n$COMMAND \"$ARGUMENT\" \"$UserName\" || ExitWithFailureMessage 'Failed to delete the specified user'\nExitWithSuccessMessage 'The specified user has been deleted.'\n"
        ]
      }
    }
  ]
}
