{
  "description": "The **AWSSupport-TroubleshootLambdaInternetAccess** runbook helps you troubleshoot internet access issues for an AWS Lambda function that was launched into an Amazon Virtual Private Cloud (Amazon VPC) with a NAT Gateway. Resources such as subnet routes, security groups rules, and network access control list (ACL) rules are reviewed to confirm if outbound internet access is allowed.\n**Note**: This runbook only supports troubleshooting an internet connection via NAT Gateway.\n**Important**: The describe APIs used in this runbook can be throttled due to their low thresholds. It is recommended that you only execute this runbook once per Lambda function, and you should consider executing no more than 5 concurrent executions of this runbook across different functions to avoid AWS API throttles.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "checkVpc.vpc",
    "checkVpc.subnet",
    "checkVpc.securityGroups",
    "checkSubnet.subnets",
    "checkSecurityGroups.secgrps",
    "checkNACL.NACL"
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "FunctionName": {
      "type": "String",
      "description": "(Required) The name of the Lambda function you want to troubleshoot internet access for.",
      "allowedPattern": "^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?$"
    },
    "destinationIp": {
      "type": "String",
      "description": "(Required) The destination IP address you want to establish an outbound connection to.",
      "allowedPattern": "\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b"
    },
    "destinationPort": {
      "type": "String",
      "description": "(Optional) The destination port you want to establish an outbound connection on.",
      "default": "443",
      "allowedPattern": "^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
    }
  },
  "mainSteps": [
    {
      "name": "checkVpc",
      "action": "aws:executeScript",
      "description": "Verifies the configuration of various resources in your VPC where the Lambda function was launched.",
      "inputs": {
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nfrom typing import Any\n\nimport boto3\nfrom botocore.config import Config\n\nretry_config = Config(retries={\"max_attempts\": 5, \"mode\": \"standard\"})\nclient = boto3.client(\"lambda\", config=retry_config)\n\n\ndef check_vpc(events: dict, _: Any):\n    response = client.get_function(FunctionName=events[\"FunctionName\"])\n    if \"VpcConfig\" in response[\"Configuration\"] and response[\"Configuration\"][\"VpcConfig\"][\"VpcId\"] != \"\":\n        return response[\"Configuration\"][\"VpcConfig\"]\n    else:\n        return {\"VpcId\": \"Your Lambda is not associated to any VPC\"}\n",
        "InputPayload": {
          "FunctionName": "{{FunctionName}}"
        },
        "Handler": "check_vpc",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "vpc",
          "Selector": "$.Payload.VpcId",
          "Type": "String"
        },
        {
          "Name": "subnet",
          "Selector": "$.Payload.SubnetIds",
          "Type": "StringList"
        },
        {
          "Name": "securityGroups",
          "Selector": "$.Payload.SecurityGroupIds",
          "Type": "StringList"
        },
        {
          "Name": "vpcflag",
          "Selector": "$.Payload.vpcflag",
          "Type": "String"
        }
      ],
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onCancel": "Abort",
      "onFailure": "Abort",
      "nextStep": "branchOnVpcFlag"
    },
    {
      "name": "branchOnVpcFlag",
      "action": "aws:branch",
      "description": "Branches based on whether the Lambda function specified is in a VPC or not.",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{checkVpc.vpc}}",
              "StringEquals": "Your Lambda is not associated to any VPC"
            },
            "NextStep": "checkSubnet"
          }
        ]
      },
      "timeoutSeconds": 10,
      "isEnd": true
    },
    {
      "name": "checkSubnet",
      "action": "aws:executeScript",
      "description": "Reviews the route table routes for the subnet where the Lambda function was launched, and verifies that routes to a network address translation (NAT) gateway, and internet gateway are present. Confirms the Lambda function is not in a public subnet.",
      "inputs": {
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nfrom ipaddress import IPv4Address, IPv6Address, ip_address, ip_network\nfrom typing import Any, Union\n\nimport boto3\nfrom botocore.config import Config\n\nretry_config = Config(retries={\"max_attempts\": 5, \"mode\": \"standard\"})\nclient = boto3.client(\"ec2\", config=retry_config)\n\nMESSAGES = {\n    \"LOCAL_ROUTE\": \"This Route Table has a local route for your given destination IP.\",\n    \"IGW_INVALID_NAT_ROUTE\": \"This Route Table has an internet gateway route for your destination. However, route should be pointed to a NAT gateway. Correct this route entry to the NAT gateway.\",\n    \"MISCONFIGURED_NAT_SUBNET\": \"This Route Table has a NAT gateway route for your destination. Check whether this NAT gateway is launched in public subnet or if it exists (check for blackhole routes).\",\n    \"NON_NAT_ROUTE\": \"This Route table has a route for given destination IP which is other than internet gateway, NAT or local route.\",\n    \"NO_NAT_FOUND\": \"This Route Table does not have a NAT gateway route for your destination. Please configure a NAT gateway as a target for this route.\",\n    \"VALID_NAT\": \"This Route Table has an active NAT gateway path. Also, the NAT gateway is launched in public subnet.\",\n    \"MISCONFIGURED_ACTIVE_NAT_SUBNET\": \"This Route Table has an active NAT gateway path. However, the NAT gateway is not launched in public subnet, or the NAT Subnet does not have any internet gateway routing path for your destination ip.\",\n}\n\n\ndef get_main_route_table_map(\n    main_route_table: list, subnet_with_main_route_table: list, destination: Union[IPv4Address, IPv6Address]\n):\n    response = client.describe_route_tables(RouteTableIds=[main_route_table])[\"RouteTables\"][0][\"Routes\"]\n    route_table_subnet_map = {}\n    route_table_to_target = {}\n    destination = ip_address(destination)\n    subnet_to_nat = {}\n\n    for subnet in subnet_with_main_route_table:\n        route_table_subnet_map[subnet] = main_route_table\n\n    most_specific = -1\n    next_hop = {}\n\n    for route in response:\n        if route.get(\"DestinationCidrBlock\"):\n            mask = int(route[\"DestinationCidrBlock\"].split(\"/\")[1])\n            if (\n                \"DestinationPrefixListId\" not in str(route)\n                and destination in ip_network(route[\"DestinationCidrBlock\"], strict=False)\n                and mask > most_specific\n            ):\n                most_specific = mask\n                next_hop = route\n\n    route_table_to_target[main_route_table] = {}\n    route_table_to_target[main_route_table][\"Route\"] = next_hop\n\n    if \"GatewayId\" in next_hop:\n        if next_hop[\"GatewayId\"] == \"local\":\n            route_table_to_target[main_route_table][\"Analysis\"] = MESSAGES[\"LOCAL_ROUTE\"]\n        else:\n            route_table_to_target[main_route_table][\"Analysis\"] = MESSAGES[\"IGW_INVALID_NAT_ROUTE\"]\n    elif \"NatGatewayId\" in next_hop:\n        for subnet in subnet_with_main_route_table:\n            subnet_to_nat[subnet] = next_hop[\"NatGatewayId\"]\n        route_table_to_target[main_route_table][\"Analysis\"] = MESSAGES[\"MISCONFIGURED_NAT_SUBNET\"]\n    elif next_hop:\n        route_table_to_target[main_route_table][\"Analysis\"] = MESSAGES[\"NON_NAT_ROUTE\"]\n    else:\n        route_table_to_target[main_route_table][\"Analysis\"] = MESSAGES[\"NO_NAT_FOUND\"]\n        route_table_to_target[main_route_table][\"MainRouteTable\"] = \"yes\"\n    return route_table_to_target, route_table_subnet_map, subnet_to_nat\n\n\ndef get_lambda_eni(subnet: str, sec_grp: list):\n    sec_grp.sort()\n    response = client.describe_network_interfaces(\n        Filters=[\n            {\"Name\": \"attachment.instance-owner-id\", \"Values\": [\"amazon-aws\"]},\n            {\"Name\": \"group-id\", \"Values\": sec_grp},\n            {\"Name\": \"subnet-id\", \"Values\": [subnet]},\n        ]\n    )\n\n    for eni in response[\"NetworkInterfaces\"]:\n        eni_security_group = []\n        for group in eni[\"Groups\"]:\n            eni_security_group.append(group[\"GroupId\"])\n            eni_security_group.sort()\n\n        if sec_grp == eni_security_group:\n            return eni[\"PrivateIpAddress\"]\n\n\ndef check_path(response: dict, destination_ip: Union[IPv4Address, IPv6Address], subnet_ids: list, vpc_id: str):\n    route_table_subnet_map = {}\n    route_table_to_target = {}\n    destination = ip_address(destination_ip)\n    subnet_to_nat = {}\n\n    for route_tables in response[\"RouteTables\"]:\n        subnet_flag = []\n        for association_state in route_tables[\"Associations\"]:\n            if \"SubnetId\" in association_state:\n                if association_state[\"SubnetId\"] in subnet_ids:\n                    route_table_subnet_map[association_state[\"SubnetId\"]] = association_state[\"RouteTableId\"]\n                    subnet_flag.append(association_state[\"SubnetId\"])\n\n        most_specific = -1\n        next_hop = {}\n\n        for route in route_tables[\"Routes\"]:\n            if \"DestinationCidrBlock\" in route:\n                mask = int(route[\"DestinationCidrBlock\"].split(\"/\")[1])\n                if (\n                    \"DestinationPrefixListId\" not in str(route)\n                    and destination in ip_network(route[\"DestinationCidrBlock\"])\n                    and mask > most_specific\n                ):\n                    most_specific = mask\n                    next_hop = route\n\n        route_table_to_target[route_tables[\"RouteTableId\"]] = {}\n        route_table_to_target[route_tables[\"RouteTableId\"]][\"Route\"] = next_hop\n        if \"GatewayId\" in next_hop:\n            if next_hop[\"GatewayId\"] == \"local\":\n                route_table_to_target[route_tables[\"RouteTableId\"]][\n                    \"Analysis\"\n                ] = \"This Route Table has a local route for your given destination IP\"\n            else:\n                route_table_to_target[route_tables[\"RouteTableId\"]][\"Analysis\"] = MESSAGES[\"IGW_INVALID_NAT_ROUTE\"]\n        elif \"NatGatewayId\" in next_hop:\n            for subnet in subnet_flag:\n                subnet_to_nat[subnet] = next_hop[\"NatGatewayId\"]\n            route_table_to_target[route_tables[\"RouteTableId\"]][\"Analysis\"] = MESSAGES[\"MISCONFIGURED_NAT_SUBNET\"]\n        elif next_hop:\n            route_table_to_target[route_tables[\"RouteTableId\"]][\"Analysis\"] = MESSAGES[\"NON_NAT_ROUTE\"]\n        else:\n            route_table_to_target[route_tables[\"RouteTableId\"]][\"Analysis\"] = MESSAGES[\"NO_NAT_FOUND\"]\n\n    subnet_with_main_route_table = list(set(subnet_ids) - set(route_table_subnet_map.keys()))\n\n    if subnet_with_main_route_table:\n        main_route_table = \"\"\n        response = client.describe_route_tables(Filters=[{\"Name\": \"vpc-id\", \"Values\": [vpc_id]}])\n        for route_table in response[\"RouteTables\"]:\n            for association in route_table[\"Associations\"]:\n                if association[\"Main\"]:\n                    main_route_table = association[\"RouteTableId\"]\n        route_table_to_target_1, route_table_subnet_map_1, subnet_to_nat_1 = get_main_route_table_map(\n            main_route_table, subnet_with_main_route_table, destination\n        )\n        subnet_to_nat.update(subnet_to_nat_1)\n        route_table_subnet_map.update(route_table_subnet_map_1)\n        route_table_to_target.update(route_table_to_target_1)\n        return route_table_to_target, route_table_subnet_map, subnet_to_nat\n    else:\n        return route_table_to_target, route_table_subnet_map, subnet_to_nat\n\n\ndef check_subnet(events: dict, _: Any):\n    subnet_ids = events[\"subnet\"]\n    security_groups = events[\"secgrps\"]\n    vpc_id = events[\"vpcId\"]\n    response = client.describe_route_tables(Filters=[{\"Name\": \"association.subnet-id\", \"Values\": subnet_ids}])\n    route_table_to_target, route_table_subnet_map, subnet_to_nat = check_path(\n        response, events[\"destinationIp\"], subnet_ids, vpc_id\n    )\n\n    nat_list = []\n    nat_map = {}\n\n    for _, route_config in route_table_to_target.items():\n        if \"NatGatewayId\" in route_config[\"Route\"] and route_config[\"Route\"][\"State\"] == \"active\":\n            subnet_id = client.describe_nat_gateways(NatGatewayIds=[route_config[\"Route\"][\"NatGatewayId\"]])[\n                \"NatGateways\"\n            ][0][\"SubnetId\"]\n            nat_list.append(subnet_id)\n            nat_map[route_config[\"Route\"][\"NatGatewayId\"]] = subnet_id\n            response = client.describe_route_tables(Filters=[{\"Name\": \"association.subnet-id\", \"Values\": [subnet_id]}])\n            result = check_path(response, events[\"destinationIp\"], [subnet_id], vpc_id)[0]\n\n            for _, updated_route_config in result.items():\n                if updated_route_config[\"Route\"] == {}:\n                    route_config[\"Analysis\"] = \"NAT Gateway does not have any route for the destination IP\"\n                elif \"GatewayId\" in updated_route_config[\"Route\"]:\n                    route_config[\"Analysis\"] = MESSAGES[\"VALID_NAT\"]\n                else:\n                    route_config[\"Analysis\"] = MESSAGES[\"MISCONFIGURED_ACTIVE_NAT_SUBNET\"]\n\n    result = {\"subnet\": {}, \"LambdaSubnetIpToNatSubnet\": {}}\n\n    for subnet, route_table in route_table_subnet_map.items():\n        result[\"subnet\"][subnet] = route_table_to_target[route_table]\n        result[\"subnet\"][subnet][\"RouteTable\"] = route_table\n\n    lambda_subnet_ip_to_nat_subnet = {}\n    for subnet, nat in subnet_to_nat.items():\n        lambda_ip = get_lambda_eni(subnet, security_groups)\n        if nat in nat_map:\n            lambda_subnet_ip_to_nat_subnet[lambda_ip] = nat_map[nat]\n\n    result[\"LambdaSubnetIpToNatSubnet\"] = lambda_subnet_ip_to_nat_subnet\n    result[\"NAT_Gateway_subnets\"] = list(set(nat_list))\n\n    return result\n",
        "InputPayload": {
          "vpcId": "{{checkVpc.vpc}}",
          "subnet": "{{checkVpc.subnet}}",
          "destinationIp": "{{destinationIp}}",
          "secgrps": "{{checkVpc.securityGroups}}"
        },
        "Handler": "check_subnet",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "subnets",
          "Selector": "$.Payload.subnet",
          "Type": "StringMap"
        },
        {
          "Name": "Natsubnets",
          "Selector": "$.Payload.NAT_Gateway_subnets",
          "Type": "StringList"
        },
        {
          "Name": "LambdaSubnetIpToNatSubnet",
          "Selector": "$.Payload.LambdaSubnetIpToNatSubnet",
          "Type": "StringMap"
        }
      ],
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onCancel": "Abort",
      "onFailure": "Abort",
      "nextStep": "checkSecurityGroups"
    },
    {
      "name": "checkSecurityGroups",
      "action": "aws:executeScript",
      "description": "Verifies the security group associated with the Lambda function allows outbound internet access based on the values specified for the `destinationIp` and `destinationPort` parameters.",
      "inputs": {
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nfrom ipaddress import ip_address, ip_network\nfrom typing import Any\n\nimport boto3\nfrom botocore.config import Config\n\nretry_config = Config(retries={\"max_attempts\": 5, \"mode\": \"standard\"})\nclient = boto3.client(\"ec2\", config=retry_config)\n\n\ndef check_security_groups(events: dict, _: Any):\n\n    destination_ip = ip_address(events[\"destinationIp\"])\n    allowed_ports = int(events[\"destinationPort\"])\n\n    response = client.describe_security_groups(GroupIds=events[\"secgrps\"])\n\n    result = {}\n\n    for security_group in response[\"SecurityGroups\"]:\n        result[security_group[\"GroupId\"]] = \"\"\n        for rule in security_group[\"IpPermissionsEgress\"]:\n            if (\n                rule[\"IpProtocol\"] == \"-1\"\n                or (rule[\"FromPort\"] == allowed_ports and rule[\"ToPort\"] == allowed_ports)\n                or (allowed_ports in range(rule[\"FromPort\"], rule[\"ToPort\"] + 1))\n            ):\n                for cidr in rule[\"IpRanges\"]:\n                    if destination_ip in ip_network(cidr[\"CidrIp\"]):\n                        result[security_group[\"GroupId\"]] = {\"Status\": \"Allowed\"}\n                        result[security_group[\"GroupId\"]][\n                            \"Analysis\"\n                        ] = \"This security group has allowed destination IP and port in its outbound rule.\"\n                        break\n        if \"Status\" not in result[security_group[\"GroupId\"]]:\n            result[security_group[\"GroupId\"]] = {\"Status\": \"notAllowed\"}\n            result[security_group[\"GroupId\"]][\n                \"Analysis\"\n            ] = \"This security group does not have an outbound rule for your destination IP or destination port. Please allow them in the outbound rule.\"\n\n    return result\n",
        "InputPayload": {
          "destinationIp": "{{destinationIp}}",
          "destinationPort": "{{destinationPort}}",
          "secgrps": "{{checkVpc.securityGroups}}"
        },
        "Handler": "check_security_groups",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "secgrps",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ],
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onCancel": "Abort",
      "onFailure": "Abort",
      "nextStep": "checkNACL"
    },
    {
      "name": "checkNACL",
      "description": "Verifies the ACL rules associated with the subnets of the Lambda function and the NAT gateway allow outbound internet access based on the values specified for the `destinationIp` and `destinationPort` parameters.",
      "action": "aws:executeScript",
      "inputs": {
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nfrom ipaddress import IPv4Address, IPv6Address, ip_address, ip_network\nfrom typing import Any, Union\n\nimport boto3\nfrom botocore.config import Config\n\nretry_config = Config(retries={\"max_attempts\": 5, \"mode\": \"standard\"})\nclient = boto3.client(\"ec2\", config=retry_config)\n\nMESSAGES = {\n    \"NO_EGRESS_OR_INGRESS\": \"There is no ingress or egress rule allowed in your NACL for your desired destination and ports. Please allow them in NACL egress and ingress rules.\",\n    \"NO_EGRESS\": \"This NACL has an allow rule for Ingress traffic but there is no Egress rule. Please allow the destination IP / destination port in Egress rule.\",\n    \"NO_INGRESS\": \"This NACL has an allow rule for Egress traffic but there is no Ingress rule. Please allow the destination IP / destination port in Ingress rule.\",\n    \"ALL_ALLOWED\": \"This NACL has both Egress and Ingress rule allowing your desired destination IP / destination port.\",\n    \"NACL_NO_EGRESS_OR_INGRESS\": \"This is a NAT subnet NACL. It does not have ingress or egress rule allowed in it for Lambda function corresponding private ip {lambda_ip}. Please allow this IP in your egress and ingress NACL rules.\",\n    \"NACL_NO_EGRESS\": \"This is a NAT subnet NACL. It does not have egress rule allowed in it for Lambda function corresponding private ip {lambda_ip}. Please allow this IP in your egress NACL rules.\",\n    \"NACL_NO_INGRESS\": \"This is a NAT subnet NACL. It does not have ingress rule allowed in it for Lambda function corresponding private ip {lambda_ip}. Please allow this IP in your ingress NACL rules.\",\n    \"NACL_ALL_ALLOWED\": \"This NACL has both Egress and Ingress rule allowing the Lambda function corresponding private ip {lambda_ip}.\",\n}\n\n\ndef egress_check(entries: list, destination_ip: Union[IPv4Address, IPv6Address], allowed_port: int, ip_check: str):\n    entries = sorted(entries, key=lambda i: i[\"RuleNumber\"])\n    for entry in entries:\n        if \"CidrBlock\" in entry:\n            if destination_ip in ip_network(entry[\"CidrBlock\"]):\n                if ip_check == \"destinationIp\":\n                    if entry[\"Egress\"] and (\n                        entry[\"Protocol\"] == \"-1\"\n                        or (\n                            (allowed_port in range(entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1))\n                            if \"PortRange\" in entry\n                            else False\n                        )\n                    ):\n                        if entry[\"RuleAction\"] == \"deny\":\n                            return \"notAllowed\"\n                        if entry[\"RuleAction\"] == \"allow\":\n                            return \"Allowed\"\n                else:\n                    if entry[\"Egress\"] and (\n                        entry[\"Protocol\"] == \"-1\"\n                        or (\n                            (\n                                set(range(1024, 65535)).issubset(\n                                    range(entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1)\n                                )\n                            )\n                            if \"PortRange\" in entry\n                            else False\n                        )\n                    ):\n                        if entry[\"RuleAction\"] == \"deny\":\n                            return \"notAllowed\"\n                        if entry[\"RuleAction\"] == \"allow\":\n                            return \"Allowed\"\n    return \"notAllowed\"\n\n\ndef ingress_check(entries: list, destination_ip: Union[IPv4Address, IPv6Address], allowed_port: int, ip_check: str):\n    entries = sorted(entries, key=lambda i: i[\"RuleNumber\"])\n    for entry in entries:\n        if \"CidrBlock\" in entry:\n            if destination_ip in ip_network(entry[\"CidrBlock\"]):\n                if ip_check == \"destinationIp\":\n                    if not entry[\"Egress\"] and (\n                        entry[\"Protocol\"] == \"-1\"\n                        or (\n                            (\n                                set(range(1024, 65535)).issubset(\n                                    range(entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1)\n                                )\n                            )\n                            if \"PortRange\" in entry\n                            else False\n                        )\n                    ):\n                        if entry[\"RuleAction\"] == \"deny\":\n                            return \"notAllowed\"\n                        if entry[\"RuleAction\"] == \"allow\":\n                            return \"Allowed\"\n                else:\n                    if not entry[\"Egress\"] and (\n                        entry[\"Protocol\"] == \"-1\"\n                        or (\n                            (allowed_port in range(entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1))\n                            if \"PortRange\" in entry\n                            else False\n                        )\n                    ):\n                        if entry[\"RuleAction\"] == \"deny\":\n                            return \"notAllowed\"\n                        if entry[\"RuleAction\"] == \"allow\":\n                            return \"Allowed\"\n    return \"notAllowed\"\n\n\ndef check_nacl(events: dict, _: Any):\n    nat_subnet_list = events[\"natSubnets\"]\n    destination_ip = ip_address(events[\"destinationIp\"])\n    allowed_port = int(events[\"destinationPort\"])\n    lambda_ip_to_nat_subnet = events[\"LambdaSubnetIpToNatSubnet\"]\n    total_subnets = events[\"lambdaSubnets\"]\n    total_subnets.extend(nat_subnet_list)\n    subnet_nacl = {}\n\n    response = client.describe_network_acls(Filters=[{\"Name\": \"association.subnet-id\", \"Values\": total_subnets}])\n    for network_acl in response[\"NetworkAcls\"]:\n        subnet_flag = {}\n        for association in network_acl[\"Associations\"]:\n            if association[\"SubnetId\"] in total_subnets and association[\"SubnetId\"] not in nat_subnet_list:\n                subnet_flag[association[\"SubnetId\"]] = \"LambdaSubnet\"\n                subnet_nacl[association[\"SubnetId\"]] = {}\n                subnet_nacl[association[\"SubnetId\"]][\"NACL\"] = association[\"NetworkAclId\"]\n            if association[\"SubnetId\"] in total_subnets and association[\"SubnetId\"] in nat_subnet_list:\n                subnet_flag[association[\"SubnetId\"]] = \"NatSubnet\"\n                subnet_nacl[association[\"SubnetId\"]] = {}\n                subnet_nacl[association[\"SubnetId\"]][\"NACL\"] = association[\"NetworkAclId\"]\n\n        temp_egress = egress_check(network_acl[\"Entries\"], destination_ip, allowed_port, \"destinationIp\")\n        temp_ingress = ingress_check(network_acl[\"Entries\"], destination_ip, allowed_port, \"destinationIp\")\n\n        if temp_egress == temp_ingress == \"notAllowed\":\n            analysis = MESSAGES[\"NO_EGRESS_OR_INGRESS\"]\n        elif temp_egress == \"notAllowed\" and temp_ingress == \"Allowed\":\n            analysis = MESSAGES[\"NO_EGRESS\"]\n        elif temp_egress == \"Allowed\" and temp_ingress == \"notAllowed\":\n            analysis = MESSAGES[\"NO_INGRESS\"]\n        else:\n            analysis = MESSAGES[\"ALL_ALLOWED\"]\n\n        for key, value in subnet_flag.items():\n            subnet_nacl[key][\"destinationIp_Egress\"] = temp_egress\n            subnet_nacl[key][\"destinationIp_Ingress\"] = temp_ingress\n            subnet_nacl[key][\"Analysis\"] = analysis\n\n            if value == \"NatSubnet\":\n                subnet_nacl[key][\"LambdaIpRules\"] = {}\n                for key_1, value_1 in lambda_ip_to_nat_subnet.items():\n                    if value_1 == key:\n                        temp_egress = egress_check(\n                            network_acl[\"Entries\"], ip_address(key_1), allowed_port, \"LambdaIpCheck\"\n                        )\n                        temp_ingress = ingress_check(\n                            network_acl[\"Entries\"], ip_address(key_1), allowed_port, \"LambdaIpCheck\"\n                        )\n\n                    if temp_egress == temp_ingress == \"notAllowed\":\n                        analysis = MESSAGES[\"NACL_NO_EGRESS_OR_INGRESS\"].format(lambda_ip=str(key_1))\n\n                    elif temp_egress == \"notAllowed\" and temp_ingress == \"Allowed\":\n                        analysis = MESSAGES[\"NACL_NO_EGRESS\"].format(lambda_ip=str(key_1))\n                    elif temp_egress == \"Allowed\" and temp_ingress == \"notAllowed\":\n                        analysis = MESSAGES[\"NACL_NO_INGRESS\"].format(lambda_ip=str(key_1))\n                    else:\n                        analysis = MESSAGES[\"NACL_ALL_ALLOWED\"].format(lambda_ip=str(key_1))\n\n                    subnet_nacl[key][\"LambdaIpRules\"][key_1] = {}\n                    subnet_nacl[key][\"LambdaIpRules\"][key_1][\"Egress\"] = temp_egress\n                    subnet_nacl[key][\"LambdaIpRules\"][key_1][\"Ingress\"] = temp_ingress\n                    subnet_nacl[key][\"LambdaIpRules\"][key_1][\"Analysis\"] = analysis\n\n    return subnet_nacl\n",
        "InputPayload": {
          "destinationIp": "{{destinationIp}}",
          "destinationPort": "{{destinationPort}}",
          "natSubnets": "{{checkSubnet.Natsubnets}}",
          "lambdaSubnets": "{{checkVpc.subnet}}",
          "LambdaSubnetIpToNatSubnet": "{{checkSubnet.LambdaSubnetIpToNatSubnet}}"
        },
        "Handler": "check_nacl",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "NACL",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ],
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onCancel": "Abort",
      "onFailure": "Abort",
      "isEnd": true
    }
  ]
}
