{
  "description": "The **AWSSupport-TroubleshootLinuxMGNDRSAgentLogs** automation runbook helps detecting common installation issues in the AWS Application Migration Service (AWS MGN) or AWS Elastic Disaster Recovery (AWS DRS) replication agents logs on Linux servers. The automation downloads the agent logs from the specified Amazon Simple Storage Service (Amazon S3) bucket and searches for a list of known issues. If any known issue is found, the runbook returns the recommended solution. \n\n### Note:\n> * As a best practice, verify that the Amazon S3 bucket policy and ACLs do not grant any unnecessary read or write permissions to principals that do not need access the bucket.\n> * We recommend setting Amazon S3 [server-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html).\n> * We recommend enabling [Amazon S3 server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html) to log the requests that are made to the bucket.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) The name of the Amazon S3 bucket where the replication agent log is stored."
    },
    "S3ObjectKey": {
      "type": "String",
      "description": "(Required) The key of S3 object where the replication agent installer log file is stored. If for example the log is stored as `s3://bucket_name/path/to/file/aws_replication_agent_installer.log` then you should specify `path/to/file/aws_replication_agent_installer.log` as the input.",
      "allowedPattern": "^[a-zA-Z0-9][-./_()a-zA-Z0-9!*']{0,1023}$"
    },
    "ServiceName": {
      "description": "(Required) The name of the replication service the log is uploaded. Specify `AWS MGN` for AWS Application Migration Service, or `AWS DRS` for AWS Elastic Disaster Recovery.",
      "type": "String",
      "allowedValues": [
        "AWS MGN",
        "AWS DRS"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "ValidateInput",
      "action": "aws:executeScript",
      "nextStep": "CheckReplicationAgentLogErrors",
      "description": "Ensures that the replication agent log file is valid and accessible using the provided Amazon S3 bucket name and path to the object, then returns the byte number of the latest agent installation.",
      "onFailure": "Abort",
      "maxAttempts": 1,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "function_handler",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\nimport time\nfrom typing import Any, Dict\n\nimport boto3\nimport botocore.exceptions\n\ns3 = boto3.client(\"s3\")\n\nERROR_ICON = \" \\u274C\"\nINFO_ICON = \" \\u2705\"\n\n\ndef function_handler(events: Dict[str, str], context: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"Ensures that the replication agent log file is valid and accessible using the provided S3 path and retrieves the byte number of the latest agent installation.\n\n    Args:\n        events (dict):\n            Contains ssm input parameters BucketName and S3ObjectKey.\n        context (dict):\n            Contains the execution context.\n\n    Returns:\n        dict: has 3 keys:\n              byte_number (str): the byte number of the line which contains the latest agent installation in the logs.\n              success (boolean): True if the replication agent log file is valid and accessible, False otherwise.\n              message (str): the output of the validation step.\n    \"\"\"\n\n    bucket_name = events.get(\"BucketName\")\n    key = events.get(\"S3ObjectKey\")\n    start_time = time.time()\n    line_number = 0\n    try:\n        response = s3.get_object(Bucket=bucket_name, Key=key)\n        s3_object = response[\"Body\"]\n        current_byte = 0\n        chunk_size = 2 * 1024 * 1024  # 2 MB\n        latest_installation_byte_nbr = 0\n        is_installation_found = False\n        while True:\n            chunk = s3_object.read(chunk_size).decode(\"utf-8\")\n            if not chunk:\n                break\n            lines = chunk.splitlines()\n            for line in lines:\n                line_number += 1\n                if line_number % 10000 == 0:\n                    elapsed_time = time.time() - start_time\n                    # check if the script execution time is approaching the executeScript timeout of 10 min.\n                    if elapsed_time >= (60 * 9) + 40:  # 9,40 min\n                        return {\n                            \"byte_number\": \"-1\",\n                            \"success\": False,\n                            \"message\": f\"{ERROR_ICON} The log file is too large.\\nPlease make sure to upload the agent installation log file named 'aws_replication_agent_installer.log' and to only keep the latest installation which starts with the sentence:\\n'Installer called with the following switches:'\",\n                        }\n                if \"Installer called with the following switches:\" in line:\n                    latest_installation_byte_nbr = current_byte\n                    is_installation_found = True\n                current_byte += len(line) + 1  # Add 1 for the newline character\n        if not is_installation_found:\n            return {\n                \"byte_number\": \"-1\",\n                \"success\": False,\n                \"message\": f\"{ERROR_ICON} The log file doesn't contain any complete agent installation.\\nPlease make sure that the agent installation log file contains at least one occurrence of the following sentence which indicates the start of a new installation:\\n'Installer called with the following switches:'\",\n            }\n        return {\n            \"byte_number\": str(latest_installation_byte_nbr),\n            \"success\": True,\n            \"message\": f\"{INFO_ICON} The replication agent log file is valid and accessible using the provided S3 path.\",\n        }\n    except botocore.exceptions.ClientError as error:\n        error_msg = f\"{ERROR_ICON} The following Exception occurred while checking that the agent installation log file located on Amazon S3 is valid and accessible:\\n {error}\"\n        return {\"byte_number\": \"-1\", \"success\": False, \"message\": error_msg}\n    except Exception:\n        generic_error_msg = f\"{ERROR_ICON} An exception occurred while checking that the agent installation log file located on Amazon S3 is valid and accessible:\\n\"\n        return {\"byte_number\": \"-1\", \"success\": False, \"message\": generic_error_msg}\n",
        "InputPayload": {
          "BucketName": "{{ BucketName }}",
          "S3ObjectKey": "{{ S3ObjectKey }}"
        }
      },
      "outputs": [
        {
          "Name": "ByteNumber",
          "Selector": "$.Payload.byte_number",
          "Type": "String"
        },
        {
          "Name": "Success",
          "Selector": "$.Payload.success",
          "Type": "Boolean"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.message",
          "Type": "String"
        }
      ]
    },
    {
      "name": "CheckReplicationAgentLogErrors",
      "action": "aws:executeScript",
      "nextStep": "MakeFinalOutput",
      "description": "Reads the replication agent log file starting from the latest installation byte and search for known AWS MGN or AWS DRS errors.",
      "onFailure": "Abort",
      "maxAttempts": 1,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "check_replication_agent_log_errors.function_handler",
        "InputPayload": {
          "BucketName": "{{ BucketName }}",
          "S3ObjectKey": "{{ S3ObjectKey }}",
          "IsInputValid": "{{ ValidateInput.Success }}",
          "ByteNumber": "{{ ValidateInput.ByteNumber }}",
          "ServiceName": "{{ ServiceName }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "LogDetectedErrors",
          "Selector": "$.Payload.log_detected_errors",
          "Type": "StringMap"
        },
        {
          "Name": "Exception",
          "Selector": "$.Payload.exception",
          "Type": "String"
        }
      ]
    },
    {
      "name": "MakeFinalOutput",
      "action": "aws:executeScript",
      "maxAttempts": 1,
      "timeoutSeconds": 180,
      "isEnd": true,
      "description": "Creates the output from the previous checks including information about the errors found and troubleshooting recommendations.",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "make_final_output.function_handler",
        "InputPayload": {
          "IsInputValid": "{{ ValidateInput.Success }}",
          "InputValidationOutput": "{{ ValidateInput.Message }}",
          "DetectedErrors": "{{ CheckReplicationAgentLogErrors.LogDetectedErrors }}",
          "ErrorCheckingExceptions": "{{ CheckReplicationAgentLogErrors.Exception }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ],
  "outputs": [
    "MakeFinalOutput.Output"
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "371d9f629fb447929ac8438b840c746e0875a0ff8b4433398546409c68fa2d64"
      }
    }
  }
}
