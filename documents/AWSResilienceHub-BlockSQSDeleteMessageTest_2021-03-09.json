{
  "description": "## Id\nAWSResilienceHub-BlockSQSDeleteMessageTest_2021-03-09\n\n## Intent\nTest behavior when messages are not deleted from a specific queue. Adds deny policy to delete messages from queue and waits for ApproximateAgeOfOldestMessage metric alarm to indicate messages not being deleted and remain in the queue for a time higher than the average time to process\n\n## Type\nTEST\n\n## Risk\nHigh\n\n## Requirements:\n  * SQS queue\n  * Amazon CloudWatch alarm is setup for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Threshold age should be higher than average time to process message on this queue\n\n## Permissions required for AutomationAssumeRole\n  * cloudwatch:DescribeAlarms\n  * sqs:GetQueueAttributes\n  * sqs:SetQueueAttributes\n  * ssm:GetParameters\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * iam:PassRole\n\n## Supports Rollback\nYes. The document returns the queue policy to its initial state\n\n## Cancellation behavior\nThe document returns the queue policy to its initial state\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) QueueUrl\n  * type: String\n  * description: The URL of the SQS queue\n\n### (Required) SQSUserErrorAlarmName\n  * type: String\n  * description: Amazon CloudWatch alarm for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Maximum age should be higher than average time to process message on this queue\n\n### (Optional) IsRollback\n  * type: String\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\n  * default: false\n\n### (Optional) PreviousExecutionId\n  * type: String\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\n\n## Details\nThe document injects failure by adding a deny delete message policy to the queue. In case of issues users\nshould manually remove the deny delete message policy.\n\n## Steps executed in normal flow\n  * CheckIsRollback\n  * AssertAlarmToBeGreenBeforeTest\n  * BackupCurrentExecution\n  * GetPolicyWithDenyOnDeleteMessageAction\n  * UpdatePolicy\n  * AssertAlarmToBeRed\n  * RollbackCurrentExecution\n  * AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n  * CheckIsRollback\n  * GetInputsFromPreviousExecution\n  * AssertInputsFromPreviousExecution\n  * PrepareRollbackOfPreviousExecution\n  * RollbackPreviousExecution\n\n## Outputs\nNone",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "QueueUrl": {
      "type": "String",
      "description": "(Required) The URL of the queue"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "SQSUserErrorAlarmName": {
      "type": "String",
      "description": "(Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test."
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetInputsFromPreviousExecution",
            "Variable": "{{IsRollback}}",
            "StringEquals": "true"
          }
        ],
        "Default": "AssertAlarmToBeGreenBeforeTest"
      }
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "QueueUrl",
          "Selector": "$.Payload.QueueUrl[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertInputsFromPreviousExecution",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "PrepareRollbackOfPreviousExecution",
            "Variable": "{{ GetInputsFromPreviousExecution.QueueUrl }}",
            "StringEquals": "{{ QueueUrl }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get initial queue policy from previous execution",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "Policy",
          "Selector": "$.Payload.Policy[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{PreviousExecutionId}}",
          "StepName": "BackupCurrentExecution",
          "ResponseField": "Policy"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    # Sets values in string type regardless of what is the original value type. In order to set\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "RollbackPreviousExecution",
      "description": "Revert queue policy to initial state",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "revert_sqs_policy",
        "InputPayload": {
          "OptionalBackupPolicy": "{{PrepareRollbackOfPreviousExecution.Policy}}",
          "QueueUrl": "{{ QueueUrl }}"
        },
        "Script": "import json\nimport logging\nimport random\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Callable, List, Optional\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef revert_sqs_policy(events: dict, context: dict) -> None:\n    \"\"\"\n    Revert SQS policy to the initial state by providing the backup policy\n    \"\"\"\n    if \"QueueUrl\" not in events or \"OptionalBackupPolicy\" not in events:\n        raise KeyError(\"Requires QueueUrl and OptionalBackupPolicy in events\")\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    sqs_client = boto3.client(\"sqs\", config=config)\n    queue_url: str = events.get(\"QueueUrl\")\n    optional_backup_policy: str = events.get(\"OptionalBackupPolicy\")\n    optional_backup_policy = None if optional_backup_policy.startswith(\"{{\") else optional_backup_policy\n    if optional_backup_policy is None:\n        sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={\"Policy\": \"\"})\n    else:\n        sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={\"Policy\": str(optional_backup_policy)})"
      },
      "isEnd": true
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "description": "Ensure alarm is green before starting test. Fail if alarm is not green within expected time",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{SQSUserErrorAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "BackupCurrentExecution",
      "description": "Backup initial queue policy for rollback",
      "action": "aws:executeAwsApi",
      "outputs": [
        {
          "Name": "Policy",
          "Selector": "$.Attributes.Policy",
          "Type": "String"
        },
        {
          "Name": "QueueArn",
          "Selector": "$.Attributes.QueueArn",
          "Type": "String"
        }
      ],
      "inputs": {
        "Service": "sqs",
        "Api": "GetQueueAttributes",
        "AttributeNames": [
          "Policy",
          "QueueArn"
        ],
        "QueueUrl": "{{ QueueUrl }}"
      }
    },
    {
      "name": "GetPolicyWithDenyOnDeleteMessageAction",
      "description": "Generate queue policy that denies message deletion",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "Policy",
          "Selector": "$.Payload.Policy",
          "Type": "String"
        },
        {
          "Name": "PolicySid",
          "Selector": "$.Payload.PolicySid",
          "Type": "String"
        },
        {
          "Name": "DenyPolicyStatementSid",
          "Selector": "$.Payload.DenyPolicyStatementSid",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "add_deny_in_sqs_policy",
        "InputPayload": {
          "SourcePolicy": "{{BackupCurrentExecution.Policy}}",
          "ActionsToDeny": [
            "sqs:DeleteMessage"
          ],
          "Resource": "{{BackupCurrentExecution.QueueArn}}"
        },
        "Script": "import json\nimport logging\nimport random\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Callable, List, Optional\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef add_deny_in_sqs_policy(events: dict, context: dict) -> dict:\n    \"\"\"\n    Add deny policy statement(-s) to the SQS policy whether it is empty or not\n    :return: updated SQS policy with deny\n    \"\"\"\n    if \"ActionsToDeny\" not in events or \"Resource\" not in events or \"SourcePolicy\" not in events:\n        raise KeyError(\"Requires ActionsToDeny and Resource and SourcePolicy in events\")\n\n    actions_to_deny: List = events.get(\"ActionsToDeny\")\n    resource: str = events.get(\"Resource\")\n    source_policy: str = events.get(\"SourcePolicy\")\n    source_policy = None if source_policy.startswith(\"{{\") else source_policy\n\n    deny_policy_statement_id: str = f\"DenyPolicyStatement-{uuid.uuid4()}\"\n    deny_policy_statement: dict = {\n        \"Effect\": \"Deny\",\n        \"Sid\": deny_policy_statement_id,\n        \"Principal\": \"*\",\n        \"Action\": actions_to_deny,\n        \"Resource\": resource,\n    }\n\n    if source_policy is None:\n        policy_id: str = f\"DenyPolicy-{uuid.uuid4()}\"\n        sqs_policy: dict = {\n            \"Version\": \"2012-10-17\",\n            \"Id\": policy_id,\n            \"Statement\": [deny_policy_statement]\n        }\n        return {\"Policy\": json.dumps(sqs_policy),\n                \"PolicySid\": policy_id,\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}\n    else:\n        source_policy: dict = json.loads(source_policy)\n        statement: List = source_policy.get(\"Statement\")\n        if statement is None or len(statement) == 0:\n            raise KeyError(\"Requires not empty Statement in SQS Policy\")\n        statement.append(deny_policy_statement)\n        return {\"Policy\": json.dumps(source_policy),\n                \"PolicySid\": source_policy.get(\"Id\"),\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}"
      }
    },
    {
      "name": "UpdatePolicy",
      "description": "Set queue policy to the generated one",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ QueueUrl }}",
        "Attributes": {
          "Policy": "{{ GetPolicyWithDenyOnDeleteMessageAction.Policy }}"
        }
      }
    },
    {
      "name": "AssertAlarmToBeRed",
      "description": "Wait for expected alarm to be red after failure is injected",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1000,
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{SQSUserErrorAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "RollbackCurrentExecution",
      "description": "Revert queue policy to initial state",
      "action": "aws:executeScript",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "revert_sqs_policy",
        "InputPayload": {
          "OptionalBackupPolicy": "{{BackupCurrentExecution.Policy}}",
          "QueueUrl": "{{ QueueUrl }}"
        },
        "Script": "import json\nimport logging\nimport random\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Callable, List, Optional\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef revert_sqs_policy(events: dict, context: dict) -> None:\n    \"\"\"\n    Revert SQS policy to the initial state by providing the backup policy\n    \"\"\"\n    if \"QueueUrl\" not in events or \"OptionalBackupPolicy\" not in events:\n        raise KeyError(\"Requires QueueUrl and OptionalBackupPolicy in events\")\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    sqs_client = boto3.client(\"sqs\", config=config)\n    queue_url: str = events.get(\"QueueUrl\")\n    optional_backup_policy: str = events.get(\"OptionalBackupPolicy\")\n    optional_backup_policy = None if optional_backup_policy.startswith(\"{{\") else optional_backup_policy\n    if optional_backup_policy is None:\n        sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={\"Policy\": \"\"})\n    else:\n        sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={\"Policy\": str(optional_backup_policy)})"
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "description": "Wait for the alarm to be green after test is complete",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{SQSUserErrorAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
