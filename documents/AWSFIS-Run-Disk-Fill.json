{
  "description": "### Document name - AWSFIS-Run-Disk-Fill\n\n## What does this document do?\nIt runs disk filling stress on an instance using fallocate. If fallocate is not already installed on the instance, this SSM document will install it together with other dependencies listed below, unless InstallDependencies parameter is set to False.\nThis SSM document supports the Amazon Linux and Ubuntu operating systems only.\n\n## Dependencies installed by this SSM Document\n* bc\n* fallocate\n* atd\nNote: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).\n\n## Input Parameters\n* DurationSeconds: (Required) The duration - in seconds - of the disk fill up stress.\n* Percent: (Optional) The total target percentage of the disk to be allocated. (default 95)\n* InstallDependencies: If set to True, this SSM document installs the required dependencies on the target instances. (default True)\n\n## Output Parameters\nNone.",
  "schemaVersion": "2.2",
  "parameters": {
    "DurationSeconds": {
      "type": "String",
      "description": "(Required) The duration - in seconds - of the disk fill up stress.",
      "allowedPattern": "^[0-9]+$"
    },
    "Percent": {
      "type": "String",
      "description": "Specify the percentage of the allocated disk space dependent on the total available size. (default 95)",
      "default": "95",
      "allowedPattern": "^([1-9][0-9]?|100)$"
    },
    "InstallDependencies": {
      "type": "String",
      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True)",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallDependencies",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependencies using the operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
      "inputs": {
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\n\nif [[ \"$( command -v atd 2>/dev/null )\" && \"$( command -v bc 2>/dev/null )\" && \"$( command -v fallocate 2>/dev/null )\" ]]; then\n    if [[ -n \"\" ]] ; then\n        depmod -a\n        if modprobe sch_netem; then\n          exit\n        fi\n    else\n        echo Dependency is already installed. ; exit ;\n    fi\nfi\nif  [[ \"{{ InstallDependencies }}\" == True ]] ; then\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] && grep -i 'Amazon Linux' /etc/system-release  ; then\n    if ! grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      yum -y install at bc util-linux\n    elif grep -Fiq 'ID=\"amzn\"' /etc/os-release && grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      \n      yum -y install at bc util-linux\n    else\n      echo \"Exiting - This SSM document supports: Amazon Linux, Ubuntu, CentOS (7, Stream 8, and 9) and RHEL (7, 8, 9) operating systems\"\n      exit 1\n    fi\n\n  elif grep -Fiq 'ID=\"centos\"' /etc/os-release  || grep -Fiq 'ID=\"rhel\"' /etc/os-release ; then\n    # Fetch OS Version\n    os_version_number=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '\"')\n    # if the version has a decimal, this line will remove it\n    os_major_version_number=${os_version_number%.*}\n    # Replace with version number in the url if required\n    if ! rpm --quiet -q epel-release &&  [ -n \"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\" ] ; then\n      epel_dl_url=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\"\n      epel_with_version=\"${epel_dl_url/VERSION/$os_major_version_number}\"\n      yum -y install $epel_with_version\n    fi\n    rhel_package=\"at bc util-linux\"\n    \n    yum -y install $rhel_package\n\n  elif grep -i \"Ubuntu\" /etc/issue ; then\n    apt-get update -y\n    # when installing, sometimes ubuntu has stderr that are not breaking errors.\n    install_error=$(apt-get install -y at bc util-linux) 2>&1\n    if [[ -n \"$install_error\" ]]  ; then\n        echo \"$install_error\"\n    fi\n    ubuntu_commands=( atd bc fallocate )\n    for dependency_command in \"${ubuntu_commands[@]}\"\n    do\n       if ! command -v $dependency_command >/dev/null 2>&1 ; then\n            echo \"Exiting - $dependency_command not installed\"\n            exit 1\n       fi\n    done\n  else\n    echo \"Exiting - This SSM document supports: Amazon Linux, Ubuntu, CentOS (7, Stream 8, and 9) and RHEL (7, 8, 9) operating systems\"\n    exit 1\n  fi\n  if [[ -n \"True\" ]] ; then\n    if ! systemctl is-enabled atd || ! systemctl is-active atd; then\n        echo \"Enabling and starting atd\"\n        systemctl enable atd\n        systemctl start atd\n    fi\n  fi\nelse\n  echo \"Dependencies are not installed - Please set InstallDependencies to True.\"\n  exit 1\nfi\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "ExecuteDiskFill",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameters: Duration and Percent\nThis step will perform a disk fill up stress for the specified Duration time in seconds.\n",
      "inputs": {
        "maxAttempts": 1,
        "timeoutSeconds": 43200,
        "runCommand": [
          "#!/bin/bash\n\n\n# Treat unset variables as an error\nset -o nounset\n\n\n#################################\n# General pre fault-execution logic #\n#################################\n\n# To track how long the fault command took to run\nstart_time=$(date +%s)\n\n\n########################\n# Fault-specific logic #\n########################\n\nFAULT_NAME=\"Run-Disk-Fill\"\nFILE_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32)\nDURATION={{ DurationSeconds }}\nDISK_FILLUP_PATH=\"/var/lib/amazon/ssm/$FAULT_NAME-$FILE_STRING-DISK_FILLUP_FILE\"\nrollback() {\n        rm -f $DISK_FILLUP_PATH\n        exit\n      }\n\ntrap rollback INT TERM EXIT SIGINT SIGTERM\n\nif [ $DURATION -lt 1 ] || [ $DURATION -gt 43200 ] ; then echo \"DurationSeconds parameter value must be between 1 and 43200\" && exit 1; fi\n\nif [ {{ Percent }} -lt 1 ] || [ {{ Percent }} -gt 100 ] ; then echo \"Percent parameter value must be between 1 and 100\" && exit 1; fi\n\nif [ {{ Percent }} -le $(df / | awk '/\\//{print 0+$5}') ] ; then echo \"Target percentage fill is less than current disk space usage\" && exit 1; fi\n\nused_disk_space=( $(df -l / | awk '/\\//{print $3}') )\navailable_disk_space=( $(df -l / | awk '/\\//{print $4}') )\n\n# disk space is allocated in 512 byte spaces, so attempting to allocate files that are not cleanly divisible can\n# cause issues where the files are not created. This takes the desired space and makes sure it conforms to this\n# pattern to avoid the file not being created. The 'variance_space' accounts for files and other logic created by this\n# document for a more accurate initial percent fill.\nvariance_space=300\nif [ {{ Percent }} -eq 100 ] ; then\n  fillup_file_size=( $(echo \"(($available_disk_space / 512) * 512) - $variance_space\" | bc)K ) ;\nelse\n  fillup_file_size=( $(echo \"((((($used_disk_space + $available_disk_space) * .{{ Percent }}) - $used_disk_space) / 512) * 512) - $variance_space\" | bc)K ) ;\nfi\n\necho \"Making sure atd daemon is running\"\n# atd must be running in order to use \"at\" later\natd || { echo Failed to run atd daemon, exiting... 1>&2 ; exit 1; }\n\ntouch $DISK_FILLUP_PATH\n# schedules a job to remove the disk fill file after 1 minute as a secondary mechanism to ensure proper rollback in the\n# event of failure of the ssm doc\necho 'start_time=$SECONDS; while [ $((SECONDS - start_time)) -lt 60 ] && [ -e $DISK_FILLUP_PATH ]; do sleep 5; done && rm -f '\"$DISK_FILLUP_PATH\" | at now\n\necho \"Injecting fault...\"\necho Initiating disk stress for $DURATION seconds...\n\nfallocate -l \"$fillup_file_size\" \"$DISK_FILLUP_PATH\"\n# Open the file and then unlink it. That way, the current process holds the only link to the file\n# and it will automatically be deleted when the process ends\nexec 3< $DISK_FILLUP_PATH\nrm -f \"$DISK_FILLUP_PATH\"\n\nsleep $DURATION\n\necho \"Cleaning up allocated disk space...\"\necho \"Disk stress finished.\"\n\n\n\n#################################\n# General post fault-execution logic #\n#################################\nDURATION={{ DurationSeconds }}\n\n\nif [[ -z $start_time ]];then\n    >&2 echo \"start_time is not defined\"\n    exit 1;\nfi\n\nelapsed_time=$(( $(date +%s) - start_time ))\n\n# Fail if the fault command exits succssfully but the execution duration is less than the expected duration.\n# This happens when Stress-ng is killed prematurely using SIGTERM or SIGINT.\nif [[ \"$elapsed_time\" -lt \"$DURATION\" ]]; then\n    >&2 echo \"Fault took $elapsed_time seconds to execute, which is less than expected duration $DURATION\"\n    exit 1;\nfi"
        ]
      }
    }
  ]
}
