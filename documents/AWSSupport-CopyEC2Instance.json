{
  "description": "# AWSSupport-CopyEC2Instance\n---\nThis runbook provides an automated solution for the procedure outlined in the Knowledge Center article [How do I move my EC2 instance to another subnet, Availability Zone, or VPC?](http://aws.amazon.com/premiumsupport/knowledge-center/move-ec2-instance/) The automation branches depending on the values you specify for the `Region` and `SubnetId` parameters.\n\nIf you specify a value for the `SubnetId` parameter but not a value for the `Region` parameter, the automation creates an Amazon Machine Image (AMI) of the target instance and launches a new instance from the AMI in the subnet you specified.\n\nIf you specify a value for the `SubnetId` parameter and the `Region` parameter, the automation creates an AMI of the target instance, copies the AMI to the AWS Region you specified, and launches a new instance from the AMI in the subnet you specified.\n\nIf you specify a value for the `Region` parameter but not a value for the `SubnetId` parameter, the automation creates an AMI of the target instance, copies the AMI to the Region you specified, and launches a new instance from the AMI in the default subnet of your virtual private cloud (VPC) in the destination Region.\n\nIf no value is specified for either the Region or SubnetId parameters, the automation creates an AMI of the target instance, and launches a new instance from the AMI in the default subnet of your VPC.\n\nWhen doing a cross region copy, if the automation times out during the `waitForAvailableDestinationAmi` step, the AMI might still be copying. If this is the case, you can wait for the copy to complete and launch the instance manually.\n\nBefore running this automation, note the following:\n  \n* AMIs are based on Amazon Elastic Block Store (Amazon EBS) snapshots. For large file systems without a previous snapshot, AMI creation can take several hours. To decrease the AMI creation time, create an Amazon EBS snapshot before you create the AMI.\n* Creating an AMI doesn't create a snapshot for instance store volumes on the instance. For information about backing up instance store volumes to Amazon EBS, see [How do I back up an instance store volume on my Amazon EC2 instance to Amazon EBS?](http://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/)\n* The new Amazon EC2 instance has a different private IPv4 or public IPv6 IP address. You must update all references to the old IP addresses (for example, in DNS entries) with the new IP addresses that are assigned to the new instance. If you're using an Elastic IP address on your source instance, be sure to attach it to the new instance.\n* Domain security identifier (SID) conflict issues can occur when the copy launches and tries to contact the domain. Before you capture the AMI, use Sysprep or remove the domain-joined instance from the domain to prevent conflict issues. For more information, see [How can I use Sysprep to create and install custom reusable Windows AMIs?](http://aws.amazon.com/premiumsupport/knowledge-center/sysprep-create-install-ec2-windows-amis/)\n\nFor more information, refer to the [public documentation](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-copyec2instance.html) for this runbook.\n---\n## Parameters\n**InstanceId:**\n* **Type:** String\n* **Description:** **(Required)** _The ID of the instance that you want to copy (e.g. i-abcd1234567890)._\n* **AllowedPattern:** ^i-[a-z0-9]{8,17}$\n\n**AutomationAssumeRole:**\n* **Type:** String\n* **Description:** **(Optional)** _The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook._\n* **AllowedPattern:** ^$|^arn:aws:iam::[0-9]*:role/[/\\\\w+=,.@-]+$\n\n**KeyPair:**\n* **Type:** String\n* **Description:** **(Optional)** _The key pair you want to associate with the new copied instance. If you're copying the instance to a different Region, make sure the key pair exists in the specified Region._\n* **AllowedPattern:** ^$|^[\\x00-\\x7F]{1,255}$\n\n**Region:**\n* **Type:** String\n* **Description:** **(Optional)** _The Region you want to copy the instance to. If you specify a value for this parameter, but do not specify values for the SubnetId and SecurityGroupIds parameters, the automation attempts to launch the instance in the default VPC with the default security group. If EC2-Classic is enabled in the destination Region, the launch will fail._\n* **AllowedPattern:** ^$|^[a-zA-Z]{2}-[a-zA-Z-]+-[1-9]$\n\n**SubnetId:**\n* **Type:** String\n* **Description:** **(Optional)** _The ID of the subnet you want to copy the instance to. If EC2-Classic is enabled in the destination Region, you must provide a value for this parameter._\n* **AllowedPattern:** ^$|^subnet-[a-z0-9]{8,17}$\n\n**InstanceType:**\n* **Type:** String\n* **Description:** **(Optional)** _Instance type for the copied instance. If this option is not provided, then the source instance type will be used. If the source instance type does not exist in the target region the automation will fail._\n* **AllowedPattern:** ^$|^[a-z0-9-]{1,7}\\\\.[a-z0-9]+$\n\n**SecurityGroupIds:**\n* **Type:** String\n* **Description:** **(Optional)** _A comma-separated list of security group IDs you want to associate with the copied instance (e.g. sg-xxxxxx, sg-yyyyy). If you do not specify a value for this parameter, and the instance is not being copied to a different Region, the security groups associated with the source instance are used. If you're copying the instance to a different Region, the default security group for the default VPC in the destination Region is used._\n* **AllowedPattern:** ^$|^sg-[0-9a-f]{8,17}$\n\n**KeepImageSourceRegion:**\n* **Type:** Boolean\n* **Description:** **(Optional)** _If you specify true for `this` parameter, the automation does not delete the AMI that is copied to the Region you specified. If you specify false for this parameter, the automation deregisters the AMI and deletes the associated snapshots._\n* **Default:** true\n\n**KeepImageDestinationRegion:**\n* **Type:** Boolean\n* **Description:** **(Optional)** _If you specify true for `this` parameter, the automation does not delete the AMI that is copied to the Region you specified. If you specify false for this parameter, the automation deregisters the AMI and deletes the associated snapshots._\n* **Default:** true\n\n**NoRebootInstanceBeforeTakingImage:**\n* **Type:** Boolean\n* **Description:** **(Optional)** _If you specify true for `this` parameter, the source instance will not be restarted before creating the AMI. When this option is used, file system integrity on the created image can't be guaranteed._\n* **Default:** false",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "sameRegionLaunchInstanceWithKeyPair.InstanceIds",
    "sameRegionLaunchInstanceWithoutKeyPair.InstanceIds",
    "destinationRegionLaunchInstance.DestinationInstanceId"
  ],
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the instance that you want to copy (e.g. i-abcd1234567890).",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": "",
      "allowedPattern": "^$|^arn:aws:iam::[0-9]*:role/[/\\w+=,.@-]+$"
    },
    "KeyPair": {
      "type": "String",
      "description": "(Optional) The key pair you want to associate with the new copied instance. If you're copying the instance to a different Region, make sure the key pair exists in the specified Region.",
      "default": "",
      "allowedPattern": "^$|^[\u0000-\u007f]{1,255}$"
    },
    "Region": {
      "type": "String",
      "description": "(Optional) The Region you want to copy the instance to. If you specify a value for this parameter, but do not specify values for the SubnetId and SecurityGroupIds parameters, the automation attempts to launch the instance in the default VPC with the default security group. If EC2-Classic is enabled in the destination Region, the launch will fail.",
      "default": "",
      "allowedPattern": "^$|^[a-zA-Z]{2}-[a-zA-Z-]+-[1-9]$"
    },
    "SubnetId": {
      "type": "String",
      "description": "(Optional) The ID of the subnet you want to copy the instance to. If EC2-Classic is enabled in the destination Region, you must provide a value for this parameter.",
      "default": "",
      "allowedPattern": "^$|^subnet-[a-z0-9]{8,17}$"
    },
    "InstanceType": {
      "type": "String",
      "description": "(Optional) The instance type the copied instance should be launched as. If you do not specify a value for this parameter, the source instance type is used. If the source instance type is not supported in the Region the instance is being copied to, the automation fails.",
      "default": "",
      "allowedPattern": "^$|^[a-z0-9-]{1,7}\\.[a-z0-9]+$"
    },
    "SecurityGroupIds": {
      "type": "StringList",
      "description": "(Optional) A comma-separated list of security group IDs you want to associate with the copied instance (e.g. sg-xxxxxx, sg-yyyyy). If you do not specify a value for this parameter, and the instance is not being copied to a different Region, the security groups associated with the source instance are used. If you're copying the instance to a different Region, the default security group for the default VPC in the destination Region is used.",
      "default": [
        ""
      ],
      "allowedPattern": "^$|^sg-[0-9a-f]{8,17}$"
    },
    "KeepImageSourceRegion": {
      "type": "Boolean",
      "description": "(Optional) If you specify true for this parameter, the automation does not delete the AMI of the source instance. If you specify false for this parameter, the automation deregisters the AMI and deletes the associated snapshots.",
      "default": true
    },
    "KeepImageDestinationRegion": {
      "type": "Boolean",
      "description": "(Optional) If you specify true for this parameter, the automation does not delete the AMI that is copied to the Region you specified. If you specify false for this parameter, the automation deregisters the AMI and deletes the associated snapshots.",
      "default": true
    },
    "NoRebootInstanceBeforeTakingImage": {
      "type": "Boolean",
      "description": "(Optional) If you specify true for this parameter, the source instance will not be restarted before creating the AMI. When this option is used, file system integrity on the created image can't be guaranteed.",
      "default": false
    }
  },
  "mainSteps": [
    {
      "name": "describeOriginalInstanceDetails",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "SourceInstanceType",
          "Selector": "$.Reservations[0].Instances[0].InstanceType",
          "Type": "String"
        },
        {
          "Name": "SourceAvailabilityZone",
          "Selector": "$.Reservations[0].Instances[0].Placement.AvailabilityZone",
          "Type": "String"
        },
        {
          "Name": "SourceSubnetId",
          "Selector": "$.Reservations[0].Instances[0].SubnetId",
          "Type": "String"
        },
        {
          "Name": "SourceKeyPair",
          "Selector": "$.Reservations[0].Instances[0].KeyName",
          "Type": "String"
        },
        {
          "Name": "SourceSecurityGroupIds",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups..GroupId",
          "Type": "StringList"
        },
        {
          "Name": "SourceRootDeviceName",
          "Selector": "$.Reservations[0].Instances[0].RootDeviceName",
          "Type": "String"
        }
      ],
      "nextStep": "assertRootVolumeIsEbs"
    },
    {
      "name": "assertRootVolumeIsEbs",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].RootDeviceType",
        "DesiredValues": [
          "ebs"
        ]
      },
      "isCritical": true,
      "nextStep": "evalInputParameters"
    },
    {
      "name": "evalInputParameters",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "description": "This step will check all the Input Parameters (if provided), and outputs the Destination Region, the Subnet ID, The KeyPair name and The Security Groups to use for the destination Instance. ",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "InputPayload": {
          "InputDestinationRegion": "{{ Region }}",
          "InputDestinationSubnetId": "{{ SubnetId }}",
          "InputDestinationInstanceType": "{{ InstanceType }}",
          "InputDestinationKeyName": "{{ KeyPair }}",
          "InputDestinationSecurityGroupIds": "{{ SecurityGroupIds }}",
          "SourceInstanceType": "{{ describeOriginalInstanceDetails.SourceInstanceType }}",
          "SourceInstanceAZ": "{{ describeOriginalInstanceDetails.SourceAvailabilityZone }}",
          "SourceInstanceSubnetId": "{{ describeOriginalInstanceDetails.SourceSubnetId }}",
          "SourceInstanceKeyName": "{{ describeOriginalInstanceDetails.SourceKeyPair }}",
          "SourceInstanceSecurityGroupIds": "{{ describeOriginalInstanceDetails.SourceSecurityGroupIds }}"
        },
        "Script": "def script_handler(events, context):\n    # Set Destination Region to use\n    sourceInstanceRegion = events['SourceInstanceAZ'][:-1]\n    finalRegion = sourceInstanceRegion if not events['InputDestinationRegion'] else events['InputDestinationRegion']\n    isSameRegion = True if finalRegion.strip() == sourceInstanceRegion else False\n\n    # Set KeyPair. Uses user specified KeyPair. If no KeyPair provided, final KeyPair will be empty.\n    finalKeyPair = \"\" if not events['InputDestinationKeyName'] else events['InputDestinationKeyName']\n    finalInstanceType = events['SourceInstanceType'] if not events['InputDestinationInstanceType'] else events['InputDestinationInstanceType']\n\n    # Set parameter to use\n    if isSameRegion:\n        # Set Subnet ID to use if on same region\n        finalSubnetId = events['SourceInstanceSubnetId'] if not events['InputDestinationSubnetId'] else events['InputDestinationSubnetId']\n        # Set Security Group to use if on same region\n        finalSecurityGroupIds = events['SourceInstanceSecurityGroupIds'] if not events['InputDestinationSecurityGroupIds'][0] else events['InputDestinationSecurityGroupIds']\n    else:\n        # Set Subnet ID to use if on different region\n        finalSubnetId = events['InputDestinationSubnetId']\n        # Set Security Group to use if on different region\n        finalSecurityGroupIds = [sg for sg in events['InputDestinationSecurityGroupIds']]\n        \n    # Output Dict\n    # function_outputs = [finalRegion, finalSubnetId, finalInstanceType, finalKeyPair, finalSecurityGroupIds, isSameRegion, assertSourceInstanceHadNoKeyPairAndNoneSpecified]\n    function_outputs = {\n        \"FinalRegion\": finalRegion,\n        \"FinalSubnetId\": finalSubnetId,\n        \"FinalInstanceType\": finalInstanceType,\n        \"FinalKeyPair\": finalKeyPair,\n        \"FinalSecurityGroupIds\": finalSecurityGroupIds,\n        \"AssertSameRegion\": isSameRegion\n    }\n\n    # Return a map with the Final Parameters to use\n    return function_outputs\n"
      },
      "outputs": [
        {
          "Name": "RegionToUse",
          "Selector": "$.Payload.FinalRegion",
          "Type": "String"
        },
        {
          "Name": "SubnetToUse",
          "Selector": "$.Payload.FinalSubnetId",
          "Type": "String"
        },
        {
          "Name": "InstanceTypeToUse",
          "Selector": "$.Payload.FinalInstanceType",
          "Type": "String"
        },
        {
          "Name": "KeyNameToUse",
          "Selector": "$.Payload.FinalKeyPair",
          "Type": "String"
        },
        {
          "Name": "SecurityGroupsToUse",
          "Selector": "$.Payload.FinalSecurityGroupIds",
          "Type": "StringList"
        },
        {
          "Name": "AssertRegionIsSame",
          "Selector": "$.Payload.AssertSameRegion",
          "Type": "Boolean"
        }
      ],
      "nextStep": "createLocalAmi"
    },
    {
      "name": "createLocalAmi",
      "action": "aws:createImage",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "InstanceId": "{{ InstanceId }}",
        "ImageName": "AWSSupport-CopyEC2Instance LocalAmi for {{ InstanceId }}_{{ global:DATE_TIME }}",
        "NoReboot": "{{ NoRebootInstanceBeforeTakingImage }}",
        "ImageDescription": "AWSSupport-CopyEC2Instance LocalAmi for {{ InstanceId }} at {{ global:DATE_TIME }}."
      },
      "nextStep": "tagLocalAmi"
    },
    {
      "name": "tagLocalAmi",
      "action": "aws:createTags",
      "onFailure": "Continue",
      "inputs": {
        "ResourceType": "EC2",
        "ResourceIds": [
          "{{ createLocalAmi.ImageId }}"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "AWSSupport-CopyEC2Instance LocalAmi for {{ InstanceId }}"
          },
          {
            "Key": "AWSSupport-CopyEC2Instance",
            "Value": "{{ automation:EXECUTION_ID }}"
          },
          {
            "Key": "CreatedBy",
            "Value": "AWSSupport-CopyEC2Instance"
          },
          {
            "Key": "CreatedTime",
            "Value": "{{ global:DATE_TIME }}"
          }
        ]
      },
      "nextStep": "branchAssertRegionIsSame"
    },
    {
      "name": "branchAssertRegionIsSame",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "branchAssertSameRegionWithKeyPair",
            "Variable": "{{ evalInputParameters.AssertRegionIsSame }}",
            "BooleanEquals": true
          },
          {
            "NextStep": "copyAmiToRegion",
            "Variable": "{{ evalInputParameters.AssertRegionIsSame }}",
            "BooleanEquals": false
          }
        ]
      }
    },
    {
      "name": "branchAssertSameRegionWithKeyPair",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "sameRegionLaunchInstanceWithoutKeyPair",
            "Variable": "{{ evalInputParameters.KeyNameToUse }}",
            "StringEquals": ""
          }
        ],
        "Default": "sameRegionLaunchInstanceWithKeyPair"
      }
    },
    {
      "name": "sameRegionLaunchInstanceWithKeyPair",
      "action": "aws:runInstances",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "ImageId": "{{ createLocalAmi.ImageId }}",
        "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
        "KeyName": "{{ evalInputParameters.KeyNameToUse }}",
        "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
        "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}",
        "TagSpecifications": [
          {
            "ResourceType": "instance",
            "Tags": [
              {
                "Key": "Name",
                "Value": "AWSSupport-CopyEC2Instance Source: {{ InstanceId }}"
              },
              {
                "Key": "AWSSupport-CopyEC2Instance",
                "Value": "{{ automation:EXECUTION_ID }}"
              },
              {
                "Key": "CreatedBy",
                "Value": "AWSSupport-CopyEC2Instance"
              },
              {
                "Key": "CreatedTime",
                "Value": "{{ global:DATE_TIME }}"
              }
            ]
          }
        ]
      },
      "nextStep": "branchAssertSourceAmiToDelete"
    },
    {
      "name": "sameRegionLaunchInstanceWithoutKeyPair",
      "action": "aws:runInstances",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "ImageId": "{{ createLocalAmi.ImageId }}",
        "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
        "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
        "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}",
        "TagSpecifications": [
          {
            "ResourceType": "instance",
            "Tags": [
              {
                "Key": "Name",
                "Value": "AWSSupport-CopyEC2Instance Source: {{ InstanceId }}"
              },
              {
                "Key": "AWSSupport-CopyEC2Instance",
                "Value": "{{ automation:EXECUTION_ID }}"
              },
              {
                "Key": "CreatedBy",
                "Value": "AWSSupport-CopyEC2Instance"
              },
              {
                "Key": "CreatedTime",
                "Value": "{{ global:DATE_TIME }}"
              }
            ]
          }
        ]
      },
      "nextStep": "branchAssertSourceAmiToDelete"
    },
    {
      "name": "copyAmiToRegion",
      "action": "aws:executeScript",
      "isCritical": true,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "crossRegionImageCopy",
        "InputPayload": {
          "AutomationExecutionId": "{{ automation:EXECUTION_ID }}",
          "CreatedTime": "{{ global:DATE_TIME }}",
          "SourceLocalImageId": "{{ createLocalAmi.ImageId }}",
          "SourceRegion": "{{ global:REGION }}",
          "DestinationRegion": "{{ evalInputParameters.RegionToUse }}"
        },
        "Script": "import boto3\nimport botocore\nfrom botocore.exceptions import ClientError\n\ndef crossRegionImageCopy(events, context):\n    try:\n        # Initialize client\n        ec2 = boto3.client('ec2', region_name=events['DestinationRegion'])\n\n        name = 'AMI Copied from ' + events['SourceLocalImageId'] + ' located in ' + events['SourceRegion'] + ' by AWSSupport-CopyEC2Instance at ' + events['CreatedTime']\n        # Copy Image\n        remote_image = ec2.copy_image(\n            Name=name,\n            Description=name + ': ' + events['AutomationExecutionId'],\n            SourceImageId=events['SourceLocalImageId'],\n            SourceRegion=events['SourceRegion']\n        )\n\n        # Return ImageId\n        return remote_image['ImageId']\n    except ClientError as e:\n        raise Exception (\"[ERROR]\", e)\n"
      },
      "outputs": [
        {
          "Name": "DestinationAmiId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "waitForAvailableDestinationAmi"
    },
    {
      "name": "waitForAvailableDestinationAmi",
      "action": "aws:executeScript",
      "maxAttempts": 3,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "crossRegionImageWait",
        "InputPayload": {
          "ImageId": "{{ copyAmiToRegion.DestinationAmiId }}",
          "Region": "{{ evalInputParameters.RegionToUse }}"
        },
        "Script": "import boto3\nimport botocore\nfrom botocore.exceptions import ClientError\n\ndef crossRegionImageWait(events, context):\n    try:\n        # Initialize client\n        ec2 = boto3.client('ec2', region_name=events['Region'])\n\n        # Wait for the image to be available\n        print(\"[INFO] Waiting for the Image\", events['ImageId'], \"in Region\", events['Region'], \"to be in available state...\")\n        ec2.get_waiter('image_available').wait(ImageIds=[events['ImageId']])\n        print(\"[INFO] Image\", events['ImageId'], \"is now Available!\")\n\n        # Return ImageId\n        return events['ImageId']\n    except ClientError as e:\n        raise Exception (\"[ERROR]\", e)\n"
      },
      "nextStep": "destinationRegionLaunchInstance"
    },
    {
      "name": "destinationRegionLaunchInstance",
      "action": "aws:executeScript",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "crossRegionRunInstances",
        "InputPayload": {
          "AutomationExecutionId": "{{ automation:EXECUTION_ID }}",
          "CreatedTime": "{{ global:DATE_TIME }}",
          "SourceInstanceId": "{{ InstanceId }}",
          "ImageId": "{{ copyAmiToRegion.DestinationAmiId }}",
          "Region": "{{ evalInputParameters.RegionToUse }}",
          "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
          "KeyName": "{{ evalInputParameters.KeyNameToUse }}",
          "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
          "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}"
        },
        "Script": "import boto3\nimport botocore\nfrom botocore.exceptions import ClientError\n\ndef crossRegionRunInstances(events, context):\n    try:\n        # Initialize client\n        ec2 = boto3.client('ec2', region_name=events['Region'])\n\n        # Build argument for runInstances\n        arg_run_instance = {\n            'ImageId': events['ImageId'],\n            'MinCount': 1,\n            'MaxCount': 1,\n            'InstanceType': events['InstanceType'],\n            'TagSpecifications': [\n                {\n                    \"ResourceType\": \"instance\",\n                    \"Tags\": [\n                        {\n                            \"Key\": \"Name\",\n                            \"Value\": \"AWSSupport-CopyEC2Instance Source: \" + events['SourceInstanceId']\n                        },\n                        {\n                            \"Key\": \"AWSSupport-CopyEC2Instance\",\n                            \"Value\": events['AutomationExecutionId']\n                        },\n                        {\n                            \"Key\": \"CreatedBy\",\n                            \"Value\": \"AWSSupport-CopyEC2Instance\"\n                        },\n                        {\n                            \"Key\": \"CreatedTime\",\n                            \"Value\": events['CreatedTime']\n                        }\n                    ]\n                }\n            ]\n        }\n\n        # Add Key Pair if not empty\n        if events['KeyName']:\n            arg_run_instance['KeyName'] = events['KeyName']\n\n        # Add SubnetId list if not empty\n        if events['SubnetId']:\n            arg_run_instance['SubnetId'] = events['SubnetId']\n\n        # Add Security Groups if not empty\n        if events['SecurityGroupIds'][0]:\n            arg_run_instance['SecurityGroupIds'] = events['SecurityGroupIds']\n\n        # Run Instance with provided parameter \n        print('[INFO] RunInstances parameters:', arg_run_instance)\n        remote_instance = ec2.run_instances(**arg_run_instance)\n\n        instanceId = remote_instance['Instances'][0]['InstanceId']\n        print(\"[INFO] Successfully launched\", instanceId)\n\n        # Return Instance Id\n        return instanceId\n    except ClientError as e:\n        raise Exception (\"[ERROR]\", e)\n"
      },
      "outputs": [
        {
          "Name": "DestinationInstanceId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "branchAssertDestinationAmiToDelete"
    },
    {
      "name": "branchAssertDestinationAmiToDelete",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "deregisterDestinationAmiAndDeleteSnapshots",
            "Variable": "{{ KeepImageDestinationRegion }}",
            "BooleanEquals": false
          }
        ],
        "Default": "branchAssertSourceAmiToDelete"
      }
    },
    {
      "name": "deregisterDestinationAmiAndDeleteSnapshots",
      "action": "aws:executeScript",
      "isCritical": true,
      "onFailure": "step:branchAssertSourceAmiToDelete",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "deregisterAmiAndDeleteSnapshots",
        "InputPayload": {
          "Region": "{{ evalInputParameters.RegionToUse }}",
          "ImageId": "{{ copyAmiToRegion.DestinationAmiId }}"
        },
        "Script": "import boto3\nimport botocore\nfrom botocore.exceptions import ClientError\n\ndef deregisterAmiAndDeleteSnapshots(events, context):\n    try:\n        # Initialize client\n        ec2 = boto3.client('ec2', region_name=events['Region'])\n\n        print(\"[INFO] Deleting the destination region Image:\", events['ImageId'], \"as requested in the document parameters\")\n\n        # Describe the image first so we can get the snapshotsIds from the BlockDeviceMappings\n        print(\"[INFO] Retrieving snapshots for\", events['ImageId'] + \"...\")\n        snapshotIds = []\n        images = ec2.describe_images(ImageIds=[events['ImageId']])['Images']\n        if len(images):\n            for device in images[0]['BlockDeviceMappings']:\n                if 'Ebs' in device and 'SnapshotId' in device['Ebs']:\n                    snapshotIds.append(device['Ebs']['SnapshotId'])\n        print(\"[INFO] SnapshotIds to delete:\", snapshotIds)\n\n        '''\n        Sample response\n        {\n            'ResponseMetadata': {\n                'RequestId': 'c45b0378-3be1-4abd-af66-f097c95b6501',\n                'HTTPStatusCode': 200,\n                'HTTPHeaders': {\n                    'x-amzn-requestid': 'c45b0378-3be1-4abd-af66-f097c95b6501',\n                    'content-type': 'text/xml;charset=UTF-8',\n                    'content-length': '231',\n                    'date': 'Tue, 15Sep202007: 50: 41GMT',\n                    'server': 'AmazonEC2'\n                },\n                'RetryAttempts': 0\n            }\n        }\n        '''\n        print(\"[INFO] Deregistering AMI:\", events['ImageId'] + \"...\")\n        response = ec2.deregister_image(ImageId=events['ImageId'])\n\n        if response['ResponseMetadata']['HTTPStatusCode'] == 200:\n            print(\"[INFO] Successfully deleted:\", events['ImageId'])\n        \n        # After AMI is deregistered, loop through snapshotIds and delete the snapshot\n        for snapshotId in snapshotIds:\n            print(\"[INFO] Deleting snapshot:\", snapshotId + \"...\")\n            response = ec2.delete_snapshot(SnapshotId=snapshotId)\n            if response['ResponseMetadata']['HTTPStatusCode'] == 200:\n                print(\"[INFO] Successfully deleted:\", snapshotId)\n\n        # Return ImageId\n        return events['ImageId']\n    except ClientError as e:\n        raise Exception (\"[ERROR]\", e)\n"
      },
      "nextStep": "branchAssertSourceAmiToDelete"
    },
    {
      "name": "branchAssertSourceAmiToDelete",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "deregisterSourceAmiAndDeleteSnapshots",
            "Variable": "{{ KeepImageSourceRegion }}",
            "BooleanEquals": false
          },
          {
            "NextStep": "sleep",
            "Variable": "{{ KeepImageSourceRegion }}",
            "BooleanEquals": true
          }
        ]
      }
    },
    {
      "name": "deregisterSourceAmiAndDeleteSnapshots",
      "action": "aws:deleteImage",
      "maxAttempts": 3,
      "isCritical": true,
      "onFailure": "Abort",
      "inputs": {
        "ImageId": "{{ createLocalAmi.ImageId }}"
      },
      "isEnd": true
    },
    {
      "name": "sleep",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT2S"
      },
      "isEnd": true
    }
  ]
}
