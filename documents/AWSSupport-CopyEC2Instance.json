{
  "description": "The **AWSSupport-CopyEC2Instance** runbook provides an automated solution for the procedure outlined in the Knowledge Center article [How do I move my EC2 instance to another subnet, Availability Zone, or VPC?](http://aws.amazon.com/premiumsupport/knowledge-center/move-ec2-instance/). The automation branches depending on the values you specify for the `Region` and `SubnetId` parameters.\n\n> * If you specify a value for `SubnetId` but not for `Region`, the automation creates an Amazon Machine Image (AMI) of the target instance and launches a new instance from the AMI in the subnet specified.\n> * If `SubnetId` and `Region` are specified, the automation creates an AMI of the target instance, copies the AMI to the AWS Region selected, and launches a new instance from the AMI in the selected subnet.\n> * If you specify a value for `Region` but not for `SubnetId`, the automation creates an AMI of the target instance, copies the AMI to the AWS Region selected, and launches a new instance from the AMI in the default subnet of your default virtual private cloud (VPC) in the destination AWS Region.\n> * If no value is specified for either `Region` or `SubnetId`, the automation creates an AMI of the target instance, and launches a new instance from the AMI in the default subnet of your VPC.\n> * When doing a cross AWS Region copy, if the automation times out during the `waitForCrossRegionAmiToBeAvailable` step, the AMI might still be copying. If this is the case, you can wait for the copy to complete and launch the instance manually.\n> * When launch the instance in another AWS Region, if the automation fails during the `createCrossRegionInstance` step, the AMI copied is not deleted. If this is the case, you can launch the instance manually from the AMI.\n\n### Important:\nBefore running this automation, consider the following:\n> * AMIs are based on Amazon Elastic Block Store (Amazon EBS) snapshots. For large file systems without a previous snapshot, the AMI creation can take several hours. To decrease the AMI creation time, you can create an Amazon EBS snapshot before running the automation.\n> * Creating an AMI doesn't create a snapshot for instance store volumes. For information about backing up instance store volumes to Amazon EBS, see [How do I back up an instance store volume on my Amazon EC2 instance to Amazon EBS?](http://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/).\n> * The new Amazon EC2 instance has a different private IPv4 or public IPv6 IP address. You must update all references to the old IP addresses (for example, DNS entries) with the new IP addresses assigned to the new instance. If you're using an Elastic IP address on your source instance, make sure to attach it to the new instance.\n> * For Windows instances, Domain security identifier (SID) conflict issues can occur when the copy launches and tries to contact an Active Directory domain. Before you capture the AMI, use Sysprep or remove the domain-joined instance from the domain to prevent conflict issues. For more information, see [How can I use Sysprep to create and install custom reusable Windows AMIs?](http://aws.amazon.com/premiumsupport/knowledge-center/sysprep-create-install-ec2-windows-amis/)\n\nFor more information, refer to the [public documentation](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-copyec2instance.html).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "reportError.FailureMessage",
    "createSourceImage.ImageId",
    "createInstanceWithKeyPair.InstanceIds",
    "createInstanceWithoutKeyPair.InstanceIds",
    "createCrossRegionInstance.InstanceIds",
    "copyImageCrossRegion.ImageId"
  ],
  "parameters": {
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the instance that you want to copy.",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "KeyPair": {
      "type": "String",
      "description": "(Optional) The existing Amazon EC2 key pair you want to associate with the new copied instance. If you're copying the instance to a different AWS Region, make sure the key pair exists in the specified AWS Region.",
      "allowedPattern": "^$|^[a-zA-Z0-9][a-zA-Z0-9-_]{0,99}$",
      "default": ""
    },
    "Region": {
      "type": "String",
      "description": "(Optional) The AWS Region you want to copy the instance to. If you specify a value for this parameter, but do not specify values for `SubnetId` and `SecurityGroupIds`, the automation attempts to launch the instance in the default VPC with the default security group. If `EC2-Classic` is enabled in the destination AWS Region, the launch will fail.",
      "default": "",
      "allowedPattern": "^$|^[a-zA-Z]{2}-[a-zA-Z-]+-[1-9]$"
    },
    "SubnetId": {
      "type": "String",
      "description": "(Optional) The ID of the subnet you want to copy the instance to. If `EC2-Classic` is enabled in the destination AWS Region, you must provide a value for this parameter.",
      "default": "",
      "allowedPattern": "^$|^subnet-[a-z0-9]{8,17}$"
    },
    "InstanceType": {
      "type": "String",
      "description": "(Optional) The instance type the copied instance will be launched as. If you do not specify a value for this parameter, the source instance type is used. If the source instance type is not supported in the AWS Region selected, the automation fails.",
      "default": "",
      "allowedPattern": "^$|^[a-z0-9-]{1,7}\\.[a-z0-9]+$"
    },
    "SecurityGroupIds": {
      "type": "StringList",
      "description": "(Optional) A comma-separated list of existing security group IDs you want to associate with the copied instance (e.g. sg-xxxxxx, sg-yyyyy). If you do not specify a value, and the instance is not being copied to a different AWS Region, the security groups associated with the source instance are used. If you're copying the instance to a different AWS Region, the default security group for the default VPC in the destination AWS Region is used.",
      "default": [],
      "allowedPattern": "^$|^sg-[0-9a-f]{8,17}$"
    },
    "KeepImageSourceRegion": {
      "type": "Boolean",
      "description": "(Optional) If you specify `true`, the automation does not delete the AMI of the source instance. If you specify `false`, the automation deregisters the AMI and deletes the associated snapshots.",
      "default": true
    },
    "KeepImageDestinationRegion": {
      "type": "Boolean",
      "description": "(Optional) If you specify `true`, the automation does not delete the AMI that is copied to the AWS Region you specified. If you specify `false`, the automation deregisters the AMI and deletes the associated snapshots.",
      "default": true
    },
    "NoRebootInstanceBeforeTakingImage": {
      "type": "Boolean",
      "description": "(Optional) If you specify `true`, the source instance will not be restarted before creating the AMI. When this option is used, file system integrity on the created image can't be guaranteed.",
      "default": false
    }
  },
  "mainSteps": [
    {
      "name": "checkConcurrency",
      "action": "aws:executeScript",
      "description": "Ensures there is only one execution of this runbook targeting the specified Instance ID. If the runbook finds another in progress execution targeting the same Instance ID, it returns an exception",
      "isCritical": true,
      "onFailure": "step:reportError",
      "timeoutSeconds": 180,
      "inputs": {
        "InputPayload": {
          "TargetResourceId": "{{ InstanceId }}",
          "ParameterName": "InstanceId"
        },
        "Handler": "check_concurrency.check_concurrency_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "NoExecutionFound",
          "Selector": "$.Payload.NoExecutionFound",
          "Type": "String"
        }
      ],
      "nextStep": "describeSourceInstanceDetails"
    },
    {
      "name": "reportError",
      "description": "Fetches the error message from previous step and expose it to execution output.",
      "action": "aws:executeScript",
      "isCritical": true,
      "onFailure": "Abort",
      "timeoutSeconds": 180,
      "inputs": {
        "Handler": "report_error.report_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "isEnd": true,
      "outputs": [
        {
          "Name": "FailureMessage",
          "Selector": "$.Payload.FailureMessage",
          "Type": "String"
        }
      ]
    },
    {
      "name": "describeSourceInstanceDetails",
      "description": "Describes the source instance details including `InstanceType`, `AvailabilityZone`, `SubnetId`, `KeyName`, `SecurityGroups`, and `RootDeviceName`.",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "timeoutSeconds": 300,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "SourceInstanceType",
          "Selector": "$.Reservations[0].Instances[0].InstanceType",
          "Type": "String"
        },
        {
          "Name": "SourceAvailabilityZone",
          "Selector": "$.Reservations[0].Instances[0].Placement.AvailabilityZone",
          "Type": "String"
        },
        {
          "Name": "SourceSubnetId",
          "Selector": "$.Reservations[0].Instances[0].SubnetId",
          "Type": "String"
        },
        {
          "Name": "SourceKeyPair",
          "Selector": "$.Reservations[0].Instances[0].KeyName",
          "Type": "String"
        },
        {
          "Name": "SourceSecurityGroupIds",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups..GroupId",
          "Type": "StringList"
        },
        {
          "Name": "SourceRootDeviceName",
          "Selector": "$.Reservations[0].Instances[0].RootDeviceName",
          "Type": "String"
        }
      ],
      "nextStep": "assertSourceInstanceRootVolumeIsEbs"
    },
    {
      "name": "assertSourceInstanceRootVolumeIsEbs",
      "description": "Asserts the source instance root volume is `ebs`.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "maxAttempts": 3,
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].RootDeviceType",
        "DesiredValues": [
          "ebs"
        ]
      },
      "isCritical": true,
      "nextStep": "evalInputParameters"
    },
    {
      "name": "evalInputParameters",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "description": "Evaluates the runbook provided input parameters, and the target instance attributes to determine how to launch the target instance.",
      "inputs": {
        "InputPayload": {
          "InputDestinationRegion": "{{ Region }}",
          "InputDestinationSubnetId": "{{ SubnetId }}",
          "InputDestinationInstanceType": "{{ InstanceType }}",
          "InputDestinationKeyName": "{{ KeyPair }}",
          "InputDestinationSecurityGroupIds": "{{ SecurityGroupIds }}",
          "SourceInstanceType": "{{ describeSourceInstanceDetails.SourceInstanceType }}",
          "SourceInstanceAZ": "{{ describeSourceInstanceDetails.SourceAvailabilityZone }}",
          "SourceInstanceSubnetId": "{{ describeSourceInstanceDetails.SourceSubnetId }}",
          "SourceInstanceKeyName": "{{ describeSourceInstanceDetails.SourceKeyPair }}",
          "SourceInstanceSecurityGroupIds": "{{ describeSourceInstanceDetails.SourceSecurityGroupIds }}"
        },
        "Handler": "eval_input_parameters",
        "Runtime": "python3.11",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\ndef eval_input_parameters(events, context):\n    \"\"\"\n    Determines final parameters for launching an EC2 instance based on input and source instance details.\n    \"\"\"\n\n    # Determine the source instance region and final destination region\n    source_instance_region = context[\"global:REGION\"]\n    final_region = events[\"InputDestinationRegion\"] or source_instance_region\n    is_same_region = final_region.strip().lower() == source_instance_region.strip().lower()\n\n    # Determine the final key pair, defaulting to empty if not provided\n    source_instance_key_name = (\n        events[\"SourceInstanceKeyName\"]\n        if \"describeSourceInstanceDetails\" not in events[\"SourceInstanceKeyName\"]\n        else \"\"\n    )\n    final_key_pair = (\n        events[\"InputDestinationKeyName\"] if events[\"InputDestinationKeyName\"] else source_instance_key_name\n    )\n\n    # Determine the final instance type, defaulting to the source instance type if not provided\n    final_instance_type = (\n        events[\"InputDestinationInstanceType\"]\n        if events[\"InputDestinationInstanceType\"]\n        else events[\"SourceInstanceType\"]\n    )\n\n    filtered_security_group_ids = [\n        sg for sg in events[\"InputDestinationSecurityGroupIds\"] if sg is not None and sg != \"\"\n    ]\n    # Set the final subnet ID and security group IDs based on whether the destination is in the same region\n    if is_same_region:\n        final_subnet_id = (\n            events[\"InputDestinationSubnetId\"]\n            if events[\"InputDestinationSubnetId\"]\n            else events[\"SourceInstanceSubnetId\"]\n        )\n        final_security_group_ids = (\n            filtered_security_group_ids if filtered_security_group_ids else events[\"SourceInstanceSecurityGroupIds\"]\n        )\n    else:\n        final_subnet_id = events[\"InputDestinationSubnetId\"]\n        final_security_group_ids = events[\"InputDestinationSecurityGroupIds\"]\n\n    # Assemble the output dictionary with the final parameters\n    function_outputs = {\n        \"FinalRegion\": final_region,\n        \"FinalSubnetId\": final_subnet_id,\n        \"FinalInstanceType\": final_instance_type,\n        \"FinalKeyPair\": final_key_pair,\n        \"FinalSecurityGroupIds\": final_security_group_ids,\n        \"IsSameRegion\": is_same_region,\n    }\n\n    # Return the final parameters\n    return function_outputs\n"
      },
      "outputs": [
        {
          "Name": "RegionToUse",
          "Selector": "$.Payload.FinalRegion",
          "Type": "String"
        },
        {
          "Name": "SubnetToUse",
          "Selector": "$.Payload.FinalSubnetId",
          "Type": "String"
        },
        {
          "Name": "InstanceTypeToUse",
          "Selector": "$.Payload.FinalInstanceType",
          "Type": "String"
        },
        {
          "Name": "KeyNameToUse",
          "Selector": "$.Payload.FinalKeyPair",
          "Type": "String"
        },
        {
          "Name": "SecurityGroupsToUse",
          "Selector": "$.Payload.FinalSecurityGroupIds",
          "Type": "StringList"
        },
        {
          "Name": "IsSameRegion",
          "Selector": "$.Payload.IsSameRegion",
          "Type": "Boolean"
        }
      ],
      "nextStep": "createSourceImage"
    },
    {
      "name": "createSourceImage",
      "action": "aws:createImage",
      "description": "Creates an AMI of the source instance.",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "InstanceId": "{{ InstanceId }}",
        "ImageName": "AWSSupport-CopyEC2Instance Source for {{ InstanceId }}_{{ global:DATE_TIME }}",
        "NoReboot": "{{ NoRebootInstanceBeforeTakingImage }}",
        "ImageDescription": "AWSSupport-CopyEC2Instance Source for {{ InstanceId }} at {{ global:DATE_TIME }}."
      },
      "nextStep": "tagSourceImage"
    },
    {
      "name": "tagSourceImage",
      "action": "aws:createTags",
      "description": "Tags the created AMI.",
      "onFailure": "Continue",
      "maxAttempts": 3,
      "timeoutSeconds": 300,
      "inputs": {
        "ResourceType": "EC2",
        "ResourceIds": [
          "{{ createSourceImage.ImageId }}"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "AWSSupport-CopyEC2Instance Source for {{ InstanceId }}"
          },
          {
            "Key": "AWSSupport-CopyEC2Instance",
            "Value": "{{ automation:EXECUTION_ID }}"
          },
          {
            "Key": "CreatedBy",
            "Value": "AWSSupport-CopyEC2Instance"
          },
          {
            "Key": "CreatedTime",
            "Value": "{{ global:DATE_TIME }}"
          }
        ]
      },
      "nextStep": "branchOnIsSameRegion"
    },
    {
      "name": "branchOnIsSameRegion",
      "description": "Branches on whether the automation is copying the source AMI across AWS Region.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "branchOnIsSameRegionWithKeyPair",
            "Variable": "{{ evalInputParameters.IsSameRegion }}",
            "BooleanEquals": true
          },
          {
            "NextStep": "copyImageCrossRegion",
            "Variable": "{{ evalInputParameters.IsSameRegion }}",
            "BooleanEquals": false
          }
        ],
        "Default": "copyImageCrossRegion"
      },
      "isEnd": false
    },
    {
      "name": "branchOnIsSameRegionWithKeyPair",
      "description": "Branches on weather an Amazon EC2 key pair is required on the target EC2 instance.",
      "action": "aws:branch",
      "isEnd": false,
      "inputs": {
        "Choices": [
          {
            "NextStep": "createInstanceWithoutKeyPair",
            "Variable": "{{ evalInputParameters.KeyNameToUse }}",
            "StringEquals": ""
          }
        ],
        "Default": "createInstanceWithKeyPair"
      }
    },
    {
      "name": "createInstanceWithKeyPair",
      "description": "Launches a copy of the EC2 instance in the current region with an Amazon EC2 key pair.",
      "action": "aws:runInstances",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "ImageId": "{{ createSourceImage.ImageId }}",
        "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
        "KeyName": "{{ evalInputParameters.KeyNameToUse }}",
        "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
        "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}",
        "TagSpecifications": [
          {
            "ResourceType": "instance",
            "Tags": [
              {
                "Key": "Name",
                "Value": "AWSSupport-CopyEC2Instance Source: {{ InstanceId }}"
              },
              {
                "Key": "AWSSupport-CopyEC2Instance",
                "Value": "{{ automation:EXECUTION_ID }}"
              },
              {
                "Key": "CreatedBy",
                "Value": "AWSSupport-CopyEC2Instance"
              },
              {
                "Key": "CreatedTime",
                "Value": "{{ global:DATE_TIME }}"
              }
            ]
          }
        ]
      },
      "nextStep": "branchOnKeepImageSourceRegion"
    },
    {
      "name": "createInstanceWithoutKeyPair",
      "description": "Launches a copy of the EC2 instance in the current region without an Amazon EC2 key pair.",
      "action": "aws:runInstances",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "ImageId": "{{ createSourceImage.ImageId }}",
        "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
        "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
        "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}",
        "TagSpecifications": [
          {
            "ResourceType": "instance",
            "Tags": [
              {
                "Key": "Name",
                "Value": "AWSSupport-CopyEC2Instance Source: {{ InstanceId }}"
              },
              {
                "Key": "AWSSupport-CopyEC2Instance",
                "Value": "{{ automation:EXECUTION_ID }}"
              },
              {
                "Key": "CreatedBy",
                "Value": "AWSSupport-CopyEC2Instance"
              },
              {
                "Key": "CreatedTime",
                "Value": "{{ global:DATE_TIME }}"
              }
            ]
          }
        ]
      },
      "nextStep": "branchOnKeepImageSourceRegion"
    },
    {
      "name": "copyImageCrossRegion",
      "description": "Copies the AMI to the target AWS Region.",
      "action": "aws:executeScript",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "InputPayload": {
          "AutomationExecutionId": "{{ automation:EXECUTION_ID }}",
          "CreatedTime": "{{ global:DATE_TIME }}",
          "SourceLocalImageId": "{{ createSourceImage.ImageId }}",
          "SourceRegion": "{{ global:REGION }}",
          "DestinationRegion": "{{ evalInputParameters.RegionToUse }}"
        },
        "Handler": "copy_ec2_image_cross_region",
        "Runtime": "python3.11",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef copy_ec2_image_cross_region(events, context):\n    \"\"\"\n    Copies an EC2 image (AMI) across AWS Regions.\n    \"\"\"\n    try:\n        # Initialize the EC2 client for the destination region.\n        ec2_client = boto3.client(\"ec2\", region_name=events[\"DestinationRegion\"])\n        execution_id = context[\"automation:EXECUTION_ID\"]\n\n        name = (\n            f\"AMI Copied from {events['SourceLocalImageId']} located in \"\n            f\"{events['SourceRegion']} by AWSSupport-CopyEC2Instance at \"\n            f\"{events['CreatedTime']}\"\n        )\n        # Copy the image to the destination region.\n        remote_image = ec2_client.copy_image(\n            Name=name,\n            Description=f\"{name}: {events['AutomationExecutionId']}\",\n            SourceImageId=events[\"SourceLocalImageId\"],\n            SourceRegion=events[\"SourceRegion\"],\n            ClientToken=execution_id,\n        )\n\n        # Return the ID of the copied image.\n        return remote_image[\"ImageId\"]\n    except ClientError as error:\n        raise RuntimeError(f\"[ERROR] Unable to copy the image: {error}\")\n"
      },
      "outputs": [
        {
          "Name": "ImageId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "waitForCrossRegionAmiToBeAvailable"
    },
    {
      "name": "waitForCrossRegionAmiToBeAvailable",
      "description": "Waits for the AMI to be in `available` state.",
      "action": "aws:executeScript",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "InputPayload": {
          "ImageId": "{{ copyImageCrossRegion.ImageId }}",
          "Region": "{{ evalInputParameters.RegionToUse }}"
        },
        "Handler": "wait_for_image_availability",
        "Runtime": "python3.11",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef wait_for_image_availability(events, context):\n    \"\"\"\n    Waits for an EC2 image (AMI) to become available in a specified region.\n    \"\"\"\n    try:\n        # Initialize the EC2 client for the specified region.\n        ec2_client = boto3.client(\"ec2\", region_name=events[\"Region\"])\n\n        # Log the waiting process for the image to become available.\n        image_id = events[\"ImageId\"]\n        print(f\"[INFO] Waiting for the Image {image_id} in AWS Region {events['Region']} to be in available state...\")\n\n        # Wait for the specified image to become available.\n        ec2_client.get_waiter(\"image_available\").wait(\n            ImageIds=[image_id],\n            WaiterConfig={\"Delay\": 10, \"MaxAttempts\": 100},\n        )\n\n        print(f\"[INFO] Image {image_id} is now Available!\")\n\n        # Return the ID of the available image.\n        return image_id\n    except ClientError as error:\n        raise RuntimeError(f\"[ERROR] Unable to wait for the image availability: {error}\")\n"
      },
      "nextStep": "createCrossRegionInstance"
    },
    {
      "name": "createCrossRegionInstance",
      "description": "Launches a copy of the EC2 instance in the selected region.",
      "action": "aws:executeScript",
      "maxAttempts": 1,
      "timeoutSeconds": 1200,
      "isCritical": true,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "InputPayload": {
          "AutomationExecutionId": "{{ automation:EXECUTION_ID }}",
          "CreatedTime": "{{ global:DATE_TIME }}",
          "SourceInstanceId": "{{ InstanceId }}",
          "ImageId": "{{ copyImageCrossRegion.ImageId }}",
          "Region": "{{ evalInputParameters.RegionToUse }}",
          "InstanceType": "{{ evalInputParameters.InstanceTypeToUse }}",
          "KeyName": "{{ evalInputParameters.KeyNameToUse }}",
          "SubnetId": "{{ evalInputParameters.SubnetToUse }}",
          "SecurityGroupIds": "{{ evalInputParameters.SecurityGroupsToUse }}"
        },
        "Handler": "launch_ec2_instance_cross_region",
        "Runtime": "python3.11",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef launch_ec2_instance_cross_region(events, context):\n    \"\"\"\n    Launches an EC2 instance in a specified region using parameters provided in events.\n    \"\"\"\n    try:\n        # Initialize the EC2 client for the specified region.\n        ec2_client = boto3.client(\"ec2\", region_name=events[\"Region\"])\n        execution_id = context[\"automation:EXECUTION_ID\"]\n\n        # Construct argument dictionary for launching an instance.\n        arg_run_instance = {\n            \"ImageId\": events[\"ImageId\"],\n            \"ClientToken\": execution_id,\n            \"MinCount\": 1,\n            \"MaxCount\": 1,\n            \"InstanceType\": events[\"InstanceType\"],\n            \"TagSpecifications\": [\n                {\n                    \"ResourceType\": \"instance\",\n                    \"Tags\": [\n                        {\n                            \"Key\": \"Name\",\n                            \"Value\": f\"AWSSupport-CopyEC2Instance Source: {events['SourceInstanceId']} {context['global:REGION']}\",\n                        },\n                        {\"Key\": \"AWSSupport-CopyEC2Instance\", \"Value\": events[\"AutomationExecutionId\"]},\n                        {\"Key\": \"CreatedBy\", \"Value\": \"AWSSupport-CopyEC2Instance\"},\n                        {\"Key\": \"CreatedTime\", \"Value\": events[\"CreatedTime\"]},\n                    ],\n                }\n            ],\n        }\n\n        # Conditional additions based on event contents.\n        if events.get(\"KeyName\") and events[\"KeyName\"]:\n            arg_run_instance[\"KeyName\"] = events[\"KeyName\"]\n        if events.get(\"SubnetId\") and events[\"SubnetId\"]:\n            arg_run_instance[\"SubnetId\"] = events[\"SubnetId\"]\n        target_security_group_ids = [sg for sg in events[\"SecurityGroupIds\"] if sg is not None and sg != \"\"]\n        if target_security_group_ids:\n            arg_run_instance[\"SecurityGroupIds\"] = target_security_group_ids\n\n        # Launch instance.\n        print(f\"[INFO] RunInstances parameters: {arg_run_instance}\")\n        remote_instance = ec2_client.run_instances(**arg_run_instance)\n\n        instance_id = remote_instance[\"Instances\"][0][\"InstanceId\"]\n        print(f\"[INFO] Successfully launched {instance_id}\")\n\n        # Return the ID of the launched instance.\n        return instance_id\n    except ClientError as error:\n        raise RuntimeError(f\"[ERROR] Unable to launch the EC2 instance: {error}\")\n"
      },
      "outputs": [
        {
          "Name": "InstanceIds",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "branchOnKeepImageDestinationRegion"
    },
    {
      "name": "branchOnKeepImageDestinationRegion",
      "description": "Branches on the `KeepImageDestinationRegion` parameter. If `true`, the destination AMI is deregistered.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "deregisterCrossRegionAmiAndDeleteSnapshots",
            "Variable": "{{ KeepImageDestinationRegion }}",
            "BooleanEquals": false
          }
        ],
        "Default": "branchOnKeepImageSourceRegion"
      },
      "isEnd": false
    },
    {
      "name": "deregisterCrossRegionAmiAndDeleteSnapshots",
      "description": "Deregisters the destination AMI.",
      "action": "aws:executeScript",
      "maxAttempts": 3,
      "timeoutSeconds": 300,
      "isCritical": true,
      "onFailure": "step:branchOnKeepImageSourceRegion",
      "inputs": {
        "InputPayload": {
          "Region": "{{ evalInputParameters.RegionToUse }}",
          "ImageId": "{{ copyImageCrossRegion.ImageId }}"
        },
        "Handler": "deregister_ami_and_delete_snapshots",
        "Runtime": "python3.11",
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef deregister_ami_and_delete_snapshots(events, context):\n    \"\"\"\n    Deregisters an AMI and deletes its associated EBS snapshots in a specified region.\n    \"\"\"\n    try:\n        # Initialize the EC2 client for the specified region.\n        ec2_client = boto3.client(\"ec2\", region_name=events[\"Region\"])\n\n        ami_id = events[\"ImageId\"]\n        print(f\"[INFO] Deleting the destination region Image: {ami_id} as requested in the document parameters\")\n\n        # Describe the image to get snapshot IDs from the BlockDeviceMappings.\n        print(f\"[INFO] Retrieving snapshots for {ami_id}...\")\n        snapshot_ids = []\n        images = ec2_client.describe_images(ImageIds=[ami_id])[\"Images\"]\n        if images:\n            for device in images[0][\"BlockDeviceMappings\"]:\n                if \"Ebs\" in device and \"SnapshotId\" in device[\"Ebs\"]:\n                    snapshot_ids.append(device[\"Ebs\"][\"SnapshotId\"])\n        print(f\"[INFO] SnapshotIds to delete: {snapshot_ids}\")\n\n        # Deregister AMI.\n        print(f\"[INFO] Deregistering AMI: {ami_id}...\")\n        response = ec2_client.deregister_image(ImageId=ami_id)\n\n        if response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n            print(f\"[INFO] Successfully deleted: {ami_id}\")\n        else:\n            print(f\"[ERROR] Failed to delete AMI {ami_id}\")\n\n        # Delete associated snapshots.\n        for snapshot_id in snapshot_ids:\n            print(f\"[INFO] Deleting snapshot: {snapshot_id}...\")\n            try:\n                response = ec2_client.delete_snapshot(SnapshotId=snapshot_id)\n                if response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n                    print(f\"[INFO] Successfully deleted: {snapshot_id}\")\n            except ClientError as error:\n                print(f\"[ERROR] Failed to delete snapshot {snapshot_id}: {error}\")\n\n        # Return the ID of the deregistered AMI.\n        return ami_id\n    except ClientError as error:\n        raise RuntimeError(f\"[ERROR] Unable to deregister AMI and delete snapshots: {error}\")\n"
      },
      "nextStep": "branchOnKeepImageSourceRegion"
    },
    {
      "name": "branchOnKeepImageSourceRegion",
      "description": "Branches on the `KeepImageSourceRegion` parameter. If `true`, the source AMI is deregistered.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "deregisterSourceAmiAndDeleteSnapshots",
            "Variable": "{{ KeepImageSourceRegion }}",
            "BooleanEquals": false
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "deregisterSourceAmiAndDeleteSnapshots",
      "description": "Deregisters the source AMI.",
      "action": "aws:deleteImage",
      "maxAttempts": 3,
      "timeoutSeconds": 300,
      "isCritical": true,
      "onFailure": "Abort",
      "inputs": {
        "ImageId": "{{ createSourceImage.ImageId }}"
      },
      "isEnd": true
    }
  ],
  "files": {
    "artifact.zip": {
      "checksums": {
        "SHA256": "1b2e0ac8f8eccafd78788aafe801966bcb4b40bdb58aaf0fd0a0f8b66e85f003"
      }
    }
  }
}
