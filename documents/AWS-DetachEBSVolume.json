{
  "description": "Detach EBS Volume",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "VolumeId": {
      "type": "String",
      "description": "(Required) The ID of the EBS volume. The volume and instance must be within the same Availability Zone"
    },
    "LambdaAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role assumed by lambda",
      "default": ""
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. ",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "createDocumentStack",
      "action": "aws:createStack",
      "inputs": {
        "Capabilities": [
          "CAPABILITY_IAM"
        ],
        "StackName": "DetachEBSVolumeStack{{automation:EXECUTION_ID}}",
        "Parameters": [
          {
            "ParameterKey": "LambdaRoleArn",
            "ParameterValue": "{{LambdaAssumeRole}}"
          },
          {
            "ParameterKey": "LambdaName",
            "ParameterValue": "DetachVolumeLambda-{{automation:EXECUTION_ID}}"
          }
        ],
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nConditions:\n  LambdaAssumeRoleNotSpecified:\n    Fn::Or:\n    - Fn::Equals:\n      - Ref: LambdaRoleArn\n      - ''\n    - Fn::Equals:\n      - Ref: LambdaRoleArn\n      - undefined\nDescription: Automation Stack for Detach EBS Volumes\nParameters:\n  LambdaName:\n    Description: The lambda function name\n    Type: String\n  LambdaRoleArn:\n    Default: ''\n    Description: The ARN of the role that allows Lambda created by Automation to perform\n      the action on your behalf\n    Type: String\nResources:\n  DetachVolumeLambda:\n    Properties:\n      Code:\n        ZipFile: \"#\\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights\\\n          \\ Reserved.\\n#\\n# Permission is hereby granted, free of charge, to any person\\\n          \\ obtaining a copy of this\\n# software and associated documentation files\\\n          \\ (the \\\"Software\\\"), to deal in the Software\\n# without restriction, including\\\n          \\ without limitation the rights to use, copy, modify,\\n# merge, publish,\\\n          \\ distribute, sublicense, and/or sell copies of the Software, and to\\n#\\\n          \\ permit persons to whom the Software is furnished to do so.\\n#\\n# THE SOFTWARE\\\n          \\ IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\\n\\\n          # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\\n          \\ FOR A\\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\n          \\ AUTHORS OR COPYRIGHT\\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\n          \\ LIABILITY, WHETHER IN AN ACTION\\n# OF CONTRACT, TORT OR OTHERWISE, ARISING\\\n          \\ FROM, OUT OF OR IN CONNECTION WITH THE\\n# SOFTWARE OR THE USE OR OTHER\\\n          \\ DEALINGS IN THE SOFTWARE.\\n#\\nimport boto3\\nimport time\\nimport logging\\n\\\n          \\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\ndef handler(event,\\\n          \\ context):\\n\\tec2 = boto3.resource('ec2')\\n\\n\\tvolume_id = event[\\\"VolumeId\\\"\\\n          ]\\n\\tvolume = ec2.Volume(volume_id)\\n\\tvolume.detach_from_instance()\\n\\n\\\n          \\tretry_count = 0\\n\\tattachment_state = 'detaching'\\n\\n\\twhile retry_count\\\n          \\ < 35:\\n\\n\\t\\tretry_count += 1\\n\\t\\tvolume.reload()\\n\\n\\t\\tif len(volume.attachments)\\\n          \\ == 0:\\n\\t\\t\\tattachment_state = 'detached'\\n\\t\\t\\tbreak\\n\\t\\tattachment_state\\\n          \\ = volume.attachments[0]['State']\\n\\t\\tif attachment_state == 'detached'\\\n          \\ or attachment_state == 'busy':\\n\\t\\t\\tbreak\\n\\n\\t\\ttime.sleep(1)\\n\\t\\t\\\n          logger.info(\\\"Current Attachment State:\\\" + attachment_state + \\\", tries:\\\"\\\n          \\ + str(retry_count))\\n\\n\\tlogger.info(\\\"Last Attachment State:\\\" + attachment_state\\\n          \\ + \\\", tries:\\\" + str(retry_count))\\n\\n\\tif attachment_state == 'busy':\\n\\\n          \\t\\tlogger.warn('Volume still mounted. Will detach once volume is unmounted\\\n          \\ from instance.')\\n\\t\\traise Exception('Volume still mounted. Will detach\\\n          \\ once volume is unmounted from instance.')\\n\\n\\tif attachment_state !=\\\n          \\ 'detached':\\n\\t\\traise Exception('Failed to detach volume.  Current state\\\n          \\ is:' + attachment_state)\\n\"\n      FunctionName:\n        Ref: LambdaName\n      Handler: index.handler\n      MemorySize: 128\n      Role:\n        Fn::If:\n        - LambdaAssumeRoleNotSpecified\n        - Fn::GetAtt:\n          - LambdaRole\n          - Arn\n        - Ref: LambdaRoleArn\n      Runtime: python3.8\n      Timeout: 60\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Condition: LambdaAssumeRoleNotSpecified\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action:\n          - sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n            Action:\n            - ec2:DescribeVolumes\n            - ec2:DetachVolume\n            Effect: Allow\n            Resource: '*'\n          Version: '2012-10-17'\n        PolicyName: DetachVolumeLambdaPolicy\n    Type: AWS::IAM::Role\n"
      }
    },
    {
      "name": "detachVolume",
      "action": "aws:invokeLambdaFunction",
      "inputs": {
        "FunctionName": "DetachVolumeLambda-{{automation:EXECUTION_ID}}",
        "Payload": "{\"VolumeId\": \"{{VolumeId}}\"}",
        "LogType": "Tail"
      }
    },
    {
      "name": "deleteCloudFormationTemplate",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "DetachEBSVolumeStack{{automation:EXECUTION_ID}}"
      }
    }
  ],
  "outputs": [
    "detachVolume.LogResult"
  ]
}
