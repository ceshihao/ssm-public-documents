{
  "description": "----\n*AWS Support Document to troubleshoot/remediate s3 event trigger for Lambda*\n----\n\nThis document can troubleshoot/remediate 2 scenarios as below which are discussed in the articles : \n\nhttps://aws.amazon.com/premiumsupport/knowledge-center/lambda-invoke-error-s3-bucket-permission/\n\nhttps://aws.amazon.com/premiumsupport/knowledge-center/lambda-configure-s3-event-notification/\n\n\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "outputs": [
    "remediatelambdas3event.output",
    "checkoutput.Output"
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "default": ""
    },
    "LambdaFunctionArn": {
      "type": "String",
      "description": "Enter Arn of the Lambdafunction in the format - arn:aws:lambda:<aws-region>:<account-id>:function:<functionName>:<version -optional>",
      "allowedPattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
    },
    "S3BucketName": {
      "type": "String",
      "allowedPattern": "^$|^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$"
    },
    "Action": {
      "type": "String",
      "allowedValues": [
        "Troubleshoot",
        "Remediate"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "branchonAction",
      "action": "aws:branch",
      "description": "Branch Based on Action",
      "inputs": {
        "Choices": [
          {
            "NextStep": "remediatelambdas3event",
            "Variable": "{{Action}}",
            "StringEquals": "Remediate"
          },
          {
            "NextStep": "troubleshootlambdas3event",
            "Variable": "{{Action}}",
            "StringEquals": "Troubleshoot"
          }
        ]
      }
    },
    {
      "name": "troubleshootlambdas3event",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-TroubleshootLambdaS3Event",
        "RuntimeParameters": {
          "LambdaFunctionArn": "{{LambdaFunctionArn}}",
          "S3BucketName": "{{S3BucketName}}",
          "AutomationAssumeRole": "{{AutomationAssumeRole}}"
        }
      },
      "isEnd": false,
      "nextStep": "checkoutput"
    },
    {
      "name": "remediatelambdas3event",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "script_handler",
        "Script": "import json\nimport boto3\nimport botocore\nimport re\n\ndef script_handler(events, context):\n    resourcepolicyflag = 0\n    result = {}\n    result[\"objkey\"] = ' '\n    result[\"Filters\"] = ' '\n    result[\"policy\"] = ''\n    result[\"response\"] = ''\n    result[\"lambdacheck\"] = ''\n    result[\"otherLambdafunctionPolicy\"] = ''\n    result[\"otherLambdafunctionPolicyresponse\"] = ''\n    result[\"Events\"] = ''\n    functionName = events['functionArn'].split(\":\",7)[6]\n    s3Bucket = events['s3BucketName']\n    accountId = events['functionArn'].split(\":\",7)[4]\n    if (len(events['functionArn'].split(\":\")) == 8):\n        qualifier = events['functionArn'].split(\":\",8)[7]\n    else:\n        qualifier = \"\"\n    client = boto3.client('s3')\n    lambdaclient = boto3.client('lambda')\n    bucket_notification = client.get_bucket_notification_configuration(Bucket=s3Bucket)\n    \n    try:\n        test_policy = lambdaclient.get_policy( FunctionName= functionName)\n    except botocore.exceptions.ClientError as err:\n        if (err.response['Error']['Message'].find('Function not found')!= -1):\n            result[\"lambdacheck\"] = \"Lambda function does not exist\"\n\n    def eventPattern(config,lambdaName):\n        result[\"Events\"] += '\\n S3 events for the event '+ config['Id'] + ' and the function ' + functionName + ' are:' + str(config['Events']) + '\\n'\n        try:\n            if (result[\"Filters\"].find(\"Prefix\") != -1):\n                result[\"Filters\"] += config[\"Id\"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules']) + '\\n'\n            else:\n                result[\"Filters\"] = config[\"Id\"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules']) + '\\n'\n            regex = re.compile('[$&+,:;=?@\" \"]')\n            for i in config['Filter']['Key']['FilterRules']:\n                if (regex.search(i['Value']) == None):\n                    result[\"objkey\"] += \"\\n No Special Character found in \" + i['Name'] + \" for the event \" + config[\"Id\"]\n                    if (i['Value'] == '*' or i['Value'] == '.*'):\n                        result[\"objkey\"] += \"\\n Wild character * found in the \" + i['Name'] + \" for the event \" + config[\"Id\"] + \" A wildcard character ('*') can't be used in filters as a prefix or suffix to represent any character.\"\n                else:\n                    result[\"objkey\"] += \"\\n NOTE: Special characters found in the value of the \" + i[\"Name\"] +  \" for the event \" + config[\"Id\"] + \" ,you must enter them in URL-encoded (percent-encoded) format : https://www.w3schools.com/tags/ref_urlencode.asp\"\n        except KeyError:\n            result[\"Filters\"] = \"No event filters found\"\n            result[\"objkey\"] = \"No object keys\"\n    \n    if 'LambdaFunctionConfigurations' in bucket_notification and result[\"lambdacheck\"] != 'Lambda function does not exist':\n        match = 0\n        for config in bucket_notification['LambdaFunctionConfigurations']:\n            lambdaName = config['LambdaFunctionArn'].split(\":\",7)[6]\n            if (lambdaName == functionName and len(config['LambdaFunctionArn'].split(\":\"))==8 and qualifier != \"\"): \n                if (qualifier == config['LambdaFunctionArn'].split(\":\",8)[7] and lambdaName == functionName):\n                    match = 1\n                    eventPattern(config,lambdaName)               \n            elif (lambdaName == functionName and len(config['LambdaFunctionArn'].split(\":\"))==7 and qualifier == \"\"):\n                match = 1\n                eventPattern(config,lambdaName)\n        if match == 0:\n            result[\"EventConfiguration\"] = \"No Event configuration exists for the mentioned S3 bucket and lambda function\"\n            result[\"Filters\"] = \"No Event Filters as no Event configuration exists\"\n            result[\"objkey\"] = \" \"\n            result[\"policy\"] = \" \"\n            result[\"response\"] = \" \"\n    else:\n            result[\"EventConfiguration\"] = \"No Event configuration exists for the mentioned S3 bucket and lambda function\"\n            result[\"Filters\"] = \"No Event Filters as no Event configuration exists\"\n            result[\"objkey\"] = \" \"\n            result[\"policy\"] = \" \"\n            result[\"response\"] = \" \"\n            \n    \n    if (not ('EventConfiguration' in result) and result[\"lambdacheck\"] != 'Lambda function does not exist'):\n        result[\"EventConfiguration\"] = \"Event Configuration for the bucket exists\"            \n        try:\n            if qualifier == \"\":\n                resource_policy = lambdaclient.get_policy( FunctionName= functionName)\n            else:\n                resource_policy = lambdaclient.get_policy( FunctionName= functionName ,Qualifier= qualifier)\n\n            policy = json.loads(resource_policy['Policy'])\n            for statement in policy['Statement']:\n                if statement['Action'] == 'lambda:InvokeFunction':\n                    if statement['Principal']['Service'] == 's3.amazonaws.com' and statement['Effect'] == 'Allow':\n                        for key in statement['Condition']:\n                            if key == 'ArnLike':\n                                if statement['Condition'][key]['AWS:SourceArn'].split(\":\",6)[5] == s3Bucket:\n                                    result[\"policy\"] = \"Resource policy permission exists and is correct. If event type matches, please check/configure your Lambda concurrency to handle concurrent executions of incoming Amazon S3 event notifications. If you are getting error 'Unable to validate the following destination configurations' error while creating an Amazon S3 event notification to trigger Lambda function, please check/configure existing SNS/SQS S3 event notifications to remediate the issue.\"\n                                    result[\"response\"] = '\\n'\n                                    resourcepolicyflag = 1\n            if resourcepolicyflag == 0:\n                result[\"policy\"] = 'Resource policy for the Lambda function with s3 permissions was missing. Added Resourcepolicy to lambda. Try testing if the s3 trigger works now.'\n                if qualifier == \"\":\n                    response = lambdaclient.add_permission(FunctionName= functionName,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                    SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n                else:\n                    response = lambdaclient.add_permission(FunctionName= functionName,Qualifier= qualifier,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                    SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId ) \n        except:\n            result[\"policy\"] = 'Resource policy for the Lambda function with s3 permissions was missing. Added Resourcepolicy to lambda to mitigate the issue.'\n            if qualifier == \"\":\n                response = lambdaclient.add_permission(FunctionName= functionName,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n            else:\n                response = lambdaclient.add_permission(FunctionName= functionName,Qualifier= qualifier,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n    elif result[\"lambdacheck\"] == 'Lambda function does not exist':\n        result[\"policy\"] = ''\n        result[\"response\"] = ''\n    else:\n        result[\"policy\"] = \"Resource policy for the Lambda function with s3 permissions was missing. Added Resourcepolicy to lambda to mitigate the issue.\"\n        if qualifier == \"\":\n            response = lambdaclient.add_permission(FunctionName= functionName,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n            SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n        else:\n            response = lambdaclient.add_permission(FunctionName= functionName,Qualifier= qualifier,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n            SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n\n\n        if 'LambdaFunctionConfigurations' in bucket_notification and result[\"lambdacheck\"] != 'Lambda function does not exist':\n            result[\"otherLambdafunctionPolicy\"] = ''\n            result[\"otherLambdafunctionPolicyresponse\"] = ''\n            for config in bucket_notification['LambdaFunctionConfigurations']:\n                lambdaName = config['LambdaFunctionArn'].split(\":\",7)[6]\n                resourcepolicyflag = 0\n                length = len(config['LambdaFunctionArn'].split(\":\"))\n                qual = \"\"\n                if (length==8):\n                    qual = config['LambdaFunctionArn'].split(\":\",8)[7]\n                if not (qualifier == qual and lambdaName == functionName) :\n                    try:\n                        if (length==8):\n                            resource_policy = lambdaclient.get_policy( FunctionName= lambdaName ,Qualifier= qual)\n                        else:\n                            resource_policy = lambdaclient.get_policy( FunctionName= lambdaName)\n\n                        policy = json.loads(resource_policy['Policy'])\n                        for statement in policy['Statement']:\n                            if statement['Action'] == 'lambda:InvokeFunction':\n                                if statement['Principal']['Service'] == 's3.amazonaws.com' and statement['Effect'] == 'Allow':\n                                    for key in statement['Condition']:\n                                        if key == 'ArnLike':\n                                            if statement['Condition'][key]['AWS:SourceArn'].split(\":\",6)[5] == s3Bucket:   \n                                                resourcepolicyflag = 1                                \n                        if resourcepolicyflag == 0:\n                            if (length==8) :\n                                response = lambdaclient.add_permission(FunctionName= lambdaName,Qualifier= qual,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n                                result[\"otherLambdafunctionPolicy\"] += '\\n' + 'Resource policy did not exist previously for the function ' + lambdaName + ':' + qual + ' which is also an event notification for s3 bucket. Added Resourcepolicy to lambda to mitigate the issue. You can delete the EventNotification for '+ lambdaName + ':' + qual + ' if no longer needed.'\n                            else:\n                                result[\"otherLambdafunctionPolicy\"] += '\\n' + 'Resource policy did not exist previously for the function ' + lambdaName + ' which is also an event notification for s3 bucket. Added Resourcepolicy to lambda to mitigate the issue. You can delete the EventNotification for ' + lambdaName + ' if no longer needed.'\n                                response = lambdaclient.add_permission(FunctionName= lambdaName,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )    \n                    except botocore.exceptions.ClientError as err:\n                        if (err.response['Error']['Message'].find('Function not found')!= -1):\n                            result[\"otherLambdafunctionPolicy\"] += '\\n' + 'Function ' + lambdaName + ' does not exist. Please delete the event notification ' + config['Id']\n                        else:\n                            if (length==8) :\n                                    response = lambdaclient.add_permission(FunctionName= lambdaName,Qualifier= qual,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                                    SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )\n                                    result[\"otherLambdafunctionPolicy\"] += '\\n' + 'Resource policy did not exist previously for the function ' + lambdaName + ':' + qual + ' which is also an event notification for s3 bucket. Added Resourcepolicy to lambda to mitigate the issue. You can delete the EventNotification for '+ lambdaName + ':' + qual + ' if no longer needed.'\n                            else:\n                                result[\"otherLambdafunctionPolicy\"] += '\\n' + 'Resource policy did not exist previously for the function ' + lambdaName + ' which is also an event notification for s3 bucket. Added Resourcepolicy to lambda to mitigate the issue. You can delete the EventNotification for ' + lambdaName + ' if no longer needed.'\n                                response = lambdaclient.add_permission(FunctionName= lambdaName,StatementId= accountId + '_event_permissions_from_' + s3Bucket + \"_for_\" + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', \n                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )  \n    \n    \n    Results = result[\"lambdacheck\"] + result[\"Events\"] + '\\n' + result[\"EventConfiguration\"] + '\\n' + 'Event filters are: \\n' + result[\"Filters\"] + '\\n' + result[\"objkey\"]  + '\\n' + result[\"policy\"]  + '\\n' + result[\"response\"]  + '\\n' + result[\"otherLambdafunctionPolicy\"] + '\\n' + result[\"otherLambdafunctionPolicyresponse\"]\n    return {'output': Results}\n",
        "InputPayload": {
          "functionArn": "{{LambdaFunctionArn}}",
          "s3BucketName": "{{S3BucketName}}"
        }
      },
      "description": "executeScript",
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ],
      "isEnd": true
    },
    {
      "name": "checkoutput",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ssm",
        "Api": "GetAutomationExecution",
        "AutomationExecutionId": "{{troubleshootlambdas3event.ExecutionId}}"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.AutomationExecution.Outputs.'lambdaS3Event.output'",
          "Type": "StringList"
        }
      ],
      "isEnd": true
    }
  ]
}
