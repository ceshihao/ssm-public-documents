{
  "description": "The **AWSSupport-RemediateLambdaS3Event** automation runbook helps to troubleshoot and remediate Amazon Simple Storage Service (S3) event triggers for AWS Lambda. This document can troubleshoot and remediate the following scenarios:\n- \"Unable to validate the following destination configurations\" error. See [the re:Post article for more details](https://repost.aws/knowledge-center/lambda-invoke-error-s3-bucket-permission).\n- Troubleshoot issues when a configured Amazon S3 Event Notification doesn't invoke Lambda. See [the re:Post article for more details](https://repost.aws/knowledge-center/lambda-configure-s3-event-notification).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "GenerateReport.OutputPayload",
    "CheckOutput.Output"
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "LambdaFunctionArn": {
      "type": "String",
      "description": "(Required) The Arn of the AWS Lambda function in the format: `arn:aws:lambda:{region}:{account-id}:function:{function name}:{version}`. Note that `:{version}` is optional. If not supplied, the `$LATEST` version will be assessed.",
      "allowedPattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
    },
    "S3BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) The Amazon S3 bucket name that you configure an event notification for the AWS Lambda function."
    },
    "Action": {
      "type": "String",
      "description": "(Required) Choose the action you want to perform. Choose either `Troubleshoot` or `Remediate`.",
      "allowedValues": [
        "Troubleshoot",
        "Remediate"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "BranchOnCheckAction",
      "action": "aws:branch",
      "description": "Branch Based on the value of `Action` provided in the input parameters.",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "CheckLambdaFunctionExistence",
            "Variable": "{{Action}}",
            "StringEquals": "Remediate"
          },
          {
            "NextStep": "TroubleshootLambdaS3Event",
            "Variable": "{{Action}}",
            "StringEquals": "Troubleshoot"
          }
        ]
      }
    },
    {
      "name": "TroubleshootLambdaS3Event",
      "description": "Execute the `AWSSupport-TroubleshootLambdaS3Event` automation document to troubleshoot the S3 event configuration.",
      "action": "aws:executeAutomation",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSSupport-TroubleshootLambdaS3Event",
        "RuntimeParameters": {
          "LambdaFunctionArn": "{{LambdaFunctionArn}}",
          "S3BucketName": "{{S3BucketName}}",
          "AutomationAssumeRole": "{{AutomationAssumeRole}}"
        }
      },
      "nextStep": "CheckOutput"
    },
    {
      "name": "CheckLambdaFunctionExistence",
      "action": "aws:executeAwsApi",
      "nextStep": "CheckS3BucketExistence",
      "description": "Checks if AWS Lambda function provided in the `LambdaFunctionArn` exists.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "lambda",
        "Api": "GetFunction",
        "FunctionName": "{{LambdaFunctionArn}}"
      }
    },
    {
      "name": "CheckS3BucketExistence",
      "action": "aws:executeAwsApi",
      "nextStep": "AnalyzeS3EventConfiguration",
      "description": "Checks if Amazon S3 bucket provided in the `S3BucketName` exists.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "s3",
        "Api": "HeadBucket",
        "Bucket": "{{S3BucketName}}"
      }
    },
    {
      "name": "AnalyzeS3EventConfiguration",
      "action": "aws:executeScript",
      "nextStep": "AnalyzeLambdaFunctionPermissions",
      "description": "Checks the bucket event notification pattern and parses it.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{S3BucketName}}",
          "LambdaFunctionArn": "{{LambdaFunctionArn}}"
        },
        "Script": "import json\nimport re\n\nimport boto3\nimport botocore\n\ns3_client = boto3.client(\"s3\")\n\n\ndef get_lambda_function_config(bucket_name: str) -> list:\n    \"\"\"\n    Retrieves Lambda function configurations from S3 bucket notification settings.\n\n    Args:\n        bucket_name (str): Name of the S3 bucket\n\n    Returns:\n        list: List of Lambda function configurations from bucket notifications\n\n    Raises:\n        RuntimeError: If bucket doesn't exist or configuration cannot be retrieved\n    \"\"\"\n\n    lambda_function_config: list = []\n\n    try:\n        response = s3_client.get_bucket_notification_configuration(Bucket=bucket_name)\n        if \"LambdaFunctionConfigurations\" in response:\n            lambda_function_config = response[\"LambdaFunctionConfigurations\"]\n\n        return lambda_function_config\n\n    except botocore.exceptions.ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"NoSuchBucket\":\n            raise RuntimeError(\n                f\"Error: The Amazon S3 bucket '{bucket_name}' does not exist. Please make sure if you provided the \"\n                f\"right bucket for 'S3BucketName' parameter.\"\n            )\n        else:\n            raise RuntimeError(\n                f\"Error: Could not retrieve bucket notification configuration for the Amazon S3 bucket '{bucket_name}' \"\n                f\"due to an error: {str(error)}\"\n            )\n\n\ndef get_matching_config_list(lambda_function_config: list, provided_lambda_arn: str) -> list:\n    \"\"\"\n    Filters Lambda configurations to match the provided Lambda ARN.\n\n    Args:\n        lambda_function_config (list): List of Lambda function configurations\n        provided_lambda_arn (str): ARN of the Lambda function to match\n\n    Returns:\n        list: Configurations matching the provided Lambda ARN\n    \"\"\"\n\n    config_list: list = []\n    for config in lambda_function_config:\n        configured_lambda_arn = config[\"LambdaFunctionArn\"]\n        if provided_lambda_arn == configured_lambda_arn:\n            config_list.append(config)\n\n    return config_list\n\n\ndef get_special_char_filter_rules(config: dict) -> list:\n    \"\"\"\n    Identifies filter rules containing special characters or wildcards.\n\n    Args:\n        config (dict): Lambda function configuration containing filter rules\n\n    Returns:\n        list: List of filter rules containing special characters or wildcards,\n              with their type ('SpecialChar' or 'Wildcard')\n    \"\"\"\n\n    filter_rules: list = []\n    if \"Filter\" not in config or \"Key\" not in config[\"Filter\"] or \"FilterRules\" not in config[\"Filter\"][\"Key\"]:\n        return filter_rules\n\n    pattern = re.compile('[$&+,:;=?@\" \"]')\n    for rule in config[\"Filter\"][\"Key\"][\"FilterRules\"]:\n        if pattern.search(rule[\"Value\"]) is not None:\n            filter_rules.append(\n                {\n                    \"Name\": rule[\"Name\"],\n                    \"Type\": \"SpecialChar\",\n                }\n            )\n        else:\n            if rule[\"Value\"] == \"*\" or rule[\"Value\"] == \".*\":\n                filter_rules.append(\n                    {\n                        \"Name\": rule[\"Name\"],\n                        \"Type\": \"Wildcard\",\n                    }\n                )\n\n    return filter_rules\n\n\ndef handler(event: dict, _: dict) -> dict:\n    \"\"\"\n    Analyzes S3 event notification configurations for potential issues.\n\n    Args:\n        event (dict): Input event containing 'S3BucketName' and 'LambdaFunctionArn'\n        _ (dict): Unused context parameter\n\n    Returns:\n        dict: Contains 'Report' key with analysis results and required actions\n    \"\"\"\n\n    bucket_name = event.get(\"S3BucketName\", \"\")\n    lambda_arn = event.get(\"LambdaFunctionArn\", \"\")\n\n    report_str = (\n        \"\\n{:-<75}\".format(\"\")\n        + \"\\n{:^75}\".format(\"S3 Event Notification Configuration Analysis Result\")\n        + \"\\n{:-<75}\".format(\"\")\n        + \"\\n\\n\"\n    )\n\n    lambda_function_config = get_lambda_function_config(bucket_name)\n    matching_config_list = get_matching_config_list(lambda_function_config, lambda_arn)\n    if not matching_config_list:\n        report_str += (\n            \"!!! Action Required !!!\\n\"\n            + f\"No event notification configuration found for the AWS Lambda function {lambda_arn}. Please create one \"\n            f\"following the documentation below.\\n\\n\"\n            + \"- Enabling and configuring event notifications using the Amazon S3 console\\n\"\n            + \"https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-event-notifications.html\\n\\n\"\n        )\n        return {\"Report\": report_str}\n\n    else:\n        report_str += (\n            f\"Event notification configuration found for the AWS Lambda function '{lambda_arn}' as follows:\\n\\n\"\n        )\n\n    for config in matching_config_list:\n        report_str += (\n            f\"Configuration ID: {config['Id']}\\n\" + \"---------------\\n\" + f\"* Events: {json.dumps(config['Events'])}\\n\"\n        )\n        if \"Filter\" in config and \"Key\" in config[\"Filter\"] and \"FilterRules\" in config[\"Filter\"][\"Key\"]:\n            report_str += f\"* Filter Rules: {json.dumps(config['Filter']['Key']['FilterRules'])}\\n\\n\"\n\n        special_char_rules = get_special_char_filter_rules(config)\n        if not special_char_rules:\n            report_str += \"--> No special characters or wildcard character ('*') found in filter rules.\\n\\n\\n\"\n        else:\n            for rule in special_char_rules:\n                report_str += f\"!!! Action Required !!! (Rule: {rule['Name']}) \\n\"\n                if rule[\"Type\"] == \"SpecialChar\":\n                    report_str += (\n                        \"Special characters found in the value of the rule. You must enter them in \"\n                        \"URL-encoded (percent-encoded) format: \"\n                        \"https://www.w3schools.com/tags/ref_urlencode.asp\\n\\n\"\n                    )\n                else:\n                    report_str += (\n                        \"Wildcard character '*' found in the value of the rule. A wildcard character '*' \"\n                        \"cannot be used in filters as a prefix or suffix to represent any character.\\n\\n\"\n                    )\n            report_str += (\n                \"For more information, see the 'Note' section in the documentation below.\\n\\n\"\n                + \"- Configuring event notifications using object key name filtering\\n\"\n                + \"https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html\\n\"\n            )\n\n    return {\"Report\": report_str}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "Report",
          "Selector": "$.Payload.Report",
          "Type": "String"
        }
      ]
    },
    {
      "name": "AnalyzeLambdaFunctionPermissions",
      "action": "aws:executeScript",
      "nextStep": "GenerateReport",
      "description": "Checks if the resource policy of the AWS Lambda function allows Amazon S3 to deliver event notifications to the AWS Lambda function.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{ S3BucketName }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}"
        },
        "Script": "import json\nimport uuid\n\nimport boto3\nimport botocore\n\nlambda_client = boto3.client(\"lambda\")\ns3_client = boto3.client(\"s3\")\n\n\ndef get_resource_policy(lambda_arn: str) -> dict[str, list[str]]:\n    \"\"\"\n    Retrieves the resource policy for a Lambda function.\n\n    Args:\n        lambda_arn (str): The ARN of the Lambda function\n\n    Returns:\n        dict: The policy document, or {\"Statement\": []} if no policy exists\n\n    Raises:\n        RuntimeError: If unable to retrieve the policy (except ResourceNotFoundException)\n    \"\"\"\n\n    policy: dict[str, list[str]] = {\"Statement\": []}\n    try:\n        response = lambda_client.get_policy(FunctionName=lambda_arn)\n        policy = json.loads(response[\"Policy\"])\n        return policy\n\n    except botocore.exceptions.ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"ResourceNotFoundException\":\n            return policy\n        else:\n            raise RuntimeError(\n                f\"Error: Could not retrieve resource policy for the AWS Lambda function '{lambda_arn}' due to an error:\"\n                f\" {str(error)}\"\n            ) from None\n\n\ndef is_bucket_allowed_to_invoke(policy: dict[str, list[str]], bucket: str) -> bool:\n    \"\"\"\n    Checks if an S3 bucket has permission to invoke the Lambda function.\n\n    Args:\n        policy (dict): The Lambda function's resource policy\n        bucket (str): The name of the S3 bucket\n\n    Returns:\n        bool: True if bucket has invoke permissions, False otherwise\n    \"\"\"\n\n    is_allowed = False\n    for statement in policy[\"Statement\"]:\n        if statement[\"Action\"] != \"lambda:InvokeFunction\":\n            continue\n\n        if (\n            \"Service\" not in statement[\"Principal\"]\n            or statement[\"Principal\"][\"Service\"] != \"s3.amazonaws.com\"\n            or statement[\"Effect\"] != \"Allow\"\n        ):\n            continue\n\n        if \"Condition\" not in statement:\n            continue\n\n        for key in statement[\"Condition\"]:\n            if key != \"ArnLike\":\n                continue\n\n            if statement[\"Condition\"][key][\"AWS:SourceArn\"].split(\":\", 6)[5] == bucket:\n                is_allowed = True\n                break\n\n    return is_allowed\n\n\ndef check_and_add_permissions_for_other_functions(bucket_name: str, account_id: str, report_str: str) -> str:\n    \"\"\"\n    Checks and adds invoke permissions for Lambda functions configured in bucket notifications.\n\n    Args:\n        bucket_name (str): The name of the S3 bucket\n        account_id (str): The AWS account ID\n        report_str (str): The report sting to add check outputs to\n\n    Returns:\n        str: Report of actions taken\n    \"\"\"\n    updated: bool = False\n\n    report_str += (\n        \"\\n{:-<75}\".format(\"\")\n        + \"\\n{:^75}\".format(\"Remediation For Other Lambda Event Notifications On Bucket\")\n        + \"\\n{:-<75}\".format(\"\")\n        + \"\\n\\n\"\n    )\n\n    notification_configuration = s3_client.get_bucket_notification_configuration(Bucket=bucket_name)\n    for config in notification_configuration.get(\"LambdaFunctionConfigurations\", []):\n        function_arn = config.get(\"LambdaFunctionArn\", \"\")\n        resource_policy = get_resource_policy(function_arn)\n        if not is_bucket_allowed_to_invoke(resource_policy, bucket_name):\n            statement_id = (\n                f\"{bucket_name}_s3_notification_for_lambda_{function_arn.split(':', 8)[6]}_{str(uuid.uuid4())[:5]}\"\n            )\n            _ = lambda_client.add_permission(\n                FunctionName=function_arn,\n                StatementId=statement_id,\n                Action=\"lambda:InvokeFunction\",\n                Principal=\"s3.amazonaws.com\",\n                SourceArn=f\"arn:aws:s3:::{bucket_name}\",\n                SourceAccount=account_id,\n            )\n            report_str += (\n                f\"Resource policy permission for the Lambda function '{function_arn}' does not exist or is incorrect.\\n\"\n                + f\"Added the required resource policy permission for the Lambda function '{function_arn}' to allow the\"\n                f\" S3 bucket '{bucket_name}' to invoke the Lambda function.\\n\\n\"\n                + \"Please add S3 event notification if mentioned in S3 Event Notification Configuration Analysis Result\"\n                \" to enable Lambda notification.\\n\\n\"\n                + \"If an event type matches and you continue to observe an issue, please check and configure your\"\n                \" Lambda concurrency to handle concurrent executions of incoming Amazon S3 event notifications.\\n\\n\"\n            )\n            updated = True\n\n    if not updated:\n        report_str += \"No other Lambda event notifications found for the S3 bucket.\\n\\n\"\n\n    return report_str\n\n\ndef handler(event: dict, context: dict) -> dict:\n    \"\"\"\n    Main Lambda handler to analyze and remediate S3 bucket permissions for Lambda functions.\n\n    Args:\n        event (dict): Contains 'S3BucketName' and 'LambdaFunctionArn'\n        context (dict): Lambda context object containing 'global:ACCOUNT_ID'\n\n    Returns:\n        dict: Contains 'Report' key with analysis and remediation results\n    \"\"\"\n\n    bucket_name: str = event.get(\"S3BucketName\", \"\")\n    lambda_arn: str = event.get(\"LambdaFunctionArn\", \"\")\n    account_id: str = context[\"global:ACCOUNT_ID\"]\n\n    report_str: str = (\n        \"\\n{:-<75}\".format(\"\")\n        + \"\\n{:^75}\".format(\"Lambda Function Resource Policy Analysis Result and Remediation\")\n        + \"\\n{:-<75}\".format(\"\")\n        + \"\\n\\n\"\n    )\n\n    resource_policy = get_resource_policy(lambda_arn)\n\n    if is_bucket_allowed_to_invoke(resource_policy, bucket_name):\n        report_str += (\n            f\"Resource policy permission for the Lambda function '{lambda_arn}' exists and is correct.\\n\"\n            + \"If an event type matches and you continue to observe an issue, please check and configure your Lambda \"\n            \"concurrency to handle concurrent executions of incoming Amazon S3 event notifications.\\n\\n\"\n        )\n    else:\n        statement_id = f\"{account_id}_s3_notification_for_lambda_{uuid.uuid4()}\"\n        _ = lambda_client.add_permission(\n            FunctionName=lambda_arn,\n            StatementId=statement_id,\n            Action=\"lambda:InvokeFunction\",\n            Principal=\"s3.amazonaws.com\",\n            SourceArn=f\"arn:aws:s3:::{bucket_name}\",\n            SourceAccount=account_id,\n        )\n\n        report_str += (\n            f\"Resource policy permission for the Lambda function '{lambda_arn}' does not exist or is incorrect.\\n\"\n            + f\"Added the required resource policy permission for the Lambda function '{lambda_arn}' to allow the S3 \"\n            f\"bucket '{bucket_name}' to invoke the Lambda function.\\n\\n\"\n            + \"Please add S3 event notification if mentioned in S3 Event Notification Configuration Analysis Result to \"\n            \"enable Lambda notification.\\n\\n\"\n            + \"If an event type matches and you continue to observe an issue, please check and configure your Lambda \"\n            \"concurrency to handle concurrent executions of incoming Amazon S3 event notifications.\\n\\n\"\n        )\n\n    report_str = check_and_add_permissions_for_other_functions(bucket_name, account_id, report_str)\n\n    return {\"Report\": report_str}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "Report",
          "Selector": "$.Payload.Report",
          "Type": "String"
        }
      ]
    },
    {
      "name": "GenerateReport",
      "action": "aws:executeScript",
      "isEnd": true,
      "description": "Consolidates `Report` outputs from the `AnalyzeS3EventConfiguration` and `AnalyzeLambdaFunctionPermissions` steps, and generates a finalized report.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{ S3BucketName }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}",
          "S3EventNotificationReport": "{{ AnalyzeS3EventConfiguration.Report }}",
          "LambdaFunctionResourcePolicyReport": "{{ AnalyzeLambdaFunctionPermissions.Report }}"
        },
        "Script": "def handler(event: dict, _: dict) -> str:\n    \"\"\"\n    Generates a formatted report for the AWSSupport-RemediateLambdaS3Event Runbook.\n\n    Args:\n        event (dict): Contains 'S3BucketName', 'LambdaFunctionArn', 'S3EventNotificationReport',\n                     and 'LambdaFunctionResourcePolicyReport'\n        _ (dict): Unused context parameter\n\n    Returns:\n        str: Formatted report containing runbook execution details and analysis results\n    \"\"\"\n\n    bucket_name: str = event.get(\"S3BucketName\", \"\")\n    lambda_arn: str = event.get(\"LambdaFunctionArn\", \"\")\n    s3_notification_report = event.get(\"S3EventNotificationReport\", \"\")\n    lambda_resource_policy_report = event.get(\"LambdaFunctionResourcePolicyReport\", \"\")\n\n    report_str = (\n        \"\\n\\n\\n+-+-+ AWSSupport-RemediateLambdaS3Event Runbook Report +-+-+\"\n        + \"\\n\\n\"\n        + \"The runbook was executed against following resources:\\n\"\n        + \"\\n\"\n        + f\"* Amazon S3 Bucket: {bucket_name}\\n\"\n        + f\"* AWS Lambda Function: {lambda_arn}\\n\"\n        + \"\\n\"\n        + \"Please read each report below and take any action if necessary.\\n\\n\"\n        + s3_notification_report\n        + lambda_resource_policy_report\n    )\n\n    return report_str\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      }
    },
    {
      "name": "CheckOutput",
      "action": "aws:executeAwsApi",
      "description": "Checks the status of the `AWSSupport-TroubleshootLambdaS3Event` automation execution.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "GetAutomationExecution",
        "AutomationExecutionId": "{{TroubleshootLambdaS3Event.ExecutionId}}"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.AutomationExecution.Outputs.'GenerateReport.OutputPayload'",
          "Type": "StringList"
        }
      ],
      "isEnd": true
    }
  ]
}
