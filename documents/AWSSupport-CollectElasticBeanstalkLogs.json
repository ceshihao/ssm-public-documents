{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-CollectElasticBeanstalkLogs** runbook gathers AWS Elastic Beanstalk related log files from an Amazon Elastic Compute Cloud (Amazon EC2) Windows Server instance launched by Elastic Beanstalk to help you troubleshoot common issues. While the automation is gathering the associated log files, changes are made to the file system structure including the creation of temporary directories, the copying of log files to the temporary directories, and compressing the log files into an archive. This activity can result in increased `CPUUtilization` on the Amazon EC2 instance. For more information about `CPUUtilization`, see [Instance metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics) in the Amazon CloudWatch User Guide.\n\nIf you specify a value for the `S3BucketName` parameter, the automation evaluates the policy status of the Amazon Simple Storage Service (Amazon S3) bucket you specify. To help with the security of the logs gathered from your Amazon EC2 instance, if the policy status `isPublic` is set to `true`, or if the access control list (ACL) grants `READ|WRITE` permissions to the `All Users` Amazon S3 predefined group, the logs are not uploaded. For more information about Amazon S3 predefined groups, see [Amazon S3 predefined groups](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#specifying-grantee-predefined-groups) in the Amazon S3 User Guide.\n\nIf you do not specify a value for the `S3BucketName` parameter, the automation uploads the log bundle to the default Elastic Beanstalk Amazon S3 bucket in the AWS Region where you run the automation. The directory is named according to the following structure: `elasticbeanstalk-<region>-<accountId>`. The `region` and `accountId` values will differ based on the AWS Region and AWS account you run the automation in. The log bundle will be saved to the `resources/environments/logs/bundle/<environmentId>/<instanceId>` directory. The `environmentId` and `instanceId` values will differ based on your Elastic Beanstalk environment and the Amazon EC2 instance you're gathering logs from.\n\nBy default, the AWS Identity and Access Management (IAM) instance profile attached to the Amazon EC2 instances of the Elastic Beanstalk environment has the required permissions to upload the bundle to the default Elastic Beanstalk Amazon S3 bucket for your environment. The instance profile attached to the Amazon EC2 instance must allow the `s3:GetBucketAcl`, `s3:GetBucketPolicy`, `s3:GetBucketPolicyStatus`, and `s3:PutObject` actions for the specified Amazon S3 bucket and path.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "EnvironmentId": {
      "type": "String",
      "description": "(Required) The ID of your AWS Elastic Beanstalk environment you want to collect the log bundle from.",
      "allowedPattern": "^e-[a-zA-z0-9]{10,10}$"
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the Amazon EC2 instance in your AWS Elastic Beanstalk environment you want to collect the log bundle from."
    },
    "S3BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Optional) The Amazon S3 bucket you want to upload the archived logs to.",
      "default": ""
    },
    "S3BucketPath": {
      "type": "String",
      "description": "(Optional) The Amazon S3 bucket path you want to upload the log bundle to. This parameter is ignored if you do not specify a value for the `S3BucketName` parameter.",
      "allowedPattern": "^[a-zA-Z0-9][\\-\\./a-zA-Z0-9]{0,255}/$",
      "default": "AWSSupport-CollectElasticBeanstalkLogs/"
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsManagedInstance",
      "description": "Confirms the Amazon EC2 instance you specify in the `InstanceId` parameter is managed by AWS Systems Manager.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "timeoutSeconds": 120,
      "maxAttempts": 3,
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ],
        "Filters": [
          {
            "Key": "InstanceIds",
            "Values": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "isCritical": true,
      "nextStep": "assertInstanceIsWindowsInstance"
    },
    {
      "name": "assertInstanceIsWindowsInstance",
      "description": "Confirms the Amazon EC2 instance you specify in the `InstanceId` parameter is a Microsoft Windows Server instance.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "timeoutSeconds": 120,
      "maxAttempts": 3,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ],
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "isCritical": true,
      "nextStep": "performChecks"
    },
    {
      "name": "performChecks",
      "description": "Checks whether the instance is part of an Elastic Beanstalk environment, if there is sufficient disk space to bundle the logs, and whether the Amazon S3 bucket to which the logs would be uploaded to is not public.",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "function CheckIfEnvironmentIdMatches {",
            "    try {",
            "        $propertiesPath = \"C:\\cfn\\aws-eb-stack.properties\"",
            "        if (Test-Path -Path $propertiesPath) {",
            "            $environmentIdFromFile = Get-Content -Path $propertiesPath |",
            "                Where-Object {$_ -like 'environment_id*'} |",
            "                ForEach-Object { $_.Split('=')[1].Trim() }",
            "            $environmentId = \"{{ EnvironmentId }}\"",
            "            return $environmentId -eq $environmentIdFromFile",
            "        }  else {",
            "            Write-Warning \"$propertiesPath file not found. Using default environment ID.\"",
            "        }",
            "        return $true",
            "    } catch {",
            "        Write-Warning \"Error checking environment ID: $($_.Exception.Message)\"",
            "        return $false",
            "    }",
            "}",
            "",
            "function CheckInsufficientDiskSpace {",
            "    try {",
            "        $minimumFreeSpaceMB = 500",
            "        $programFilesPath = $env:ProgramFiles",
            "        $programFilesDrive = Split-Path -Path $programFilesPath -Qualifier",
            "",
            "        $diskInformation = Get-WmiObject -Class Win32_LogicalDisk |",
            "            Where-Object { $_.DeviceID -eq $programFilesDrive }",
            "",
            "        if (-not $diskInformation) {",
            "            Write-Warning \"Unable to find disk information for Program Files ($programFilesPath) drive: $programFilesDrive\"",
            "            return $true",
            "        }",
            "",
            "        $freeSpaceMB = $diskInformation.FreeSpace / (1024 * 1024)",
            "",
            "        if ($freeSpaceMB -lt $minimumFreeSpaceMB) {",
            "            Write-Warning \"Insufficient space left on disk. Please ensure that at least $minimumFreeSpaceMB MB is available on the disk\"",
            "            return $true",
            "        }",
            "        return $false",
            "    } catch {",
            "        Write-Warning \"Error checking disk space: $($_.Exception.Message)\"",
            "        return $true",
            "    }",
            "}",
            "",
            "function CheckBucketPublic {",
            "    param([string]$BucketName)",
            "    try {",
            "        $publicAclIndicator = \"http://acs.amazonaws.com/groups/global/AllUsers\"",
            "        $readAcl = \"x-amz-grant-read\"",
            "        $fullControlAcl = \"x-amz-grant-full-control\"",
            "        $s3BucketPolicyStatus = $false",
            "        $s3BucketAclStatus = $false",
            "",
            "        try {",
            "            $s3BucketPolicyStatus = Get-S3BucketPolicyStatus -BucketName $BucketName",
            "        } catch {",
            "            if ($_.Exception.Message -ne \"The bucket policy does not exist\") {",
            "                Write-Warning \"Error checking bucket policy: $($_.Exception.Message)\"",
            "                return $true",
            "            }",
            "        }",
            "",
            "        $s3BucketAclGrants = Get-S3ACL -BucketName $BucketName",
            "        $s3BucketAclStatus = $s3BucketAclGrants.Grants |",
            "            Where-Object { $_.Grantee.URI -eq $publicAclIndicator -and",
            "                           ($_.Permission.HeaderName -eq $readAcl -or",
            "                            $_.Permission.HeaderName -eq $fullControlAcl) } |",
            "            Select-Object -First 1",
            "",
            "        if ($s3BucketPolicyStatus.IsPublic) {",
            "            Write-Warning \"The S3 bucket $BucketName has a bucket policy that allows objects to be publicly accessed.\"",
            "        }",
            "        if ($s3BucketAclStatus) {",
            "            Write-Warning \"The S3 bucket $BucketName has Access Control Lists (ACLs) that allow objects to be publicly accessed.\"",
            "        }",
            "        return $s3BucketPolicyStatus.IsPublic -or $null -ne $s3BucketAclStatus",
            "    } catch {",
            "        Write-Warning \"Error checking if S3 bucket is public: $($_.Exception.Message)\"",
            "        return $true",
            "    }",
            "}",
            "",
            "try {",
            "    if (-not (CheckIfEnvironmentIdMatches)) {",
            "        throw \"The Elastic Beanstalk environment ID supplied did not match the configuration file within the EC2 instance. Please confirm that the Elastic Beanstalk environment ID supplied is correct.\"",
            "    }",
            "",
            "    $s3BucketName = \"{{ S3BucketName }}\"",
            "    $accountId = \"{{ global:ACCOUNT_ID }}\"",
            "    $region = \"{{ global:REGION }}\"",
            "    $environmentBucket = \"elasticbeanstalk-$region-$accountId\"",
            "",
            "    if ([string]::IsNullOrEmpty($s3BucketName)) {",
            "        $s3BucketName = $environmentBucket",
            "    }",
            "",
            "    if (CheckInsufficientDiskSpace) {",
            "        throw \"Insufficient disk space. Please ensure that at least 500 MB is available on the disk\"",
            "    }",
            "",
            "    if (CheckBucketPublic $environmentBucket) {",
            "        throw \"The operation to upload logs has been cancelled due to security concerns on the bucket being publicly accessible.\"",
            "    }",
            "",
            "    Write-Host \"The Bucket Policy and ACL for the S3 Bucket: $s3BucketName was checked for public read access.\"",
            "    Write-Host \"All security and space checks completed.\"",
            "} catch {",
            "    Write-Error $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "timeoutSeconds": 600,
      "nextStep": "collectAndUploadWindowsLogBundle"
    },
    {
      "name": "collectAndUploadWindowsLogBundle",
      "description": "Collects the log files and uploads the archive to the Amazon S3 bucket specified in the `S3BucketName` parameter or to the default bucket for your Elastic Beanstalk environment if a value is not specified.",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "$guid = [System.Math]::Round((New-TimeSpan -Start (Get-Date \"01/01/1970\") -End (Get-Date)).TotalMilliSeconds)",
            "$basePath = $env:TEMP",
            "$EncoderClass=@\"",
            "  public class FixedEncoder : System.Text.UTF8Encoding {",
            "    public FixedEncoder() : base(true) { }",
            "    public override byte[] GetBytes(string s) {",
            "      s = s.Replace(\"\\\\\", \"/\");",
            "      return base.GetBytes(s);",
            "    }",
            "  }",
            "\"@",
            "",
            "$cfnLogInformation = \"C:\\cfn\\log\", \"cfn\\log\"",
            "$ebLogInformation = \"$env:ProgramFiles\\Amazon\\ElasticBeanstalk\\logs\", \"ElasticBeanstalk\\logs\"",
            "$healthdLogInformation = \"$env:ProgramFiles\\Amazon\\ElasticBeanstalk\\HealthD\\Logs\", \"ElasticBeanstalk\\HealthD\\Logs\"",
            "$inetpubLogInformation = \"C:\\inetpub\\logs\", \"inetpub\"",
            "",
            "$logInformation = $cfnLogInformation, $ebLogInformation, $healthdLogInformation, $inetpubLogInformation",
            "",
            "function CreateLogsDirectory {",
            "    try {",
            "        Write-Host \"Creating a temporary directory to store log files...\"",
            "        [string] $logsDir = Join-Path -Path $basePath -ChildPath \"BundleLogs-$guid\"",
            "        New-Item -ItemType Directory -Path $logsDir -Force | Out-Null",
            "        Write-Host \"Temporary directory created to store log files.\"",
            "        Write-Host \"\"",
            "        return $logsDir",
            "    }",
            "    catch {",
            "        Write-Error \"Unable to create temporary directory.\"",
            "        Write-Error $_.Exception.Message",
            "        Exit 1",
            "    }",
            "}",
            "",
            "function copyLogsToDirectory {",
            "    param([string]$logPath, [string]$destinationDir, [string]$destinationChildPath)",
            "    try {",
            "        if (Test-Path -Path $logPath) {",
            "            $destPath = Join-Path -Path $destinationDir -ChildPath $destinationChildPath",
            "            Copy-Item $logPath $destPath -Recurse -Force",
            "        }",
            "    } catch {",
            "        Write-Host \"The log file(s) in the path: $logPath could not be fetched.\"",
            "    }",
            "}",
            "",
            "function FetchLogs {",
            "    param([string]$logsDir)",
            "    try {",
            "        Write-Host \"Attempting to fetch logs from relevant directories...\"",
            "        foreach ($logLocation in $logInformation) {",
            "            copyLogsToDirectory $logLocation[0] $logsDir $logLocation[1]",
            "        }",
            "        Write-Host \"Fetched logs from relevant directories.\"",
            "        Write-Host \"\"",
            "    }",
            "    catch {",
            "        Write-Error \"Unable to fetch logs.\"",
            "        Write-Host $_.Exception.Message",
            "        Exit 1",
            "    }",
            "}",
            "",
            "function ZipLogs {",
            "    param([string]$logsDir)",
            "    try {",
            "        Write-Host \"Zipping gathered data...\"",
            "        Add-Type -AssemblyName System.Text.Encoding",
            "        Add-Type -AssemblyName System.IO.Compression.FileSystem",
            "",
            "        Add-Type -TypeDefinition $EncoderClass",
            "        $Encoder = New-Object FixedEncoder",
            "        $zipPath = \"$logsDir.zip\"",
            "        [System.IO.Compression.ZipFile]::CreateFromDirectory($logsDir, $zipPath, [System.IO.Compression.CompressionLevel]::Optimal, $false, $Encoder)",
            "        Write-Host \"Log files zipped.\"",
            "        Write-Host \"\"",
            "        return $zipPath",
            "    }",
            "    catch {",
            "        Write-Error \"Unable to zip gathered data.\"",
            "        Write-Host $_.Exception.Message",
            "        Exit 1",
            "    }",
            "}",
            "",
            "function CleanUp {",
            "    param([string]$logsDir, [string]$zipPath)",
            "    try {",
            "        Write-Host \"Attempting to clean up log directory and zip file...\"",
            "        Remove-Item -Recurse -Force $logsDir -ErrorAction Stop",
            "        Remove-Item -Force $zipPath -ErrorAction Stop",
            "        Write-Host \"Cleaned up log directory and zip file.\"",
            "        Write-Host \"\"",
            "    }",
            "    catch {",
            "        Write-Error \"Unable to clean up log directory and zip file.\"",
            "        Write-Host $_.Exception.Message",
            "        Exit 1",
            "    }",
            "}",
            "",
            "function Get-AWSConsoleUrl {",
            "    param (",
            "        [string]$partition",
            "    )",
            "",
            "    # Determine the correct console URL based on the partition",
            "    $consoleUrl = switch ($partition) {",
            "        'aws-cn'     { \"https://console.amazonaws.cn\" }",
            "        'aws-us-gov' { \"https://console.amazonaws-us-gov.com\" }",
            "        default      { \"https://console.aws.amazon.com\" }",
            "    }",
            "",
            "    return \"$consoleUrl/s3/buckets\"",
            "}",
            "",
            "",
            "function UploadLogsToS3 {",
            "    param([string]$zipPath)",
            "",
            "    $environmentId = \"{{ EnvironmentId }}\"",
            "    if (Test-Path -Path C:\\cfn\\aws-eb-stack.properties) {",
            "        $environmentId = Get-Content -Path C:\\cfn\\aws-eb-stack.properties | Where-Object {$_ -like 'environment_id*'}",
            "        $environmentId = $environmentId.Split(\"=\")[1]",
            "    }",
            "    $accountId = \"{{ global:ACCOUNT_ID }}\"",
            "    $awsPartition = \"{{ global:AWS_PARTITION }}\"",
            "    $region = \"{{ global:REGION }}\"",
            "    $environmentBucket = \"elasticbeanstalk-$region-$accountId\"",
            "",
            "    $s3BucketketName = \"{{ S3BucketName }}\"",
            "    $s3Path = \"{{ S3BucketPath }}\"",
            "    $instanceId = \"{{ InstanceId }}\"",
            "",
            "    if([string]::IsNullOrEmpty($s3BucketName)){",
            "        $s3BucketName = $environmentBucket",
            "        $s3Path = \"resources/environments/logs/bundle/$environmentId/$instanceId/\"",
            "    }",
            "    $s3Key = \"$s3Path$(Split-Path $zipPath -Leaf)\"",
            "",
            "    try {",
            "        Write-Host \"Uploading logs to S3...\"",
            "        Write-S3Object -BucketName $s3BucketName -Key $s3Key -File $zipPath",
            "        Write-Host \"Logs uploaded successfully.\"",
            "        Write-Host \"You can access the bundle logs in the S3 bucket '$s3BucketName' with the key '$s3Key'\"",
            "        Write-Host \"\"",
            "    }",
            "    catch {",
            "        Write-Error \"There was an issue while attempting to upload logs to the S3 bucket.\"",
            "        Write-Error $_.Exception.Message",
            "    }",
            "}",
            "",
            "try {",
            "    $logsDir = CreateLogsDirectory",
            "    FetchLogs $logsDir",
            "    $zipPath = ZipLogs $logsDir",
            "    UploadLogsToS3 $zipPath",
            "    CleanUp $logsDir $zipPath",
            "} catch {",
            "    Write-Host $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "timeoutSeconds": 600,
      "isEnd": true
    }
  ],
  "outputs": [
    "performChecks.Output",
    "collectAndUploadWindowsLogBundle.Output"
  ]
}
