{
  "schemaVersion": "0.3",
  "description": "This document gathers AWS Elastic Beanstalk related log files from an Amazon Elastic Compute Cloud (Amazon EC2) instance launched as part of Elastic Beanstalk Windows Server platforms to help troubleshoot issues.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "EnvironmentId": {
      "type": "String",
      "description": "(Required) The ID of your Elastic Beanstalk environment from where you want to collect the bundle logs from.",
      "allowedPattern": "^e-[a-zA-z0-9]{10,10}$"
    },
    "InstanceId": {
      "type": "String",
      "description": "(Required) Instance ID of your EC2 instance that belongs to your Elastic Beanstalk environment from where you want to collect the bundle logs from.",
      "allowedPattern": "^[m]{0,1}i-[a-z0-9]{8,17}$"
    },
    "S3BucketName": {
      "type": "String",
      "description": "(Optional) The Amazon S3 bucket in your account to upload the archived logs to. If no bucket is specified, the logs are uploaded to the default Elastic Beanstalk S3 bucket in the region.",
      "allowedPattern": "^$|^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$",
      "default": ""
    },
    "S3BucketPath": {
      "type": "String",
      "description": "(Optional) The Amazon S3 bucket path to upload the collected logs. If the 'S3BucketName' parameter is not specified, the value specified for this parameter is ignored and logs are uploaded to the path : 'resources/environments/logs/bundle/<environment-id>/<instance-id>'.",
      "allowedPattern": "^[a-zA-Z0-9][-./a-zA-Z0-9]{0,255}/$",
      "default": "AWSSupport-CollectElasticBeanstalkLogs/"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ],
        "Filters": [
          {
            "Key": "InstanceIds",
            "Values": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "isCritical": "true",
      "nextStep": "assertInstanceisWindowsInstance"
    },
    {
      "name": "assertInstanceisWindowsInstance",
      "action": "aws:assertAwsResourceProperty",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ],
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "isCritical": "true",
      "nextStep": "performChecks"
    },
    {
      "name": "performChecks",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "function CheckIfEnvironmentIdMatches { ",
            "    try { ",
            "        if (Test-Path -Path C:\\\\cfn\\\\aws-eb-stack.properties) { ",
            "            $environmentIdFromFile = Get-Content -Path C:\\\\cfn\\\\aws-eb-stack.properties | Where-Object {$_ -like 'environment_id*'} ",
            "            $environmentIdFromFile = $environmentIdFromFile.Split(\"=\")[1] ",
            "            $environmentId = \"{{ EnvironmentId }}\" ",
            "            if ($environmentId -eq $environmentIdFromFile) { ",
            "                return $True ",
            "            } ",
            "            return $False ",
            "        } ",
            "        return $True ",
            "    } catch { ",
            "        Write-Host $_.Exception.Message ",
            "        return $False ",
            "    } ",
            "} ",
            " ",
            "function CheckInsufficientDiskSpace { ",
            "    try { ",
            "        $diskInformation = Get-WmiObject -Class Win32_LogicalDisk ",
            "        $freeSpace = $diskInformation.FreeSpace/(1024*1024) ",
            "        # Checks if available free space is less than 500 MB ",
            "        if(($freeSpace -lt 500)) { ",
            "            throw(\"Insufficient space left on disk. Please ensure that at least 500 MB is available on the disk\") ",
            "        } ",
            "        return $False ",
            "    } catch { ",
            "        Write-Host $_.Exception.Message ",
            "        return $True ",
            "    } ",
            "} ",
            " ",
            "function CheckBucketPublic { ",
            "    param([string]$BucketName) ",
            "    try { ",
            "        $publicAclIndicator = \"http://acs.amazonaws.com/groups/global/AllUsers\" ",
            "        $readAcl = \"x-amz-grant-read\" ",
            "        $fullControlAcl = \"x-amz-grant-full-control\" ",
            "        $s3BucketPolicyStatus = $False ",
            "        $s3BucketAclStatus = $False ",
            " ",
            "        try { ",
            "            $s3BucketPolicyStatus = Get-S3BucketPolicyStatus -BucketName $BucketName ",
            "        } catch { ",
            "            if($_.Exception.Message -ne \"The bucket policy does not exist\") { ",
            "                Write-Host $_.Exception.Message ",
            "                return $True ",
            "            } ",
            "        } ",
            "         ",
            "        $s3BucketAclGrants = Get-S3ACL -BucketName $BucketName ",
            "        $s3BucketAclGrants.Grants | foreach {  ",
            "            $grantee = $_.Grantee.URI ",
            "            $permission = $_.Permission.HeaderName ",
            "            if($grantee -eq $publicAclIndicator) { ",
            "                if(($permission -eq $readAcl) -or ($permission -eq $fullControlAcl)) { ",
            "                    $s3BucketAclStatus = $True ",
            "                } ",
            "            } ",
            "        } ",
            " ",
            "        if($s3BucketPolicyStatus.IsPublic) { ",
            "            Write-Host (\"The S3 bucket {0} has a bucket policy that allows objects to be publically accessed.\" -f $BucketName) ",
            "        } ",
            "        if($s3BucketAclStatus) { ",
            "            Write-Host (\"The S3 bucket {0} has Access control lists (ACLs) that allow objects to be publically accessed\" -f $BucketName) ",
            "        } ",
            "        if($S3BucketPolicyStatus.IsPublic -or $s3BucketAclStatus) { ",
            "            return $True ",
            "        } ",
            "        return $False ",
            "    } catch { ",
            "        Write-Host \"There was an error while attempting to check if the S3 bucket was public : \" + $_.Exception.Message ",
            "        return $True ",
            "    } ",
            "} ",
            "try{ ",
            " ",
            "    if(!(CheckIfEnvironmentIdMatches)) { ",
            "        throw(\"The Elastic Beanstalk environment ID that was supplied did not match the configuration file within the EC2 instance. Please confirm that the Elastic Beanstalk environment ID supplied is right.\") ",
            "    } ",
            " ",
            "    $s3BucketName = \"{{ S3BucketName }}\" ",
            "    $accountId = \"{{ global:ACCOUNT_ID }}\" ",
            "    $region = \"{{ global:REGION }}\" ",
            "    $environmentBucket = \"elasticbeanstalk-\" + $region + \"-\" + $accountId ",
            " ",
            "    if([string]::IsNullOrEmpty($s3BucketName)){ ",
            "        $s3BucketName = $environmentBucket ",
            "    } ",
            "    if((CheckBucketPublic $s3BucketName) -or (CheckInsufficientDiskSpace)){ ",
            "        throw(\"The operation to upload logs has been cancelled\") ",
            "    } ",
            "    Write-Host \"The Bucket Policy and ACL for the S3 Bucket : $s3BucketName was checked for public read access.\" ",
            "} catch{ ",
            "    Write-Host $_.Exception.Message ",
            "    Exit 1 ",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "timeoutSeconds": 300,
      "nextStep": "collectAndUploadWindowsLogBundle"
    },
    {
      "name": "collectAndUploadWindowsLogBundle",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "$guid = [System.Math]::Round((New-TimeSpan -Start (Get-Date \"01/01/1970\") -End (Get-Date)).TotalMilliSeconds) ",
            "$basePath = $env:TEMP ",
            "$EncoderClass=@\" ",
            "  public class FixedEncoder : System.Text.UTF8Encoding { ",
            "    public FixedEncoder() : base(true) { } ",
            "    public override byte[] GetBytes(string s) { ",
            "      s = s.Replace(\"\\\\\", \"/\"); ",
            "      return base.GetBytes(s); ",
            "    } ",
            "  } ",
            "\"@ ",
            " ",
            "$cfnLogInformation = \"C:\\cfn\\log\", \"cfn\\log\" ",
            "$ebLogInformation = \"C:\\Program Files\\Amazon\\ElasticBeanstalk\\logs\", \"ElasticBeanstalk\\logs\" ",
            "$healthdLogInformation = \"C:\\Program Files\\Amazon\\ElasticBeanstalk\\HealthD\\Logs\", \"ElasticBeanstalk\\HealthD\\Logs\" ",
            "$inetpubLogInformation = \"C:\\inetpub\\logs\", \"inetpub\" ",
            " ",
            "$logInformation = $cfnLogInformation, $ebLogInformation, $healthdLogInformation, $inetpubLogInformation ",
            " ",
            "function CreateLogsDirectory { ",
            "    try { ",
            "        Write-Host \"Creating a temporary directory to store log files...\" ",
            "        [string] $logsDir = \"BundleLogs-\" + $guid ",
            "        New-Item -ItemType Directory -Path ($basePath, $logsDir -join \"\\\") ",
            "        Write-Host \"Temporary directory created to store log files.\" ",
            "        Write-Host \"\" ",
            "    } ",
            "    catch { ",
            "        Write-Error \"Unable to create temporary directory.\" ",
            "        Write-Error $_.Exception.Message ",
            "        Exit 1 ",
            "    } ",
            "} ",
            " ",
            "function copyLogsToDirectory { ",
            "    param([string]$logPath, [string]$destinationDir, [string]$destinationChildPath) ",
            "    try { ",
            "        if (Test-Path -Path $logPath) { ",
            "            Copy-Item $logPath (Join-Path -Path $destinationDir -ChildPath $destinationChildPath) -Recurse ",
            "        } ",
            "    } catch { ",
            "        Write-Host \"The log file(s) in the path :  $logPath could not be fetched.\" ",
            "    } ",
            "} ",
            " ",
            "function FetchLogs { ",
            "    param([string]$logsDir) ",
            "    try { ",
            "        Write-Host \"Attempting to fetch logs from relevant directories...\" ",
            "        foreach ($logLocation in $logInformation) { ",
            "            copyLogsToDirectory $logLocation[0] $logsDir $logLocation[1] ",
            "        } ",
            "        Write-Host \"Fetched logs from relevant directories.\" ",
            "        Write-Host \"\" ",
            "    } ",
            "    catch { ",
            "        Write-Error \"Unable to fetch logs.\" ",
            "        Write-Host $_.Exception.Message ",
            "        Exit 1 ",
            "    } ",
            "} ",
            " ",
            "function ZipLogs { ",
            "    param([string]$logsDir) ",
            "    try { ",
            "        Write-Host \"Zipping gathered data...\" ",
            "        Add-Type -AssemblyName System.Text.Encoding ",
            "        Add-Type -AssemblyName System.IO.Compression.FileSystem ",
            "         ",
            "        Add-Type -TypeDefinition $EncoderClass ",
            "        $Encoder = New-Object FixedEncoder ",
            "        [System.IO.Compression.ZipFile]::CreateFromDirectory($logsDir, ($logsDir + \".zip\"), [System.IO.Compression.CompressionLevel]::Optimal, $false, $Encoder) ",
            "        Write-Host \"Log files zipped.\" ",
            "        Write-Host \"\" ",
            "    } ",
            "    catch { ",
            "        Write-Error \"Unable to zip gathered data.\" ",
            "        Write-Host $_.Exception.Message ",
            "        Exit 1 ",
            "    } ",
            "} ",
            "function CleanUp { ",
            "    param([string]$logsDir) ",
            "    try { ",
            "        Write-Host \"Attempting to clean up log directory and zip file...\" ",
            "        Remove-Item -Recurse -Force $logsDir -ErrorAction Ignore ",
            "        Remove-Item -Force ($logsDir + \".zip\") -ErrorAction Ignore ",
            "        Write-Host \"Cleaned up log directory and zip file.\" ",
            "        Write-Host \"\" ",
            "    } ",
            "    catch { ",
            "        Write-Error \"Unable to clean up log directory and zip file.\" ",
            "        Write-Host $_.Exception.Message ",
            "        Exit 1 ",
            "    } ",
            "} ",
            " ",
            "function UploadLogsToS3 { ",
            "    param([string]$filepath) ",
            "     ",
            "    $environmentId = \"{{ EnvironmentId }}\" ",
            "    if (Test-Path -Path C:\\\\cfn\\\\aws-eb-stack.properties) { ",
            "        $environmentId = Get-Content -Path C:\\\\cfn\\\\aws-eb-stack.properties | Where-Object {$_ -like 'environment_id*'} ",
            "        $environmentId = $environmentId.Split(\"=\")[1] ",
            "    } ",
            "    $accountId = \"{{ global:ACCOUNT_ID }}\" ",
            "    $region = \"{{ global:REGION }}\" ",
            "    $environmentBucket = \"elasticbeanstalk-\" + $region + \"-\" + $accountId ",
            " ",
            "    $s3BucketName = \"{{ S3BucketName }}\" ",
            "    $s3Path = \"{{ S3BucketPath }}\" ",
            "    $instanceId = \"{{ InstanceId }}\" ",
            " ",
            "    if([string]::IsNullOrEmpty($s3BucketName)){ ",
            "        $s3BucketName = $environmentBucket ",
            "        $s3Path = \"resources\", \"environments\", \"logs\", \"bundle\", $environmentId, $instanceId -join \"/\" ",
            "        $s3Path = $s3Path + \"/\" ",
            "    } ",
            "    $s3Path = $s3Path + \"BundleLogs-\" + $guid + \".zip\" ",
            "     ",
            "    try { ",
            "        Write-Host \"Uploading logs to S3...\" ",
            "        $zipfile = $filepath + \".zip\" ",
            "        Write-S3Object -BucketName $s3BucketName -Key $s3Path -File $zipfile ",
            "        Write-Host \"Logs uploaded successfully to the S3 Bucket : $s3BucketName : with the key : $s3Path\" ",
            "        Write-Host \"You can access the bundle logs from the S3 Bucket using this link : \\n\\nhttps://s3.console.aws.amazon.com/s3/object/${s3BucketName}?region=${region}&prefix=${s3Path}\" ",
            "        Write-Host \"\" ",
            "    } ",
            "    catch { ",
            "        Write-Error \"There was an issue while attempting to upload logs to the S3 bucket.\" ",
            "        Write-Error $_.Exception.Message ",
            "    } ",
            "} ",
            " ",
            "try{ ",
            " ",
            "    $logsDir = CreateLogsDirectory ",
            "    FetchLogs $logsDir ",
            "    ZipLogs $logsDir ",
            "    UploadLogsToS3 $logsDir ",
            "    CleanUp $logsDir ",
            "} catch { ",
            "    Write-Host $_.Exception.Message ",
            "    Exit 1 ",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "timeoutSeconds": 300,
      "isEnd": "true"
    }
  ],
  "outputs": [
    "performChecks.Output",
    "collectAndUploadWindowsLogBundle.Output"
  ]
}
