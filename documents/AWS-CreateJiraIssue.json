{
  "description": "Creates a Jira issue. AssigneeName has been deprecated, please use AssigneeId instead.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "JiraUsername": {
      "type": "String",
      "description": "(Required) The name of the user the issue will be created with."
    },
    "SSMParameterName": {
      "type": "String",
      "description": "(Required) The name of an encrypted SSM Parameter containing the API key or password for the Jira user.",
      "allowedPattern": "^[a-zA-Z0-9_.-/]*$"
    },
    "JiraURL": {
      "type": "String",
      "description": "(Required) The url of the Jira instance.",
      "allowedPattern": "^\\s*$|^(http|https)://[^']*$"
    },
    "ProjectKey": {
      "type": "String",
      "description": "(Required) The key of the project the issue should be created in."
    },
    "IssueSummary": {
      "type": "String",
      "description": "(Required) A brief summary of the issue."
    },
    "IssueDescription": {
      "type": "String",
      "description": "(Required) A detailed description of the issue."
    },
    "IssueTypeName": {
      "type": "String",
      "description": "(Required) The name of the type of issue you want to create (ex. Task, Sub-task, Bug, etc)."
    },
    "PriorityName": {
      "type": "String",
      "description": "(Optional) The name of the priority of the issue.",
      "default": ""
    },
    "AssigneeName": {
      "type": "String",
      "description": "(Optional) Deprecated, please use AssigneeId instead. The username of the person the issue should be assigned to.",
      "default": ""
    },
    "AssigneeId": {
      "type": "String",
      "description": "(Optional) The ID of the person the issue should be assigned to.",
      "default": ""
    },
    "DueDate": {
      "type": "String",
      "description": "(Optional) The due date for the issue in yyyy-mm-dd format.",
      "default": "",
      "allowedPattern": "^$|^(([1-9][0-9]{3})[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))$"
    },
    "LambdaAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Lambda created by Automation to perform the actions on your behalf. If not specified a transient role will be created to execute the Lambda function.",
      "default": ""
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. ",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "createMacroStack",
      "action": "aws:createStack",
      "onFailure": "step:deleteMacroCloudFormationTemplate",
      "inputs": {
        "Capabilities": [
          "CAPABILITY_IAM",
          "CAPABILITY_AUTO_EXPAND"
        ],
        "Parameters": [
          {
            "ParameterKey": "LambdaRoleArn",
            "ParameterValue": "{{LambdaAssumeRole}}"
          },
          {
            "ParameterKey": "LambdaName",
            "ParameterValue": "ParameterParserFunction-{{automation:EXECUTION_ID}}"
          }
        ],
        "StackName": "CreateJiraIssueMacroStack{{automation:EXECUTION_ID}}",
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nConditions:\n  LambdaAssumeRoleNotSpecified:\n    Fn::Or:\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - ''\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - undefined\nParameters:\n  LambdaName: {Description: 'The lambda function name\n\n      ', Type: String}\n  LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows Lambda\n      created by Automation to perform the action on your behalf\n\n      ', Type: String}\nResources:\n  BasicLambdaRole:\n    Condition: LambdaAssumeRoleNotSpecified\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: ['sts:AssumeRole']\n          Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n        Version: '2012-10-17'\n    Type: AWS::IAM::Role\n  ParameterParserFunction:\n    Properties:\n      Code:\n        ZipFile:\n          Fn::Join:\n          - '\n\n            '\n          - ['def handler (event, context) :', '  response = { \"requestId\" : event[\"requestId\"],\n              \"status\": \"success\" }', '  response[\"fragment\"] = event[\"params\"][\"ssmParameter\"].lstrip(''/'')',\n            '  return response']\n      FunctionName: {Ref: LambdaName}\n      Handler: index.handler\n      MemorySize: 128\n      Role:\n        Fn::If:\n        - LambdaAssumeRoleNotSpecified\n        - Fn::GetAtt: [BasicLambdaRole, Arn]\n        - {Ref: LambdaRoleArn}\n      Runtime: python3.11\n      Timeout: 300\n    Type: AWS::Lambda::Function\n  ParameterParserMacro:\n    Properties:\n      Description: Parses leading '/' characters from the SSMParameter parameter\n      FunctionName:\n        Fn::GetAtt: [ParameterParserFunction, Arn]\n      Name: ParameterParserMacro\n    Type: AWS::CloudFormation::Macro\n"
      }
    },
    {
      "name": "createDocumentStack",
      "action": "aws:createStack",
      "onFailure": "step:deleteMacroCloudFormationTemplate",
      "inputs": {
        "Capabilities": [
          "CAPABILITY_IAM",
          "CAPABILITY_AUTO_EXPAND"
        ],
        "StackName": "CreateJiraIssueLambdaStack{{automation:EXECUTION_ID}}",
        "Parameters": [
          {
            "ParameterKey": "LambdaRoleArn",
            "ParameterValue": "{{LambdaAssumeRole}}"
          },
          {
            "ParameterKey": "LambdaName",
            "ParameterValue": "CreateJiraIssueLambda-{{automation:EXECUTION_ID}}"
          },
          {
            "ParameterKey": "SSMParameterName",
            "ParameterValue": "{{SSMParameterName}}"
          }
        ],
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nConditions:\n  LambdaAssumeRoleNotSpecified:\n    Fn::Or:\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - ''\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - undefined\nParameters:\n  LambdaName: {Description: 'The lambda function name\n\n      ', Type: String}\n  LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows Lambda\n      created by Automation to perform the action on your behalf\n\n      ', Type: String}\n  SSMParameterName: {Description: 'The name of the SSM Parameter with the Jira password/token\n\n      ', Type: String}\nResources:\n  CreateJiraIssue:\n    Properties:\n      Code: {ZipFile: \"#\\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All\\\n          \\ Rights Reserved.\\n#\\n# Permission is hereby granted, free of charge, to\\\n          \\ any person obtaining a copy of this\\n# software and associated documentation\\\n          \\ files (the \\\"Software\\\"), to deal in the Software\\n# without restriction,\\\n          \\ including without limitation the rights to use, copy, modify,\\n# merge,\\\n          \\ publish, distribute, sublicense, and/or sell copies of the Software, and\\\n          \\ to\\n# permit persons to whom the Software is furnished to do so.\\n#\\n\\\n          # THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\\n          \\ OR IMPLIED,\\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\n          \\ FITNESS FOR A\\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\\\n          \\ THE AUTHORS OR COPYRIGHT\\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\\n          \\ OTHER LIABILITY, WHETHER IN AN ACTION\\n# OF CONTRACT, TORT OR OTHERWISE,\\\n          \\ ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n# SOFTWARE OR THE USE\\\n          \\ OR OTHER DEALINGS IN THE SOFTWARE.\\n#\\nimport boto3\\nimport json\\nimport\\\n          \\ urllib3\\n\\ndef add_priority(issue, priority):\\n\\tfields = issue[\\\"fields\\\"\\\n          ]\\n\\tfields[\\\"priority\\\"] = {\\\"name\\\": priority}\\n\\ndef add_assignee(issue,\\\n          \\ assigneeId):\\n\\tfields = issue[\\\"fields\\\"]\\n\\tfields[\\\"assignee\\\"] = {\\\"\\\n          id\\\": assigneeId}\\n\\ndef add_due_date(issue, due_date):\\n\\tfields = issue[\\\"\\\n          fields\\\"]\\n\\tfields[\\\"duedate\\\"] = due_date\\n\\ndef create_headers(username,\\\n          \\ secret):\\n\\tbasic_headers = {'Content-Type': 'application/json'}\\n\\tauth\\\n          \\ = urllib3.make_headers(basic_auth='{}:{}'.format(username, secret))\\n\\t\\\n          return {**basic_headers, **auth}\\n\\ndef handler(event, context):\\n\\n\\tclient\\\n          \\ = boto3.client(\\\"ssm\\\")\\n\\n\\tssm_parameter_name = event[\\\"SSMParameterName\\\"\\\n          ].strip()\\n\\n\\tsecret = client.get_parameter(Name=ssm_parameter_name, WithDecryption=True)['Parameter']['Value']\\n\\\n          \\n\\tusername = event[\\\"JiraUsername\\\"].strip()\\n\\turl = event[\\\"JiraURL\\\"\\\n          ].strip()\\n\\n\\tissue = {\\n\\t\\t\\\"fields\\\": {\\n\\t\\t\\t\\\"summary\\\": event[\\\"\\\n          IssueSummary\\\"].strip(),\\n\\t\\t\\t\\\"project\\\": {\\n\\t\\t\\t\\t\\\"key\\\": event[\\\"\\\n          ProjectKey\\\"].strip()\\n\\t\\t\\t},\\n\\t\\t\\t\\\"description\\\": event[\\\"IssueDescription\\\"\\\n          ].strip(),\\n\\t\\t\\t\\\"issuetype\\\": {\\n\\t\\t\\t\\t\\\"name\\\": event[\\\"IssueTypeName\\\"\\\n          ].strip()\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tpriority = event[\\\"PriorityName\\\"].strip()\\n\\\n          \\tif priority:\\n\\t\\tadd_priority(issue, priority)\\n\\n\\tassigneeId = event[\\\"\\\n          AssigneeId\\\"].strip()\\n\\tif assigneeId:\\n\\t\\tadd_assignee(issue, assigneeId)\\n\\\n          \\n\\tdue_date = event[\\\"DueDate\\\"].strip()\\n\\tif due_date:\\n\\t\\tadd_due_date(issue,\\\n          \\ due_date)\\n\\n\\tdata = json.dumps(issue)\\n\\tapi_endpoint = '{0}/rest/api/2/issue/'.format(url)\\n\\\n          \\theaders = create_headers(username, secret)\\n\\n\\thttp = urllib3.PoolManager()\\n\\\n          \\tresponse = http.urlopen('POST',\\n\\t\\t\\t\\t\\t\\t\\tapi_endpoint,\\n\\t\\t\\t\\t\\\n          \\t\\t\\theaders=headers,\\n\\t\\t\\t\\t\\t\\t\\tbody=data)\\n\\n\\tif not response.status\\\n          \\ == 201:\\n\\t\\traise Exception(\\\"Received error with status code \\\" + str(response.status)\\\n          \\ + \\\" from Jira\\\")\\n\\telse:\\n\\t\\tresponse_json = json.loads(response.data)\\n\\\n          \\t\\tissue_key = (response_json[\\\"key\\\"])\\n\\t\\treturn {\\\"IssueKey\\\": issue_key}\\n\"}\n      FunctionName: {Ref: LambdaName}\n      Handler: index.handler\n      MemorySize: 128\n      Role:\n        Fn::If:\n        - LambdaAssumeRoleNotSpecified\n        - Fn::GetAtt: [LambdaRole, Arn]\n        - {Ref: LambdaRoleArn}\n      Runtime: python3.11\n      Timeout: 300\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Condition: LambdaAssumeRoleNotSpecified\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: ['sts:AssumeRole']\n          Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n          - Action: ['ssm:GetParameter']\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - Fn::Join:\n                  - ':'\n                  - - arn\n                    - {Ref: 'AWS::Partition'}\n                    - ssm\n                    - {Ref: 'AWS::Region'}\n                    - {Ref: 'AWS::AccountId'}\n                    - parameter/\n                - Fn::Transform:\n                    Name: ParameterParserMacro\n                    Parameters:\n                      ssmParameter: {Ref: SSMParameterName}\n          Version: '2012-10-17'\n        PolicyName: CreateJiraIssueLambdaPolicy\n    Type: AWS::IAM::Role\n"
      }
    },
    {
      "name": "createJiraIssue",
      "action": "aws:invokeLambdaFunction",
      "onFailure": "step:deleteCloudFormationTemplate",
      "inputs": {
        "FunctionName": "CreateJiraIssueLambda-{{automation:EXECUTION_ID}}",
        "Payload": "{\"JiraUsername\": \"{{JiraUsername}}\", \"SSMParameterName\": \"{{SSMParameterName}}\", \"JiraURL\": \"{{JiraURL}}\", \"ProjectKey\": \"{{ProjectKey}}\", \"IssueSummary\": \"{{IssueSummary}}\", \"IssueDescription\": \"{{IssueDescription}}\", \"IssueTypeName\": \"{{IssueTypeName}}\", \"PriorityName\": \"{{PriorityName}}\", \"AssigneeName\": \"{{AssigneeName}}\", \"AssigneeId\": \"{{AssigneeId}}\", \"DueDate\": \"{{DueDate}}\"}"
      }
    },
    {
      "name": "deleteCloudFormationTemplate",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "CreateJiraIssueLambdaStack{{automation:EXECUTION_ID}}"
      }
    },
    {
      "name": "deleteMacroCloudFormationTemplate",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "CreateJiraIssueMacroStack{{automation:EXECUTION_ID}}"
      }
    }
  ],
  "outputs": [
    "createJiraIssue.Payload"
  ]
}
