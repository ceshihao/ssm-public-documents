{
  "schemaVersion": "2.2",
  "description": "Command document for migrating from EC2Config and EC2Launch v1 to EC2Launch v2",
  "parameters": {
    "dryRun": {
      "type": "String",
      "description": "Set to true if you want to execute a dry run",
      "default": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "migration",
      "maxAttempts": 3,
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "runCommand": [
          "$ErrorActionPreference = 'Stop'",
          "$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Definition",
          "$zipFilename = 'EC2LaunchMigrationTool.zip'",
          "$migrationToolName = 'EC2LaunchMigrationTool'",
          "$migrationZipFilePath = Join-Path -Path $scriptPath -ChildPath $zipFilename",
          "$migrationDirectory = Join-Path -Path $scriptPath -ChildPath $migrationToolName",
          "$migrationInstallScriptPath = Join-Path $migrationDirectory -ChildPath Install.ps1",
          "",
          "function Main {",
          "  Clear-MigrationTool",
          "  Get-MigrationTool",
          "  Add-Type -AssemblyName System.IO.Compression.FileSystem",
          "  Unzip $migrationZipFilePath $migrationDirectory",
          "  Run-Migration",
          "}",
          "",
          "function Clear-MigrationTool {",
          "  try {",
          "    if (Test-Path $migrationDirectory) {",
          "      Remove-Item $migrationDirectory -Force -Recurse",
          "    }",
          "    if (Test-Path $migrationZipFilePath) {",
          "      Remove-Item $migrationZipFilePath -Force",
          "    }",
          "  } catch {",
          "    Write-Host ('Cleaning migration tool resulted in error: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  }",
          "}",
          "",
          "function GetOsArch {",
          "  if ([System.IntPtr]::Size -eq 8) {",
          "    return 'amd64'",
          "  } else {",
          "    return '386'",
          "  }",
          "}",
          "",
          "function GetS3Endpoint {",
          "  param([string]$region)",
          "",
          "  if ($region.StartsWith('us-gov-')) {",
          "    $s3Endpoint = 's3-{0}.amazonaws.com'",
          "  } elseif ($region.StartsWith('cn-')) {",
          "    $s3Endpoint = 's3.{0}.amazonaws.com.cn'",
          "  } elseif ($region -eq 'us-iso-east-1') {",
          "    $s3Endpoint = 's3.us-iso-east-1.c2s.ic.gov'",
          "  } elseif ($region -eq 'us-isob-east-1') {",
          "    $s3Endpoint = 's3.us-isob-east-1.sc2s.sgov.gov'",
          "  } else {",
          "    $s3Endpoint = 's3.{0}.amazonaws.com'",
          "  }",
          "  $s3Endpoint -f $region",
          "}",
          "",
          "function Get-Region {",
          "  if (-not [string]::IsNullOrEmpty($env:AWS_SSM_REGION_NAME)) {",
          "    return $env:AWS_SSM_REGION_NAME",
          "  }",
          "",
          "  try {",
          "    $wc = New-Object System.Net.WebClient",
          "    $wc.Headers.Add('X-aws-ec2-metadata-token-ttl-seconds', 21600)",
          "    $token = $wc.UploadString('http://169.254.169.254/latest/api/token', 'PUT', '')",
          "    $wc = New-Object System.Net.WebClient",
          "    $wc.Headers.Add('X-aws-ec2-metadata-token', $token)",
          "    $identityDocument = $wc.DownloadString('http://169.254.169.254/latest/dynamic/instance-identity/document')",
          "    return ($identityDocument | ConvertFrom-Json).region",
          "  } catch {",
          "    Write-Host ('Error encountered while getting region from IMDS: {0}.' -f $_.Exception.Message)",
          "    return 'us-east-1'",
          "  }",
          "}",
          "",
          "function Get-MigrationTool {",
          "  try {",
          "    [ValidatePattern(\"^(?!(.*--))(?!(.*-$))[a-z0-9]([a-z0-9-]){0,62}$\")] ",
          "    [string]$region = Get-Region",
          "    $Arch = GetOsArch",
          "    $s3Endpoint = GetS3Endpoint $region",
          "    $s3location = 'https://amazon-ec2launch-v2-utils-{0}.{1}/MigrationTool/windows/{2}/latest/{3}'",
          "    $source = $s3location -f $region, $s3Endpoint, $Arch, $zipFilename",
          "    Start-BitsTransfer -Source $source -Destination $migrationZipFilePath",
          "  } catch {",
          "    Write-Host ('Error encoutered while getting the migration tool: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  }",
          "}",
          "",
          "function Unzip {",
          "  param([string]$ziparchive, [string]$extractpath)",
          "",
          "  try {",
          "    [System.IO.Compression.ZipFile]::ExtractToDirectory($ziparchive, $extractpath)",
          "  } catch {",
          "    Write-Host ('Error when extracting zip file: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  }",
          "}",
          "",
          "function Run-Migration {",
          "  try {",
          "    if ('{{dryRun}}' -eq 'true') {",
          "      & $migrationInstallScriptPath -DryRun",
          "    } else {",
          "      & $migrationInstallScriptPath",
          "    }",
          "  } catch {",
          "    Write-Host ('Error when executing migration script: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  }",
          "}",
          "",
          "Main"
        ]
      }
    }
  ]
}
