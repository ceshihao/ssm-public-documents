{
  "description": "## Id\nAWSResilienceHub-CreateNewDocumentDBInstanceSOP_2020-09-21\n\n## Intent\nUsed to create a new instance in a specified AZ/Region\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * Available DocumentDB Cluster\n\n## Permissions required for AutomationAssumeRole\n  * rds:CreateDBInstance\n  * rds:DescribeDBClusters\n  * rds:DescribeDBInstances\n  * rds:DescribeDBSubnetGroups\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) DBClusterIdentifier\n  * type: String\n  * description: DocumentDB Cluster Identifier\n\n### (Optional) DBInstanceIdentifier\n  * type: String\n  * description: DocumentDB Instance Identifier\n\n### (Optional) DBInstanceClass\n  * type: String\n  * default: db.t3.medium\n  * description: Instance [class](https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-classes.html#db-instance-classes-by-region)\n\n### (Optional) AvailabilityZone\n  * type: String\n  * description: Availability Zone to place DocDB Instance\n\n### (Optional) Engine:\n  * type: String\n  * default: docdb\n  * description: DocumentDB Engine\n\n## Details\nThe document creates a new DocumentDB instance using API and waits for the instance to become available.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * GetClusterAZ\n  * CreateNewInstance\n  * WaitUntilCreatedInstanceAvailable\n  * OutputRecoveryTime\n\n## Outputs\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: SOP execution time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "parameters": {
    "DBInstanceIdentifier": {
      "type": "String",
      "description": "(Optional) DocDb Instance Identifier",
      "default": ""
    },
    "DBClusterIdentifier": {
      "type": "String",
      "description": "(Required) DocDb Cluster Identifier"
    },
    "DBInstanceClass": {
      "type": "String",
      "default": "db.t3.medium",
      "description": "(Optional) Instance class. Please refer to: https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-classes.html#db-instance-classes-by-region"
    },
    "AvailabilityZone": {
      "type": "String",
      "default": "",
      "description": "(Optional) Availability Zone to place DocDb Instance"
    },
    "Engine": {
      "type": "String",
      "default": "docdb",
      "description": "(Optional) DocDb Engine"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this document."
    }
  },
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "GetClusterAZ",
      "description": "Get DocDb cluster availability zones",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "CurrentClusterAZs",
          "Selector": "$.Payload.cluster_azs",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_cluster_az",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}"
        },
        "Script": "import logging\nimport random\nimport time\nimport uuid\nfrom concurrent.futures import ThreadPoolExecutor\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom typing import List\n\nimport boto3\nfrom botocore.config import Config\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\nif len(logging.getLogger().handlers) > 0:\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\n    # `.basicConfig` does not execute. Thus we set the level directly.\n    logging.getLogger().setLevel(logging.INFO)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n\ndef get_cluster_az(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        docdb = boto3.client('docdb', config=config)\n        response = docdb.describe_db_clusters(DBClusterIdentifier=events['DBClusterIdentifier'])\n        subnet_group_name = response['DBClusters'][0]['DBSubnetGroup']\n        db_clusters_resp = docdb.describe_db_subnet_groups(DBSubnetGroupName=subnet_group_name)\n        cluster_azs = [x['SubnetAvailabilityZone']['Name'] for x in db_clusters_resp['DBSubnetGroups'][0]['Subnets']]\n        return {'cluster_azs': cluster_azs}\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "CreateNewInstance",
      "description": "Create a new instance in a specified AZ/Region",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "create_new_instance",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}",
          "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}",
          "DBInstanceClass": "{{ DBInstanceClass }}",
          "DBClusterAZs": "{{ GetClusterAZ.CurrentClusterAZs }}",
          "AvailabilityZone": "{{ AvailabilityZone }}",
          "Engine": "{{ Engine }}"
        },
        "Script": "import logging\nimport random\nimport time\nimport uuid\nfrom concurrent.futures import ThreadPoolExecutor\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom typing import List\n\nimport boto3\nfrom botocore.config import Config\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\nif len(logging.getLogger().handlers) > 0:\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\n    # `.basicConfig` does not execute. Thus we set the level directly.\n    logging.getLogger().setLevel(logging.INFO)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n\ndef create_new_instance(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        docdb = boto3.client('docdb', config=config)\n        az = events.get('AvailabilityZone')\n        instance_az = az if az else random.choice(events['DBClusterAZs'])\n        response = docdb.create_db_instance(\n            DBInstanceIdentifier=events['DBInstanceIdentifier'],\n            DBInstanceClass=events['DBInstanceClass'],\n            Engine=events['Engine'],\n            AvailabilityZone=instance_az,\n            DBClusterIdentifier=events['DBClusterIdentifier']\n        )\n        return {'instance_az': response['DBInstance']['AvailabilityZone']}\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "WaitUntilCreatedInstanceAvailable",
      "description": "Wait until the created instance is in status available",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "docdb",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ DBClusterIdentifier }}"
            ]
          }
        ],
        "PropertySelector": "$.DBInstances..DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
