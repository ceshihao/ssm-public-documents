{
  "schemaVersion": "0.3",
  "description": "### Document name - AWSConfigRemediation-RotateSecret\n\n## What does this document do?\nThis document attempts to rotate a secret stored in AWS Secrets Manager by making the [RotateSecret](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_RotateSecret.html) API.\n\nMore information:\n[RotatingSecrets](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html)\n[RotateSecretPermissionsRequired](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets-required-permissions.html)\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* SecretId: (Required) The Amazon Resource Name (ARN) of the secret.\n* RotationLambdaArn: (Required) The ARN of the AWS Lambda function that can rotate the secret.\n* RotationInterval: (Required) Specifies the number of days between automatic scheduled rotations of the secret. Must be a value between 1 and 365 days.\n\n## Output Parameters\n* RotateSecret.Output: The standard HTTP response from the RotateSecret API.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "SecretId": {
      "type": "String",
      "description": "(Required) The Amazon Resource Name (ARN) of the secret.",
      "allowedPattern": "(arn:(aws[a-zA-Z-]*)?:secretsmanager:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(secret:)?([\\w/+=.@-]+)?"
    },
    "RotationLambdaArn": {
      "type": "String",
      "description": "(Required) The ARN of the AWS Lambda function that can rotate the secret.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:lambda:[a-z0-9-]*:\\d{12}:function:[\\w-]+"
    },
    "RotationInterval": {
      "type": "Integer",
      "description": "(Required) Specifies the number of days between automatic scheduled rotations of the secret. Must be a value between 1 and 365 days.",
      "allowedPattern": "^[0]?[1-9][0-9]?$|^1[0-9][0-9]$|^2[0-9][0-9]$|^3[0-5][0-9]$|^36[0-5]$"
    }
  },
  "outputs": [
    "RotateSecret.Output"
  ],
  "mainSteps": [
    {
      "name": "RotateSecret",
      "action": "aws:executeAwsApi",
      "description": "## RotateSecret\nRotates a secret with a specified value of days.\n## Outputs\n* Output: The standard HTTP response from the RotateSecret API.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "secretsmanager",
        "Api": "RotateSecret",
        "SecretId": "{{ SecretId }}",
        "RotationLambdaARN": "{{ RotationLambdaArn }}",
        "RotationRules": {
          "AutomaticallyAfterDays": "{{ RotationInterval }}"
        }
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyRotateSecret",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "isEnd": true,
      "description": "## VerifyRotateSecret\nVerifies the secret has a rotation enabled of the specified value.\n",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "handler",
        "InputPayload": {
          "SecretId": "{{ SecretId }}",
          "RotationInterval": "{{ RotationInterval }}",
          "RotationLambdaArn": "{{ RotationLambdaArn }}"
        },
        "Script": "import boto3\n\ndef handler(event,context):\n    secret_id = event[\"SecretId\"]\n    rotation_interval = event[\"RotationInterval\"]\n    rotation_lambda = event[\"RotationLambdaArn\"]\n\n    secrets_manager_client = boto3.client(\"secretsmanager\")\n    response = secrets_manager_client.describe_secret(SecretId=secret_id)\n    configured_interval = response[\"RotationRules\"][\"AutomaticallyAfterDays\"]\n    configured_lambda = response[\"RotationLambdaARN\"]\n    if response[\"RotationEnabled\"] and configured_interval == rotation_interval and configured_lambda == rotation_lambda:\n        return {\n            \"Message\": \"Verification of RotateSecret is successful.\",\n            \"HTTPResponse\": response[\"ResponseMetadata\"]\n        }\n    raise Exception(\"VERIFICATION OF ROTATE SECRET FAILED.\")"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
