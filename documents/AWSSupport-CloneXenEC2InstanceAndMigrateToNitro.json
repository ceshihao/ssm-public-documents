{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-CloneXenEC2InstanceAndMigrateToNitro** runbook clones, prepares and migrates the cloned EC2 Linux instance, currently running on EC2 Xen platform, to run on [EC2 Nitro platform](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). This automation is divided into three different branches, details of which are as follows:\n\n\n### 1. Preliminary Checks\n\nIn this branch, automation evaluates all of the following pre-requisites to proceed with the migration. If any of the steps fails, automation stops.\n\n- Checks if the target EC2 instance is already running on Nitro platform\n- Determines if the [lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html#check-instance-lifecycle) of the target EC2 instance is Spot\n- Checks if any [instance-store-volume](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) is attached with the target EC2 instance\n- Validates if the Operating System is Linux\n- Determines if the target EC2 instance is a part of the AWS Auto Scaling. If yes, the EC2 instance should be in the [Standby state](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html)\n- Checks if the target EC2 instance is connected with SSM and configured to use AWS Systems Manager Run Command\n\n\n### 2. Test \n\nThe automation uses this phase as sanity test by creating a test Amazon Machine Image(AMI) from the target EC2 instance and launching a test EC2 instance using this AMI. \n\nIf the test EC2 instance passes the status checks, automation is temporarily paused and approval from the designated principals is requested via SNS notification. If approval is provided, automation stops the target EC2 instance.\n\n*Note:*\n\n*- Before providing approval, ensure that all the application(s) running on the target EC2 instance are gracefully closed.*\n\n*- If the EC2 does not have an Elastic IP addresses associated, the automatic public IPv4 address will change once the instance is stopped and started.*\n\n*- Test AMI & EC2 instance are deleted at the end of this branch*\n\n### 3. CloneAndMigrate \n\nIn this branch, automation creates a clone of your target EC2 instance in the same subnet and migrates the EC2 instance using the following steps:\n\n- Enables the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL)\n- Installs the latest version of ENA drivers\n- Verifies if the NVMe module is installed. If installed, then verifies if the module is loaded in the initramfs\n- Analyzes */etc/fstab* and replaces entries with block device names(/dev/sd\\* or /dev/xvd\\*) with their respective UUIDs. Before modifying the configuration, the runbook creates a backup of the file at path */etc/fstab**\n- Disables [predictable interface naming](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/) by adding the ``net.ifnames=0`` option to the ``GRUB_CMDLINE_LINUX`` line in */etc/default/grub*, if exists OR to the ``kernel`` in */boot/grub/menu.lst*\n- Removes */etc/udev/rules.d/70-persistent-net.rules* file, if exists. Before removing, creates a backup at path */etc/udev/rules.d/*\n\nAfter validating all the requirements, the cloned EC2 instance type is changed to the desired Nitro type.  Once the cloned instance passes the Status Checks on Nitro platform, automation seeks for designated principal's approval to create an AMI. If approval is denied, automation stops, leaving cloned EC2 instance.\n\n\n\n### Prerequisites:\n\nTarget EC2 instance requires outbound access to the repositories to install drivers and dependencies such as *kernel-devel, gcc,patch, rpm-build. wget,dracut, make, linux-headers,unzip* using package manager if needed.\n\n\n### Supported Operating Systems:\n  \n* Red Hat Enterprise Linux (RHEL) 7.x - 8.5\n* Amazon Linux, Amazon Linux 2\n* Ubuntu Server 18.04 LTS, 20.04 LTS, and 20.10 STR\n* SUSE12SP5, SUSE15SP(2,3,4)\n\n\n### Disclaimer:\n\n* Executing this runbook, may incur extra charges to your account for the EC2 instance, EBS Volumes & Amazon Machine Images(AMIs). Please refer to the [Amazon EC2 Pricing](https://aws.amazon.com/ec2/pricing/) & [Amazon EBS pricing](https://aws.amazon.com/ebs/pricing/) for more details.",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the role that allows the Automation runbook to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your current IAM user permissions context to execute this runbook.",
      "default": ""
    },
    "TargetInstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) Instance ID of the target EC2 instance you want to migrate to Nitro platform."
    },
    "NitroInstanceType": {
      "type": "String",
      "default": "m5.xlarge",
      "description": "(Required) Enter the destination Nitro instance type. Note: Only Nitro M5, M6, C5, C6, R5, R6 and T3 instances are supported (e.g. t3.small). For more details about the available Nitro instance types, please refer to the link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html",
      "allowedPattern": "^(m5a?z?d?n?|c5a?d?n?|r5a?d?n?b?|(c|m|r)6(a|i)?d?)\\.(2|4|8|12|16|24|32)?xlarge$|^t3a?\\.((x|2x)?large|nano|micro|small|medium)$"
    },
    "SNSTopicArn": {
      "type": "String",
      "description": "(Required) Provide the ARN of the SNS Topic for Approval notification. This SNS topic is used to send approval notifications during required during the automation execution.",
      "allowedPattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):sns:(us(-gov|-isob?)?|ap|ca|af|me|cn|eu|sa)-(central|(north|south)?(east|west)?)-\\d:\\d{12}:[a-zA-Z0-9_.-]{1,256}$"
    },
    "ApproverIAM": {
      "type": "StringList",
      "description": "(Required) Provide a list of AWS authenticated principals who are able to either approve or reject the action. The maximum number of approvers is 10. You can specify principals by using any of these formats, 1) An AWS Identity and Access Management (IAM) user name 2) An IAM user ARN 3) An IAM role ARN 4) An IAM assume role user ARN",
      "allowedPattern": "^[a-zA-Z0-9_+=,.@\\-/]{1,128}$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):(sts|iam)::[0-9]{12}:[a-zA-Z0-9_+=,.@\\-/]{1,256}$"
    },
    "MinimumRequiredApprovals": {
      "type": "Integer",
      "default": 1,
      "description": "(Optional) The minimum number of approvals required to resume the automation. If you don't specify a value, the system defaults to one. The value for this parameter must be a positive number. The value for this parameter can't exceed the number of approvers defined by the ApproverIAM parameter.",
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "DeleteResourcesOnFailure": {
      "type": "Boolean",
      "default": true,
      "description": "(Optional) Whether to terminate the cloned EC2 instance and Amazon Machine Image (AMI) if the automation fails.",
      "allowedValues": [
        false,
        true
      ]
    },
    "Acknowledgement": {
      "type": "String",
      "description": "(Required) Please read the complete details of the actions performed by this automation runbook and write 'Yes, I understand and acknowledge' if you acknowledge the steps.",
      "allowedPattern": "^Yes, I understand and acknowledge$"
    }
  },
  "mainSteps": [
    {
      "name": "checkConcurrency",
      "action": "aws:executeScript",
      "description": "Ensures there is only one execution of this runbook targeting the current EC2 instance. If the runbook finds another in progress execution targeting the same instance ID, it returns an error and ends.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "checkConcurrency.check_concurrency_handler",
        "InputPayload": {
          "TargetInstanceId": "{{TargetInstanceId}}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "NoExecutionFound",
          "Selector": "$.Payload.NoExecutionFound",
          "Type": "String"
        }
      ]
    },
    {
      "name": "startOfPreliminaryChecksBranch",
      "action": "aws:sleep",
      "description": "Start of Preliminary checks branch and Start of Testing branch",
      "onFailure": "step:getTargetInstanceProperties",
      "nextStep": "getTargetInstanceProperties",
      "isCritical": false,
      "inputs": {
        "Duration": "PT5S"
      }
    },
    {
      "name": "getTargetInstanceProperties",
      "action": "aws:executeAwsApi",
      "description": "Fetches the details of the target EC2 instance",
      "onFailure": "Abort",
      "maxAttempts": 3,
      "nextStep": "checkIfNitroInstanceTypeIsSupportedInAZ",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{TargetInstanceId}}"
        ]
      },
      "outputs": [
        {
          "Name": "PlatformType",
          "Selector": "$.Reservations[0].Instances[0].Platform",
          "Type": "String"
        },
        {
          "Name": "InstanceSubnetId",
          "Selector": "$.Reservations[0].Instances[0].SubnetId",
          "Type": "String"
        },
        {
          "Name": "SecurityGroup",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups[0].GroupId",
          "Type": "String"
        },
        {
          "Name": "InstanceProfileArn",
          "Selector": "$.Reservations[0].Instances[0].IamInstanceProfile.Arn",
          "Type": "String"
        },
        {
          "Name": "InstanceProfileName",
          "Selector": "$.Reservations[0].Instances[0].IamInstanceProfile.Name",
          "Type": "String"
        },
        {
          "Name": "AvailabilityZone",
          "Selector": "$.Reservations[0].Instances[0].Placement.AvailabilityZone",
          "Type": "String"
        },
        {
          "Name": "RootDeviceName",
          "Selector": "$.Reservations[0].Instances[0].RootDeviceName",
          "Type": "String"
        },
        {
          "Name": "RootVolumeType",
          "Selector": "$.Reservations[0].Instances[0].RootDeviceType",
          "Type": "String"
        },
        {
          "Name": "InstanceType",
          "Selector": "$.Reservations[0].Instances[0].InstanceType",
          "Type": "String"
        },
        {
          "Name": "ENAAttrib",
          "Selector": "$.Reservations[0].Instances[0].EnaSupport",
          "Type": "Boolean"
        },
        {
          "Name": "InstanceLifecycle",
          "Selector": "$.Reservations[0].Instances[0].InstanceLifecycle",
          "Type": "String"
        },
        {
          "Name": "InstanceState",
          "Selector": "$.Reservations[0].Instances[0].State.Name",
          "Type": "String"
        }
      ]
    },
    {
      "name": "checkIfNitroInstanceTypeIsSupportedInAZ",
      "action": "aws:assertAwsResourceProperty",
      "description": "Determines if the target Nitro instance type is supported in the same Availability Zone as the Target EC2 instance ",
      "onFailure": "Abort",
      "isCritical": "true",
      "maxAttempts": 3,
      "nextStep": "getXenInstanceTypeDetails",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceTypeOfferings",
        "LocationType": "availability-zone",
        "Filters": [
          {
            "Name": "instance-type",
            "Values": [
              "{{NitroInstanceType}}"
            ]
          },
          {
            "Name": "location",
            "Values": [
              "{{getTargetInstanceProperties.AvailabilityZone}}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceTypeOfferings[0].Location",
        "DesiredValues": [
          "{{getTargetInstanceProperties.AvailabilityZone}}"
        ]
      }
    },
    {
      "name": "getXenInstanceTypeDetails",
      "action": "aws:executeAwsApi",
      "description": "Fetches the details of the the Xen (source) Instance type",
      "onFailure": "Abort",
      "maxAttempts": 3,
      "nextStep": "checkIfInstanceHypervisorIsNitroAlready",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceTypes",
        "InstanceTypes": [
          "{{getTargetInstanceProperties.InstanceType}}"
        ]
      },
      "outputs": [
        {
          "Name": "Hypervisor",
          "Selector": "$.InstanceTypes[0].Hypervisor",
          "Type": "String"
        },
        {
          "Name": "NVMeSupport",
          "Selector": "$.InstanceTypes[0].InstanceStorageInfo.NvmeSupport",
          "Type": "String"
        },
        {
          "Name": "InstanceStorageSupported",
          "Selector": "$.InstanceTypes[0].InstanceStorageSupported",
          "Type": "Boolean"
        }
      ]
    },
    {
      "name": "checkIfInstanceHypervisorIsNitroAlready",
      "action": "aws:branch",
      "description": "Checks if the target EC2 instance is already running on Nitro platform",
      "isEnd": true,
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "checkIfTargetInstanceLifecycleIsSpot",
            "Variable": "{{getXenInstanceTypeDetails.Hypervisor}}",
            "StringEquals": "xen"
          }
        ]
      }
    },
    {
      "name": "checkIfTargetInstanceLifecycleIsSpot",
      "action": "aws:branch",
      "description": "Checks if the Lifecycle of the target EC2 instance is Spot",
      "isCritical": true,
      "isEnd": true,
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "checkIfOperatingSystemIsLinux",
            "Not": {
              "Variable": "{{getTargetInstanceProperties.InstanceLifecycle}}",
              "StringEquals": "spot"
            }
          }
        ]
      }
    },
    {
      "name": "checkIfOperatingSystemIsLinux",
      "action": "aws:branch",
      "description": "Checks if the target EC2 instance is based on Linux Operating System",
      "isEnd": true,
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "verifySSMConnectivityForTargetInstance",
            "Not": {
              "Variable": "{{getTargetInstanceProperties.PlatformType}}",
              "StringEquals": "windows"
            }
          }
        ]
      }
    },
    {
      "name": "verifySSMConnectivityForTargetInstance",
      "action": "aws:runCommand",
      "description": "Verifies if the target EC2 instance is connected with AWS Systems Manager and configured to use RunCommand",
      "onFailure": "Abort",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 600,
      "nextStep": "checkIfEphemeralVolumeAreSupported",
      "inputs": {
        "InstanceIds": [
          "{{TargetInstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "TimeoutSeconds": 300,
        "Parameters": {
          "commands": "#!/bin/bash\necho \"EC2 connected with AWS SSM, configured to use RunCommand\"\n"
        }
      }
    },
    {
      "name": "checkIfEphemeralVolumeAreSupported",
      "action": "aws:branch",
      "description": "Checks if the target EC2 instance supports the Instance Store (Ephemeral) volumes",
      "isEnd": true,
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "verifyIfTargetInstanceHasEphemeralVolumesAttached",
            "Variable": "{{getXenInstanceTypeDetails.InstanceStorageSupported}}",
            "BooleanEquals": true
          }
        ],
        "Default": "checkIfRootVolumeIsEBS"
      }
    },
    {
      "name": "verifyIfTargetInstanceHasEphemeralVolumesAttached",
      "action": "aws:runCommand",
      "description": "Verifies if the target EC2 instance has Instance Store(Ephemeral) Volumes attached",
      "onFailure": "Abort",
      "isCritical": true,
      "maxAttempts": 3,
      "timeoutSeconds": 600,
      "nextStep": "checkIfRootVolumeIsEBS",
      "inputs": {
        "InstanceIds": [
          "{{TargetInstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "TimeoutSeconds": 300,
        "Parameters": {
          "commands": "#!/bin/bash\n\nNVME_SUPPORT='{{getXenInstanceTypeDetails.NVMeSupport}}'\nERROR=\"\\n [ERROR] UnSupported Instance Type: instance store volumes attached. Exiting... \\n\"\nINFO=\"\\n [INFO] No instance store volumes are attached with the EC2  \\n\"\nif [[ \"${AWS_SSM_INSTANCE_ID}\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\n\n    if [ ${NVME_SUPPORT} = \"required\" ]; then\n        if [ $(ls -l /dev/disk/by-id/ | grep Amazon_EC2_NVMe_Instance_Storage | grep -wv ns-1 | awk '{ print $11 }' | sed 's/[./]//g' > /dev/null; echo $?) == \"0\" ]; then\n                echo -en $ERROR\n                exit 1\n        else\n                echo -en $INFO\n        fi\n    elif [ $NVME_SUPPORT = \"unsupported\" ]; then\n        TOKEN =`curl -s -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"` && curl -s -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/block-device-mapping/ | grep -vE 'ami|root|swap' > /dev/null; echo $?\n        if [ ${TOKEN} = \"0\" ]; then\n                echo -en $ERROR\n                exit 1\n        else\n                echo -en $INFO\n            fi\n    else\n        echo -en \"\\n Unknown Error \\n\"\n        exit 1\n    fi\nelse\n    echo -en \"\\n InstanceID ${AWS_SSM_INSTANCE_ID} is not an EC2 instance\"\n    exit 1\nfi\n"
        }
      }
    },
    {
      "name": "checkIfRootVolumeIsEBS",
      "action": "aws:branch",
      "description": "Checks if target EC2 instance's root volume type is EBS",
      "isCritical": true,
      "isEnd": true,
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "checkIfTargetInstanceIsInASG",
            "Variable": "{{getTargetInstanceProperties.RootVolumeType}}",
            "StringEquals": "ebs"
          }
        ]
      }
    },
    {
      "name": "checkIfTargetInstanceIsInASG",
      "action": "aws:executeScript",
      "description": "Checks if the target EC2 instance is a part of any Amazon AutoScaling Group(ASG)",
      "isCritical": true,
      "maxAttempts": 1,
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "checkAutoScaling.checkAutoScaling_handler",
        "InputPayload": {
          "TargetInstanceId": "{{TargetInstanceId}}"
        },
        "Attachment": "attachment.zip"
      }
    },
    {
      "name": "startOfTestBranch",
      "action": "aws:sleep",
      "description": "End of Preliminary checks branch and Start of Testing branch",
      "onFailure": "Abort",
      "nextStep": "createTestImage",
      "isCritical": false,
      "inputs": {
        "Duration": "PT5S"
      }
    },
    {
      "name": "createTestImage",
      "action": "aws:createImage",
      "description": "Creates a test Amazon Machine Image(AMI) from the provided instance",
      "maxAttempts": 1,
      "nextStep": "launchTestInstanceInSameSubnet",
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceId": "{{TargetInstanceId}}",
        "ImageName": "CloneXenEC2InstanceAndMigrateToNitro_TestImage_{{TargetInstanceId}}_{{global:DATE_TIME}}",
        "NoReboot": true,
        "ImageDescription": "SSMAutomationID-{{automation:EXECUTION_ID}}"
      }
    },
    {
      "name": "launchTestInstanceInSameSubnet",
      "action": "aws:executeScript",
      "description": "Launches a test EC2 instance from the test AMI using the same configuration as target EC2 instance",
      "isCritical": true,
      "maxAttempts": 1,
      "onFailure": "step:cleanupTestInstance",
      "nextStep": "waitForTestInstanceStatusChecks",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "launchEC2Instance.launchInstanceInSameSubnet_handler",
        "InputPayload": {
          "ImageId": "{{createTestImage.ImageId}}",
          "InstanceType": "{{getTargetInstanceProperties.InstanceType}}",
          "IamInstanceProfileArn": "{{getTargetInstanceProperties.InstanceProfileArn}}",
          "SubnetId": "{{getTargetInstanceProperties.InstanceSubnetId}}",
          "SecurityGroupIds": [
            "{{getTargetInstanceProperties.SecurityGroup}}"
          ],
          "TargetInstanceId": "{{TargetInstanceId}}",
          "BranchType": "Test"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "TestInstanceId",
          "Selector": "$.Payload.launchedInstanceId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "waitForTestInstanceStatusChecks",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits for the test EC2 instance to pass the 2/2 Status Checks",
      "onFailure": "step:cleanupTestInstance",
      "isCritical": "true",
      "timeoutSeconds": 1200,
      "nextStep": "cleanupTestInstance",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{launchTestInstanceInSameSubnet.TestInstanceId}}"
        ],
        "PropertySelector": "$.InstanceStatuses..InstanceStatus.Status",
        "DesiredValues": [
          "ok"
        ]
      }
    },
    {
      "name": "cleanupTestInstance",
      "action": "aws:changeInstanceState",
      "description": "Terminates the test EC2 instance",
      "maxAttempts": 3,
      "isCritical": true,
      "timeoutSeconds": 300,
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{launchTestInstanceInSameSubnet.TestInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "terminated"
      }
    },
    {
      "name": "checkIfTestingBranchSucceeded",
      "action": "aws:executeScript",
      "description": "Checks the status of testing branch",
      "isCritical": true,
      "maxAttempts": 1,
      "onFailure": "Abort",
      "nextStep": "approvalToStopTargetInstance",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "checkStepStatus.checkStepStatus_handler",
        "InputPayload": {
          "StepName": "waitForTestInstanceStatusChecks"
        },
        "Attachment": "attachment.zip"
      }
    },
    {
      "name": "approvalToStopTargetInstance",
      "action": "aws:approve",
      "description": "Waits for designated principals approval to stop the target instance",
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "nextStep": "stopTargetEC2Instance",
      "inputs": {
        "NotificationArn": "{{SNSTopicArn}}",
        "Message": "Test EC2 instance launched from the target EC2 instance successfully passed the 2/2 status checks. Provide approval to stop the target EC2 instance {{TargetInstanceId}} in order to proceed with the automation. If approved, target EC2 instance will be stopped. Before providing approval, make sure 1) Elastic IP address is assigned to the EC2 instance, if not Public IP will be changed, once the instance is stopped. This step will automatically timeout after 3600s if no action is taken.",
        "MinRequiredApprovals": "{{MinimumRequiredApprovals}}",
        "Approvers": [
          "{{ApproverIAM}}"
        ]
      }
    },
    {
      "name": "stopTargetEC2Instance",
      "action": "aws:changeInstanceState",
      "description": "Stops the target EC2 instance",
      "maxAttempts": 1,
      "timeoutSeconds": 300,
      "onFailure": "step:forceStopTargetEC2Instance",
      "inputs": {
        "InstanceIds": [
          "{{TargetInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped"
      },
      "nextStep": "startOfCloneAndMigrateBranch"
    },
    {
      "name": "forceStopTargetEC2Instance",
      "action": "aws:changeInstanceState",
      "description": "Forces stop the target EC2 instance, only if the step 'stopTargetEC2Instance' fails to stop",
      "maxAttempts": 1,
      "timeoutSeconds": 300,
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped",
        "Force": true
      },
      "nextStep": "startOfCloneAndMigrateBranch"
    },
    {
      "name": "startOfCloneAndMigrateBranch",
      "action": "aws:sleep",
      "description": "End of Tests branch and Start of CloneAndMigrate branch",
      "onFailure": "Abort",
      "nextStep": "createBackupImage",
      "isCritical": false,
      "inputs": {
        "Duration": "PT5S"
      }
    },
    {
      "name": "createBackupImage",
      "action": "aws:createImage",
      "description": "Creates an Amazon Machine Image (AMI) from the provided instance for backup",
      "maxAttempts": 1,
      "nextStep": "launchInstanceInSameSubnet",
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceId": "{{TargetInstanceId}}",
        "ImageName": "CloneXenEC2InstanceAndMigrateToNitro_BackupImage_{{TargetInstanceId}}_{{global:DATE_TIME}}",
        "NoReboot": true,
        "ImageDescription": "SSMAutomationID-{{automation:EXECUTION_ID}}"
      }
    },
    {
      "name": "launchInstanceInSameSubnet",
      "action": "aws:executeScript",
      "description": "Launches a new EC2 instance from the backup AMI using the same configuration as source EC2 instance",
      "isCritical": true,
      "maxAttempts": 1,
      "onFailure": "step:failureHandling",
      "nextStep": "waitForClonedInstanceToPassStatusChecks",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "launchEC2Instance.launchInstanceInSameSubnet_handler",
        "InputPayload": {
          "ImageId": "{{createBackupImage.ImageId}}",
          "InstanceType": "{{getTargetInstanceProperties.InstanceType}}",
          "IamInstanceProfileArn": "{{getTargetInstanceProperties.InstanceProfileArn}}",
          "SubnetId": "{{getTargetInstanceProperties.InstanceSubnetId}}",
          "SecurityGroupIds": [
            "{{getTargetInstanceProperties.SecurityGroup}}"
          ],
          "TargetInstanceId": "{{TargetInstanceId}}",
          "BranchType": "CloneAndMigrate"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "ClonedInstanceId",
          "Selector": "$.Payload.launchedInstanceId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "waitForClonedInstanceToPassStatusChecks",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits for the cloned EC2 instance to pass the 2/2 Status Checks",
      "onFailure": "step:failureHandling",
      "isCritical": "true",
      "timeoutSeconds": 1200,
      "nextStep": "verifySSMConnectivityForClonedInstance",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "PropertySelector": "$.InstanceStatuses..InstanceStatus.Status",
        "DesiredValues": [
          "ok"
        ]
      }
    },
    {
      "name": "verifySSMConnectivityForClonedInstance",
      "action": "aws:runCommand",
      "description": "Verifies if the cloned EC2 instance is connected with AWS Systems Manager and configured to use RunCommand",
      "onFailure": "step:failureHandling",
      "isCritical": "true",
      "timeoutSeconds": 300,
      "maxAttempts": 1,
      "nextStep": "checkAndInstallENADrivers",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "TimeoutSeconds": 300,
        "Parameters": {
          "commands": "#!/bin/bash\necho \"EC2 connected with AWS SSM, configured to use RunCommand\"\n"
        }
      }
    },
    {
      "name": "checkAndInstallENADrivers",
      "action": "aws:runCommand",
      "description": "Determines the availability of Enhanced Networking Adapter (ENA) drivers on the EC2 instance and installs, if missing",
      "isCritical": true,
      "nextStep": "checkAndAddNVMEDrivers",
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "TimeoutSeconds": 3600,
        "Parameters": {
          "commands": "#!/bin/bash\n\nreadonly AUTOMATION_DIR='/var/lib/amazon/ssm/xen_to_nitro_automation'\n\nerror_exit()\n{\n    echo \"[ERROR] The Execution did not complete successfully: ${1}\"\n    exit 1\n}\n\nunsupported_os() {\n        error_exit \"Unsupported Operating System. Stopping installation\"\n}\n\nreboot_operating_system(){\n    mkdir \"$AUTOMATION_DIR\"\n    cd \"$AUTOMATION_DIR\" || error_exit \"Changing directory to $AUTOMATION_DIR failed\"\n    touch \"$AUTOMATION_DIR\"/REBOOT_ISSUED\n    echo \"[INFO] Rebooting after kernel installation\"\n    exit 194\n}\n\ncleanup(){\n    rm -rf \"$AUTOMATION_DIR\"\n}\n\n# To check if this file exists and if it does remove it to prevent booting issues from new AMI\n# If your instance operating system contains an /etc/udev/rules.d/70-persistent-net.rules file, you must delete it before creating the AMI. This file contains the MAC address for the Ethernet adapter of the original instance. If another instance boots with this file, the operating system will be unable to find the device and eth0 might fail, causing boot issues. This file is regenerated at the next boot cycle, and any instances launched from the AMI create their own version of the file.\ncheck_persistent_rules(){\nif [ -f /etc/udev/rules.d/70-persistent-net.rules ]; then\n    echo \"[WARNING] /etc/udev/rules.d/70-persistent-net.rules exists. Creating file backup...\"\n    mv /etc/udev/rules.d/70-persistent-net.rules \"/etc/udev/rules.d/70-persistent-net-rules.$(date +%F)\"\n    echo \"[INFO] Backup of the /etc/udev/rules.d/70-persistent-net.rules created at the same path\"\nelse\n    echo \"[INFO] Operating System is not using /etc/udev/rules.d/70-persistent-net.rules\"\nfi\n}\n\nfix_predictable_network_interface_names(){\n    if [ \"$linux_dist_name\" = \"Ubuntu\" ]; then\n        systemd_version=$(dpkg -l | grep -E 'udev|systemd'|tail -1|awk '{print $3}'|cut -d \"-\" -f 1)\n    else\n        systemd_version=$(rpm -qa | grep -e '^systemd-[0-9]\\+\\|^udev-[0-9]\\+' | tail -1|cut -d \"-\" -f 2)\n    fi\n\n    if [ \"$(echo $systemd_version|awk '{printf \"%.0f\",$1}')\" -gt 197 ]; then\n        echo \"[INFO] Fixing predictable network interface naming issue as systemd/udev version is $systemd_version\"\n        if [ -f /etc/default/grub ]; then\n            cp /etc/default/grub \"/etc/default/grub.$(date +%F)\"\n            if ! grep -q \"net.ifnames\" /etc/default/grub ; then sed -i '/^GRUB\\_CMDLINE\\_LINUX/s/\\\"$/\\ net\\.ifnames\\=0\\\"/' /etc/default/grub; fi\n            if ! grep -q \"biosdevname\" /etc/default/grub; then sed -i '/^GRUB\\_CMDLINE\\_LINUX/s/\\\"$/\\ biosdevname\\=0\\\"/' /etc/default/grub; fi\n            if [ -f /etc/debian_version ]; then # added if statement as grub2-mkconfig doesn't work on ubuntu to update grub config\n                update-grub || error_exit \"[ERROR] Error occured while updating GRUB\"\n            else\n                grub2-mkconfig -o /boot/grub2/grub.cfg || error_exit \"[ERROR] Error occured while updating GRUB\"\n            fi\n        elif [ -f /boot/grub/menu.lst ]; then # added this just in case\n            cp /boot/grub/menu.lst \"/boot/grub/menu.lst.$(date +%F)\"\n            if ! grep -q \"net.ifnames\" /boot/grub/menu.lst ; then sed -i '/^kernel/s/$/ net\\.ifnames\\=0/' /boot/grub/menu.lst; fi    \n            if ! grep -q \"biosdevname\" /boot/grub/menu.lst; then sed -i '/^kernel/s/$/ biosdevname\\=0\\\"/' /boot/grub/menu.lst; fi\n        fi\n    else\n        echo \"[INFO] No need to fix predictable network interface naming issues for this version of systemd/udev\"\n    fi\n}\n\nget_os_version(){\n    if [ -f /etc/os-release ]; then\n        linux_dist_name=$(cat /etc/os-release | grep -w \"NAME=\" | awk -F'=' '{print $2}'|tr -d '\"')\n        linux_dist_ver=$(cat /etc/os-release | grep -E \"VER_ID|VERSION_ID\" | awk -F'=' '{print $2}' | tr -d '\"')\n        linux_major_ver=$(echo \"$linux_dist_ver\" | awk -F'.' '{print $1}'|tr -d '\"')\n        linux_minor_ver=$(echo \"$linux_dist_ver\" | awk -F'.' '{print $2}'|tr -d '\"')\n    fi\n\n    echo \"[INFO] LINUX_DIST >> $linux_dist_name\"\n    echo \"[INFO] linux_dist_ver >> $linux_dist_ver\"\n}\n\nget_ena_version(){\n    if modinfo ena|grep -Eo '^version:.*' ; then\n        ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk '{print $2}')\n    else\n        ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk '{print $2}')\n    fi\n\n    if [ -z \"$ena_version\" ];then\n        echo \"[WARNING] Unable to get ENA version\"\n        ena_version=\"undefined\"\n    fi\n}\n\ninstallation_yum(){\n\n    if [ \"$1\" == \"update\" ]; then\n        echo \"[WARNING] Updating kernel version to install ENA\"\n        if yum update kernel -y;then\n            echo \"[INFO] Kernel successfully updated\"\n            reboot_operating_system\n        else\n            error_exit \"Kernel update failed\"\n        fi\n    else\n        echo \"[WARNING] Re-installing kernel version to install ENA\"\n        if yum remove kernel-\"$kernel_version\" && yum install kernel-\"$kernel_version\";then\n            echo \"[INFO] Kernel successfully re-installed\"\n            reboot_operating_system\n        else\n            error_exit \"Kernel re-installation failed\"\n        fi\n    fi\n}\n\ninstall_ena_redhat(){\n    echo \"[WANRING] RHEL 7.4 and later AMIs come preinstalled with the module needed for enhanced networking with ENA.\"\n    if [ \"$linux_major_ver\" -le 7 ] && [ \"$linux_minor_ver\" -lt 4 ]; then\n        installation_yum \"update\"\n    else\n        installation_yum \"reinstall\"\n    fi\n}\n\ninstall_ena_amzn() {\n    printf \"[INFO] Amazon Linux AMI 2018.03 & Amazon Linux 2 AMIs include the required ENA module and have ENA support enabled\"\n    installation_yum \"update\"\n}\n\n\ninstall_ena_sles(){\n    echo \"[INFO] SUSE SLES 12 SP2 and later include ENA 2.02 by default, so you are not required to download and compile the ENA driver\"\n    echo \"[INFO] Reinstalling the same kernel to fix this\"\n    zypper refresh\n    echo \"Current kernel version is\" \"$kernel_version\" \n    current_kernel_version=$(echo \"$kernel_version\" | sed -r 's/-default/.1/g')\n    if zypper install -f -y kernel-default-\"$current_kernel_version\"; then\n        echo \"[INFO] Kernel reinstalled\"\n        reboot_operating_system\n    else\n        error_exit \"Kernel re-installation failed\" \n    fi\n}\n\ninstall_ena_ubuntu(){\n    echo \"[INFO] Ubuntu 14.04 or later with linux-aws kernel includes ENA by default, so you are not required to download and compile the ENA driver\"\n    echo \"[INFO] Reinstalling the same kernel to fix this\"\n    echo \"Current kernel version is\" \"$kernel_version\" \n    current_kernel_version=$(echo \"$kernel_version\" | sed -r 's/-default/.1/g')\n    if apt update && apt install --reinstall linux-image-\"$current_kernel_version\"; then\n        echo \"[INFO] Kernel reinstalled\"\n        reboot_operating_system\n    else\n        error_exit \"Kernel re-installation failed\" \n    fi\n}\n\n\ncheck_supported_os_versions(){\n    if [ \"$linux_dist_name\" = \"Ubuntu\" ] && [ \"$linux_major_ver\" -lt 16 ]; then\n        unsupported_os\n    elif [ \"$linux_dist_name\" = \"Red Hat Enterprise Linux\" ] && [ \"$linux_major_ver\" -lt 7 ]; then\n        unsupported_os\n    elif [ \"$linux_dist_name\" = \"Amazon Linux\" ] && [ \"$(echo \"${linux_dist_ver} != 2018.03\"| bc)\" -eq 1 ] && [ \"$linux_major_ver\" -lt 2 ]; then\n        unsupported_os\n    elif [ \"$linux_dist_name\" = \"SLES\" ] && { { [ \"$linux_major_ver\" -lt 15 ] && [ \"$linux_minor_ver\" -lt 2 ]; } || { [ \"$linux_major_ver\" -lt 12 ] && [ \"$linux_minor_ver\" -lt 5 ]; };}; then\n        unsupported_os\n    else\n        echo \"[INFO] Linux version is supported by this automation\"\n    fi \n}\n\nmain(){\n\n    get_os_version\n    kernel_version=\"$(uname -r)\"\n    if modinfo ena > /dev/null 2>&1;then\n        get_ena_version\n        echo \"[INFO] ENA Module with version $ena_version is installed and available on your instance\"\n        check_supported_os_versions\n    else\n        echo \"[WARNING] ENA Module is not installed on your instance.\"\n        if [ ! -f \"$AUTOMATION_DIR\"/REBOOT_ISSUED ]; then\n            check_supported_os_versions\n            if [ \"$linux_dist_name\" = \"Red Hat Enterprise Linux\" ]; then\n                install_ena_redhat\n            elif [ \"$linux_dist_name\" = \"SLES\" ];then\n                install_ena_sles\n            elif [ \"$linux_dist_name\" = \"Amazon Linux\" ];then\n                install_ena_amzn\n            elif [ \"$linux_dist_name\" = \"Ubuntu\" ];then\n                install_ena_ubuntu\n            fi\n        else\n            error_exit\n        fi\n    fi\n    check_persistent_rules\n    fix_predictable_network_interface_names\n    cleanup\n}\n\nmain\n"
        }
      }
    },
    {
      "name": "checkAndAddNVMEDrivers",
      "action": "aws:runCommand",
      "description": "Determines the availability of NVMe drivers on the cloned EC2 instance and installs, if missing",
      "timeoutSeconds": 3600,
      "nextStep": "checkAndModifyFSTABEntries",
      "onFailure": "step:failureHandling",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n#CODES MAP\n#240 - initramfs/initrd needs to be re-regenerated. \n\nreadonly LOADED_INFO_MSG=\"[INFO] NVMe Module loaded successfully in initramfs/initrd for kernel version\"\nreadonly ALREADY_LOADED_INFO_MSG=\"[INFO] NVMe Module already loaded in initramfs/initrd for kernel version.\"\nreadonly ADD_FAIL_ERROR=\"Failed to add NVMe drivers to newly built initramfs/initrd\"\nKERNEL_VERSION=\"$(uname -r)\" \nreadonly KERNEL_VERSION\nreadonly PATH_TO_INITRAMFS_YUM=\"/boot/initramfs-${KERNEL_VERSION}.img\"\nreadonly PATH_TO_INITRD_SUSE=\"/boot/initrd-${KERNEL_VERSION}\"\nreadonly PATH_TO_INITRAMFS_DEB=\"/boot/initrd.img-${KERNEL_VERSION}\"\n\nerror_exit()\n{\n    echo \"[ERROR] The Execution did not complete successfully: ${1}\"\n    exit 1\n}\n\ncheck_NVMe_omitted () {\n    \n    nvme_results=$(lsinitrd \"$1\"| grep -w nvme)\n    if ! echo \"$nvme_results\" | grep -w nvme; then \n        return 240\n    elif echo \"$nvme_results\" | grep -e \"--omit-drivers\" -e \"-o\" | grep -w nvme > /dev/null 2>&1; then\n        echo \"[WARNING] NVMe module omitted in initramfs, ${1}, using parameter --omit-drivers or -o\"\n        return 240\n    elif grep -R 'omit' /etc/dracut.conf* | grep nvme; then\n        error_exit \"NVMe module is omitted in the dracut configuration file\"\n    else\n        echo \"$ALREADY_LOADED_INFO_MSG $KERNEL_VERSION\"\n    fi\n}\n\nis_NVMe_blocklisted(){\n    if ! modprobe --showconfig | grep blacklist | grep nvme; then\n        echo \"[INFO] NVMe module is not blocklisted.\"\n    else\n        error_exit \"NVMe module is blocklisted.\"\n    fi\n}\n\nadd_nvme_driver(){\n    echo \"[WARNING] NVMe Module not loaded in initramfs/initrd, ${2}, recreating initramfs/initrd\"\n    if [ \"$1\" = \"debian\" ]; then\n        update-initramfs -c -k all\n    else\n        echo 'add_drivers+=\" nvme \"' >> /etc/dracut.conf.d/nvme.conf\n        echo 'add_drivers+=\" nvme_core \"' >> /etc/dracut.conf.d/nvme_core.conf\n        dracut -f -v\n        depmod -a\n    fi\n    echo \"[INFO] Verifying changes..\"\n\n    if ! lsinitrd \"$2\" | grep -w nvme | grep -v nvmem; then\n        error_exit \"$ADD_FAIL_ERROR\"\n    else\n        echo \"$LOADED_INFO_MSG\"\n    fi\n}\n\ncheck_and_add_NVMe_in_initrd () {\n    echo \"[INFO] Checking if NVME module loaded in initramfs/initrd\"\n    if [ -f /etc/redhat-release ] ; then\n        is_NVMe_blocklisted\n        check_NVMe_omitted \"$PATH_TO_INITRAMFS_YUM\"\n        if [ $? -eq 240 ]; then        \n            add_nvme_driver \"rhel\" \"$PATH_TO_INITRAMFS_YUM\"\n        fi\n    elif grep 'SUSE Linux' /etc/os-release > /dev/null 2>&1; then\n        is_NVMe_blocklisted\n        check_NVMe_omitted \"$PATH_TO_INITRD_SUSE\"\n        if [ $? -eq 240 ]; then        \n            add_nvme_driver \"suse\" \"$PATH_TO_INITRD_SUSE\"\n        fi\n    elif [ -f /etc/debian_version ] ; then\n        is_NVMe_blocklisted\n        check_NVMe_omitted \"$PATH_TO_INITRAMFS_DEB\"\n        if [ $? -eq 240 ]; then        \n            add_nvme_driver \"debian\" \"$PATH_TO_INITRAMFS_DEB\"\n        fi\n    elif grep 'Amazon Linux' /etc/os-release 1>/dev/null 2>/dev/null; then\n        is_NVMe_blocklisted\n        check_NVMe_omitted \"$PATH_TO_INITRAMFS_DEB\"\n        if [ $? -eq 240 ]; then        \n            add_nvme_driver \"amznlinux\" \"$PATH_TO_INITRAMFS_YUM\"\n        fi\n    else\n        error_exit \"Unsupported Operating System\"\n    fi\n}\n\nmain() \n{\n    if ! grep -w 'nvme' /lib/modules/\"$KERNEL_VERSION\"/modules.builtin > /dev/null 2>&1\n        then\n        if ! modinfo nvme > /dev/null 2>&1\n            then\n            # NVMe Module is not installed. \n            echo \"[ERROR] NVMe Module not available on instance. \\n\\t- Please install NVMe module before changing instance type to Nitro. View link for further guidance:\"\n            echo \"\\t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html\"\n            exit 1\n\n        else\n            echo \"[OK] NVMe module is installed on instance for kernel version ${KERNEL_VERSION}\"\n            check_and_add_NVMe_in_initrd\n        fi\n    else\n        echo \"[OK] NVMe module is present as a builtin module in kernel version ${KERNEL_VERSION}\"\n    fi\n}\n\nmain\n"
        }
      }
    },
    {
      "name": "checkAndModifyFSTABEntries",
      "action": "aws:runCommand",
      "description": "Determines if the device name are used in /etc/fstab and replaces them with their UUIDs, if found",
      "timeoutSeconds": 3600,
      "onFailure": "step:failureHandling",
      "nextStep": "stopClonedInstance",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\ntime_stamp=$(date +%F-%H:%M:%S)\ncp -p /etc/fstab /etc/fstab.backup.$time_stamp\ncp -p /etc/fstab /etc/fstab.modified.$time_stamp\nmkdir /var/lib/amazon/ssm/xen_to_nitro_automation\ncat /etc/fstab | grep '^/dev' | grep -E 'sd[a-z]|xvd[a-z]|nvme([0-9]|1[0-9]|2[0-7])n1p?' | awk -F '/' '{print $3}'>/var/lib/amazon/ssm/xen_to_nitro_automation/device_names\nwhile read LINE; do\n        UUID=`ls -l /dev/disk/by-uuid | grep \"$LINE\" | sed -n 's/^.* \\([^ ]*\\) -> .*$/\\1/p'` # Gets the UUID name\n        if [ ! -z \"$UUID\" ]\n        then\n            sed -i \"s|^/dev/${LINE}|UUID=${UUID}|\" /etc/fstab.modified.$time_stamp\n        fi\ndone </var/lib/amazon/ssm/xen_to_nitro_automation/device_names\nif [ -s /var/lib/amazon/ssm/xen_to_nitro_automation/device_names ]; then\n    echo -e \"[WARNING] fstab file contains device names.\"\n    echo -e \"[INFO] Replacing device names with UUID in /etc/fstab file so compatible for NVMe block device names\"\n    echo -e \"[INFO] Writing changes to /etc/fstab\"\n    cp -p /etc/fstab.modified.$time_stamp /etc/fstab\n    echo -e \"[INFO] Device name entries converted to UUIDs\"\n    echo -e \"[INFO] Original fstab file is stored as /etc/fstab.backup.$time_stamp\"\n    rm -rf /etc/fstab.modified.$time_stamp\n    rm -rf /var/lib/amazon/ssm/xen_to_nitro_automation/device_names\n    rmdir /var/lib/amazon/ssm/xen_to_nitro_automation\nelse\n    rm -rf /etc/fstab.backup.$time_stamp\n    rm -rf /etc/fstab.modified.$time_stamp\n    rm -rf /var/lib/amazon/ssm/xen_to_nitro_automation/device_names\n    rmdir /var/lib/amazon/ssm/xen_to_nitro_automation\n    echo -e \"[INFO] fstab file is fine and does not contain any UUID\"\nfi\n\n\n\n"
        }
      }
    },
    {
      "name": "stopClonedInstance",
      "action": "aws:changeInstanceState",
      "description": "Stops the cloned EC2 instance",
      "maxAttempts": 1,
      "timeoutSeconds": 300,
      "onFailure": "step:forceStopClonedInstance",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped"
      },
      "nextStep": "checkENAAttributeForClonedInstance"
    },
    {
      "name": "forceStopClonedInstance",
      "action": "aws:changeInstanceState",
      "description": "Forces stop the cloned EC2 instance, only if the step 'stopClonedInstance' fails to stop",
      "maxAttempts": 1,
      "timeoutSeconds": 300,
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped",
        "Force": true
      },
      "nextStep": "checkENAAttributeForClonedInstance"
    },
    {
      "name": "checkENAAttributeForClonedInstance",
      "action": "aws:branch",
      "description": "Checks if the Enhanced Networking Adapter (ENA) attribute is enabled on the cloned EC2 instance",
      "isCritical": true,
      "onFailure": "step:failureHandling",
      "inputs": {
        "Choices": [
          {
            "NextStep": "setNitroInstanceTypeForClonedInstance",
            "Variable": "{{getTargetInstanceProperties.ENAAttrib}}",
            "BooleanEquals": true
          }
        ],
        "Default": "enableENAAttributeForClonedInstance"
      }
    },
    {
      "name": "enableENAAttributeForClonedInstance",
      "action": "aws:executeAwsApi",
      "description": "Enables the Enhanced Networking Adapter (ENA) attribute for the cloned instance, if not enabled already",
      "nextStep": "setNitroInstanceTypeForClonedInstance",
      "onFailure": "step:failureHandling",
      "maxAttempts": 1,
      "inputs": {
        "Service": "ec2",
        "Api": "ModifyInstanceAttribute",
        "InstanceId": "{{launchInstanceInSameSubnet.ClonedInstanceId}}",
        "EnaSupport": {
          "Value": true
        }
      }
    },
    {
      "name": "setNitroInstanceTypeForClonedInstance",
      "action": "aws:executeAwsApi",
      "description": "Sets the provided Target EC2 instance type for the cloned EC2 instance",
      "onFailure": "step:failureHandling",
      "nextStep": "startClonedInstance",
      "maxAttempts": 1,
      "inputs": {
        "Service": "ec2",
        "Api": "ModifyInstanceAttribute",
        "InstanceId": "{{launchInstanceInSameSubnet.ClonedInstanceId}}",
        "InstanceType": {
          "Value": "{{NitroInstanceType}}"
        }
      }
    },
    {
      "name": "startClonedInstance",
      "action": "aws:changeInstanceState",
      "description": "Starts the cloned EC2 instance",
      "maxAttempts": 1,
      "timeoutSeconds": 900,
      "isCritical": true,
      "onFailure": "step:failureHandling",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "running"
      },
      "nextStep": "approvalForCreatingImageAfterDriversInstallation"
    },
    {
      "name": "approvalForCreatingImageAfterDriversInstallation",
      "action": "aws:approve",
      "description": "Waits for user approval if the cloned EC2 instance successfully boots on Nitro platform. If provided, creates an Amazon Machine Image(AMI) which can be used as Golden Image to launch Nitro instances",
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "nextStep": "createImageAfterDriversInstallation",
      "inputs": {
        "NotificationArn": "{{SNSTopicArn}}",
        "Message": "Cloned EC2 Instance {{launchInstanceInSameSubnet.ClonedInstanceId}}, created from target EC2 instance {{TargetInstanceId}}, has been successfully migrated to {{NitroInstanceType}}. Provide approval to create an Amazon Machine Image(AMI) which can be used as a Golden Image to launch EC2 nitro instances. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.",
        "MinRequiredApprovals": "{{MinimumRequiredApprovals}}",
        "Approvers": [
          "{{ApproverIAM}}"
        ]
      }
    },
    {
      "name": "createImageAfterDriversInstallation",
      "action": "aws:createImage",
      "description": "Creates an Image from the new EC2 instance only if the new EC2 instance successfully boots on Nitro Platform",
      "maxAttempts": 1,
      "onFailure": "step:failureHandling",
      "isCritical": true,
      "inputs": {
        "InstanceId": "{{launchInstanceInSameSubnet.ClonedInstanceId}}",
        "ImageName": "CloneXenEC2InstanceAndMigrateToNitro_NitroImage_{{TargetInstanceId}}_{{global:DATE_TIME}}",
        "NoReboot": true,
        "ImageDescription": "Image created after driver installation - SSMAutomationID-{{automation:EXECUTION_ID}}"
      }
    },
    {
      "name": "cleanupTestImage",
      "action": "aws:deleteImage",
      "description": "Deregisters the Image (AMI) created for testing",
      "maxAttempts": 3,
      "isEnd": true,
      "onFailure": "Continue",
      "isCritical": true,
      "inputs": {
        "ImageId": "{{createTestImage.ImageId}}"
      }
    },
    {
      "name": "failureHandling",
      "action": "aws:branch",
      "description": "Checks if the user has chosen to terminate resources on failure",
      "isEnd": true,
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "onFailureTerminateClonedInstance",
            "Variable": "{{DeleteResourcesOnFailure}}",
            "BooleanEquals": true
          }
        ]
      }
    },
    {
      "name": "onFailureTerminateClonedInstance",
      "action": "aws:changeInstanceState",
      "description": "Terminates the cloned EC2 instance, in case of automation failure",
      "maxAttempts": 1,
      "isCritical": true,
      "timeoutSeconds": 300,
      "nextStep": "onFailurecleanupTestImage",
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{launchInstanceInSameSubnet.ClonedInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "terminated"
      }
    },
    {
      "name": "onFailurecleanupTestImage",
      "action": "aws:deleteImage",
      "description": "Deregisters the Image (AMI) created for testing",
      "maxAttempts": 3,
      "onFailure": "Continue",
      "nextStep": "onFailureApprovalToStartTargetInstance",
      "isCritical": true,
      "inputs": {
        "ImageId": "{{createTestImage.ImageId}}"
      }
    },
    {
      "name": "onFailureApprovalToStartTargetInstance",
      "action": "aws:approve",
      "description": "If automation fails, waits for designated principal's approval to start the target EC2 instance",
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "nextStep": "onFailureStartTargetInstance",
      "inputs": {
        "NotificationArn": "{{SNSTopicArn}}",
        "Message": "Automation failed while migrating cloned EC2 Xen based instance to Nitro platform. Provide approval to start the target EC2 instance. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.",
        "MinRequiredApprovals": "{{MinimumRequiredApprovals}}",
        "Approvers": [
          "{{ApproverIAM}}"
        ]
      }
    },
    {
      "name": "onFailureStartTargetInstance",
      "action": "aws:changeInstanceState",
      "description": "If automation fails, starts the target EC2 instance",
      "maxAttempts": 1,
      "timeoutSeconds": 900,
      "isCritical": true,
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "InstanceIds": [
          "{{TargetInstanceId}}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "running"
      }
    }
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "sha256": "8db5b90dfd6b525c64545abe1f11011b8fecaa9e9d7309a9bf72b1e23f9b60fa"
      }
    }
  },
  "outputs": [
    "launchInstanceInSameSubnet.ClonedInstanceId",
    "createBackupImage.ImageId",
    "createImageAfterDriversInstallation.ImageId"
  ]
}
