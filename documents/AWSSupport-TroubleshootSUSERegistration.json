{
  "description": "# AWSSupport-TroubleshootSUSERegistration\n---\n This runbook checks if the EC2 SUSE Instance meets the prerequisites for EC2 Instances to register to SUSE Update Infrastructure. This includes checks related to EC2 Instance Metadata Service(IMDS) access, regional server access over https, SMT server access over http/https,smt-ec2.susecloud.net access over https and Billing Product/MarketPlace Product Code associated with the Amazon EC2 instance. If all the requirements are met, this document will register the EC2 SUSE Instance to SUSE Update Infrastructure. This document also fixes some known registration related issues such as Broken BaseProduct symbolic link, multiple entries in the file /etc/hosts related to the SMT server.\n\n---\n\n### Parameters\n1. **InstanceId**: \n\nType: String\n\nDescription: **(Required)** EC2 Instance you want to register to SUSE Update Infrastructure. (e.g. i-05fa91429c6cdcb39)\n\n2.  **AutomationAssumeRole**:\nType: String\n\nDescription: **(Optional)** IAM role which AWS Systems Manager will assume to execute this automation. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html .  If no role is specified, this document will use the permissions of the user that executes this document.",
  "schemaVersion": "0.3",
  "outputs": [
    "FinalOutput.output"
  ],
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) EC2 Instance you want to register to SUSE Update Infrastructure (e.g. i-05fa91429c6cdcb39)..",
      "allowedPattern": "^[m]{0,1}i-[a-z0-9]{8,17}$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) IAM role which AWS Systems Manager will assume to execute this automation. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html",
      "allowedPattern": "^$|^arn:aws:iam::[0-9]*:role/[/\\w+=,.@-]+$",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "AssertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "description": "Confirm if the EC2 instance is a managed instance.",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ],
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "nextStep": "ConfirmSuseOS",
      "timeoutSeconds": 300,
      "maxAttempts": 2
    },
    {
      "name": "ConfirmSuseOS",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n# baseproduct symbolic link should reference if SLES for SAP\nreadonly SAP_BASEPRODUCT=\"/etc/products.d/SLES_SAP.prod\"\n# baseproduct symbolic link should reference if SLES\nreadonly SLES_BASEPRODUCT=\"/etc/products.d/SLES.prod\"\n# Is this SLES-SAP or SLES?\nfunction os() {\n  echo \"1. Checking if the EC2 instance is based on SUSE Enterprise Linux.\"\n  if test -f \"${SAP_BASEPRODUCT}\"; then\n  echo \"[Passed] $( hostnamectl  | grep -i \"Operating System\" )\"\n  elif test -f \"${SLES_BASEPRODUCT}\"; then\n  echo \"[Passed] $( hostnamectl  | grep -i \"Operating System\" )\"\n  else \n    echo \"[Failed] No supported OS. Exiting.\"\n\texit 1\n  fi\t\n}\n\nos\n\n\n"
        }
      },
      "description": "Confirm if the EC2 instance is based on SUSE Enterprise Linux.",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckcloudregionsrvclientpackageVersion",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n# baseproduct symbolic link should reference if SLES for SAP\nreadonly SAP_BASEPRODUCT=\"/etc/products.d/SLES_SAP.prod\"\n# baseproduct symbolic link should reference if SLES\n\nreadonly SLES_BASEPRODUCT=\"/etc/products.d/SLES.prod\"\n\n# Is this SLES-SAP or SLES?\nfunction os() {\n  if test -f \"${SAP_BASEPRODUCT}\"; then\n\n  OS=\"SAP\"\n  baseversion=\"$(awk -F'[<>]' '/<baseversion>/{print $3}' ${SAP_BASEPRODUCT} )\"\n  slebase=\"SLE${baseversion}\"\n  arch=\"$(awk -F'[<>]' '/<arch>/{print $3}' ${SAP_BASEPRODUCT} )\"\n\n  elif test -f \"${SLES_BASEPRODUCT}\"; then\n  OS=\"SLES\"\n  baseversion=\"$(awk -F'[<>]' '/<baseversion>/{print $3}' ${SLES_BASEPRODUCT})\"\n  slebase=\"SLE${baseversion}\"\n  arch=\"$(awk -F'[<>]' '/<arch>/{print $3}' ${SLES_BASEPRODUCT})\"\n\n  else \n  exit 1\n  fi  \n}\n# functions to verify if package versions are less than equal\nfunction verlte() {\n  [  \"${1}\" = \"`echo -e \"${1}\\n${2}\" | sort -V | head -n1`\" ]\n}\n\nfunction verlt() {\n  [ \"${1}\" = \"${2}\" ] && return 1 || verlte \"${1}\" \"${2}\"\n}\n\n# Check that package versions are at minimum recommended\nfunction check_regionclient_version() {\n  echo \"2. Checking if the package cloud-regionsrv-client version is higher or equal than the required version 9.0.0\"\n  local required_version=\"9.0.0\"\n  local installed_version=\"$(rpm -q cloud-regionsrv-client --queryformat \"%{VERSION}\")\"\n  if verlt $installed_version $required_version; then\n  if [ $baseversion == 12 ]  || [ $baseversion == 15 ] && [ $arch == \"aarch64\" ]  || [ $arch == \"x86_64\" ]; then  \n\techo \"PROBLEM: Update infrastructure packages need to be updated manually.\"\n\n  echo \"=============Solution=============\"\n\n  echo \"Follow below steps to download package and Install it on your EC2 instance:\n\nwget --no-check-certificate https://52.15.49.139/late_instance_offline_update_ec2_${arch}_$slebase.tar.gz\n\nsha1sum late_instance_offline_update_ec2_${arch}_$slebase.tar.gz\n\ntar -xf late_instance_offline_update_ec2_${arch}_$slebase.tar.gz\n\ncd $arch\n\nzypper --no-refresh --no-remote --non-interactive in *.rpm\n\n/usr/sbin/registercloudguest --force-new\"\n\n\necho \"==============End=================\"\n\n\texit 1\nfi\n  else \n\techo \"[Passed] cloud-regionsrv-client package version is OK.\"\n  fi\n}\n\n\nos\ncheck_regionclient_version\n\n\n\n\n\n"
        }
      },
      "description": "Check if the package cloud-regionsrv-client version is higher or equal than the required version 9.0.10",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckBaseProduct",
      "action": "aws:runCommand",
      "description": "Checking baseproduct symbolic link.",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n# baseproduct symbolic link should reference if SLES for SAP\nreadonly SAP_BASEPRODUCT=\"/etc/products.d/SLES_SAP.prod\"\n# baseproduct symbolic link should reference if SLES\nreadonly SLES_BASEPRODUCT=\"/etc/products.d/SLES.prod\"\n# If baseproduct symbolic link is wrong, there can be update issues\n# Check if baseproduct link is correct for installed OS and fix it if not\nfunction check_baseproduct() {\n  echo \"3. Checking if baseproduct symbolic link is broken or not\"\n  local baseproduct_file=\"/etc/products.d/baseproduct\"\n  local baselink=\"$(readlink -f ${baseproduct_file})\"\n  if test -f \"${SAP_BASEPRODUCT}\"; then\n    if [[ \"${baselink}\" = \"${SAP_BASEPRODUCT}\" ]]; then\n\t  echo \"[Passed] baseproduct OK\"\n    else\n\t  echo \"Baseproduct problem found. Fixing...\"\n\t  ln -sf \"${SAP_BASEPRODUCT}\" \"${baseproduct_file}\"\n    echo \"[Passed] Baseproduct problem fixed.\"\n    fi\n  elif test -f \"${SLES_BASEPRODUCT}\"; then\n\tif [[ \"${baselink}\" = \"${SLES_BASEPRODUCT}\" ]]; then\n\t\t\techo \"[Passed] baseproduct OK\"\n\telse\n\t\t\techo \"Baseproduct problem found. Fixing...\"\n\t\t\tln -sf \"${SLES_BASEPRODUCT}\" \"${baseproduct_file}\"\n      echo \"[Passed] Baseproduct problem fixed.\"\n\tfi\n  else\n  exit 1\n  fi\n}\ncheck_baseproduct\n\n\n"
        }
      },
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckHostsFileForMultipleRecords",
      "action": "aws:runCommand",
      "inputs": {
        "Parameters": {
          "commands": "#!/bin/bash\n\n# If there are multiple SMT entries in /etc/hosts, there can be update issues\n# Check /etc/hosts files for problems and fix if there are\nfunction check_hosts() {\n  ETC_HOSTS=\"/etc/hosts\"\n  PATTERN1=\"smt-ec2.susecloud.net\"\n  PATTERN2=\"Added by SMT registration do not remove.\"\n  echo \"4.a Checking /etc/hosts for multiple records about smt-ec2.susecloud.net\"\n  NUM_HOST_ENTRIES=\"$(grep -c $PATTERN1 $ETC_HOSTS)\"\n  if [[ \"${NUM_HOST_ENTRIES}\" -ge 2 ]]; then\n    COUNT=\"$((COUNT+1))\"\n\techo \"[Failed] PROBLEM: Multiple SMT records exist, deleting.\"\n    delete_hosts\n  elif [[ \"${NUM_HOST_ENTRIES}\" -eq 0 ]]; then\n    COUNT=\"$((COUNT+1))\"\n    echo \"[Warning] Warning: No SMT records exist in the file /etc/hosts.\"\n  else\n\techo \"[Passed] File /etc/hosts is OK.\"\n\t# Now check that the hosts records matches correct region\n\tcheck_current_smt\n  fi\n}\n# Metadata access is required. Check metadata is accessible\nfunction check_metadata() {\n  if [[ \"${AWS_SSM_INSTANCE_ID}\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\n    local company=\"amazon\"\n    local http_code=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" http://169.254.169.254/latest/meta-data/)\n    local http_code_token=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n    if [ $http_code -eq \"200\" ]; then\n      check_region=$(curl http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null )\n    else\n    TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" 2>/dev/null `\n    check_region=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null )\n    fi\n    if [[ -z \"${check_region}\" ]] || [[ ${#check_region} -gt 25 ]]; then\n      exit 1\n    else\n      local CMD1=\"grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' | tr '\\n' ' '\"\n      local CMD=\"grep -oP '(([0-9]{1,3}\\.){3}[0-9]{1,3})(\\\" region=\\\"$check_region\\\"\\/>)'\"\n      # Get SMT servers that are in region\n      local get_smt=\"$(echo ${!company} | eval $CMD | eval $CMD1)\"\n      smt_servers=( $get_smt )\n      echo $smt_servers > /tmp/smtserver\n    fi\n  fi\n}\n\n# Check if current smt server in /etc/hosts is region correct\nfunction check_current_smt() {\n  echo \"4.b Checking SMT server entry is correct in /etc/hosts.\"\n  # Get current /etc/hosts\n  local smt_ip=\"$(getent hosts smt-ec2.susecloud.net | awk {'print $1'})\"\n\n  if [[ \"${smt_servers[@]}\" =~ \"${smt_ip}\" ]]; then\n    echo \"[Passed] SMT server entry OK\"\n  fi\n\n  if [[ ! \"${smt_servers[@]}\" =~ \"${smt_ip}\" ]]; then\n    echo \"[Warning] PROBLEM: SMT server entry is for wrong region.\"\n  fi\n}  \n# Delete /etc/hosts entry\nfunction delete_hosts() {\n# backup the file /etc/hosts before removing the duplicate line of smt-ec2.susecloud.net\necho \"[Passed] Backup the file /etc/hosts to /etc/hosts.backup before removing the duplicate line of smt-ec2.susecloud.net.\"\ncp  /etc/hosts /etc/hosts.backup\n\n  sed --in-place=.sc-repocheck \"/$PATTERN1/d\" $ETC_HOSTS\n  sed -i \"/$PATTERN2/d\" $ETC_HOSTS\necho \"[Passed] SMT Duplicate lines removed from the file /etc/hosts\"\n}\namazon=$(cat <<EOF\n<?xml version='1.0' encoding='UTF-8'?>\n<servers>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.244.54.57\" region=\"af-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.244.40.27\" region=\"af-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.245.60.134\" region=\"af-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"18.162.90.181\" region=\"ap-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"18.162.132.113\" region=\"ap-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"18.162.83.253\" region=\"ap-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.248.86.233\" region=\"ap-northeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.248.240.93\" region=\"ap-northeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.248.226.128\" region=\"ap-northeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.79.38.96\" region=\"ap-northeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.79.39.98\" region=\"ap-northeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.79.134.51\" region=\"ap-northeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.66.49.238\" region=\"ap-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.66.45.16\" region=\"ap-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.66.51.63\" region=\"ap-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"122.248.246.124\" region=\"ap-southeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.254.106.151\" region=\"ap-southeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.251.254.125\" region=\"ap-southeast-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.253.249.15\" region=\"ap-southeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.253.114.150\" region=\"ap-southeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.66.121.137\" region=\"ap-southeast-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.60.53.175\" region=\"ca-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.60.53.224\" region=\"ca-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.60.50.162\" region=\"ca-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.223.131.108\" region=\"cn-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.223.140.138\" region=\"cn-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.222.142.49\" region=\"cn-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.83.151.90\" region=\"cn-northwest-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.83.113.211\" region=\"cn-northwest-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.83.247.110\" region=\"cn-northwest-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.93.130.182\" region=\"eu-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.93.131.24\" region=\"eu-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.28.214.37\" region=\"eu-central-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"15.161.33.0\" region=\"eu-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"15.161.39.2\" region=\"eu-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"15.161.27.146\" region=\"eu-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.53.91.131\" region=\"eu-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.53.91.167\" region=\"eu-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"13.53.77.232\" region=\"eu-north-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.246.90.215\" region=\"eu-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.75.232.245\" region=\"eu-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"176.34.126.172\" region=\"eu-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.56.58.194\" region=\"eu-west-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.56.58.190\" region=\"eu-west-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.56.59.89\" region=\"eu-west-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.47.108.87\" region=\"eu-west-3\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.47.113.10\" region=\"eu-west-3\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.47.92.102\" region=\"eu-west-3\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"15.185.47.44\" region=\"me-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"157.175.138.207\" region=\"me-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"157.175.6.182\" region=\"me-south-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"177.71.187.15\" region=\"sa-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.232.112.38\" region=\"sa-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.232.114.156\" region=\"sa-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.197.240.216\" region=\"us-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.225.105.144\" region=\"us-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"107.22.231.220\" region=\"us-east-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.15.49.139\" region=\"us-east-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.15.84.50\" region=\"us-east-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"52.15.50.30\" region=\"us-east-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"50.18.104.175\" region=\"us-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"50.18.105.39\" region=\"us-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.215.80.72\" region=\"us-west-1\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.244.114.254\" region=\"us-west-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.245.112.93\" region=\"us-west-2\"/>\n  <server type=\"smt\" name=\"smt-ec2.susecloud.net\" ip=\"54.245.101.73\" region=\"us-west-2\"/>\n</servers>\nEOF\n)\n# Run all checks\n check_metadata\n check_hosts\n\n"
        },
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "description": "Checking the file /etc/hosts for multiple records of smt-ec2.susecloud.net",
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckifCurlexists",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n# Billing Code or marketplaceProductCodes is required. Check if the instance has a Billing Code or marketplaceProductCodes\nfunction check_curl_command() {\n    echo \"5. Checking If curl package is installed.\"\n    local Is_Installed=$(which curl)\n    if [[ -n \"${Is_Installed}\" ]] ; then\n     echo \"[Passed] Curl package is installed.\"\n    else   \n    echo \"[Failed] You need to install the curl package to run this SSM automation document AWSSupport-TroubleshootSUSERegistration: sudo zypper in curl\"\n    exit 1\n    fi\n}\ncheck_curl_command\n\n\n"
        }
      },
      "description": "Check if the curl command is installed",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckIMDSAccess",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n# Metadata access is required. Check metadata is accessible\nfunction check_metadata() {\n  echo \"6. Checking if Instance Metadata service (IMDS) 169.254.169.254 is accessible.\"\n  local http_code=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" http://169.254.169.254/latest/meta-data/)\n  local http_code_token=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n  if [ $http_code -eq \"200\" ]; then\n    echo \"[Passed] Instance Meta Data Service(IMDSv1) 169.254.169.254 access is OK.\"\n  elif [ $http_code_token -eq \"200\" ]; then\n    echo \"[Passed] Instance Meta Data Service(IMDSv2) 169.254.169.254 access is OK.\"\n  else\n  echo \"[Failed] PROBLEM: Instance Meta Data Service is not accessible. Fix access to Instance Meta Data Service at 169.254.169.254\"\n  exit 1\n  fi\n}\ncheck_metadata\n\n\n"
        }
      },
      "description": "Metadata service 169.254.169.254 access is required. Checking metadata is accessible.",
      "onFailure": "Continue",
      "maxAttempts": 2,
      "timeoutSeconds": 300
    },
    {
      "name": "CheckOnDemandSUSESubscriptionCode",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n# Function to detect all the proxy information: http_proxy,https_proxy and credentials\nfunction check_proxy() {\n  # Check if proxy is configured in the file /etc/sysconfig/proxy \n  local proxy_enabled=$(cat /etc/sysconfig/proxy | grep -i PROXY_ENABLED | grep -i yes)\n    if [[ -n \"${proxy_enabled}\" ]] ; then\n     http_proxy=$(cat /etc/sysconfig/proxy | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /etc/sysconfig/proxy | grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n       echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n     if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n       no_proxy=$(cat /etc/sysconfig/proxy | grep -i no_proxy | grep \"169.254.169.254\")\n       if [ -n \"${no_proxy}\" ]  ; then      \n       echo \"[Passed] Proxy configuration is OK.\"\n       else\n       echo \"[Failed] You need to configure the instance metadata service IP 169.254.169.254 in the NO_PROXY environment variable in the file /etc/sysconfig/proxy. More information here: https://www.suse.com/support/kb/doc/?id=000017441\"\n       exit 1\n       fi\n     fi    \n    fi\n    # Check if proxy is configured in the file /root/.bashrc\n    elif [ -f /root/.bashrc ] ; then\n     http_proxy=$(cat /root/.bashrc | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /root/.bashrc| grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n     if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n       no_proxy=$(cat /root/.bashrc | grep -i no_proxy | grep \"169.254.169.254\")\n       if [ -n \"${no_proxy}\" ]  ; then      \n       echo \"[Passed] Proxy configuration is OK.\"\n       else\n       echo \"[Failed] You need to configure the instance metadata service IP 169.254.169.254 in the NO_PROXY environment variable in the file /root/.bashrc. More information here : https://www.suse.com/support/kb/doc/?id=000017441\"\n       exit 1\n       fi\n     fi\n    fi\n    else\n     is_proxy=false\n    fi\n\n}\n# Billing Code or marketplaceProductCodes is required. Check if the instance has a Billing Code or marketplaceProductCodes\nfunction check_Ondemand_SUSE_Subscription() {\n  if [[ \"${AWS_SSM_INSTANCE_ID}\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\n    local api_call=\"curl http://169.254.169.254/latest/dynamic/instance-identity/document\"\n    echo \"7. Checking if Billing Code or Marketplace Product Code is available.\"\n    local http_code=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" http://169.254.169.254/latest/meta-data/)\n    local http_code_token=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n    if [ $http_code -eq \"200\" ]; then\n    billing_code=$( $api_call 2>/dev/null | grep -i billingProducts | grep -v null)\n    marketplace_code=$( $api_call 2>/dev/null | grep -i marketplaceProductCodes | grep -v null)\n    else\n    TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" 2>/dev/null `\n    billing_code=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" $api_call 2>/dev/null | grep billingProducts | grep -v null)\n    marketplace_code=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" $api_call 2>/dev/null | grep marketplaceProductCodes | grep -v null)\n    fi\n      if [[ -n \"${billing_code}\" ]] ; then\n      echo \"[Passed] Your EC2 instance has a billing code as AWS On-demand SUSE Subscription to update your EC2 instance.\"\n      elif [[ -n \"${marketplace_code}\" ]] ; then \n      echo \"[Passed] Your EC2 instance has a Marketplace Product Code as AWS On-demand SUSE Subscription to update your EC2 instance.\"\n      else  \n      echo \"[Failed] Your EC2 instance doesn't have neither a Billing Code nor Marketplace Product Code. To solve this issue , you can refer to this article: https://www.suse.com/support/kb/doc/?id=000019601.\"\n      exit 1\n      fi\n    fi\n}\ncheck_proxy\ncheck_Ondemand_SUSE_Subscription\n\n"
        }
      },
      "description": "Billing Code or marketplaceProductCodes is required. Check if the instance has a Billing Code  or marketplaceProductCodes",
      "maxAttempts": 2,
      "onFailure": "Abort",
      "timeoutSeconds": 300
    },
    {
      "name": "AccessRegionServerOverHttps",
      "action": "aws:runCommand",
      "description": "Check if the EC2 instance has access to at least 1 region server over https",
      "inputs": {
        "Parameters": {
          "commands": "#!/bin/bash\n\n# Function to detect all the proxy information: http_proxy,https_proxy and credentials\nfunction check_proxy() {\n\n  # check if proxy is configured here /etc/sysconfig/proxy \n\n  local proxy_enabled=$(cat /etc/sysconfig/proxy | grep -i PROXY_ENABLED | grep -i yes)\n    if [[ -n \"${proxy_enabled}\" ]] ; then\n     http_proxy=$(cat /etc/sysconfig/proxy | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /etc/sysconfig/proxy | grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    # check if proxy is configured here /root/.bashrc\n    elif [ -f /root/.bashrc ] ; then\n     http_proxy=$(cat /root/.bashrc | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /root/.bashrc| grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    else\n     is_proxy=false\n    fi\nif [ \"$is_proxy\" = false ] ; then\n     proxy_credentials=false\nelse\n    curlrc=/root/.curlrc\n    if [ -f $curlrc ] ; then \n      proxy_user=$(cat /root/.curlrc | grep -i proxy-user | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n       if [[ -n \"${proxy_user}\" ]] ; then\n        proxy_credentials=true   \n       else   \n        proxy_credentials=false\n       fi\n    else\n     proxy_credentials=false\n    fi\nfi\n}\n\n# Check if the instance has access to at least 1 region server over https\nfunction check_region_servers() {\n  if [[ \"${AWS_SSM_INSTANCE_ID}\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\n    echo \"8. Checking if the EC2 instance has access to at least 1 region server over https.\"\n    local good_count=0\n    local ssl_count=0\n    local timeout_count=0\n    local req_count=0\n    local regsrv_cnt=0\n    if test -f /etc/regionserverclnt.cfg ; then\n    local regsrv_cnt=$(cat /etc/regionserverclnt.cfg | grep regionsrv | awk {'print $3'} | awk -F '[\\t,]' '{print  NF}')\n    local get_region_servers=\"$(cat /etc/regionserverclnt.cfg | grep regionsrv | awk {'print $3'})\"\n    IFS=', ' read -r -a region_servers <<< \"$get_region_servers\"\n    local company=\"amazon\"\n    local http_code=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" http://169.254.169.254/latest/meta-data/)\n    local http_code_token=$(curl -m 5 -s -o /dev/null -w \"%{http_code}\" -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n    if [ $http_code -eq \"200\" ]; then\n    check_region=$(curl http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null )\n    else\n    TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" 2>/dev/null `\n    check_region=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null )\n    fi\n    for i in \"${region_servers[@]}\"; do\n      if [ \"$is_proxy\" = false ] ; then\n      local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/regionInfo?regionHint=${check_region} --cacert /var/lib/regionService/certs/$i.pem)\n      elif [ \"$is_proxy\" = true ] && [ \"$proxy_credentials\" = true ] ; then\n      local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/regionInfo?regionHint=${check_region} --cacert /var/lib/regionService/certs/$i.pem --proxy $https_proxy --proxy-user $proxy_user )\n      else\n      local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/regionInfo?regionHint=${check_region} --cacert /var/lib/regionService/certs/$i.pem --proxy $https_proxy)\n      fi\n    if [ $https_return_code -eq \"200\" ]; then\n      good_count=$((good_count+1))\n    elif [ $https_return_code -eq \"503\" ]; then\n      ssl_count=$((ssl_count+1))\n    elif [ $https_return_code -eq \"000\" ]; then\n      timeout_count=$((timeout_count+1))\n    else\n      req_count=$((req_count+1))\n    fi\n    done\n\n    if [ $regsrv_cnt -eq $timeout_count ]; then\n    echo \"[Failed] PROBLEM: No access to a region server. Open port 443 for outbound communication to a region server:\"\n    echo \"${region_servers[*]}\"\n    exit 1\n    elif [ $regsrv_cnt -eq $ssl_count ]; then\n    echo \"[Failed] PROBLEM: MITM proxy misconfiguration. Proxy cannot intercept certs in /var/lib/regionService/certs. Please exclude the below IPs from SSL interception in your proxy:\"\n    echo \"${region_servers[*]}\"\n    exit 1\n    elif [ $regsrv_cnt -eq $req_count ]; then\n    echo \"[Failed] PROBLEM: No access to a region server.\"\n    echo \"${region_servers[*]}\"\n    exit 1\n    else\n    echo \"[Passed] Region server access is OK.\"\n    fi\n\n  else\n  echo \"[Failed] PROBLEM: The package regionServiceClientConfigEC2 is not installed in your EC2 Instance. You need to install the package regionServiceClientConfigEC2 and run the Automation document again.\"\n  exit 1\n  fi\nfi\n}\n check_proxy\n check_region_servers \n\n\n"
        },
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckHttpAccessToSMTServers",
      "action": "aws:runCommand",
      "description": "If EC2 instance isn't yet set for https_only, check if outbound traffic over port 80 is open to SMT servers. If it's closed, report and exit.",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n# Function to detect all the proxy information: http_proxy,https_proxy and credentials\nfunction check_proxy() {\n  # check if proxy is configured here /etc/sysconfig/proxy \n   local proxy_enabled=$(cat /etc/sysconfig/proxy | grep -i PROXY_ENABLED | grep -i yes)\n    if [[ -n \"${proxy_enabled}\" ]] ; then\n     http_proxy=$(cat /etc/sysconfig/proxy | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /etc/sysconfig/proxy | grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    # check if proxy is configured here /root/.bashrc\n    elif [ -f /root/.bashrc ] ; then\n     http_proxy=$(cat /root/.bashrc | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /root/.bashrc| grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    else\n     is_proxy=false\n    fi\nif [ \"$is_proxy\" = false ] ; then\n     proxy_credentials=false\nelse\n    curlrc=/root/.curlrc\n    if [ -f $curlrc ] ; then \n      proxy_user=$(cat /root/.curlrc | grep -i proxy-user | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n       if [[ -n \"${proxy_user}\" ]] ; then\n        proxy_credentials=true\n       else\n        proxy_credentials=false\n       fi\n    else\n     proxy_credentials=false\n    fi\nfi\n}\n# If instance isn't yet set for https_only, check if port 80 is open.If not opened, report and exit\nfunction check_http() {\n  echo \"9. Checking if SMT servers are accessible over http\"\n  \n  smt_servers=$(cat /tmp/smtserver)\n  if test -f /etc/regionserverclnt.cfg ; then\n  if (cat /etc/regionserverclnt.cfg | grep -q \"httpsOnly = true\"); then\n\techo \"[Passed] HTTP check is unnecessary. httpsOnly=true. OK\"\n  else\n\tfor i in \"${smt_servers[@]}\"; do\n    local api_call=\"curl -m 5 -s -o /dev/null -w \"%{http_code}\"  http://$i/rmt.crt\"\n    if [ \"$is_proxy\" = false ] ; then\n\t  http_return_code=$( $api_call)\n    elif [ \"$is_proxy\" = true ] && [ \"$proxy_credentials\" = true ] ; then\n    http_return_code=$( $api_call --proxy $http_proxy --proxy-user $proxy_user )\n    else\n    http_return_code=$( $api_call--proxy $http_proxy )\n    fi\n\t  if [ $http_return_code -ne \"200\" ]; then\n        echo \"[Failed] PROBLEM: HTTP access issue. Open port 80 for outbound communication to SMT servers:\"\n        echo \"${smt_servers[*]}\"\n        exit 1\n\t  else \n\t    echo \"[Passed] HTTP access to SMT servers is OK.\"\n\t\tbreak\n\t  fi\n\tdone\t\nfi\nelse\necho \"[Failed] PROBLEM: The package regionServiceClientConfigEC2 is not installed in your EC2 Instance. Try to install the package regionServiceClientConfigEC2 and re-run the Automation document again: sudo zypper in regionServiceClientConfigEC2\"\nexit 1\nfi\n}\n check_proxy\n check_http\n\n\n"
        }
      },
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckHttpsAccessToSMTServers",
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n# Function to detect all the proxy information: http_proxy,https_proxy and credentials\nfunction check_proxy() {\n  # check if proxy is configured here /etc/sysconfig/proxy \n  local proxy_enabled=$(cat /etc/sysconfig/proxy | grep -i PROXY_ENABLED | grep -i yes)\n    if [[ -n \"${proxy_enabled}\" ]] ; then\n\n     http_proxy=$(cat /etc/sysconfig/proxy | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /etc/sysconfig/proxy | grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    # check if proxy is configured here /root/.bashrc\n    elif [ -f /root/.bashrc ] ; then\n     http_proxy=$(cat /root/.bashrc | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /root/.bashrc| grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    else\n     is_proxy=false\n    fi\nif [ \"$is_proxy\" = false ] ; then\n\n     proxy_credentials=false\nelse\n    curlrc=/root/.curlrc\n    if [ -f $curlrc ] ; then \n      proxy_user=$(cat /root/.curlrc | grep -i proxy-user | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n\n       if [[ -n \"${proxy_user}\" ]] ; then\n        proxy_credentials=true   \n       else\n        proxy_credentials=false\n       fi\n    else\n     proxy_credentials=false\n    fi\nfi\n}\n# Check if smt servers are accessible over https\nfunction check_https() {\n  echo \"10. Checking if SMT servers are accessible over https.\"\n  smt_servers=$(cat /tmp/smtserver)\n  if test -f /etc/regionserverclnt.cfg ; then\n  for i in \"${smt_servers[@]}\"; do\n    if [ \"$is_proxy\" = false ] ; then\n    local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/api/health/status)\n    elif [ \"$is_proxy\" = true ] && [ \"$proxy_credentials\" = true ] ; then\n    local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/api/health/status --proxy $https_proxy --proxy-user $proxy_user ) \n    else\n    local https_return_code=$(curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://$i/api/health/status --proxy $https_proxy )\n    fi\n\tif [ $https_return_code -eq \"000\" ]; then\n\t  echo \"[Failed] PROBLEM: HTTPS access issue. Open port 443 for outbound communication to SMT servers:\"\n\t  echo \"${smt_servers[*]}\"\n    exit 1\n  elif [ $https_return_code -eq \"503\" ]; then\n  \t  echo \"[Failed] PROBLEM: MITM proxy misconfiguration. Proxy cannot intercept certs of the SMT Servers.Please exclude the below IPs from SSL interception in your proxy:\"\n\t  echo \"${smt_servers[*]}\"\n    exit 1\n\telse\n      echo \"[Passed] HTTPS access to the SMT servers is OK.\"\n\t  break\n\tfi\n  done\n  else\n  echo  \"[Failed] PROBLEM: The package regionServiceClientConfigEC2 is not installed in your EC2 Instance. You need to install the package regionServiceClientConfigEC2 and re-run the Automation document again.\"\n  exit 1\n  fi\n}\n\n check_proxy\n check_https\n\n\n"
        }
      },
      "description": "Check if SMT servers are accessible over https",
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "CheckHttpsCertificationOfTheSMTServers",
      "action": "aws:runCommand",
      "description": "Check if smt-ec2.susecloud.net is accessible over https",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n\n# Function to detect all the proxy information: http_proxy,https_proxy and credentials\nfunction check_proxy() {\n  # check if proxy is configured here /etc/sysconfig/proxy \n  local proxy_enabled=$(cat /etc/sysconfig/proxy | grep -i PROXY_ENABLED | grep -i yes)\n    if [[ -n \"${proxy_enabled}\" ]] ; then\n     http_proxy=$(cat /etc/sysconfig/proxy | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /etc/sysconfig/proxy | grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n    echo \"${http_proxy}\" | grep -o '[0-9]\\+[.][0-9]\\+[.][0-9]\\+[.][0-9]\\+' > /dev/null 2>&1 || echo \"${http_proxy}\" | grep -P '(?:https?:\\/\\/)' > /dev/null 2>&1\n\n    if [[ $? -eq 0 ]] ; then \n     is_proxy=true\n    fi\n    else\n     is_proxy=false\n    fi\n    # check if proxy is configured here /root/.bashrc\n    elif [ -f /root/.bashrc ] ; then\n     http_proxy=$(cat /root/.bashrc | grep -i http_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n     https_proxy=$(cat /root/.bashrc| grep -i https_proxy | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n    if [[ -n \"${http_proxy}\" ]] && [[ -n \"${https_proxy}\" ]]  ; then\n     is_proxy=true\n    else\n     is_proxy=false\n    fi\n    else\n     is_proxy=false\n    fi\nif [ \"$is_proxy\" = false ] ; then\n     proxy_credentials=false\nelse\n    curlrc=/root/.curlrc\n    if [ -f $curlrc ] ; then \n      proxy_user=$(cat /root/.curlrc | grep -i proxy-user | awk -F \"=\" '{ print $2 }' | sed -e \"s/\\\"//g\" | sed -e \"s/ //g\")\n       if [[ -n \"${proxy_user}\" ]] ; then\n        proxy_credentials=true\n       else  \n        proxy_credentials=false\n       fi\n    else\n     proxy_credentials=false\n    fi\nfi\n\n}\n# Clean up the temporarily file /tmp/smtpserver\nfunction remove_tmp_file(){\nsudo rm -rf /tmp/smtserver\n}\n\n# Check if smt-ec2.susecloud.net is accessible over https\nfunction check_https_cert() {\n  echo \"11. Checking if smt-ec2.susecloud.net URL is accessible over https.\"\n  filename=$( ls -Art /usr/share/pki/trust/anchors/ | tail -n 1)\n  local api_call=\"curl -k -m 5 -s -o /dev/null -w \"%{http_code}\" https://smt-ec2.susecloud.net/api/health/status\"\n  if [ \"$is_proxy\" = false ] ; then\n   \n  local https_return_code=$( $api_call --cacert /usr/share/pki/trust/anchors/$filename)\n  elif [ \"$is_proxy\" = true ] && [ \"$proxy_credentials\" = true ] ; then\n  local https_return_code=$( $api_call --cacert /usr/share/pki/trust/anchors/$filename --proxy $https_proxy --proxy-user $proxy_user )\n  else\n  local https_return_code=$( $api_call --cacert /usr/share/pki/trust/anchors/$filename --proxy $https_proxy)\n  fi\n \n  if [ $https_return_code -eq \"000\" ]; then\n    local smt_ip=\"$(getent hosts smt-ec2.susecloud.net | awk {'print $1'})\"\n    echo \"[Failed] PROBLEM: You need to add the domain smt-ec2.susecloud.net in the /etc/hosts in your proxy to be able to resolve the domain name smt-ec2.susecloud.net to one of the SMT servers IPs as : $smt_ip smt-ec2.susecloud.net   smt-ec2  \"\n    exit 1\n  elif [ $https_return_code -eq \"503\" ]; then\n    echo \"[Failed] PROBLEM: You need to white-list the domain name smt-ec2.susecloud.net from the SSL interception in your proxy or firewall.\"\n    exit 1\n  else\n      echo \"[Passed] SMT certification is OK.\" \n  fi\n\n}\n check_proxy\n remove_tmp_file\n check_https_cert\n\n\n"
        }
      },
      "onFailure": "Continue",
      "timeoutSeconds": 300
    },
    {
      "name": "RegisterInstanceToSUSEUpdateInfrastructure",
      "action": "aws:runCommand",
      "description": "Force the client to register to SMT again",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": "#!/bin/bash\n# Force the client to register to SMT again\n#######################################\nfunction registercloudguestnow() {\nSUSEConnect --cleanup\nsed -i '/^# Added by SMT reg/,+1d' /etc/hosts\n/usr/sbin/registercloudguest --force-new > /dev/null 2>&1\n}  \n\n# Register the ec2 instance to SUSE Update Infrastructure \nfunction report() {\necho  \"12. Register the EC2 Instance to SUSE Update Infrastructure. Running registercloudguest...\"\nregistercloudguestnow\nSUSEConnect -s | grep -qi \"Not Registered\"\nif [ $? -eq 0 ] ; then\necho  \"[Failed] Your EC2 instance is Not Registered to SUSE Update Infrastructure. Please Contact AWS Support to fix the issue.\"\nexit 1\nelse\necho  \"[Passed] Your EC2 instance is Registered to SUSE Update Infrastructure.\"\nfi\n}\n\nreport\n\n"
        }
      },
      "timeoutSeconds": 300
    },
    {
      "name": "FinalOutput",
      "action": "aws:executeScript",
      "description": "Consolidates the results of all steps and generates a report on the passed and failed checks.",
      "onFailure": "Abort",
      "isEnd": "true",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "script_handler",
        "InputPayload": {
          "Os": "{{ConfirmSuseOS.Output}}",
          "PackageVersion": "{{CheckcloudregionsrvclientpackageVersion.Output}}",
          "BaseProduct": "{{CheckBaseProduct.Output}}",
          "HostFile": "{{CheckHostsFileForMultipleRecords.Output}}",
          "Curl": "{{CheckifCurlexists.Output}}",
          "IMDS": "{{CheckIMDSAccess.Output}}",
          "SubscriptionCode": "{{CheckOnDemandSUSESubscriptionCode.Output}}",
          "RegionServer": "{{AccessRegionServerOverHttps.Output}}",
          "HTTPSMT": "{{CheckHttpAccessToSMTServers.Output}}",
          "HTTPSSMT": "{{CheckHttpsAccessToSMTServers.Output}}",
          "CertificationSMT": "{{CheckHttpsCertificationOfTheSMTServers.Output}}",
          "Registered": "{{RegisterInstanceToSUSEUpdateInfrastructure.Output}}"
        },
        "Script": "def script_handler(events, context):\n   import json\n\n   #Capturing other steps output.\n\n   Heading = \"Total Number of Tests: 12\\n\\n\"\n   Os = events['Os']\n   PackageVersion = events['PackageVersion']\n   BaseProduct = events['BaseProduct']\n   HostFile = events['HostFile']\n   curl = events['Curl']\n   IMDS = events['IMDS']\n   SubscriptionCode = events['SubscriptionCode']\n   RegionServer = events['RegionServer']\n   HTTPSMT = events['HTTPSMT']\n   HTTPSSMT = events['HTTPSSMT']\n   CertificationSMT = events['CertificationSMT']\n   Registered = events['Registered']\n\n   stepsHeaders = [\"\\n\",\n              \"\\n \\n\"\n   ]\n\n   Result = Heading + stepsHeaders[0] + Os + stepsHeaders[1] + PackageVersion + stepsHeaders[1] + BaseProduct + stepsHeaders[1] + HostFile + stepsHeaders[1] + curl + stepsHeaders[1] + IMDS + stepsHeaders[1] + SubscriptionCode + stepsHeaders[1] + RegionServer + stepsHeaders[1] + HTTPSMT + stepsHeaders[1] + HTTPSSMT + stepsHeaders[1] + CertificationSMT + stepsHeaders[1] + Registered\n\n   return {'output': Result}\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ]
}
