{
  "description": "### Document name - AWSQuickSetupType-EnableDHMC\n\n## What does this document do?\nThis document enables the Default Host Management Configuration feature of Systems Manager using default settings.\n\n## Who should use this document?\nThis document is intended for use only by AWS Services and features, such as AWS Systems Manager. Customers should not execute or orchestrate the execution of this document on their own, as that is not supported by AWS.\n\n## Supported Versions\nThe $LATEST or $DEFAULT document version must be provided when executing this document. Using specific version numbers is not supported as this document does not retain historical versions.\n\n## Input Parameters\n* AutomationAssumeRole: The ARN of the role that allows Systems Manager Automation to perform actions on your behalf.\n\n## Output Paramaters\nNone\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "name": "enableDHMC",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "InputPayload": {
          "AWS_REGION": "{{ global:REGION }}",
          "AWS_PARTITION": "{{global:AWS_PARTITION}}"
        },
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# Licensed under the Apache License, Version 2.0 (the 'License'). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#     http://aws.amazon.com/apache2.0/\n# or in the 'license' file accompanying this file. This file is\n# distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\n\nimport boto3\nimport math\nimport random\nimport time\nimport json\nfrom botocore.exceptions import ClientError\n\niam_client = boto3.client('iam')\nssm_client = boto3.client('ssm')\n\nretry_amount = 5\n\ndef random_between(min, max):\n    return math.floor(random.random() * (max - min + 1) + min)\n\n\ndef jittered_sleep_time():\n    '''\n    Returns a randomized, jittered number of milliseconds between 500 and 1500 to sleep\n    '''\n    base = 500  # the lower limit for sleep time in milliseconds\n    cap = 1500  # the upper limit for sleep time in milliseconds\n    return min(cap, random_between(base, base * 3)) / 1000\n\n\ndef create_role(role_name, assume_role_policy, description):\n    print(f'Attempting to create Role {role_name}')\n    max_retries = 30\n    for i in range(max_retries):\n        try:\n            iam_client.create_role(\n                RoleName=role_name,\n                AssumeRolePolicyDocument=assume_role_policy,\n                Description=description,\n            )\n            print(f'Creating Role {role_name}')\n            waiter = iam_client.get_waiter('role_exists')\n            waiter.wait(\n                RoleName=role_name\n            )\n            print(f'Role {role_name} created')\n            return\n\n        except ClientError as e:\n            if e.response['Error']['Code'] == 'EntityAlreadyExists':\n                print(f'Role {role_name} already exists. Reusing the Role')\n                return\n            elif e.response['Error']['Code'] == 'ConcurrentModification' and i < max_retries - 1:\n                print(\n                    f'Attempt {i+1} of {max_retries} to create Role {role_name} failed due to concurrent modification error. Retrying')\n                time.sleep(jittered_sleep_time())\n            else:\n                print(f'Failed to create Role {role_name}. {e}')\n                raise e\n\n\ndef attach_role_policy(role_name, managed_policy_arn):\n    try:\n        print(f'Attaching Policy {managed_policy_arn} to Role {role_name}')\n        iam_client.attach_role_policy(\n            RoleName=role_name, PolicyArn=managed_policy_arn)\n        print('Policy attached successfully')\n    except ClientError as e:\n        print(f'Policy failed to be attached. {e}')\n        raise e\n\n\ndef get_setting_value(setting_id, retries):\n    try:\n        print(f'Retrieving SettingValue for SettingId {setting_id}')\n        setting_value = ssm_client.get_service_setting(SettingId=setting_id).get(\n            'ServiceSetting', {}).get('SettingValue')\n        print(f'SettingValue retrieved: {setting_value}')\n        return setting_value\n    except ClientError as err:\n        if retries > 0:\n            print('Connection Error retrying...')\n            return get_setting_value(setting_id, retries - 1)\n        raise err\n\n\ndef update_service_setting(setting_id, setting_value, retries):\n    try:\n        print(f'Updating SettingValue for SettingId {setting_id}')\n        ssm_client.update_service_setting(\n            SettingId=setting_id,\n            SettingValue=setting_value\n        )\n        print('SettingValue updated')\n    except ClientError as err:\n        if retries > 0:\n            print('Connection Error retrying...')\n            update_service_setting(setting_id, setting_value, retries - 1)\n        raise err\n\n\ndef get_and_update_service_setting(setting_id, setting_value):\n    current_setting_value = get_setting_value(setting_id, retry_amount)\n    if current_setting_value != '$None':\n        print('Skipping the service setting update as the current SettingValue is not equal to $None')\n        return\n\n    max_retries = 5\n    counter = 1\n    while current_setting_value != setting_value:\n        if counter <= max_retries:\n            update_service_setting(setting_id, setting_value, retry_amount)\n            counter += 1\n            time.sleep(2)\n            current_setting_value = get_setting_value(setting_id, retry_amount)\n        else:\n            raise ValueError('Could not update the service setting')\n\n\ndef script_handler(event, context):\n    partition = event['AWS_PARTITION']\n    current_region = event['AWS_REGION']\n    role_name = f'AWS-QuickSetup-SSM-DefaultEC2MgmtRole-{current_region}'\n    managed_policy_arn = f'arn:{partition}:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy'\n    setting_id = '/ssm/managed-instance/default-ec2-instance-management-role'\n    description = 'Do Not Modify or Delete. This resource has been created to support the deployment of DHMC Quick Setup configuration, and modification or deletion of this resource may hinder the functionality of that Quick Setup configuration.'\n    dhmc_assume_role_policy = json.dumps({\n        'Version': '2012-10-17',\n        'Statement': [\n            {\n                'Effect': 'Allow',\n                'Principal': {\n                    'Service': 'ssm.amazonaws.com'\n                },\n                'Action': 'sts:AssumeRole'\n            }\n        ]\n    })\n\n    try:\n        create_role(role_name, dhmc_assume_role_policy, description)\n        attach_role_policy(role_name, managed_policy_arn)\n        get_and_update_service_setting(setting_id, role_name)\n        print('Success!')\n\n    except Exception as e:\n        print(f'{e}')\n        raise e"
      }
    }
  ]
}
