{
  "description": "The **AWSSupport-TroubleshootSessionManager** runbook helps troubleshoot common issues when connecting to a managed Amazon Elastic Compute Cloud (Amazon EC2) instance using AWS Systems Manager Session Manager. This runbook checks the following:\n\n> * Checks whether the instance is running and reporting as managed by AWS Systems Manager.\n> * Runs the **AWSSupport-TroubleshootManagedInstance** runbook if the instance is not reporting as managed by AWS Systems Manager.\n> * Checks the version of the SSM Agent installed on the instance.\n> * Checks whether an instance profile containing the recommended AWS Identity and Access Management (IAM) policy for Session Manager is attached to the Amazon EC2 instance IAM profile.\n> * Collects diagnostics output from [ssm-cli](https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-cli.html) from the instance at the OS level.\n> * Analyzes the AWS Systems Manager Session Manager preferences.\n> * Runs the **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook to analyze the instance's connectivity to the required endpoints for Session Manager, AWS Key Management Service (AWS KMS), Amazon Simple Storage Service (Amazon S3), and Amazon CloudWatch Logs (CloudWatch Logs).\n\n### Important:\n\n> * Hybrid managed nodes are not supported.\n> * This runbook only checks whether a recommended managed IAM policy is attached to the instance profile, it does not analyze IAM or AWS KMS permissions contained in the IAM instance profile.\n> * The **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook uses [VPC Reachability Analyzer](https://docs.aws.amazon.com/vpc/latest/reachability/what-is-reachability-analyzer.html) to analyze the network connectivity between a source and a service endpoint. You are charged per analysis run between a source and destination. For more information, see the **Network Analysis** section in [Amazon VPC Pricing](http://aws.amazon.com/vpc/pricing/).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "generateReport.EvalReport"
  ],
  "parameters": {
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "allowedPattern": "^i-[a-z0-9]{8,17}$",
      "description": "(Required) The ID of the Amazon EC2 instance that you are unable to connect to using Session Manager."
    },
    "SessionPreferenceDocument": {
      "type": "String",
      "allowedPattern": "^[a-zA-Z0-9_\\-.:/]{3,200}$",
      "description": "(Optional) The name of the Session Manager preferences document. If you don't specify a custom session preferences document when starting sessions, use the default value `SSM-SessionManagerRunShell`.",
      "default": "SSM-SessionManagerRunShell"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "checkEC2InstanceStatusCheck",
      "description": "Checks if the target EC2 instance status is `ok` or `initializing`.",
      "isCritical": false,
      "onFailure": "Continue",
      "action": "aws:assertAwsResourceProperty",
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.InstanceStatuses[0].InstanceStatus.Status",
        "DesiredValues": [
          "ok",
          "initializing"
        ]
      },
      "nextStep": "waitForEC2InstanceStatusCheck"
    },
    {
      "name": "waitForEC2InstanceStatusCheck",
      "description": "Waits for up to 10 minutes for the target EC2 instance to pass status checks.",
      "isCritical": false,
      "onFailure": "Abort",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 120,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.InstanceStatuses[0].InstanceStatus.Status",
        "DesiredValues": [
          "ok"
        ]
      },
      "nextStep": "getSessionPreferences"
    },
    {
      "name": "getSessionPreferences",
      "description": "Parses the Session Manager session preference document.",
      "isCritical": true,
      "onFailure": "Abort",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_session_preferences.script_handler",
        "InputPayload": {
          "SessionDocument": "{{ SessionPreferenceDocument }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "S3BucketName",
          "Selector": "$.Payload.s3BucketName",
          "Type": "String"
        },
        {
          "Name": "S3BucketPrefix",
          "Selector": "$.Payload.s3KeyPrefix",
          "Type": "String"
        },
        {
          "Name": "CloudWatchLogGroupName",
          "Selector": "$.Payload.cloudWatchLogGroupName",
          "Type": "String"
        },
        {
          "Name": "KMSKeyId",
          "Selector": "$.Payload.kmsKeyId",
          "Type": "String"
        },
        {
          "Name": "RunAsEnabled",
          "Selector": "$.Payload.runAsEnabled",
          "Type": "Boolean"
        },
        {
          "Name": "RunAsUser",
          "Selector": "$.Payload.runAsDefaultUser",
          "Type": "String"
        }
      ],
      "nextStep": "getEC2InstanceProfile"
    },
    {
      "name": "getEC2InstanceProfile",
      "description": "Gets the ARN of the instance profile attached to the instance.",
      "isCritical": true,
      "onFailure": "Abort",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "InstanceProfile",
          "Selector": "$.Reservations[0].Instances[0].IamInstanceProfile.Arn",
          "Type": "String"
        }
      ],
      "nextStep": "getInstanceInformationFromSSM"
    },
    {
      "name": "getInstanceInformationFromSSM",
      "description": "Checks whether the instance is reporting as managed by AWS Systems Manager.",
      "isCritical": true,
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "maxAttempts": 2,
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "PingStatus",
          "Selector": "$.InstanceInformationList[0].PingStatus",
          "Type": "String"
        },
        {
          "Name": "AgentVersion",
          "Selector": "$.InstanceInformationList[0].AgentVersion",
          "Type": "String"
        },
        {
          "Name": "IsLatestVersion",
          "Selector": "$.InstanceInformationList[0].IsLatestVersion",
          "Type": "Boolean"
        },
        {
          "Name": "Platform",
          "Selector": "$.InstanceInformationList[0].PlatformType",
          "Type": "String"
        },
        {
          "Name": "LastPingTime",
          "Selector": "$.InstanceInformationList[0].LastPingDateTime",
          "Type": "String"
        }
      ],
      "nextStep": "branchOnManagedInstancePingStatus"
    },
    {
      "name": "branchOnManagedInstancePingStatus",
      "description": "Branches based on whether the instance is reporting as managed by AWS Systems Manager.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "evalSSMAgentVersion",
            "Variable": "{{ getInstanceInformationFromSSM.PingStatus }}",
            "StringEquals": "Online"
          }
        ],
        "Default": "runTroubleshootManagedInstanceAutomation"
      },
      "isEnd": false
    },
    {
      "name": "evalSSMAgentVersion",
      "description": "Checks if the SSM Agent installed on the instance supports Session Manager.",
      "isCritical": true,
      "onFailure": "Abort",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "eval_ssm_agent_version.script_handler",
        "InputPayload": {
          "AgentVersion": "{{ getInstanceInformationFromSSM.AgentVersion }}",
          "IsLatestVersion": "{{ getInstanceInformationFromSSM.IsLatestVersion }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "EvalResult",
          "Selector": "$.Payload.result",
          "Type": "String"
        },
        {
          "Name": "CliDebugSupport",
          "Selector": "$.Payload.cliDebugSupport",
          "Type": "Boolean"
        }
      ],
      "nextStep": "branchOnToRunSSMAgentDiagnosticsLogs"
    },
    {
      "name": "branchOnToRunSSMAgentDiagnosticsLogs",
      "description": "Branches based on the instance platform to collect the `ssm-cli` logs.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ getInstanceInformationFromSSM.Platform }}",
                "StringEquals": "Linux"
              },
              {
                "Variable": "{{ evalSSMAgentVersion.CliDebugSupport }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "getAgentDiagnosticsLinux"
          },
          {
            "And": [
              {
                "Variable": "{{ getInstanceInformationFromSSM.Platform }}",
                "StringEquals": "MacOS"
              },
              {
                "Variable": "{{ evalSSMAgentVersion.CliDebugSupport }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "getAgentDiagnosticsLinux"
          },
          {
            "And": [
              {
                "Variable": "{{ getInstanceInformationFromSSM.Platform }}",
                "StringEquals": "Windows"
              },
              {
                "Variable": "{{ evalSSMAgentVersion.CliDebugSupport }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "getAgentDiagnosticsWindows"
          }
        ],
        "Default": "parseAgentDiagnosticsLogs"
      },
      "isEnd": false
    },
    {
      "name": "getAgentDiagnosticsLinux",
      "description": "Collects logs output from `ssm-cli` from a Linux or macOS instance.",
      "isCritical": false,
      "onFailure": "step:parseAgentDiagnosticsLogs",
      "timeoutSeconds": 600,
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "executionTimeout": "60",
          "commands": [
            "#!/bin/bash",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Path to the ssm-cli executable",
            "ssmCliPath=\"/usr/bin/ssm-cli\"",
            "",
            "# Run ssm-cli get-diagnostics",
            "$ssmCliPath get-diagnostics"
          ]
        },
        "Comment": "Sent by SSM automation execution {{ automation:EXECUTION_ID }}",
        "TimeoutSeconds": 600
      },
      "nextStep": "parseAgentDiagnosticsLogs"
    },
    {
      "name": "getAgentDiagnosticsWindows",
      "description": "Collects logs output from `ssm-cli` from a Windows instance.",
      "isCritical": false,
      "onFailure": "step:parseAgentDiagnosticsLogs",
      "timeoutSeconds": 600,
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "executionTimeout": "60",
          "commands": [
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "& \"C:\\Program Files\\Amazon\\SSM\\ssm-cli.exe\" get-diagnostics",
            ""
          ]
        },
        "Comment": "Sent by SSM automation execution {{ automation:EXECUTION_ID }}",
        "TimeoutSeconds": 600
      },
      "nextStep": "parseAgentDiagnosticsLogs"
    },
    {
      "name": "parseAgentDiagnosticsLogs",
      "description": "Parses the `ssm-cli` output logs.",
      "isCritical": true,
      "onFailure": "Abort",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "parse_agent_diagnostics_logs.script_handler",
        "InputPayload": {
          "AgentDiagnosticsLinOut": "{{ getAgentDiagnosticsLinux.Output }}",
          "AgentDiagnosticsLinStat": "{{ getAgentDiagnosticsLinux.Status }}",
          "AgentDiagnosticsWinOut": "{{ getAgentDiagnosticsWindows.Output }}",
          "AgentDiagnosticsWinStat": "{{ getAgentDiagnosticsWindows.Status }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "SessionManagerConnectivity",
          "Type": "String",
          "Selector": "$.Payload.ssmmessagesConnectivity"
        },
        {
          "Name": "S3Connectivity",
          "Type": "String",
          "Selector": "$.Payload.s3Connectivity"
        },
        {
          "Name": "KMSConnectivity",
          "Type": "String",
          "Selector": "$.Payload.kmsConnectivity"
        },
        {
          "Name": "CloudWatchLogsConnectivity",
          "Type": "String",
          "Selector": "$.Payload.logsConnectivity"
        }
      ],
      "nextStep": "evalInstanceProfile"
    },
    {
      "name": "evalInstanceProfile",
      "description": "Checks if a recommended IAM policy is attached to the instance profile.",
      "isCritical": true,
      "onFailure": "Continue",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "eval_instance_profile.script_handler",
        "InputPayload": {
          "InstanceProfile": "{{ getEC2InstanceProfile.InstanceProfile }}",
          "InstanceId": "{{ InstanceId }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "EvalResult",
          "Selector": "$.Payload.result",
          "Type": "String"
        }
      ],
      "nextStep": "branchOnSessionManagerEndpointConnectivity"
    },
    {
      "name": "branchOnSessionManagerEndpointConnectivity",
      "description": "Determines whether to evaluate the `ssmmessages` endpoint connectivity based on `ssm-cli` logs.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "checkSessionManagerEndpointConnectivity",
            "Not": {
              "Variable": "{{ parseAgentDiagnosticsLogs.SessionManagerConnectivity }}",
              "StringEquals": "Success"
            }
          }
        ],
        "Default": "branchOnS3EndpointConnectivity"
      },
      "isEnd": false
    },
    {
      "name": "checkSessionManagerEndpointConnectivity",
      "description": "Checks if the instance can connect to the `ssmmessages` endpoint.",
      "isCritical": true,
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2",
        "RuntimeParameters": {
          "Source": "{{ InstanceId }}",
          "ServiceEndpoint": "ssmmessages.{{ global:REGION }}.amazonaws.com",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "branchOnS3EndpointConnectivity"
    },
    {
      "name": "branchOnS3EndpointConnectivity",
      "description": "Determines whether to evaluate Amazon S3 endpoint connectivity based on the `ssm-cli` logs and the Session Manager session preferences.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Not": {
                  "Variable": "{{ parseAgentDiagnosticsLogs.S3Connectivity }}",
                  "StringEquals": "Success"
                }
              },
              {
                "Not": {
                  "Variable": "{{ getSessionPreferences.S3BucketName }}",
                  "StringEquals": ""
                }
              }
            ],
            "NextStep": "checkS3EndpointConnectivity"
          }
        ],
        "Default": "branchOnKMSEndpointConnectivity"
      },
      "isEnd": false
    },
    {
      "name": "checkS3EndpointConnectivity",
      "description": "Checks if the instance can connect to an Amazon S3 endpoint.",
      "isCritical": true,
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2",
        "RuntimeParameters": {
          "Source": "{{ InstanceId }}",
          "ServiceEndpoint": "s3.{{ global:REGION }}.amazonaws.com",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "branchOnKMSEndpointConnectivity"
    },
    {
      "name": "branchOnKMSEndpointConnectivity",
      "description": "Determines whether to evaluate AWS KMS endpoint connectivity based on `ssm-cli` logs and the Sessions Manager session preferences.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Not": {
                  "Variable": "{{ parseAgentDiagnosticsLogs.KMSConnectivity }}",
                  "StringEquals": "Success"
                }
              },
              {
                "Not": {
                  "Variable": "{{ getSessionPreferences.KMSKeyId }}",
                  "StringEquals": ""
                }
              }
            ],
            "NextStep": "checkKMSEndpointConnectivity"
          }
        ],
        "Default": "branchOnCloudWatchLogsEndpointConnectivity"
      },
      "isEnd": false
    },
    {
      "name": "checkKMSEndpointConnectivity",
      "description": "Checks if the instance can connect to an AWS KMS endpoint.",
      "isCritical": true,
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2",
        "RuntimeParameters": {
          "Source": "{{ InstanceId }}",
          "ServiceEndpoint": "kms.{{ global:REGION }}.amazonaws.com",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "branchOnCloudWatchLogsEndpointConnectivity"
    },
    {
      "name": "branchOnCloudWatchLogsEndpointConnectivity",
      "description": "Determines whether to evaluate CloudWatch Logs endpoint connectivity based on `ssm-cli` logs and the Session Manager session preferences.",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Not": {
                  "Variable": "{{ parseAgentDiagnosticsLogs.CloudWatchLogsConnectivity }}",
                  "StringEquals": "Success"
                }
              },
              {
                "Not": {
                  "Variable": "{{ getSessionPreferences.CloudWatchLogGroupName }}",
                  "StringEquals": ""
                }
              }
            ],
            "NextStep": "checkCloudWatchLogsEndpointConnectivity"
          }
        ],
        "Default": "generateReport"
      },
      "isEnd": false
    },
    {
      "name": "checkCloudWatchLogsEndpointConnectivity",
      "description": "Checks if the instance can connect to an Amazon CloudWatch Logs endpoint.",
      "isCritical": true,
      "onFailure": "step:generateReport",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2",
        "RuntimeParameters": {
          "Source": "{{ InstanceId }}",
          "ServiceEndpoint": "logs.{{ global:REGION }}.amazonaws.com",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "generateReport"
    },
    {
      "name": "runTroubleshootManagedInstanceAutomation",
      "description": "Runs the AWSSupport-TroubleshootManagedInstance runbook.",
      "isCritical": true,
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSSupport-TroubleshootManagedInstance",
        "RuntimeParameters": {
          "InstanceId": "{{ InstanceId }}",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "generateReport"
    },
    {
      "name": "generateReport",
      "description": "Compiles the output of the previous steps and outputs a report.",
      "isCritical": true,
      "onFailure": "Abort",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "generate_report.script_handler",
        "InputPayload": {
          "Instance": "{{ InstanceId }}",
          "PingStatus": "{{ getInstanceInformationFromSSM.PingStatus }}",
          "Platform": "{{ getInstanceInformationFromSSM.Platform }}",
          "LastPingTime": "{{ getInstanceInformationFromSSM.LastPingTime }}",
          "AgentDiagSsmmessagesConnectivity": "{{ parseAgentDiagnosticsLogs.SessionManagerConnectivity }}",
          "AgentDiagS3Connectivity": "{{ parseAgentDiagnosticsLogs.S3Connectivity }}",
          "AgentDiagCloudWatchLogsConnectivity": "{{ parseAgentDiagnosticsLogs.CloudWatchLogsConnectivity }}",
          "AgentDiagKMSConnectivity": "{{ parseAgentDiagnosticsLogs.KMSConnectivity }}",
          "S3Bucket": "{{ getSessionPreferences.S3BucketName }}",
          "CloudWatchLogGroup": "{{ getSessionPreferences.CloudWatchLogGroupName }}",
          "KMSKey": "{{ getSessionPreferences.KMSKeyId }}",
          "RunAsStatus": "{{ getSessionPreferences.RunAsEnabled }}",
          "RunAsUser": "{{ getSessionPreferences.RunAsUser }}",
          "SSMAgentVersionEvalResult": "{{ evalSSMAgentVersion.EvalResult }}",
          "InstanceProfileEvalResult": "{{ evalInstanceProfile.EvalResult }}",
          "AutomationExecutionId": "{{ automation:EXECUTION_ID }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "EvalReport",
          "Type": "String",
          "Selector": "$.Payload.result"
        }
      ],
      "isEnd": true
    }
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "10cceefd4ed0aff7534484bf8b5654f824beef26104e52696a1bd0e692a9c0e6"
      }
    }
  }
}
