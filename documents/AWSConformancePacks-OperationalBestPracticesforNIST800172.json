{
  "schemaVersion": "1.0",
  "description": "Operational Best Practices for NIST 800-172",
  "templateBody": {
    "Parameters": {
      "IamPasswordPolicyParamMaxPasswordAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMinimumPasswordLength": {
        "Default": "8",
        "Type": "String"
      },
      "IamPasswordPolicyParamPasswordReusePrevention": {
        "Default": "24",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireLowercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireNumbers": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireSymbols": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireUppercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Default": "TRUE",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort1": {
        "Default": "20",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort2": {
        "Default": "21",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort3": {
        "Default": "3389",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort4": {
        "Default": "3306",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort5": {
        "Default": "4333",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Default": "True",
        "Type": "String"
      },
      "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts": {
        "Default": "443",
        "Type": "String"
      }
    },
    "Resources": {
      "AlbHttpDropInvalidHeaderEnabled": {
        "Properties": {
          "ConfigRuleName": "alb-http-drop-invalid-header-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancingV2::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ALB_HTTP_DROP_INVALID_HEADER_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AlbHttpToHttpsRedirectionCheck": {
        "Properties": {
          "ConfigRuleName": "alb-http-to-https-redirection-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwSslEnabled": {
        "Properties": {
          "ConfigRuleName": "api-gw-ssl-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_SSL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AutoscalingLaunchConfigPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "autoscaling-launch-config-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::AutoScaling::LaunchConfiguration"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailCloudWatchLogsEnabled": {
        "Properties": {
          "ConfigRuleName": "cloud-trail-cloud-watch-logs-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailLogFileValidationEnabled": {
        "Properties": {
          "ConfigRuleName": "cloud-trail-log-file-validation-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudwatchAlarmActionCheck": {
        "Properties": {
          "ConfigRuleName": "cloudwatch-alarm-action-check",
          "InputParameters": {
            "alarmActionRequired": "TRUE",
            "insufficientDataActionRequired": "TRUE",
            "okActionRequired": "FALSE"
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CloudWatch::Alarm"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUDWATCH_ALARM_ACTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DmsReplicationNotPublic": {
        "Properties": {
          "ConfigRuleName": "dms-replication-not-public",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DMS_REPLICATION_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsSnapshotPublicRestorableCheck": {
        "Properties": {
          "ConfigRuleName": "ebs-snapshot-public-restorable-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceDetailedMonitoringEnabled": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-detailed-monitoring-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_DETAILED_MONITORING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceManagedBySsm": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-managed-by-systems-manager",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance",
              "AWS::SSM::ManagedInstanceInventory"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_MANAGED_BY_SSM"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstanceAssociationComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-association-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::AssociationCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstancePatchComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-patch-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::PatchCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2StoppedInstance": {
        "Properties": {
          "ConfigRuleName": "ec2-stopped-instance",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_STOPPED_INSTANCE"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2VolumeInuseCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-volume-inuse-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Volume"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_VOLUME_INUSE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EipAttached": {
        "Properties": {
          "ConfigRuleName": "eip-attached",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::EIP"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EIP_ATTACHED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticBeanstalkManagedUpdatesEnabled": {
        "Properties": {
          "ConfigRuleName": "elastic-beanstalk-managed-updates-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticBeanstalk::Environment"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTIC_BEANSTALK_MANAGED_UPDATES_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchInVpcOnly": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-in-vpc-only",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_IN_VPC_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchNodeToNodeEncryptionCheck": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-node-to-node-encryption-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Elasticsearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbAcmCertificateRequired": {
        "Properties": {
          "ConfigRuleName": "elb-acm-certificate-required",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_ACM_CERTIFICATE_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElbTlsHttpsListenersOnly": {
        "Properties": {
          "ConfigRuleName": "elb-tls-https-listeners-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancing::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELB_TLS_HTTPS_LISTENERS_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Elbv2AcmCertificateRequired": {
        "Properties": {
          "ConfigRuleName": "elbv2-acm-certificate-required",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELBV2_ACM_CERTIFICATE_REQUIRED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EmrMasterNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "emr-master-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EMR_MASTER_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "GuarddutyEnabledCentralized": {
        "Properties": {
          "ConfigRuleName": "guardduty-enabled-centralized",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "GUARDDUTY_ENABLED_CENTRALIZED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPasswordPolicy": {
        "Properties": {
          "ConfigRuleName": "iam-password-policy",
          "InputParameters": {
            "MaxPasswordAge": {
              "Fn::If": [
                "iamPasswordPolicyParamMaxPasswordAge",
                {
                  "Ref": "IamPasswordPolicyParamMaxPasswordAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "MinimumPasswordLength": {
              "Fn::If": [
                "iamPasswordPolicyParamMinimumPasswordLength",
                {
                  "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PasswordReusePrevention": {
              "Fn::If": [
                "iamPasswordPolicyParamPasswordReusePrevention",
                {
                  "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireLowercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireLowercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireNumbers": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireNumbers",
                {
                  "Ref": "IamPasswordPolicyParamRequireNumbers"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireSymbols": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireSymbols",
                {
                  "Ref": "IamPasswordPolicyParamRequireSymbols"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireUppercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireUppercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_PASSWORD_POLICY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IncomingSshDisabled": {
        "Properties": {
          "ConfigRuleName": "restricted-ssh",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INCOMING_SSH_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InstancesInVpc": {
        "Properties": {
          "ConfigRuleName": "ec2-instances-in-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INSTANCES_IN_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaFunctionPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "lambda-function-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaInsideVpc": {
        "Properties": {
          "ConfigRuleName": "lambda-inside-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_INSIDE_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "NoUnrestrictedRouteToIgw": {
        "Properties": {
          "ConfigRuleName": "no-unrestricted-route-to-igw",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::RouteTable"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "NO_UNRESTRICTED_ROUTE_TO_IGW"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsAutomaticMinorVersionUpgradeEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-automatic-minor-version-upgrade-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsEnhancedMonitoringEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-enhanced-monitoring-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_ENHANCED_MONITORING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstancePublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "rds-instance-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsSnapshotsPublicProhibited": {
        "Properties": {
          "ConfigRuleName": "rds-snapshots-public-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBSnapshot",
              "AWS::RDS::DBClusterSnapshot"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterMaintenancesettingsCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-maintenancesettings-check",
          "InputParameters": {
            "allowVersionUpgrade": {
              "Fn::If": [
                "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade",
                {
                  "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterPublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftEnhancedVpcRoutingEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-enhanced-vpc-routing-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftRequireTlsSsl": {
        "Properties": {
          "ConfigRuleName": "redshift-require-tls-ssl",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_REQUIRE_TLS_SSL"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RestrictedIncomingTraffic": {
        "Properties": {
          "ConfigRuleName": "restricted-common-ports",
          "InputParameters": {
            "blockedPort1": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort1",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort2": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort2",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort3": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort3",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort4": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort4",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort5": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort5",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RESTRICTED_INCOMING_TRAFFIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3AccountLevelPublicAccessBlocksPeriodic": {
        "Properties": {
          "ConfigRuleName": "s3-account-level-public-access-blocks-periodic",
          "InputParameters": {
            "BlockPublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "BlockPublicPolicy": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "IgnorePublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RestrictPublicBuckets": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketLevelPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-level-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicReadProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-read-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_READ_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicWriteProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-write-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketSslRequestsOnly": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-ssl-requests-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_SSL_REQUESTS_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerNotebookNoDirectInternetAccess": {
        "Properties": {
          "ConfigRuleName": "sagemaker-notebook-no-direct-internet-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecretsmanagerRotationEnabledCheck": {
        "Properties": {
          "ConfigRuleName": "secretsmanager-rotation-enabled-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SecretsManager::Secret"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECRETSMANAGER_ROTATION_ENABLED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecretsmanagerScheduledRotationSuccessCheck": {
        "Properties": {
          "ConfigRuleName": "secretsmanager-scheduled-rotation-success-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SecretsManager::Secret"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecurityhubEnabled": {
        "Properties": {
          "ConfigRuleName": "securityhub-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECURITYHUB_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SsmDocumentNotPublic": {
        "Properties": {
          "ConfigRuleName": "ssm-document-not-public",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SSM_DOCUMENT_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SubnetAutoAssignPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "subnet-auto-assign-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Subnet"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcDefaultSecurityGroupClosed": {
        "Properties": {
          "ConfigRuleName": "vpc-default-security-group-closed",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_DEFAULT_SECURITY_GROUP_CLOSED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcFlowLogsEnabled": {
        "Properties": {
          "ConfigRuleName": "vpc-flow-logs-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_FLOW_LOGS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcNetworkAclUnusedCheck": {
        "Properties": {
          "ConfigRuleName": "vpc-network-acl-unused-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::NetworkAcl"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_NETWORK_ACL_UNUSED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcSgOpenOnlyToAuthorizedPorts": {
        "Properties": {
          "ConfigRuleName": "vpc-sg-open-only-to-authorized-ports",
          "InputParameters": {
            "authorizedTcpPorts": {
              "Fn::If": [
                "vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts",
                {
                  "Ref": "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AnnualRiskAssessmentPerformed": {
        "Properties": {
          "ConfigRuleName": "annual-risk-assessment-performed",
          "Description": "Perform an annual risk assessment on your organization. Risk assessments can assist in determining the likelihood and impact of identified risks and/or vulnerabilities affecting an organization.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecurityAwarenessProgramExists": {
        "Properties": {
          "ConfigRuleName": "security-awareness-program-exists",
          "Description": "Establish and maintain a security awareness program for your organization. Security awareness programs educate employees on how to protect their organization from various security breaches or incidents.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      }
    },
    "Conditions": {
      "iamPasswordPolicyParamMaxPasswordAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMaxPasswordAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMinimumPasswordLength": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamPasswordReusePrevention": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireLowercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireNumbers": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireNumbers"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireSymbols": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireSymbols"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireUppercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
              }
            ]
          }
        ]
      },
      "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort1": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort2": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort3": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort4": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort5": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
              }
            ]
          }
        ]
      },
      "vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts"
              }
            ]
          }
        ]
      }
    }
  }
}
