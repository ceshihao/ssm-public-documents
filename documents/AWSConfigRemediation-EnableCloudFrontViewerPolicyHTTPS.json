{
  "schemaVersion": "0.3",
  "description": "### Document name - AWSConfigRemediation-EnableCloudFrontViewerPolicyHTTPS\n\n## What does this document do?\nThis document modifies ViewerProtocolPolicy on a Amazon CloudFront distribution using the [UpdateDistribution]\n(https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html) API.\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* CloudFrontDistributionId: (Required) The Amazon CloudFront distribution id.\n* ViewerProtocolPolicy: (Required) The protocol that viewers can use to access the files in the origin. Valid values are \"https-only\" and \"redirect-to-https\".\n\n## Output Parameters\n* UpdateAndVerifyViewerProtocolPolicyOfCloudFrontDistribution.Output: The standard HTTP response from the UpdateDistribution API call.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "CloudFrontDistributionId": {
      "type": "String",
      "description": "(Required) The Amazon CloudFront distribution id.",
      "allowedPattern": "[A-Z0-9]*"
    },
    "ViewerProtocolPolicy": {
      "type": "String",
      "description": "(Required) The protocol that viewers can use to access the files in the origin.",
      "allowedValues": [
        "https-only",
        "redirect-to-https"
      ]
    }
  },
  "outputs": [
    "UpdateAndVerifyViewerProtocolPolicyOfCloudFrontDistribution.Output"
  ],
  "mainSteps": [
    {
      "name": "UpdateAndVerifyViewerProtocolPolicyOfCloudFrontDistribution",
      "action": "aws:executeScript",
      "description": "## UpdateAndVerifyViewerProtocolPolicyOfCloudFrontDistribution\nUpdates and Verifies viewer protocol policy on the given Amazon CloudFront distribution.\n## Outputs\n* Output: The standard HTTP response from the UpdateDistribution API call.\n",
      "isEnd": false,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "handler",
        "InputPayload": {
          "CloudFrontDistributionId": "{{ CloudFrontDistributionId }}",
          "ViewerProtocolPolicy": "{{ ViewerProtocolPolicy }}"
        },
        "Script": "import boto3\n\ndef update_cloudfront_viewer_protocol_policy(cloudfront_client, cloudfront_distribution_id, viewer_protocol_policy):\n  distribution_details = cloudfront_client.get_distribution(Id = cloudfront_distribution_id)\n  distribution_config = distribution_details['Distribution']['DistributionConfig']\n  distribution_config['DefaultCacheBehavior']['ViewerProtocolPolicy'] = viewer_protocol_policy\n  update_response = cloudfront_client.update_distribution(Id=cloudfront_distribution_id, DistributionConfig=distribution_config, IfMatch=distribution_details['ETag'])\n  return update_response\n\ndef verify_cloudfront_viewer_protocol_policy(cloudfront_client, cloudfront_distribution_id, viewer_protocol_policy):\n  distribution_details = cloudfront_client.get_distribution(Id = cloudfront_distribution_id)\n  updated_viewer_protocol_policy = distribution_details['Distribution']['DistributionConfig']['DefaultCacheBehavior']['ViewerProtocolPolicy']\n  if updated_viewer_protocol_policy == viewer_protocol_policy:\n    return True\n  return False\n\ndef handler(event, context):\n  cloudfront_client = boto3.client(\"cloudfront\")\n  cloudfront_distribution_id = event[\"CloudFrontDistributionId\"]\n  viewer_protocol_policy = event[\"ViewerProtocolPolicy\"]\n\n  update_response = update_cloudfront_viewer_protocol_policy(cloudfront_client, cloudfront_distribution_id, viewer_protocol_policy)\n\n  if verify_cloudfront_viewer_protocol_policy(cloudfront_client, cloudfront_distribution_id, viewer_protocol_policy):\n    return {\n          \"output\" : {\n            \"Message\": \"Verification of update viewer protocol policy on given Amazon CloudFront distribution {} is successful\".format(cloudfront_distribution_id),\n            \"HTTPResponse\": update_response['ResponseMetadata']\n          }\n      }\n  raise Exception(\"VERIFICATION FAILED. UPDATE VIEWER PROTOCOL POLICY ON GIVEN AMAZON CLOUDFRONT DISTRIBUTION {} IS FAILED.\".format(cloudfront_distribution_id))"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
