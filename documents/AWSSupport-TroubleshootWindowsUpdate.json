{
  "description": "The **AWSSupport-TroubleshootWindowsUpdate** runbook helps you troubleshoot common issues related to Windows Updates for Windows Amazon Elastic Compute Cloud (Amazon EC2) instances. This runbook checks the following:\n\n> * Checks if the target EC2 instance is Windows and managed by Systems Manager.\n> * Checks if the SSM Agent and Windows Server versions are supported for Systems Manager Patch Operations.\n> * Checks the available disk space recommended for Windows Updates and if a reboot is pending (This normally indicates that there are updates pending on the machine and a reboot is required prior to any additional updates being performed).\n> * Gets the proxy settings configured at the operating system level (these can be used to troubleshoot connectivity issues).\n> * Performs an Amazon Simple Storage Service (Amazon S3) endpoint connectivity test and try to retrieve the current snapshot for the patch baseline the managed instance use when calling the [GetDeployablePatchSnapshotForInstance](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_GetDeployablePatchSnapshotForInstance.html) API for path operations.\n> * If the connection to Amazon S3 fails, the runbook provides the option to run the **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook to analyze the instance's connectivity to the Amazon S3 endpoint.\n> * Validates the Windows Updates configuration and tests Windows Updates connectivity.\n\n### Prerequisites:\n> * Active Directory domain controllers are not supported.\n> * Windows Server version 2012 or previous versions are not supported.\n> * SSM Agent 1.2.371 or previous versions are not supported.\n> * The **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook is not available in all regions where Systems Manager is supported.\n\n### Important:\n> * The **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook uses [VPC Reachability Analyzer](https://docs.aws.amazon.com/vpc/latest/reachability/what-is-reachability-analyzer.html) to analyze the network connectivity between a source and a service endpoint. You are charged per analysis run between a source and destination. For more details, see [Amazon VPC Pricing](http://aws.amazon.com/vpc/pricing/).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the Amazon EC2 instance."
    },
    "RunVpcReachabilityAnalyzer": {
      "type": "Boolean",
      "description": "(Optional) Specify `true` if you want to run the `AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2` automation if the runbook detects that the instance is not able to connect to the required Amazon S3 endpoint. This parameter defaults to `false`. Make sure the `AutomationAssumeRole` or the user that starts this runbook has `ssm:GetDocument` permissions.",
      "default": false
    },
    "RetainVpcReachabilityAnalysis": {
      "type": "Boolean",
      "description": "(Conditional) Only applicable if the `RunVpcReachabilityAnalyzer` input parameter is set to `true`. Specify `true` to retain the network insight path and related analyses created by the VPC Reachability Analyzer. By default, the analysis is deleted after running successfully. If you choose to retain the analysis, the `AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2` runbook does not delete the analysis and you can visualize it in the VPC console. The console link will be available in the child automation output. This parameter defaults to `false`.",
      "default": false
    }
  },
  "mainSteps": [
    {
      "name": "AssertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "nextStep": "AssertInstanceIsSsmManaged",
      "description": "Checks if the EC2 instance platform is `windows`, otherwise the automation ends.",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "isCritical": true,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      }
    },
    {
      "name": "AssertInstanceIsSsmManaged",
      "action": "aws:assertAwsResourceProperty",
      "description": "Ensures the EC2 instance is managed by AWS Systems Manager, otherwise the automation ends.",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": true,
      "nextStep": "GetWindowsServerAndSsmAgentVersion"
    },
    {
      "name": "GetWindowsServerAndSsmAgentVersion",
      "action": "aws:executeAwsApi",
      "description": "Gets details about the SSM Agent and Windows Server version by calling the `DescribeInstanceInformation` API.",
      "inputs": {
        "Api": "DescribeInstanceInformation",
        "Service": "ssm",
        "Filters": [
          {
            "Key": "InstanceIds",
            "Values": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "onFailure": "Continue",
      "outputs": [
        {
          "Name": "AgentVersion",
          "Type": "String",
          "Selector": "$.InstanceInformationList[0].AgentVersion"
        },
        {
          "Name": "PlatformType",
          "Type": "String",
          "Selector": "$.InstanceInformationList[0].PlatformType"
        },
        {
          "Name": "PlatformVersion",
          "Type": "String",
          "Selector": "$.InstanceInformationList[0].PlatformVersion"
        }
      ],
      "isCritical": true,
      "nextStep": "CheckPrerequisites"
    },
    {
      "name": "CheckPrerequisites",
      "action": "aws:runCommand",
      "description": "Gets and validates if the Windows and SSM Agent versions are supported, and check if the instance is an Active Directory domain controller (DC). If the instance is a DC or if the Windows and/or the SSM Agent version are not supported, the runbook ends.",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Retrieve OS information",
            "$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem",
            "$currentPlatformVersion = [System.Version]$osInfo.Version",
            "",
            "# Initialize error flag",
            "$errorOccurred = $false",
            "",
            "# Check if the target instance is not a Domain Controller (ProductType != 2)",
            "if ($osInfo.ProductType -eq 2) {",
            "    Write-Output \"Error: The script does not support Active Directory Domain Controllers.\"",
            "    $errorOccurred = $true",
            "} else {",
            "    Write-Output \"Info: The target instance is not an Active Directory Domain Controller.\"",
            "}",
            "",
            "# Check if the target instance OS version is less than Windows Server 2012 (6.2)",
            "if ($currentPlatformVersion -lt [System.Version]\"6.2\") {",
            "    Write-Output \"Error: The script doesn't support Windows Server version 2012 or lower versions.\"",
            "    $errorOccurred = $true",
            "} else {",
            "    Write-Output \"Info: The platform version $currentPlatformVersion is supported.\"",
            "}",
            "",
            "# Define required SSM Agent version",
            "$requiredAgentVersion = [System.Version]\"1.2.371\"",
            "$agent_version = \"{{ GetWindowsServerAndSsmAgentVersion.AgentVersion }}\"",
            "$currentAgentVersion = [System.Version]$agent_version",
            "",
            "# Check if the target instance SSM Agent version is less than required",
            "if ($currentAgentVersion -lt $requiredAgentVersion) {",
            "    Write-Output \"Error: The runbook doesn't support SSM Agent version $requiredAgentVersion or lower versions.\"",
            "    $errorOccurred = $true",
            "} else {",
            "    Write-Output \"Info: The SSM Agent version $currentAgentVersion is supported.\"",
            "}",
            "",
            "# Exit script with appropriate status code if any prerequisite fails",
            "if ($errorOccurred) {",
            "    Write-Output \"`nError: One or more prerequisites have not been met.\"",
            "    Exit 1",
            "} else {",
            "    Write-Output \"`nInfo: All prerequisites have been successfully met.\"",
            "    Exit 0",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckProxySettings"
    },
    {
      "name": "CheckProxySettings",
      "action": "aws:runCommand",
      "description": "Checks the operating system-level proxy settings that could affect network connectivity.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "function Write-ProxyInfo {",
            "    param (",
            "        [string]$Info,",
            "        [bool]$ProxyFound",
            "    )",
            "    if ($ProxyFound) {",
            "        Write-Output $Info",
            "    } else {",
            "        Write-Output \"`nInfo: No proxy configuration found for $Info.\"",
            "    }",
            "}",
            "",
            "# Initialize variable to track proxy presence",
            "$proxyPresent = $false",
            "",
            "# Check WinInet proxy",
            "$proxy = [System.Net.WebProxy]::GetDefaultProxy()",
            "if ($null -ne $proxy.Address) {",
            "    $proxyPresent = $true",
            "    Write-Output \"WinInet Proxy Address: $($proxy.Address)\"",
            "    Write-Output \"Proxy bypassing local address: $($proxy.BypassProxyOnLocal)\"",
            "    Write-Output \"Addresses bypassed: $($proxy.BypassList -join ', ')\"",
            "}",
            "",
            "# Attempt to retrieve WinHTTP proxy settings using netsh",
            "$winHttpProxy = netsh winhttp show proxy",
            "if ($LASTEXITCODE -eq 0) {",
            "    # Check if the output indicates no proxy server",
            "    if ($winHttpProxy -match \"no proxy server\") {",
            "        Write-Output \"No WinHTTP Proxy is set on the system.\"",
            "    } else {",
            "        $proxyPresent = $true",
            "        Write-Output \"WinHTTP Proxy Configuration:`n$winHttpProxy\"",
            "        Write-Output \"For more information, check: https://learn.microsoft.com/en-us/windows/win32/winhttp/setting-wininet-proxy-configurations-in-winhttp\"",
            "    }",
            "} else {",
            "    Write-Output \"Could not retrieve WinHTTP proxy settings.\"",
            "}",
            "",
            "# Retrieve SSM Agent proxy settings from its environment variable",
            "$ssmProxy = (Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\" -Name Environment -ErrorAction SilentlyContinue).Environment",
            "if ($ssmProxy) {",
            "    $proxyPresent = $true",
            "    Write-ProxyInfo -Info \"Amazon SSM Agent is configured with proxy settings\" -ProxyFound $true",
            "    Write-Output \"`nFor more information, see: https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-ssm-proxy.html.\"",
            "    Write-Output $ssmProxy",
            "}",
            "",
            "# Check System-wide Environment Variable proxy settings",
            "$envProxySettings = @(\"HTTP_PROXY\", \"HTTPS_PROXY\", \"NO_PROXY\") | ForEach-Object {",
            "    $value = [System.Environment]::GetEnvironmentVariable($_, [System.EnvironmentVariableTarget]::Machine)",
            "    if ($value) {",
            "        $proxyPresent = $true",
            "        Write-ProxyInfo -Info \"$_ is set to: $value\" -ProxyFound $true",
            "    }",
            "}",
            "",
            "# Check Local System Account User environment Variable proxy",
            "$userEnvProxy = Get-ItemProperty -Path \"Registry::HKEY_USERS\\.DEFAULT\\Environment\" -ErrorAction SilentlyContinue | Select-Object -Property HTTP_PROXY, HTTPS_PROXY, NO_PROXY",
            "if ($userEnvProxy.HTTP_PROXY -or $userEnvProxy.HTTPS_PROXY -or $userEnvProxy.NO_PROXY) {",
            "    $proxyPresent = $true",
            "    Write-Output \"Local System Account User Environment Proxy Configuration:\"",
            "    $userEnvProxy | Format-List | Out-String | Write-Output",
            "    Write-Output \"`nFor more information, see: https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables.\"",
            "}",
            "",
            "# Summary and recommendations",
            "if ($proxyPresent) {",
            "    Write-Output \"`nWARNING: Proxy settings detected\"",
            "    Write-Output \"Make sure that your proxy settings allow access to the Amazon S3 and Systems Manager endpoints.\"",
            "    Write-Output \"Make sure that your proxy settings allow access to the EC2 instance metadata IP address (169.254.169.254).\"",
            "    Write-Output \"Make sure that your proxy settings allow access to the Windows Update endpoints.\"",
            "} else {",
            "    Write-Output \"`nInfo: No proxy configurations detected that might affect connectivity.\"",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckDiskSpace"
    },
    {
      "name": "CheckDiskSpace",
      "action": "aws:runCommand",
      "description": "Gets and validates the available disk space recommended for performing Windows updates.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Get system drive and its free space",
            "$systemDrive = (Get-CimInstance -ClassName Win32_OperatingSystem).SystemDrive",
            "$freeSpace = (Get-CimInstance -ClassName CIM_LogicalDisk -Filter \"DeviceID='$systemDrive'\").FreeSpace",
            "",
            "# Recommended free space threshold for Windows Updates",
            "$recommendedFreeSpaceGB = 10",
            "$freeSpaceGB = [math]::Round($freeSpace / 1GB, 2)",
            "",
            "# Check available disk space against the recommended threshold",
            "if ($freeSpaceGB -lt $recommendedFreeSpaceGB) {",
            "    Write-Output \"Warning: Available disk space on the system drive $systemDrive is less than $recommendedFreeSpaceGB GB ($freeSpaceGB GB). It is recommended to free up at least $recommendedFreeSpaceGB GBs of disk space before running Windows Update.\"",
            "} else {",
            "    Write-Output \"Info: Disk space on drive $systemDrive is sufficient ($freeSpaceGB GB) for running Windows updates.\"",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckPendingReboot"
    },
    {
      "name": "CheckPendingReboot",
      "action": "aws:runCommand",
      "description": "Checks if there is any system-level pending reboot that is required prior to install additional Windows updates.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Initialize variable to track reboot status",
            "$RebootPending = $false",
            "$reasons = @()",
            "",
            "# Check for 'Reboot Required' registry keys",
            "$rebootChecks = @{",
            "    \"Component Based Servicing\" = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending\"",
            "    \"Windows Update\" = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired\"",
            "    \"Update Installation\" = \"HKLM:\\SOFTWARE\\Microsoft\\Updates\\UpdateExeVolatile\"",
            "    \"SCCM Reboot Management\" = \"HKLM:\\SOFTWARE\\Microsoft\\SMS\\Mobile Client\\Reboot Management\\RebootData\"",
            "}",
            "",
            "foreach ($check in $rebootChecks.GetEnumerator()) {",
            "    if (Test-Path $check.Value -ea SilentlyContinue) {",
            "        if ($check.Name -eq \"Update Installation\") {",
            "            $value = (Get-ItemProperty $check.Value).UpdateExeVolatile",
            "            if ($value -eq 1 -or $value -eq 2) {",
            "                $RebootPending = $true",
            "                $reasons += $check.Name",
            "            }",
            "        } else {",
            "            $RebootPending = $true",
            "            $reasons += $check.Name",
            "        }",
            "    }",
            "}",
            "",
            "# Check for PendingFileRenameOperations",
            "$pendingRename = Get-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name PendingFileRenameOperations -EA SilentlyContinue",
            "if ($null -ne $pendingRename.PendingFileRenameOperations) {",
            "    $RebootPending = $true",
            "    $reasons += \"Pending File Rename Operations\"",
            "}",
            "",
            "if ($RebootPending) {",
            "    $reasonText = $reasons -join \", \"",
            "    Write-Output \"`nError: Windows is in a pending reboot state due to: $reasonText. Please reboot the system to proceed.\"",
            "    Exit 1",
            "} else {",
            "    Write-Output \"`nInfo: There is no pending reboot.\"",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckS3Connectivity"
    },
    {
      "name": "CheckS3Connectivity",
      "action": "aws:runCommand",
      "description": "Checks if the instance is able to reach the Amazon S3 endpoint for Patch Baseline operations. ",
      "onFailure": "step:GenerateS3Endpoint",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Get and set the current Security Protocol",
            "$currentProtocol = [System.Net.ServicePointManager]::SecurityProtocol",
            "# Check if the current protocol includes Tls12 or Tls13",
            "if (-not ($currentProtocol -band [System.Net.SecurityProtocolType]::Tls12 -or $currentProtocol -band [System.Net.SecurityProtocolType]::Tls13)) {",
            "    Write-Output \"`nWarning: The current default security protocol: $currentProtocol\"",
            "    # Setting the protocol to Tls12 and Tls13",
            "    Write-Output \"`nSetting TLS to TLS 1.2 and TLS 1.3...\"",
            "    [System.Net.ServicePointManager]::SecurityProtocol = $currentProtocol -bor [System.Net.SecurityProtocolType]::Tls12 -bor [System.Net.SecurityProtocolType]::Tls13",
            "    ",
            "} else {",
            "    Write-Output \"`nInfo: Current security protocol is $currentProtocol.\"",
            "}",
            "",
            "function Get-InstanceId {",
            "    param (",
            "        $UseIMDSv2 = $true",
            "    )",
            "",
            "    $metadataUri = \"http://169.254.169.254/latest/meta-data/instance-id\"",
            "    $tokenUri = \"http://169.254.169.254/latest/api/token\"",
            "",
            "    if ($UseIMDSv2) {",
            "        try {",
            "            $token = Invoke-RestMethod -Headers @{\"X-aws-ec2-metadata-token-ttl-seconds\" = \"21600\"} -Method PUT -Uri $tokenUri",
            "            return Invoke-RestMethod -Headers @{\"X-aws-ec2-metadata-token\" = $token} -Method GET -Uri $metadataUri",
            "        } catch {",
            "            Write-Output \"Falling back to IMDSv1 due to an issue with IMDSv2: $_\"",
            "        }",
            "    }",
            "",
            "    return (Invoke-WebRequest -UseBasicParsing -Uri $metadataUri).Content",
            "}",
            "",
            "$instanceId = Get-InstanceId",
            "if (-not $instanceId) {",
            "    Write-Output \"`nError: Failed to obtain the instance ID from metadata.\"",
            "    Exit 1",
            "} else {",
            "    Write-Output \"`nInfo: Successfully obtained the instance ID: $instanceId\"",
            "}",
            "",
            "# Attempt to download Windows patching file",
            "$tempFile = Join-Path -Path $env:TEMP -ChildPath \"Patch.json\"",
            "$maxAttempts = 5",
            "",
            "try {",
            "    Write-Output \"`nRetrieving the current snapshot for the patch baseline the managed node uses (only required for AWS Systems Manager Patch Operations)...\"",
            "    Write-Output \"Calling GetDeployablePatchSnapshotForInstance API to obtain the patch snapshot from the Amazon S3 URL...\"",
            "    $snap = Get-SSMDeployablePatchSnapshotForInstance -SnapshotId '00000000-0000-0000-0000-000000000000' -InstanceId $instanceId -Verbose",
            "    $URI = [System.Uri]$snap.SnapshotDownloadUrl",
            "",
            "    Write-Output \"`nDownloading the patch snapshot from the Amazon S3 URL $($URI.Scheme)://$($URI.Host)\"",
            "    For ($attemptCount = 1; $attemptCount -le $maxAttempts; $attemptCount++) {",
            "        try {",
            "            Write-Output \"Attempt: $attemptCount/$maxAttempts...\"",
            "            (New-Object Net.WebClient).DownloadFile($snap.SnapshotDownloadUrl, $tempFile)",
            "",
            "            if (Test-Path $tempFile) {",
            "                Write-Output \"`nInfo: Deployable Patch Snapshot downloaded successfully.\"",
            "                break",
            "            }",
            "        } catch {",
            "            Write-Output \"Attempt $attemptCount failed: $_\"",
            "            Start-Sleep -Seconds (1 * $attemptCount)",
            "        }",
            "    }",
            "",
            "    if (-not (Test-Path $tempFile)) {",
            "        Write-Output \"`nError: Download failed after $maxAttempts attempts.\"",
            "        Write-Output \"`nPlease see for troubleshooting:\"",
            "        Write-Output \"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-troubleshooting.html\"",
            "        Write-Output \"https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-minimum-s3-permissions.html\"",
            "        Write-Output \"`nNOTE: This error can be ignored if you are not using AWS Systems Manager Patch Operations to install Windows updates.\"",
            "        Exit 1",
            "    }",
            "} catch {",
            "    Write-Output \"`nError: Failed to GetDeployablePatchSnapshotForInstance $_\"",
            "    Write-Output \"`nPlease see for troubleshooting:\"",
            "    Write-Output \"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-troubleshooting.html\"",
            "    Write-Output \"https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-minimum-s3-permissions.html\"",
            "    Write-Output \"`nNOTE: This error can be ignored if you are not using AWS Systems Manager Patch Operations to install Windows updates.\"",
            "    Exit 1",
            "} finally {",
            "    # Clean up temporary files",
            "    if (Test-Path $tempFile) {",
            "        Remove-Item -Path $tempFile -Force",
            "    }",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckWindowsUpdateServices"
    },
    {
      "name": "GenerateS3Endpoint",
      "action": "aws:executeScript",
      "description": "Generates the Amazon S3 endpoint URI to be used by the **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** runbook and checks if the runbook is available in the target region to perform a network connectivity test.",
      "nextStep": "BranchOnRunVpcReachabilityAnalyzer",
      "onFailure": "step:CheckWindowsUpdateServices",
      "inputs": {
        "InputPayload": {
          "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2"
        },
        "Handler": "generate_endpoint.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "S3Endpoint",
          "Selector": "$.Payload.endpoint",
          "Type": "String"
        },
        {
          "Name": "DocumentExists",
          "Selector": "$.Payload.exist",
          "Type": "Boolean"
        }
      ],
      "isCritical": true
    },
    {
      "name": "BranchOnRunVpcReachabilityAnalyzer",
      "action": "aws:branch",
      "description": "Branches the automation based on the value of the parameter `RunVpcReachabilityAnalyzer`.",
      "inputs": {
        "Default": "CheckWindowsUpdateServices",
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ RunVpcReachabilityAnalyzer }}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{ GenerateS3Endpoint.DocumentExists }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "AnalyzeEndpointReachability"
          }
        ]
      },
      "nextStep": "CheckWindowsUpdateServices",
      "isCritical": true
    },
    {
      "name": "AnalyzeEndpointReachability",
      "action": "aws:executeAutomation",
      "description": "Initiates the automation runbook `AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2` to analyze reachability to the Amazon S3 endpoint.",
      "timeoutSeconds": 3600,
      "inputs": {
        "DocumentName": "AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2",
        "TargetParameterName": "ServiceEndpoint",
        "Targets": [
          {
            "Key": "ParameterValues",
            "Values": [
              "{{ GenerateS3Endpoint.S3Endpoint }}"
            ]
          }
        ],
        "RuntimeParameters": {
          "Source": "{{ InstanceId }}",
          "RetainVpcReachabilityAnalysis": "{{ RetainVpcReachabilityAnalysis }}",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "onFailure": "Continue",
      "nextStep": "CheckWindowsUpdateServices",
      "isCritical": false
    },
    {
      "name": "CheckWindowsUpdateServices",
      "action": "aws:runCommand",
      "description": "Checks the status and start type of Windows Updates related services.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License http://aws.amazon.com/asl/",
            "",
            "# Retrieve the current Windows version",
            "$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem",
            "$currentPlatformVersion = [System.Version]$osInfo.Version",
            "",
            "# Initialize variables",
            "$failed = $false",
            "",
            "# Define critical and recommended services common to all supported Windows versions",
            "$criticalServices = @(\"wuauserv\", \"BITS\", \"cryptsvc\", \"TrustedInstaller\")",
            "$recommendedServicesBase = @(\"appidsvc\", \"msiserver\")",
            "",
            "# Determine version-specific recommended services",
            "$recommendedServicesVersionSpecific = @()",
            "if ($currentPlatformVersion -ge [System.Version]\"10.0.14393\") {",
            "    # Include Update Orchestrator Service (UsoSvc) for versions greater than Windows Server 2016",
            "    $recommendedServicesVersionSpecific += @(\"UsoSvc\")",
            "}",
            "",
            "# Combine service lists",
            "$recommendedServices = $recommendedServicesBase + $recommendedServicesVersionSpecific",
            "$servicesToCheck = $criticalServices + $recommendedServices",
            "",
            "foreach ($serviceName in $servicesToCheck) {",
            "    $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue",
            "    if ($null -eq $service) {",
            "        # Service retrieval failed",
            "        if ($criticalServices -contains $serviceName) {",
            "            Write-Output \"Error: Failed to retrieve critical service $serviceName.\"",
            "            $failed = $true",
            "        } else {",
            "            Write-Output \"Warning: Failed to retrieve recommended service $serviceName.\"",
            "        }",
            "        continue",
            "    }",
            "",
            "    # Extract service properties",
            "    $displayName = $service.DisplayName",
            "    $status = $service.Status",
            "    $startType = $service.StartType",
            "    $name = $service.Name",
            "",
            "    # Output basic service info",
            "    Write-Output \"`nChecking service: $displayName ($name) - Status: $status, StartType: $startType\"",
            "",
            "    if ($startType -eq 'Disabled') {",
            "        # Handle Disabled services",
            "        if ($criticalServices -contains $serviceName) {",
            "            Write-Output \"Error: Required service '$displayName' is in an unexpected startup type: $startType.\"",
            "            $failed = $true",
            "        } else {",
            "            Write-Output \"Warning: Recommended service '$displayName' is in an unexpected startup type: $startType.\"",
            "        }",
            "    } elseif ($status -eq 'Stopped' -and ($startType -eq 'Automatic' -or $startType -eq 'AutomaticDelayedStart')) {",
            "        # Handle stopped services with Automatic or Automatic (Delayed Start)",
            "        if ($criticalServices -contains $serviceName) {",
            "            Write-Output \"Error: Required service '$displayName' is stopped despite being set to start automatically.\"",
            "            $failed = $true",
            "        } else {",
            "            Write-Output \"Warning: Recommended service '$displayName' is stopped despite being set to start automatically.\"",
            "        }",
            "    } elseif ($status -ne 'Running' -and ($startType -eq 'Automatic' -or $startType -eq 'AutomaticDelayedStart')) {",
            "        # Handle non-running services set to Automatic or Automatic (Delayed Start)",
            "        Write-Output \"Warning: Service '$displayName' is not running but is set to start automatically.\"",
            "    } elseif ($status -ne 'Running' -and $startType -eq 'Manual') {",
            "        # Note manually set services that are not running",
            "        Write-Output \"Info: Service '$displayName' is in $status state with start type $startType.\"",
            "    } else {",
            "        # Confirm services that are running as expected",
            "        Write-Output \"Info: The service '$displayName' is currently running with start type $startType.\"",
            "    }",
            "}",
            "",
            "# Final check for failed critical services",
            "if ($failed) {",
            "    Write-Output \"`nError: One or more critical services are not in the recommended state. Please review the errors above and consult the documentation: https://learn.microsoft.com/en-us/security-updates/windowsupdateservices/18127451\"",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckWindowsUpdateSettings"
    },
    {
      "name": "CheckWindowsUpdateSettings",
      "action": "aws:runCommand",
      "description": "Checks for system-level Windows Update settings.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Check Windows Update policy settings",
            "",
            "Write-Output \"`nChecking Windows Update policy settings...\"",
            "",
            "$WUSettingsPath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\"",
            "$WUSettingsNoAutoUpdate = (Get-ItemProperty -Path $WUSettingsPath -ErrorAction SilentlyContinue).NoAutoUpdate",
            "$WUSettingsAUOptions = (Get-ItemProperty -Path $WUSettingsPath -ErrorAction SilentlyContinue).AUOptions",
            "",
            "if ($null -eq $WUSettingsNoAutoUpdate) {",
            "    Write-Output \"`nInfo: Windows Update (Policies): Not Configured (Default is automatic)\"",
            "} else {",
            "    $updatePolicyMessage = switch ($WUSettingsAUOptions) {",
            "        \"2\" { \"Notify Before Download\" }",
            "        \"3\" { \"Notify Before Installation\" }",
            "        \"4\" { \"Install updates automatically\" }",
            "        Default { \"Custom\" }",
            "    }",
            "    if ($WUSettingsNoAutoUpdate -eq 1) {",
            "        Write-Output \"`nInfo: Windows Update (Policies): Never check for updates\"",
            "    } else {",
            "        Write-Output \"`nInfo: Windows Update (Policies): $updatePolicyMessage\"",
            "    }",
            "}",
            "",
            "Write-Output \"`nInfo: To modify this setting, navigate to 'Computer Configuration\\Administrative Templates\\Windows Components\\Windows Update\\Configure Automatic Updates'.\"",
            "Write-Output \"`nFor more details, please see: https://learn.microsoft.com/en-us/security-updates/windowsupdateservices/18127451\""
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckWsusSettings"
    },
    {
      "name": "CheckWsusSettings",
      "action": "aws:runCommand",
      "description": "Checks whether Windows Update is configured with Windows Server Update Services (WSUS) or the Microsoft Update catalog.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Get and set the current Security Protocol",
            "$currentProtocol = [System.Net.ServicePointManager]::SecurityProtocol",
            "# Check if the current protocol includes Tls12 or Tls13",
            "if (-not ($currentProtocol -band [System.Net.SecurityProtocolType]::Tls12 -or $currentProtocol -band [System.Net.SecurityProtocolType]::Tls13)) {",
            "    Write-Output \"`nWarning: The current default security protocol: $currentProtocol\"",
            "    # Setting the protocol to Tls12 and Tls13",
            "    Write-Output \"Setting TLS to TLS 1.2 and TLS 1.3...\"",
            "    [System.Net.ServicePointManager]::SecurityProtocol = $currentProtocol -bor [System.Net.SecurityProtocolType]::Tls12 -bor [System.Net.SecurityProtocolType]::Tls13",
            "",
            "} else {",
            "    Write-Output \"Info: Current security protocol is $currentProtocol.\"",
            "}",
            "",
            "# Fetching Windows Update settings",
            "$WSUSSettingPath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\"",
            "$WSUSSetting = (Get-ItemProperty -Path $WSUSSettingPath -ErrorAction SilentlyContinue).UseWUServer",
            "$WSUSServerPath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\"",
            "$WSUSSettingWUServer = (Get-ItemProperty -Path $WSUSServerPath -ErrorAction SilentlyContinue).WUServer",
            "",
            "# Initialize variables to avoid null reference exceptions",
            "$wsushost = $null",
            "$wsusport = $null",
            "if ($null -ne $WSUSSettingWUServer) {",
            "    $wsushost = ([System.Uri]$WSUSSettingWUServer).Host",
            "    $wsusport = ([System.Uri]$WSUSSettingWUServer).Port",
            "}",
            "",
            "# Output Windows Update sources information",
            "Write-Output \"`nWindows can receive updates from various sources, including Windows Update online, a Windows Server Update Services server, and others.\"",
            "Write-Output \"Info: Automatic Updates (AU) configuration (source of Windows Updates currently being used):\"",
            "$WauConfiguration = $(New-Object -ComObject \"Microsoft.Update.ServiceManager\").Services | Select-Object Name, IsDefaultAUService",
            "foreach ($service in $WauConfiguration) {",
            "    Write-Output \"- $($service.Name): IsDefaultAUService - $($service.IsDefaultAUService)\"",
            "}",
            "",
            "# Checking WSUS configuration and connectivity",
            "if ($null -eq $WSUSSetting) {",
            "    Write-Output \"`nInfo: The system is configured to use Windows Update or Microsoft Update.\"",
            "} elseif ($null -ne $WSUSSettingWUServer) {",
            "    Write-Output \"`nInfo: The system is configured to use WSUS at $WSUSSettingWUServer.\"",
            "    Write-Output \"Checking connectivity to WSUS server...\"",
            "    Try {",
            "        $testnet = Test-NetConnection -ComputerName $wsushost -Port $wsusport -ErrorAction Stop",
            "        if ($testnet.TcpTestSucceeded) {",
            "            Write-Output \"`nInfo: WSUS server is reachable over TCP port $wsusport.\"",
            "        } else {",
            "            Write-Output `n\"Warning: Unable to connect to WSUS server on TCP port $wsusport. Check network connectivity and firewall settings.\"",
            "        }",
            "    } catch {",
            "        Write-Output \"`nError: Failed to test connectivity to WSUS server. $_\"",
            "    }",
            "}",
            "",
            "try {",
            "    # Initialize search criteria for updates that are not installed yet but are assigned for installation",
            "    $wuaSearchString = \"IsInstalled=0 and IsAssigned=1\"",
            "    Write-Output \"`nInfo: Initiating connection to the update server to check for assigned and not installed updates...\"",
            "",
            "    # Creating an instance of the Update Searcher COM object to query Windows Update",
            "    $updateSearcher = New-Object -ComObject \"Microsoft.Update.Searcher\"",
            "",
            "    # Configuring the searcher to use the default Windows Update server",
            "    $updateSearcher.ServerSelection = 0",
            "",
            "    # Searching for updates based on the defined criteria (not installed and assigned)",
            "    $searchResult = $updateSearcher.Search($wuaSearchString)",
            "",
            "    # Determining the total number of applicable updates found by the search",
            "    $updatesFound = $searchResult.Updates.Count",
            "    Write-Output \"Info: Found $updatesFound update(s) that are assigned for installation but not yet installed on this system.\"",
            "",
            "    ",
            "} catch {",
            "    # Provide guidance for common update errors",
            "    Write-Output \"`nError: Windows Update failed $_\"",
            "    Write-Output \"`nConsider the following troubleshooting steps:\"",
            "    Write-Output \"- Clear the Windows Update cache by stopping the 'wuauserv' service, deleting the contents of C:\\Windows\\SoftwareDistribution, and then restarting the service.\"",
            "    Write-Output \"- Run the Windows Update troubleshooter 'msdt.exe /id WindowsUpdateDiagnostic' in an elevated command prompt.\"",
            "    Write-Output \"- Use the System File Checker tool by running 'sfc /scannow' in an elevated command prompt.\"",
            "    Write-Output \"- Check the health of the system image with the DISM tool using 'DISM /Online /Cleanup-Image /CheckHealth'.\"",
            "    Write-Output \"`nFor more detailed troubleshooting, visit: https://learn.microsoft.com/en-us/troubleshoot/windows-client/deployment/common-windows-update-errors\"",
            "    ",
            "    # Log the specific error encountered",
            "    Write-Output \"`nError: Failed to connect or search for updates. Details: $($_.Exception.Message)\"",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "CheckWindowsUpdateGlobalSettings"
    },
    {
      "name": "CheckWindowsUpdateGlobalSettings",
      "action": "aws:runCommand",
      "description": "Checks the Windows Update global settings configured at system-level.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Check Windows Update global settings",
            "Write-Output \"`nChecking Windows Update Policies...\"",
            "",
            "# Check if Windows Update access is disabled",
            "$WSUSSettingWU = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" -ErrorAction SilentlyContinue).DisableWindowsUpdateAccess",
            "if ($null -eq $WSUSSettingWU) {",
            "    Write-Output \"Windows Update Client has no restrictions.\"",
            "} else {",
            "    Write-Output \"Windows Update is restricted by Group Policy Object (GPO), System Policy, or Registry Policy.\"",
            "    Write-Output \"Current Windows Update settings value is: $($WSUSSettingWU)\"",
            "    Write-Output \"DisableWindowsUpdateAccess: This setting is in User Configuration\\Administrative Templates\\Windows Components\\Windows Update\\Remove Access To Use All Windows Update Features.\"",
            "    Write-Output \"For more details, please check this document: https://learn.microsoft.com/en-us/security-updates/windowsupdateservices/18127451\"",
            "}",
            "",
            "# Check for WSUS Server Configuration",
            "$WSUSServer = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" -ErrorAction SilentlyContinue).WUServer",
            "if ($null -eq $WSUSServer) {",
            "    Write-Output \"No WSUS Server Configuration detected.\"",
            "} else {",
            "    Write-Output \"WSUS Server is configured: $WSUSServer\"",
            "}",
            "",
            "# Check for Automatic Update Configuration",
            "$AutoUpdateConfig = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" -ErrorAction SilentlyContinue).NoAutoUpdate",
            "if ($null -eq $AutoUpdateConfig -or $AutoUpdateConfig -eq 0) {",
            "    Write-Output \"Automatic Updates is enabled.\"",
            "} else {",
            "    Write-Output \"Automatic Updates is disabled.\"",
            "}",
            "",
            "# Check for Quality Update Deferral Policy",
            "$QualityUpdateDeferral = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" -ErrorAction SilentlyContinue).DeferQualityUpdatesPeriodInDays",
            "if ($null -eq $QualityUpdateDeferral) {",
            "    Write-Output \"No Quality Update Deferral Policy is configured.\"",
            "} else {",
            "    Write-Output \"Quality Updates are deferred for $QualityUpdateDeferral days.\"",
            "}",
            "",
            "# Check for Feature Update Deferral Policy",
            "$FeatureUpdateDeferral = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" -ErrorAction SilentlyContinue).DeferFeatureUpdatesPeriodInDays",
            "if ($null -eq $FeatureUpdateDeferral) {",
            "    Write-Output \"No Feature Update Deferral Policy is configured.\"",
            "} else {",
            "    Write-Output \"Feature Updates are deferred for $FeatureUpdateDeferral days.\"",
            "}",
            "",
            "# Check Active Hours Configuration",
            "$ActiveHoursStart = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" -ErrorAction SilentlyContinue).ActiveHoursStart",
            "$ActiveHoursEnd = (Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" -ErrorAction SilentlyContinue).ActiveHoursEnd",
            "if ($null -eq $ActiveHoursStart -or $null -eq $ActiveHoursEnd) {",
            "    Write-Output \"No Active Hours Configuration is set.\"",
            "} else {",
            "    Write-Output \"Active Hours are configured from $ActiveHoursStart to $ActiveHoursEnd.\"",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "ConsolidateWindowsUpdateLogs"
    },
    {
      "name": "ConsolidateWindowsUpdateLogs",
      "action": "aws:runCommand",
      "description": "Copies the `Microsoft-Windows-WindowsUpdateClient`, Windows Update, and CBS (Component-Based Servicing) logs to a temporary folder. You can use these logs for troubleshooting Windows updates issues.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Set destination folder based on the SSM Automation Execution ID",
            "$SSMAutomationExecutionId = \"{{ automation:EXECUTION_ID }}\"",
            "$tempFolderPath = [System.IO.Path]::GetTempPath()",
            "$destinationFolder = Join-Path -Path $tempFolderPath -ChildPath $SSMAutomationExecutionId",
            "",
            "# Ensure the destination folder exists before proceeding",
            "if (-not (Test-Path -Path $destinationFolder)) {",
            "    New-Item -Path $destinationFolder -ItemType Directory | Out-Null",
            "}",
            "",
            "function Fetch-WindowsUpdateErrors {",
            "    param (",
            "        [string]$LogName,",
            "        [string]$Source",
            "    )",
            "    try {",
            "        $events = Get-WinEvent -MaxEvents 25 -LogName $LogName -FilterXPath \"*[System[Provider[@Name='$Source']]]\" -ErrorAction SilentlyContinue",
            "        $errors = $events | Where-Object { $_.LevelDisplayName -eq \"Error\" }",
            "        ",
            "        if ($errors.Count -gt 0) {",
            "            Write-Output \"`nWarning: Windows Update errors found: $($errors.Count)\"",
            "            $errors[0..4] | ForEach-Object {",
            "                Write-Output \"Event ID: $($_.Id) | Message: $($_.Message)\"",
            "            } | Out-File -FilePath \"$destinationFolder\\WindowsUpdateErrors.log\" -Append",
            "            ",
            "            Write-Output \"`nInfo: Windows Update error events copied to the log file in $destinationFolder.\"",
            "        } else {",
            "            Write-Output \"`nInfo: No Windows Update errors found in 'Microsoft-Windows-WindowsUpdateClient'.\"",
            "        }",
            "    }",
            "    catch {",
            "        Write-Output \"`nError: Failed to fetch Windows Update error events. $($_.Exception.Message)\"",
            "    }",
            "}",
            "",
            "function Copy-LogFiles {",
            "    param (",
            "        [string]$SourcePath,",
            "        [string]$DestinationPath",
            "    )",
            "    try {",
            "        if (Test-Path -Path $SourcePath) {",
            "            Copy-Item -Path $SourcePath -Destination $DestinationPath -Recurse -Force -Exclude \"*.etl\"",
            "            Write-Output \"`nInfo: Logs from $SourcePath copied to $DestinationPath.\"",
            "        }",
            "    }",
            "    catch {",
            "        Write-Output \"`nError: Failed to copy logs from $SourcePath. $($_.Exception.Message)\"",
            "    }",
            "}",
            "",
            "# Fetch Windows Update error events",
            "Fetch-WindowsUpdateErrors -LogName \"System\" -Source \"Microsoft-Windows-WindowsUpdateClient\"",
            "",
            "# Copy various log files for troubleshooting",
            "Copy-LogFiles -SourcePath \"$env:SystemRoot\\Logs\\CBS\" -DestinationPath $destinationFolder",
            "Copy-LogFiles -SourcePath \"$env:SystemRoot\\Logs\\WindowsUpdate\" -DestinationPath $destinationFolder",
            "Copy-LogFiles -SourcePath \"$env:SystemRoot\\WindowsUpdate.log\" -DestinationPath $destinationFolder",
            "Copy-LogFiles -SourcePath \"$env:SystemRoot\\SoftwareDistribution\\ReportingEvents.log\" -DestinationPath $destinationFolder",
            "",
            "# Generate a consolidated Windows Update log file if applicable",
            "if (Get-Command -Name \"Get-WindowsUpdateLog\" -ErrorAction SilentlyContinue) {",
            "    try {",
            "        $logPath = Join-Path -Path $destinationFolder -ChildPath \"GetWindowsUpdateLog.log\"",
            "        Write-Output \"`nInfo: Consolidating Windows Update logs file running 'Get-WindowsUpdateLog' at $logPath.\"",
            "        function Out-Default {}",
            "        Get-WindowsUpdateLog -LogPath $LogPath | Out-Null",
            "        Remove-Item -Path function:Out-Default",
            "        Write-Output \"Info: 'Get-WindowsUpdateLog' logs file can be found at $logPath.\"",
            "    }",
            "    catch {",
            "        Remove-Item -Path function:Out-Default -ErrorAction SilentlyContinue",
            "        Write-Output \"`nError: Failed to generate Windows Update logs using 'Get-WindowsUpdateLog'. $($_.Exception.Message)\"",
            "    }",
            "}",
            ""
          ]
        }
      },
      "isCritical": true,
      "nextStep": "FinalReport"
    },
    {
      "name": "FinalReport",
      "action": "aws:executeScript",
      "description": "Consolidates the outputs of all executed steps for review and analysis.",
      "onFailure": "Continue",
      "inputs": {
        "InputPayload": {
          "CheckPrerequisites": "{{ CheckPrerequisites.Output }}",
          "CheckPrerequisitesStatus": "{{ CheckPrerequisites.Status }}",
          "CheckProxySettings": "{{ CheckProxySettings.Output }}",
          "CheckProxySettingsStatus": "{{ CheckProxySettings.Status }}",
          "CheckDiskSpace": "{{ CheckDiskSpace.Output }}",
          "CheckDiskSpaceStatus": "{{ CheckDiskSpace.Status }}",
          "CheckPendingReboot": "{{ CheckPendingReboot.Output }}",
          "CheckPendingRebootStatus": "{{ CheckPendingReboot.Status }}",
          "CheckS3Connectivity": "{{ CheckS3Connectivity.Output }}",
          "CheckS3ConnectivityStatus": "{{ CheckS3Connectivity.Status }}",
          "CheckWindowsUpdateServices": "{{ CheckWindowsUpdateServices.Output }}",
          "CheckWindowsUpdateServicesStatus": "{{ CheckWindowsUpdateServices.Status }}",
          "BranchOnRunVpcReachabilityAnalyzer": "{{ BranchOnRunVpcReachabilityAnalyzer.NextStep }}",
          "AnalyzeEndpointReachabilityStatus": "{{ AnalyzeEndpointReachability.Status }}",
          "CheckWindowsUpdateSettings": "{{ CheckWindowsUpdateSettings.Output }}",
          "CheckWindowsUpdateSettingsStatus": "{{ CheckWindowsUpdateSettings.Status }}",
          "CheckWsusSettings": "{{ CheckWsusSettings.Output }}",
          "CheckWsusSettingsStatus": "{{ CheckWsusSettings.Status }}",
          "CheckWindowsUpdateGlobalSettings": "{{ CheckWindowsUpdateGlobalSettings.Output }}",
          "CheckWindowsUpdateGlobalSettingsStatus": "{{ CheckWindowsUpdateGlobalSettings.Status }}",
          "ConsolidateWindowsUpdateLogs": "{{ ConsolidateWindowsUpdateLogs.Output }}",
          "ConsolidateWindowsUpdateLogsStatus": "{{ ConsolidateWindowsUpdateLogs.Status }}"
        },
        "Handler": "final_report.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "isEnd": true,
      "outputs": [
        {
          "Name": "Results",
          "Selector": "$.Payload.result",
          "Type": "String"
        }
      ]
    }
  ],
  "outputs": [
    "FinalReport.Results"
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "6958a4e584e85bcfe9a6833cbca1100db87b53757f952108f76e6324aedd96e5"
      }
    }
  }
}
