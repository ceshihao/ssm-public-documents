{
  "description": "The **AWSSupport-TroubleshootCLBConnectivity** runbook helps you troubleshoot connectivity issues between an AWS Classic Load Balancer (CLB) and its registered Amazon Elastic Compute Cloud (Amazon EC2) instances. This runbook also reviews health checks for the CLB, verifies that best practices are being followed, and creates an Amazon CloudWatch troubleshooting dashboard for you. You can optionally upload the automation output to a specified Amazon Simple Storage Service (Amazon S3) bucket. To help with the security of the data gathered from the automation, the automation evaluates the Amazon S3 bucket configuration to determine if the bucket grants public `read` or `write` access permissions, and it is owned by the AWS account of the user or IAM role in which the Automation runs. If your Amazon S3 bucket uses server-side encryption with AWS Key Management Service keys (SSE-KMS), make sure the user or AWS Identity and Access Management (IAM) role being used to run this automation has the `kms:GenerateDataKey` permissions on the AWS KMS key.\n\n### Important\nCharges are incurred when you exceed the CloudWatch dashboards free tier. For more information, see [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/).\n###",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "RunBestPractices.Summary",
    "RunConnectivityChecks.Summary",
    "CreateTroubleshootingDashboard.Output",
    "UploadOutputToS3.Output"
  ],
  "parameters": {
    "LoadBalancerName": {
      "type": "String",
      "description": "(Required) The name of the AWS Classic Load Balancer (CLB).",
      "allowedPattern": "^(?![\\- ])[a-zA-Z0-9][a-zA-Z0-9\\s\\-]{1,32}(?<!\\-)$"
    },
    "InvestigationType": {
      "type": "String",
      "allowedValues": [
        "Connectivity Issues",
        "Best Practices",
        "Troubleshooting Dashboard"
      ],
      "description": "(Required) The operation you want the runbook to perform. When using `Connectivity Issues`, the automation tries to identify the cause for a connectivity issue between a client and your application behind the AWS Classic Load Balancer (CLB). If `Best Practices` is used, the automation fetches the configuration of your CLB and compares to a set of curated best practices, outlying the differences. Finally, when using `Troublehsooting Dashboard`, the automation creates a set of curated dashboards for your CLB and return the links for access."
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "S3Location": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Optional) The name of the Amazon Simple Storage Service (Amazon S3) bucket you want to send the automation results to. Verify the bucket policy and ACLs do not grant any unnecessary read or write permissions to principals that do not need access to the contents of the bucket. We recommend creating a new temporary Amazon S3 bucket for the purpose of this automation.",
      "default": ""
    },
    "S3LocationPrefix": {
      "type": "String",
      "description": "(Optional) The Amazon S3 object path in the Amazon S3 bucket. For example, if you specify 'CollectedLogs', the results will be uploaded to 's3://DOC-EXAMPLE-BUCKET/CollectedLogs/{{InvestigationType}}_{{automation:EXECUTION_ID}}.txt'.",
      "default": "",
      "allowedPattern": "^$|^[a-zA-Z0-9\\.\\-_\\\\!*'()/]{1,256}$"
    }
  },
  "mainSteps": [
    {
      "name": "VerifyLoadBalancerName",
      "action": "aws:executeScript",
      "description": "Verifies that the CLB you specify in the \"LoadBalancerName\" parameter exists.",
      "onFailure": "Abort",
      "nextStep": "BranchOnInvestigationType",
      "inputs": {
        "InputPayload": {
          "LoadBalancerName": "{{LoadBalancerName}}"
        },
        "Handler": "validate_inputs.validate_inputs",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      }
    },
    {
      "name": "BranchOnInvestigationType",
      "action": "aws:branch",
      "description": "Branches based on the value specified for the \"InvestigationType\" parameter.",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "RunConnectivityChecks",
            "Variable": "{{ InvestigationType }}",
            "StringEquals": "Connectivity Issues"
          },
          {
            "NextStep": "RunBestPractices",
            "Variable": "{{ InvestigationType }}",
            "StringEquals": "Best Practices"
          },
          {
            "NextStep": "CreateTroubleshootingDashboard",
            "Variable": "{{ InvestigationType }}",
            "StringEquals": "Troubleshooting Dashboard"
          }
        ]
      }
    },
    {
      "name": "RunConnectivityChecks",
      "action": "aws:executeScript",
      "description": "Performs connectivity checks to the CLB. Details on connectivity will be included in the action output.",
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "LoadBalancerName": "{{ LoadBalancerName }}"
        },
        "Handler": "run_conn_checks.run_connectivity_checks",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Summary",
          "Selector": "$.Payload.Summary",
          "Type": "String"
        },
        {
          "Name": "Detailed",
          "Selector": "$.Payload.Detailed",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnS3Location"
    },
    {
      "name": "RunBestPractices",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "description": "Verifies that the CLB configuration adheres to Elastic Load Balancing best practices.",
      "inputs": {
        "InputPayload": {
          "LoadBalancerName": "{{ LoadBalancerName }}"
        },
        "Handler": "best_prac.best_prac",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Summary",
          "Selector": "$.Payload.Summary",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnS3Location"
    },
    {
      "name": "CreateTroubleshootingDashboard",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "LoadBalancerName": "{{ LoadBalancerName }}"
        },
        "Handler": "cw_dashboards.cw_dashboards",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.Output",
          "Type": "StringMap"
        }
      ],
      "description": "Creates an Amazon CloudWatch dashboard for your CLB.",
      "nextStep": "BranchOnS3Location"
    },
    {
      "name": "BranchOnS3Location",
      "action": "aws:branch",
      "description": "Branches the workflow based on whether you provided a value for the \"S3Location\" parameter.",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ S3Location }}",
              "StringEquals": ""
            },
            "NextStep": "GetS3BucketPublicStatus"
          }
        ]
      }
    },
    {
      "name": "GetS3BucketPublicStatus",
      "description": "Checks if the Amazon S3 bucket specified in the \"S3Location\" allows anonymous, or public read or write access permissions.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "InputPayload": {
          "S3Location": "{{ S3Location }}"
        },
        "Handler": "get_bucket_public_status.is_bucket_public",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "nextStep": "UploadOutputToS3"
    },
    {
      "name": "UploadOutputToS3",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "description": "Creates a text file with the results of the automation and uploads it to the Amazon S3 bucket you specified in the \"S3Location\" parameter.",
      "isEnd": true,
      "inputs": {
        "InputPayload": {
          "InvestigationType": "{{ InvestigationType }}",
          "S3Location": "{{ S3Location }}",
          "S3LocationPrefix": "{{ S3LocationPrefix }}"
        },
        "Handler": "upload_s3.result_to_s3",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.Output",
          "Type": "StringMap"
        }
      ]
    }
  ],
  "files": {
    "artifact.zip": {
      "checksums": {
        "SHA256": "01dba220ab980fd9aac2e48e6de200ba5110f0c59e204bbdd58932b1ba1dd55a"
      }
    }
  }
}
