{
  "schemaVersion": "2.2",
  "description": "Applies STIGs for Amazon Linux 2, Red Hat Enterprise Linux (RHEL) 7/8, CentOS 7/8, Ubuntu 18/20, and Windows Server 2019/2016/2012 R2 MS (Core/Base).",
  "parameters": {
    "Level": {
      "allowedValues": [
        "High",
        "Medium",
        "Low"
      ],
      "default": "High",
      "description": "(Required) Choose the STIG severity category to apply.",
      "type": "String"
    }
  },
  "mainSteps": [
    {
      "inputs": {
        "runCommand": [
          "$region = 'us-east-1'",
          "$urlSufix = 'amazonaws.com'",
          "[string]$level = '{{ Level }}'",
          "[string]$stagingName = [System.Guid]::NewGuid().Guid",
          "[string]$stagingPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), $stagingName)",
          "[string]$s3Bucket = 'aws-windows-downloads'",
          "[string]$stigZip = 'AWSConfigureSTIG_1_5_1.zip'",
          "[string]$stigZipPath = Join-Path $stagingPath -ChildPath $stigZip",
          "[string]$stigDownloadHash = '79B90C3DAC065C02CC2A79B111D83D8EC68C87C18013CD48743E279259E9A853'",
          "",
          "#Test to confirm OS version",
          "Function Test-OSVersion {",
          "    [string]$osReg = 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'",
          "    $osVersion = (Get-ItemProperty $OSReg).CurrentVersion",
          "    [string]$osType = (Get-ItemProperty $OSReg).EditionID",
          "",
          "    If ( $osVersion -lt 6.3 ) {",
          "        Write-Output 'This document is not designed to support OS versions older then Server 2012R2'",
          "        Exit -1",
          "    }",
          "",
          "    If ( $osType -like \"*Nano*\" ) {",
          "        Write-Output 'This document is not designed to support Nano Server.'",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Make dir and download the required files",
          "Function Get-Zip {",
          "",
          "    If ( !( Test-Path -Path $stagingPath ) ) {",
          "        Try {",
          "            New-Item -ItemType Directory -Path $stagingPath -Force",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to create folder due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "",
          "    $s3Path = 'https://{0}-{1}.s3.{1}.{2}/STIG/{3}'",
          "",
          "    $s3Location = $s3Path -f $s3Bucket, $region, $urlSufix, $stigZip",
          "",
          "    Try {",
          "         (New-Object Net.WebClient).DownloadFile($s3Location, $stigZipPath)",
          "    }",
          "    Catch {",
          "        Write-Output \"Failed to download the required files, due to: $_.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "",
          "    $downloadHash = (Get-FileHash -Path $stigZipPath -Algorithm SHA256).hash",
          "",
          "    If ( $downloadHash -ne $stigDownloadHash ) {",
          "        Write-Output \"The file doesn't have the expected hash.  Exiting.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Expands downloaded zip files, 2012 doesn't have the Expand-Archive",
          "Function Expand-Zip {",
          "    [string]$psVersion = $PSVersionTable.PSVersion.Major",
          "",
          "    If ( $psVersion -le '4' ) {",
          "        Try {",
          "            Add-Type -AssemblyName System.IO.Compression.FileSystem",
          "            [IO.Compression.ZipFile]::ExtractToDirectory($stigZipPath, $stagingPath)",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to extract the zip file due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "    Else {",
          "        Try {",
          "            Expand-Archive -Path $stigZipPath -DestinationPath $stagingPath -Force",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to extract the zip file due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "}",
          "",
          "#Run STIG Script",
          "Function Install-STIG {",
          "    Try {",
          "        &\"$stagingPath\\WinSTIGConfig.ps1\" $level $stagingPath",
          "        Write-Output \"STIGs $level and/or lower have been applied.\"",
          "    }",
          "    Catch {",
          "        Write-Output \"Failed to run the STIG configuration script due to: $_.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "",
          "    If ($LastExitCode -ne 0) {",
          "        Write-Output \"Failed to run the STIG configuration script.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Cleanup any remaining files",
          "Function Cleanup {",
          "    If (Test-Path \"$stagingPath\") {",
          "        Try {",
          "            Remove-Item -Path \"$stagingPath\" -Recurse",
          "            Write-Output 'STIG staging path removed.'",
          "        }",
          "        Catch {",
          "            \"Failed to clean up the staging area, due to: $_.\"",
          "            Exit -1",
          "        }",
          "    }",
          "}",
          "",
          "Test-OSVersion",
          "Get-Zip",
          "Expand-Zip",
          "Install-STIG",
          "Cleanup"
        ]
      },
      "name": "ApplyWindowsSTIGs",
      "action": "aws:runPowerShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      }
    },
    {
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "",
          "set -e",
          "",
          "function CheckOS() {",
          "",
          "    OSFile=/etc/os-release",
          "",
          "    if [ -e $OSFile ]; then",
          "        . $OSFile",
          "        OSVersion=\"$ID${VERSION_ID:+.${VERSION_ID}}\"",
          "    else",
          "        echo \"The file $OSFile does not exist. Failing build.\"",
          "        exit 1",
          "    fi",
          "",
          "    case \"${OSVersion}\" in",
          "     amzn.2*|centos.7*|rhel.7*)",
          "       script='RHEL7stigconfig.sh'",
          "       packageManager='yum'",
          "       Main",
          "       ;;",
          "     centos.8*|rhel.8*)",
          "       script='RHEL8stigconfig.sh'",
          "       packageManager='yum'",
          "       Main",
          "       ;;",
          "     ubuntu.18*)",
          "       script='ubuntu18_04stigconfig.sh'",
          "       packageManager='apt'",
          "       Main",
          "       ;;",
          "     ubuntu.20*)",
          "       script='ubuntu20_04stigconfig.sh'",
          "       packageManager='apt'",
          "       Main",
          "       ;;",
          "     *)",
          "       echo 'This document is designed to work with only Amazon Linux 2, Red Hat Enterprise Linux (RHEL) 7/8, CentOS 7/8, and Ubuntu 18/20. This OS is unsupported. Exiting.'",
          "       exit 1",
          "       ;;",
          "    esac",
          "}",
          "",
          "function CheckForCurl () {",
          "   case \"${packageManager}\" in",
          "     'yum')",
          "       if yum -q list installed curl &>/dev/null; then",
          "         Get_Tar",
          "       else",
          "         sudo yum install curl -y",
          "         Get_Tar",
          "         sudo yum remove curl -y",
          "       fi",
          "       ;;",
          "     'apt')",
          "       if apt -q list installed curl &>/dev/null; then",
          "         Get_Tar",
          "       else",
          "         sudo apt install curl -y",
          "         Get_Tar",
          "         sudo apt remove curl -y",
          "       fi",
          "       ;;",
          "     *)",
          "       echo 'Install type is not supported at this time. Exiting.'",
          "       exit 1",
          "       ;;",
          "   esac",
          "}",
          "",
          "function Get_Tar () {",
          "   s3Location=\"https://$s3Bucket-$region.s3.$region.$urlSufix/STIG/$stigTar\"",
          "",
          "   [ ! -d \"$stagingPath\" ] && { echo 'Staging directory not located properly. Exiting.'; exit 1; }",
          "",
          "   stagingDir=$(echo \"${stagingPath}\" | cut -d'/' -f3-)",
          "",
          "   (ls -l /tmp/ | grep \"$stagingDir\" | cut -d' ' -f 3,4 | grep -E -q \"^(\\s*)root\\s*root\\s*$\") || { echo The 'staging directory is not currently owned by the root account. Exiting.'; exit 1; }",
          "",
          "   sudo curl -L \"$s3Location\" -o \"$stigTarPath\" || { echo 'Failed to download the file properly. Exiting'; exit 1; }",
          "",
          "   comparedHash=\"$(echo \"$stigDownloadHash\" \"$stigTarPath\" | sha256sum --c)\"",
          "",
          "   [[ $comparedHash == *\"OK\"* ]] || { echo 'File does not have the expected hash. Incorrect file downloaded. Exiting.'; Cleanup; exit 1; }",
          "}",
          "",
          "function Expand_Tar () {",
          "   case \"${packageManager}\" in",
          "     'yum')",
          "       if yum -q list installed tar &>/dev/null; then",
          "         sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "       else",
          "         sudo yum install tar -y",
          "         sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "         sudo yum remove tar -y",
          "       fi",
          "       ;;",
          "     'apt')",
          "       if apt -q list installed tar &>/dev/null; then",
          "         sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "       else",
          "         sudo apt install tar -y",
          "         sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "         sudo apt remove tar -y",
          "       fi",
          "       ;;",
          "     *)",
          "       echo 'Install type is not supported at this time. Exiting.'",
          "       exit 1",
          "       ;;",
          "   esac",
          "}",
          "",
          "function Install_STIG () {",
          "    case \"${OSVersion}\" in",
          "     amzn.2*|centos*|rhel*)",
          "       sudo sh \"$stagingPath\"/\"$script\" \"$level\" \"$stagingPath\"",
          "       ;;",
          "     ubuntu*)",
          "       sudo bash \"$stagingPath\"/\"$script\" \"$level\" \"$stagingPath\"",
          "       ;;",
          "     *)",
          "       echo 'This document is designed to work with only Amazon Linux 2, Red Hat Enterprise Linux (RHEL) 7/8, CentOS 7/8, and Ubuntu 18/20. This OS is unsupported. Exiting.'",
          "       exit 1",
          "       ;;",
          "   esac",
          "}",
          "",
          "function Cleanup () {",
          "    [ -d $stagingPath ] && ( (rm -rf \"$stagingPath\" && echo 'Staging directory has been cleaned.') || echo 'Failed to clean up the staging directory.')",
          "}",
          "",
          "function Main () {",
          "    CheckForCurl",
          "    Expand_Tar",
          "    Install_STIG",
          "}",
          "",
          "region='us-east-1'",
          "urlSufix='amazonaws.com'",
          "level=\"{{ Level }}\"",
          "s3Bucket='aws-windows-downloads'",
          "stagingPath=$(mktemp -d)",
          "stigTar='LinuxAWSConfigureSTIG_2022_Q3.tgz'",
          "stigTarPath=\"$stagingPath/$stigTar\"",
          "stigDownloadHash='54960a98d235cf009d2a965df8f3c0ce90db408cb5dac0ed5ba1c7daadb36461'",
          "",
          "CheckOS"
        ]
      },
      "name": "ApplyLinuxSTIGs",
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      }
    }
  ]
}
