{
  "description": "Applies STIGs for RHEL 7, Amazon Linux 2, CentOS 7, and Windows Server 2019/2016/2012 R2 (Core/Base).",
  "schemaVersion": "2.2",
  "parameters": {
    "Level": {
      "allowedValues": [
        "High",
        "Medium",
        "Low"
      ],
      "default": "High",
      "description": "(Required) Choose the STIG severity category to apply.",
      "type": "String"
    }
  },
  "mainSteps": [
    {
      "inputs": {
        "runCommand": [
          "$region = us-east-1",
          "[string]$level = '{{ Level }}'",
          "[string]$stagingPath = 'C:\\__AWSCSTIGPrep__\\STIG'",
          "[string]$stigZip = 'AWSConfigureSTIG_1_2.zip'",
          "[string]$stigZipPath = Join-Path $stagingPath -ChildPath $stigZip",
          "[string]$stigDownloadHash = '47eabe765547675ed09b2898a3066b32cef52055b1cdc8d55efc6278e637a64a'",
          "",
          "#Test to confirm OS version",
          "Function Test-OSVersion {",
          "    [string]$osReg = 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'",
          "    $osVersion = (Get-ItemProperty $OSReg).CurrentVersion",
          "    [string]$osType = (Get-ItemProperty $OSReg).EditionID",
          "",
          "    If ( $osVersion -lt 6.3 ) {",
          "        Write-Output 'This document is not designed to support OS versions older then Server 2012R2'",
          "        Exit -1",
          "    }",
          "",
          "    If ( $osType -like \"*Nano*\" ) {",
          "        Write-Output 'This document is not designed to support Nano Server.'",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Make dir and download the required files",
          "Function Get-Zip {",
          "",
          "    If ( !( Test-Path -Path $stagingPath ) ) {",
          "        Try {",
          "            New-Item -ItemType Directory -Path $stagingPath -Force",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to create folder due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "",
          "    Try {",
          "        $ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\\' -ErrorAction SilentlyContinue",
          "",
          "        If ($region.StartsWith('cn-')) {",
          "            $s3Location = 'https://s3.{0}.amazonaws.com.cn/aws-windows-downloads-{0}/STIG/{1}'",
          "        }",
          "        elseif ($region.StartsWith('us-gov-')) {",
          "            $s3Location = 'https://s3-fips-{0}.amazonaws.com/aws-windows-downloads-{0}/STIG/{1}'",
          "        }",
          "        elseif ($region -eq 'us-east-1') {",
          "            $s3Location = 'https://s3.amazonaws.com/aws-windows-downloads-{0}/STIG/{1}'",
          "        }",
          "        else {",
          "            $s3Location = 'https://aws-windows-downloads-{0}.s3.amazonaws.com/STIG/{1}'",
          "        }",
          "",
          "        $bitSource = $s3Location -f $region, $stigZip",
          "        Write-Output $bitSource",
          "    }",
          "    Catch {",
          "        Write-Output \"Failed to identify the region to download the required files, due to: $_.\"",
          "    }",
          "",
          "    Try {",
          "        Start-BitsTransfer -Source $bitSource -Destination $stigZipPath",
          "    }",
          "    Catch {",
          "        Write-Output \"Failed to download the required files, due to: $_.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "",
          "    $downloadHash = (Get-FileHash -Path $stigZipPath -Algorithm SHA256).hash",
          "",
          "    If ( $downloadHash -ne $stigDownloadHash ) {",
          "        Write-Output \"The file doesn't have the expected hash.  Exiting.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Expands downloaded zip files, 2012 doesn't have the Expand-Archive",
          "Function Expand-Zip {",
          "    [string]$psVersion = $PSVersionTable.PSVersion.Major",
          "",
          "    If ( $psVersion -le '4' ) {",
          "        Try {",
          "            Add-Type -AssemblyName System.IO.Compression.FileSystem",
          "            [IO.Compression.ZipFile]::ExtractToDirectory($stigZipPath, $stagingPath)",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to extract the zip file due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "    Else {",
          "        Try {",
          "            Expand-Archive -Path $stigZipPath -DestinationPath $stagingPath -Force",
          "        }",
          "        Catch {",
          "            Write-Output \"Failed to extract the zip file due to: $_.\"",
          "            Cleanup",
          "            Exit -1",
          "        }",
          "    }",
          "}",
          "",
          "#Run STIG Script",
          "Function Install-STIG {",
          "    Try {",
          "        &\"$stagingPath\\WinSTIGConfig.ps1\" $level $stagingPath",
          "        Write-Output \"STIGs $level and/or lower have been applied.\"",
          "    }",
          "    Catch {",
          "        Write-Output \"Failed to run the STIG configuration script due to: $_.\"",
          "        Cleanup",
          "        Exit -1",
          "    }",
          "}",
          "",
          "#Cleanup any remaining files",
          "Function Cleanup {",
          "    If (Test-Path \"$stagingPath\") {",
          "        Try {",
          "            Remove-Item -Path \"$stagingPath\" -Recurse",
          "            Write-Output 'STIG staging path removed.'",
          "            Exit 0",
          "        }",
          "        Catch {",
          "            \"Failed to clean up the staging area, due to: $_.\"",
          "            Exit -1",
          "        }",
          "    }",
          "}",
          "",
          "Test-OSVersion",
          "Get-Zip",
          "Expand-Zip",
          "Install-STIG",
          "Cleanup"
        ]
      },
      "name": "ApplyWindowsSTIGs",
      "action": "aws:runPowerShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      }
    },
    {
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "",
          "function CheckOS () {",
          "    if $(hostnamectl | grep -oq 'Amazon Linux 2')",
          "    then",
          "        script='AL2stigconfig.sh'",
          "        Main",
          "    elif $(hostnamectl | grep -oq 'Red Hat Enterprise Linux Server 7')",
          "    then",
          "        script='AL2stigconfig.sh'",
          "        Main",
          "    elif $(hostnamectl | grep -oq 'CentOS Linux 7')",
          "    then",
          "        script='AL2stigconfig.sh'",
          "        Main",
          "    else",
          "        { echo 'This document is designed to work with only RHEL 7, Amazon Linux 2, or CentOS 7. This OS is unsupported. Exiting.'; exit 1; }",
          "    fi",
          "}",
          "",
          "function CheckcURL () {",
          "   curlInstall=$(rpm -q curl)",
          "",
          "   if [ ! \"$curlInstall\" == 'package curl is not installed' ];",
          "   then",
          "       Get_s3Location",
          "       Get_Tar",
          "   else",
          "       sudo yum install curl -y",
          "       Get_s3Location",
          "       Get_Tar",
          "       sudo yum remove curl -y",
          "   fi",
          "}",
          "",
          "function Get_s3Location () {",
          "    if [[ $region == cn-* ]];",
          "    then",
          "        s3Location=\"https://s3.$region.amazonaws.com.cn/aws-windows-downloads-$region/STIG/$stigTar\"",
          "    elif [[ $region == us-gov-* ]]",
          "    then",
          "        s3Location=\"https://s3-fips-$region.amazonaws.com/aws-windows-downloads-$region/STIG/$stigTar\"",
          "    elif [ $region == \"us-east-1\" ]",
          "    then",
          "        s3Location=\"https://s3.amazonaws.com/aws-windows-downloads-$region/STIG/$stigTar\"",
          "    else",
          "        s3Location=\"https://aws-windows-downloads-$region.s3.amazonaws.com/STIG/$stigTar\"",
          "    fi",
          "}",
          "",
          "function Get_Tar () {",
          "   [ ! -d \"$stagingPath\" ] && mkdir -p \"$stagingPath\"",
          "",
          "   sudo curl -o \"$stigTarPath\" \"$s3Location\" || { echo 'Failed to download the file properly. Exiting'; exit 1; }",
          "",
          "   comparedHash=\"$(echo \"$stigDownloadHash\" \"$stigTarPath\" | sha256sum --c)\"",
          "",
          "   [[ $comparedHash == *\"OK\"* ]] || { echo 'File does not have the expected hash. Incorrect file downloaded. Exiting.'; Cleanup; exit 1; }",
          "}",
          "",
          "function Expand_Tar () {",
          "   tarInstalled=$(rpm -q tar)",
          "",
          "   if [ ! \"$tarInstalled\" == 'package tar is not installed' ];",
          "   then",
          "       sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "   else",
          "       sudo yum install tar -y",
          "       sudo tar -xvf \"$stigTarPath\" -C \"$stagingPath\" || { echo 'File failed to extract properly.  Unable to continue.'; Cleanup; exit 1; }",
          "       sudo yum remove tar -y",
          "   fi",
          "}",
          "",
          "function Install_STIG () {",
          "   { sudo sh \"$stagingPath\"/\"$script\" \"$level\" \"$stagingPath\" && echo \"STIGs $level and/or lower have been applied.\"; Cleanup; exit 0; } || { echo 'Failed to run the STIG configuration script. Exiting.'; Cleanup; exit 1; }",
          "}",
          "",
          "function Cleanup () {",
          "    [ -d $stagingPath ] && ( (rm -rf \"$stagingPath\" && echo 'Staging directory has been cleaned.') || echo 'Failed to clean up the staging directory.')",
          "}",
          "",
          "function Main () {",
          "    CheckcURL",
          "    Expand_Tar",
          "    Install_STIG",
          "    Cleanup",
          "}",
          "",
          "region=us-east-1",
          "level=\"{{ Level }}\"",
          "stagingPath=\"/var/tmp/__AWS__ConfigPrep\"",
          "stigTar='LinuxAWSConfigureSTIG_1_3.tgz'",
          "stigTarPath=\"$stagingPath/$stigTar\"",
          "stigDownloadHash='c1c763a74fd80a24e464b57d4f28ea64984cdb31ead0d60ac664e9bd4a50855d'",
          "",
          "CheckOS"
        ]
      },
      "name": "ApplyLinuxSTIGs",
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      }
    }
  ]
}
