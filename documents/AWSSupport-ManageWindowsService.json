{
  "description": "The **AWSSupport-ManageWindowsService** automation runbook helps to stop, start, restart, pause, or disable a Microsoft Windows service on a target instance.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the managed instance to manage the services of."
    },
    "WindowsServiceName": {
      "type": "String",
      "description": "(Required) A valid Windows service name.",
      "allowedPattern": "^[a-zA-Z0-9\\- ._]{1,256}$",
      "maxChars": 256
    },
    "StartupType": {
      "type": "String",
      "description": "(Optional) A startup type to apply to the Windows service. The allowed values are: `Auto`, `Demand` (Manual), `Disabled`, `DelayAutoStart`, `Check`. If no value is given, the value `Check` will be used by default.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Auto",
        "Demand",
        "Disabled",
        "DelayedAutoStart"
      ]
    },
    "ServiceAction": {
      "type": "String",
      "description": "(Optional) An action to apply to the Windows service. The allowed values are: `Restart`, `Force-Restart`, `Start`, `Stop`, `Force-Stop`, `Pause`, `Check`. **Note:** `Force-Restart` and `Force-Stop` can be used to restart and to stop a service that has dependent services. If no value is given, the value `Check` will be used by default.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Restart",
        "Force-Restart",
        "Start",
        "Stop",
        "Force-Stop",
        "Pause"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "AssertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "nextStep": "AssertInstanceIsWindows",
      "description": "Checks if the EC2 instance is managed by AWS Systems Manager.",
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      }
    },
    {
      "name": "AssertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "nextStep": "ManageWindowsService",
      "description": "Checks if the EC2 instance is a Windows instance.",
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PlatformType",
        "DesiredValues": [
          "Windows"
        ]
      }
    },
    {
      "name": "ManageWindowsService",
      "action": "aws:runCommand",
      "description": "Runs a PowerShell script to apply the desired configuration to the Windows service on the target instance.",
      "isCritical": true,
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License http://aws.amazon.com/asl/",
            "",
            "# Function to retrieve the status of a Windows service",
            "function Get-ServiceStatus {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [string]$ServiceName",
            "    )",
            "",
            "    # Retrieve service information using WMI",
            "    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \"Name='$ServiceName'\"",
            "",
            "    if ($serviceInfo) {",
            "        return $serviceInfo.State",
            "    }",
            "    else {",
            "        throw \"Service $ServiceName does not exist.\"",
            "    }",
            "}",
            "",
            "# Function to retrieve the startup type of a Windows service",
            "function Get-ServiceStartupType {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [string]$ServiceName",
            "    )",
            "",
            "    # Retrieve service information using WMI",
            "    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \"Name='$ServiceName'\"",
            "",
            "    if ($serviceInfo) {",
            "        return $serviceInfo.StartMode",
            "    }",
            "    else {",
            "        throw \"Service $ServiceName does not exist.\"",
            "    }",
            "}",
            "",
            "# Function to set the status of a Windows service",
            "function Set-ServiceStatus {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Start\", \"Stop\", \"Force-Stop\", \"Pause\", \"Restart\", \"Force-Restart\")]",
            "        [string]$Status,",
            "",
            "        [Parameter(Mandatory = $true)]",
            "        [string]$ServiceName",
            "    )",
            "",
            "    try {",
            "        switch ($Status) {",
            "            'Start' {",
            "                Start-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully started.\"",
            "            }",
            "            'Stop' {",
            "                Stop-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully stopped.\"",
            "            }",
            "            'Force-Stop' {",
            "                Stop-Service -Name $ServiceName -Force -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully stopped.\"",
            "            }",
            "            'Pause' {",
            "                Suspend-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully paused.\"",
            "            }",
            "            'Restart' {",
            "                Restart-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully restarted.\"",
            "            }",
            "            'Force-Restart' {",
            "                Restart-Service -Name $ServiceName -Force -ErrorAction Stop",
            "                Write-Output \"$ServiceName was successfully restarted.\"",
            "            }",
            "        }",
            "    }",
            "    catch {",
            "        throw \"Unable to set $ServiceName status to $Status. Reason: $($_.Exception.Message)\"",
            "    }",
            "}",
            "",
            "# Function to set the startup type of a Windows service",
            "function Set-ServiceStartupType {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Auto\", \"Demand\", \"Disabled\", \"DelayedAutoStart\")]",
            "        [string]$StartupType,",
            "",
            "        [Parameter(Mandatory = $true)]",
            "        [string]$ServiceName",
            "    )",
            "",
            "    try {",
            "        if ($StartupType -eq \"DelayedAutoStart\") {",
            "            # Set startup type using sc.exe with delayed-auto option",
            "            $result = & \"${env:SYSTEMROOT}\\system32\\sc.exe\" config $ServiceName Start= delayed-auto",
            "",
            "            if ($?) {",
            "                Write-Output \"Startup type changed to Automatic (Delayed Start).\"",
            "            }",
            "            else {",
            "                throw $result",
            "            }",
            "        }",
            "        else {",
            "            # Set startup type using sc.exe with specified option",
            "            $result = & \"${env:SYSTEMROOT}\\system32\\sc.exe\" config $ServiceName Start= $StartupType",
            "",
            "            if ($?) {",
            "                Write-Output \"Startup type changed to $StartupType.\"",
            "            }",
            "            else {",
            "                throw $result",
            "            }",
            "        }",
            "    }",
            "    catch {",
            "        throw $_.Exception.Message",
            "    }",
            "}",
            "",
            "try {",
            "    # Placeholder values for service name, status, and startup type",
            "    $service = \"{{ WindowsServiceName }}\"",
            "    $serviceStatus = \"{{ ServiceAction }}\"",
            "    $serviceStartupType = \"{{ StartupType }}\"",
            "",
            "    if ($serviceStartupType -eq \"Check\") {",
            "        # Check and display the current startup type of the service",
            "        $currentServiceStartupType = Get-ServiceStartupType -ServiceName $service",
            "        Write-Output \"$service startup type: $currentServiceStartupType\"",
            "    }",
            "    else {",
            "        # Set the startup type of the service",
            "        Set-ServiceStartupType -ServiceName $service -StartupType $serviceStartupType",
            "    }",
            "",
            "    if ($serviceStatus -eq \"Check\") {",
            "        # Check and display the current status of the service",
            "        $currentServiceStatus = Get-ServiceStatus -ServiceName $service",
            "        Write-Output \"$service status: $currentServiceStatus\"",
            "    }",
            "    else {",
            "        # Set the status of the service",
            "        Set-ServiceStatus -ServiceName $service -Status $serviceStatus",
            "    }",
            "}",
            "catch {",
            "    # Handle exceptions and display error message",
            "    Write-Output $_.Exception.Message",
            "    exit 1",
            "}"
          ]
        }
      }
    }
  ],
  "outputs": [
    "ManageWindowsService.Output"
  ]
}
