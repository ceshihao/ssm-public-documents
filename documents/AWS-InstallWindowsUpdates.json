{
  "schemaVersion": "2.2",
  "description": "Scans for or installs Microsoft Windows updates. Includes the option to filter on Microsoft Knowledge Base (KB) article IDs. Requires SSM agent v2.0.834.0 or higher.",
  "parameters": {
    "Action": {
      "type": "String",
      "description": "(Optional) Choose an option to scan for Microsoft Windows updates, or scan for and install updates.",
      "default": "Install",
      "allowedValues": [
        "Install",
        "Scan"
      ]
    },
    "AllowReboot": {
      "type": "String",
      "description": "(Optional) Specify whether to reboot the instance after installing Windows Updates. The default value is True, which means that instances reboot if any updates are installed. Warning: If you specify False, then some updates might fail to install.",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    },
    "IncludeKbs": {
      "type": "String",
      "description": "(Optional) Specify one or more Microsoft Knowledge Base (KB) article IDs to include. You can install multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.",
      "default": "",
      "allowedPattern": "(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$"
    },
    "ExcludeKbs": {
      "type": "String",
      "description": "(Optional) Specify one or more Microsoft Knowledge Base (KB) article IDs to exclude. You can exclude multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.",
      "default": "",
      "allowedPattern": "(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$"
    },
    "Categories": {
      "type": "String",
      "description": "(Optional) Specify one or more update categories. You can filter categories using comma-separated values. Options: Application, Connectors, CriticalUpdates, DefinitionUpdates, DeveloperKits, Drivers, FeaturePacks, Guidance, Microsoft, SecurityUpdates, ServicePacks, Tools, UpdateRollups, Updates. Valid formats include a single entry, for example: CriticalUpdates. Or you can specify a comma separated list: CriticalUpdates,SecurityUpdates",
      "default": "",
      "allowedPattern": "(^$)|^(Application|Connectors|CriticalUpdates|DefinitionUpdates|DeveloperKits|Drivers|FeaturePacks|Guidance|Microsoft|SecurityUpdates|ServicePacks|Tools|UpdateRollups|Updates)(,(Application|Connectors|CriticalUpdates|DefinitionUpdates|DeveloperKits|Drivers|FeaturePacks|Guidance|Microsoft|SecurityUpdates|ServicePacks|Tools|UpdateRollups|Updates))*$"
    },
    "SeverityLevels": {
      "type": "String",
      "description": "(Optional) Specify one or more MSRC severity levels associated with an update. You can filter severity levels using comma-separated values. Options: Critical, Important, Low, Moderate or Unspecified. Valid formats include a single entry, for example: Critical. Or you can specify a comma separated list: Critical,Important,Low.",
      "default": "",
      "allowedPattern": "(^$)|^(Critical|Important|Low|Moderate|Unspecified)(,(Critical|Important|Low|Moderate|Unspecified))*$"
    },
    "PublishedDaysOld": {
      "type": "String",
      "description": "(Optional) Specify the number of days since the updates were published. For example, if you specify 10, then the system returns all updates that were published 10 days or more since the updates were released by Microsoft.",
      "default": "",
      "allowedPattern": "(^$)|^[0-9]\\d*$"
    },
    "PublishedDateAfter": {
      "type": "String",
      "description": "(Optional) Specify a published-after date. For example, if you specify 01/01/2017, the system returns all updates publish on or after 01/01/2017.",
      "default": "",
      "allowedPattern": "(^$)|^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]((?:19|20)\\d\\d)$"
    },
    "PublishedDateBefore": {
      "type": "String",
      "description": "(Optional) Specify a published-before date. For example, if you specify 01/01/2017, the system returns all updates published on or before 01/01/2017.",
      "default": "",
      "allowedPattern": "(^$)|^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]((?:19|20)\\d\\d)$"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "AWSInstallWindowsUpdates",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": "14400",
        "runCommand": [
          "$action = '{{ Action }}'",
          "[string[]]$includeList = ('{{ IncludeKbs }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)",
          "[string[]]$excludeList = ('{{ ExcludeKbs }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)",
          "[string[]]$categoryList = ('{{ Categories }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)",
          "[string[]]$severityLevelList = ('{{ SeverityLevels }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)",
          "[string]$publishedDateAfter = '{{ PublishedDateAfter }}'",
          "[string]$publishedDateBefore = '{{ PublishedDateBefore }}'",
          "[string]$publishedDaysOld = '{{ PublishedDaysOld }}'",
          "[string]$allowReboot = '{{ AllowReboot }}'",
          "Add-Type -TypeDefinition @'",
          "    using System;",
          "    using System.IO;",
          "    public enum LogLevel { Fatal, Error, Warn, Info, Debug, Trace }",
          "    public class AwsPoshLogger",
          "    {",
          "        public AwsPoshLogger(string logPath, LogLevel level)",
          "        {",
          "            Level = level;",
          "            LogPath = logPath;",
          "            if (!File.Exists(logPath))",
          "            {",
          "                File.Create(logPath).Close();",
          "            }",
          "        }",
          "        public LogLevel Level { get; private set; }",
          "        public string LogPath { get; private set; }",
          "        public void Trace(string message)",
          "        {",
          "            if (LogLevel.Trace <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Trace));",
          "                Console.Write(CreateMessage(message, LogLevel.Trace));",
          "            }",
          "        }",
          "        public void Debug(string message)",
          "        {",
          "            if (LogLevel.Debug <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Debug));",
          "                Console.Write(CreateMessage(message, LogLevel.Debug));",
          "            }",
          "        }",
          "        public void Info(string message)",
          "        {",
          "            if (LogLevel.Info <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Info));",
          "                Console.Write(CreateMessage(message, LogLevel.Info));",
          "            }",
          "        }",
          "        public void Warn(string message)",
          "        {",
          "            if (LogLevel.Warn <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Warn));",
          "                Console.Write(CreateMessage(message, LogLevel.Warn));",
          "            }",
          "        }",
          "        public void Error(string message)",
          "        {",
          "            if (LogLevel.Error <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Error));",
          "                Console.Write(CreateMessage(message, LogLevel.Error));",
          "            }",
          "        }",
          "        public void Fatal(string message)",
          "        {",
          "            if (LogLevel.Fatal <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Fatal));",
          "                Console.Write(CreateMessage(message, LogLevel.Fatal));",
          "            }",
          "        }",
          "        public void LineBreak(string message = \"\")",
          "        {",
          "            File.AppendAllText(LogPath, (message + Environment.NewLine));",
          "            Console.WriteLine(message);",
          "        }",
          "        private string CreateMessage(string message, LogLevel level)",
          "        {",
          "            var dt = DateTime.Now.ToUniversalTime().ToString(\"MM/dd/yyyy HH:mm:ss UTC\");",
          "            return dt + \" | \" + level.ToString() + \" | \" + message + Environment.NewLine;",
          "        }",
          "    }",
          "'@",
          "Function New-AwsPoshLogger",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$LogFile,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateSet('Fatal', 'Error', 'Warn', 'Info', 'Debug', 'Trace')]",
          "        [string]$LogLevel = 'Info'",
          "    )",
          "    Process",
          "    {",
          "        return $(New-Object AwsPoshLogger -ArgumentList $($LogFile,[LogLevel]::$LogLevel))",
          "    }",
          "}",
          "Function Get-StringHash",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$InputString,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$HashName = 'SHA256'",
          "    )",
          "    $hashAlgo = [System.Security.Cryptography.HashAlgorithm]::Create($HashName)",
          "    $hash = $hashAlgo.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($InputString))",
          "    $hashAlgo.Dispose()",
          "    $sb = New-Object System.Text.StringBuilder",
          "    foreach($byte in $hash)",
          "    {",
          "        $null = $sb.Append($byte.ToString('X2'))",
          "    }",
          "    return $sb.ToString()",
          "}",
          "Function Test-PreCondition {",
          "    $osversion = [Environment]::OSVersion.Version",
          "    if ($osversion.Major -le 5) {",
          "   Write-Host 'This document is not supported on Windows Server 2003 or earlier.'",
          "   Exit -1",
          "    }",
          "    if ($osversion.Version -ge '10.0') {",
          "        $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
          "        if ($sku -eq 143 -or $sku -eq 144) {",
          "     Write-Host 'This document is not supported on Windows 2016 Nano Server.'",
          "            Exit -1",
          "        }",
          "    }",
          "}",
          "Function Install-AwsUwiWindowsUpdates",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid(),",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^((KB){0,1}[0-9]{1,7})$\")]",
          "        [string[]]$IncludeKbs,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^((KB){0,1}[0-9]{1,7})$\")]",
          "        [string[]]$ExcludeKbs,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^(CriticalUpdates|SecurityUpdates|DefinitionUpdates|Drivers|FeaturePacks|ServicePacks|Tools|UpdateRollups|Updates|Application|Connectors|DeveloperKits|Guidance|Microsoft)$\")]",
          "        [string[]]$Categories,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^(Critical|Important|Low|Moderate|Unspecified)$\")]",
          "        [string[]]$SeverityLevels,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateRange(1,[int]::MaxValue)]",
          "        [int]$PublishedDaysOld,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]((?:19|20)\\d\\d)$\")]",
          "        [string]$PublishedDateAfter,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidatePattern(\"^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]((?:19|20)\\d\\d)$\")]",
          "        [string]$PublishedDateBefore,",
          "        [Parameter(Mandatory=$false)]",
          "        [switch]$ListOnly,",
          "        [Parameter(Mandatory=$false)]",
          "        [switch]$NoReboot,",
          "        [Parameter(Mandatory=$false)]",
          "        [AwsPoshLogger]$Logger",
          "    )",
          "    DynamicParam",
          "    {",
          "        $runtimeParameterDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary",
          "        if($Logger -eq $null)",
          "        {",
          "            $parameterName = 'LogLevel'",
          "            $parameterAttribute = New-Object System.Management.Automation.parameterAttribute",
          "            $parameterAttribute.Mandatory = $false",
          "            $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]",
          "            $attributeCollection.Add($parameterAttribute)",
          "            [string[]]$arrSet = @('Fatal', 'Error', 'Warn', 'Info', 'Debug', 'Trace')",
          "            $validateSetAttribute = New-Object System.Management.Automation.validateSetAttribute($arrSet)",
          "            $attributeCollection.Add($validateSetAttribute)",
          "            $runtimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($parameterName, [string], $attributeCollection)",
          "            $runtimeParameter.Value = \"Info\"",
          "            $runtimeParameterDictionary.Add($parameterName, $runtimeParameter)",
          "        }",
          "        return $runtimeParameterDictionary",
          "    }",
          "    Begin",
          "    {",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue'}",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = \"Stop\"",
          "        $functionName = \"Install-AwsUwiWindowsUpdates\"",
          "        $moduleName = \"AWSUpdateWindowsInstance\"",
          "        if(-not ($WorkingDirectory))",
          "        {",
          "            $WorkingDirectory = Join-Path ${env:ProgramData} (\"Amazon\\$($moduleName)\\$($Id)\\$($functionName)\")",
          "        }",
          "        else",
          "        {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "        if(-not (Test-Path $WorkingDirectory))",
          "        {",
          "            New-Item $WorkingDirectory -Type Directory -Force | Out-Null",
          "        }",
          "        if($Logger -eq $null)",
          "        {",
          "            if(-not ($LogLevel))",
          "            {",
          "                $LogLevel = \"Info\"",
          "            }",
          "            $logFile = Join-Path $WorkingDirectory \"$($functionName).log\"",
          "            if(-not (Test-Path $logFile))",
          "            {",
          "                New-Item $logFile -type File -Force | Out-Null",
          "            }",
          "            $Logger = New-AwsPoshLogger -LogFile $logFile -LogLevel $LogLevel",
          "        }",
          "    }",
          "    Process",
          "    {",
          "        $searchString  = \"IsHidden=0 and IsInstalled=0\"",
          "        $categoryIds = @()",
          "        if($Categories)",
          "        {",
          "            $Logger.Info(\"Filtering on Category. (Pre-Search)\")",
          "            if($Categories -contains 'Application'){$categoryIds += '5C9376AB-8CE6-464A-B136-22113DD69801'}",
          "            if($Categories -contains 'Connectors'){$categoryIds += '434DE588-ED14-48F5-8EED-A15E09A991F6'}",
          "            if($Categories -contains 'CriticalUpdates'){$categoryIds += 'E6CF1350-C01B-414D-A61F-263D14D133B4'}",
          "            if($Categories -contains 'DefinitionUpdates'){$categoryIds += 'E0789628-CE08-4437-BE74-2495B842F43B'}",
          "            if($Categories -contains 'DeveloperKits'){$categoryIds += 'E140075D-8433-45C3-AD87-E72345B36078'}",
          "            if($Categories -contains 'Drivers'){$categoryIds += 'EBFC1FC5-71A4-4F7B-9ACA-3B9A503104A0'}",
          "            if($Categories -contains 'FeaturePacks'){$categoryIds += 'B54E7D24-7ADD-428F-8B75-90A396FA584F'}",
          "            if($Categories -contains 'Guidance'){$categoryIds += '9511D615-35B2-47BB-927F-F73D8E9260BB'}",
          "            if($Categories -contains 'Microsoft'){$categoryIds += '56309036-4c77-4dd9-951a-99ee9c246a94'}",
          "            if($Categories -contains 'SecurityUpdates'){$categoryIds += '0FA1201D-4330-4FA8-8AE9-B877473B6441'}",
          "            if($Categories -contains 'ServicePacks'){$categoryIds += '68C5B0A3-D1A6-4553-AE49-01D3A7827828'}",
          "            if($Categories -contains 'Tools'){$categoryIds += 'B4832BD8-E735-4761-8DAF-37F882276DAB'}",
          "            if($Categories -contains 'UpdateRollups'){$categoryIds += '28BC880E-0592-4CBF-8F95-C79B17911D5F'}",
          "            if($Categories -contains 'Updates'){$categoryIds += 'CD5FFD1E-E932-4E3A-BF74-18BF0B1BBD83'}",
          "            if($categoryIds.Count -gt 0)",
          "            {",
          "                $tmp = $searchString",
          "                $searchString = ''",
          "                foreach($categoryId in $categoryIds)",
          "                {",
          "                    [string]$searchString += \"($tmp and CategoryIDs contains '$categoryId') or \"",
          "                }",
          "                $searchString = $searchString.TrimEnd(' or ')",
          "            }",
          "        }",
          "        $updateSession = New-Object -ComObject Microsoft.Update.Session",
          "        $updateSearcher = $updateSession.CreateUpdateSearcher()",
          "        $Logger.Info(\"Searching for Windows Updates.\")",
          "        [int]$retryCount = 0",
          "        [int]$retryAttempts = 3",
          "        while($retryCount -lt $retryAttempts)",
          "        {",
          "            try",
          "            {",
          "                $searchResult = $updateSearcher.Search($searchString)",
          "                $retryCount = $retryAttempts",
          "            }",
          "            catch",
          "            {",
          "                $retryCount++",
          "                if($retryCount -eq $retryAttempts)",
          "                {",
          "                    $Logger.Error(\"Searching for updates resulted in error: $($_)\")",
          "                    exit -1",
          "                }",
          "            }",
          "        }",
          "        $Logger.Info(\"Found $($searchResult.Updates.count) available Windows Updates.\")",
          "        $updatesCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "        foreach($update in $searchResult.Updates)",
          "        {",
          "            if ($update.EulaAccepted -eq 0)",
          "            {",
          "                $update.AcceptEula()",
          "            }",
          "            $updatesCollection.Add($update) | Out-Null",
          "        }",
          "        if($updatesCollection.Count -gt 0)",
          "        {",
          "            if($SeverityLevels)",
          "            {",
          "                $Logger.Info(\"Filtering on Severity. (Post-Search)\")",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    if($SeverityLevels -contains $update.MsrcSeverity)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                    if(-not ($update.MsrcSeverity) -and $SeverityLevels -contains 'Unspecified')",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on Severity.\")",
          "            }",
          "            if($IncludeKbs)",
          "            {",
          "                $Logger.Info(\"Filtering on IncludeKbs. (Post-Search)\")",
          "                for([int]$i=0; $i -le $IncludeKbs.Length-1; $i++)",
          "                {",
          "                    $IncludeKbs[$i] = $IncludeKbs[$i].ToLower().TrimStart(\"kb\")",
          "                }",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    if($IncludeKbs -contains $update.KBArticleIDs)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on IncludeKbs.\")",
          "            }",
          "            if($ExcludeKbs)",
          "            {",
          "                $Logger.Info(\"Filtering on ExcludeKbs. (Post-Search)\")",
          "                for([int]$i=0; $i -le $ExcludeKbs.Length-1; $i++)",
          "                {",
          "                    $ExcludeKbs[$i] = $ExcludeKbs[$i].ToLower().TrimStart(\"kb\")",
          "                }",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    if($ExcludeKbs -notcontains $update.KBArticleIDs)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on ExcludeKbs.\")",
          "            }",
          "            if($PublishedDaysOld -gt 0)",
          "            {",
          "                $Logger.Info(\"Filtering on PublishedDaysOld. (Post-Search)\")",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                $dateNow = (Get-Date).ToUniversalTime()",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    $updateAge = (New-TimeSpan -Start $update.LastDeploymentChangeTime -End $dateNow).Days",
          "                    if($updateAge -ge $PublishedDaysOld)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on PublishedDaysOld.\")",
          "            }",
          "            if($PublishedDateAfter)",
          "            {",
          "                $Logger.Info(\"Filtering on PublishedDateAfter. (Post-Search)\")",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    $days = (New-TimeSpan -Start ([DateTime]$PublishedDateAfter) -End $update.LastDeploymentChangeTime).Days",
          "                    if($days -ge 0)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on PublishedDateAfter.\")",
          "            }",
          "            if($PublishedDateBefore)",
          "            {",
          "                $Logger.Info(\"Filtering on PublishedDateBefore. (Post-Search)\")",
          "                $tempCollection = New-Object -ComObject Microsoft.Update.UpdateColl",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    $days = (New-TimeSpan -Start ([DateTime]$PublishedDateBefore) -End $update.LastDeploymentChangeTime).Days",
          "                    if($days -le 0)",
          "                    {",
          "                        $tempCollection.Add($update) | Out-Null",
          "                    }",
          "                }",
          "                $updatesCollection = $tempCollection",
          "                $Logger.Info(\"There are $($updatesCollection.Count) Windows Updates after filtering on PublishedDateBefore.\")",
          "            }",
          "        }",
          "        foreach($update in $updatesCollection)",
          "        {",
          "            $Logger.Info(\"$($update.Title) - Published date: $($update.LastDeploymentChangeTime.ToString(\"MM/dd/yyyy\"))\")",
          "        }",
          "        if(-not ($ListOnly))",
          "        {",
          "            $downloadedCollection = New-Object -ComObject \"Microsoft.Update.UpdateColl\"",
          "            if($updatesCollection.Count -gt 0)",
          "            {",
          "                $Logger.Info(\"Downloading Windows Updates.\")",
          "                [int]$downloadErrors = 0",
          "                foreach($update in $updatesCollection)",
          "                {",
          "                    if($update.IsDownloaded -ne $true)",
          "                    {",
          "                        $tempCollection = New-Object -ComObject \"Microsoft.Update.UpdateColl\"",
          "                        $tempCollection.Add($update) | Out-Null",
          "                        $downloader = $updateSession.CreateUpdateDownloader()",
          "                        $downloader.Updates = $tempCollection",
          "                        $retryCount = 0",
          "                        while($retryCount -lt $retryAttempts)",
          "                        {",
          "                            try",
          "                            {",
          "                                $downloader.Download() | Out-Null",
          "                                $downloadedCollection.Add($update) | Out-Null",
          "                                $Logger.Info(\"Successfully Downloaded: $($update.Title) - Published date: $($update.LastDeploymentChangeTime.ToString(\"MM/dd/yyyy\"))\")",
          "                                $retryCount = $retryAttempts",
          "                            }",
          "                            catch",
          "                            {",
          "                                $retryCount++",
          "                                if($retryCount -eq $retryAttempts)",
          "                                {",
          "                                    $Logger.Error(\"Downloading $($update.Title) resulted in error: $($_)\")",
          "                                    $downloadErrors++",
          "                                }",
          "                            }",
          "                        }",
          "                    }",
          "                    else",
          "                    {",
          "                        $downloadedCollection.Add($update) | Out-Null",
          "                        $Logger.Info(\"Successfully Downloaded: $($update.Title)\")",
          "                    }",
          "                }",
          "                $Logger.Info(\"$($downloadedCollection.Count) Windows Updates will be installed.\")",
          "            }",
          "            $installedKbs = @()",
          "            if($downloadedCollection.Count -gt 0)",
          "            {",
          "                [int]$installErrors = 0",
          "                [bool]$installedUpdates = $false",
          "                foreach($update in $downloadedCollection)",
          "                {",
          "                    if($update.IsInstalled -ne $true)",
          "                    {",
          "                        $tempUpdatesCollection = New-Object -ComObject \"Microsoft.Update.UpdateColl\"",
          "                        $tempUpdatesCollection.Add($update) | Out-Null",
          "                        $updatesInstaller = $updateSession.CreateUpdateInstaller()",
          "                        $updatesInstaller.Updates = $tempUpdatesCollection",
          "                        try",
          "                        {",
          "                            $installObj = $updatesInstaller.Install() | Out-Null",
          "                            $installedUpdates = $true",
          "                            [string]$message = \"Installed: $($update.Title)\"",
          "                            if($installObj.RebootRequired -eq $true)",
          "                            {",
          "                                $message += \" [Reboot Required]\"",
          "                            }",
          "                            $Logger.Info($message)",
          "                        }",
          "                        catch",
          "                        {",
          "                            $Logger.Error(\"Installation of $($update.Title) resulted in error: $($_)\")",
          "                            $installErrors++",
          "                        }",
          "                    }",
          "                    $hash = Get-StringHash \"$($update.Title)$($update.KBArticleIDs)\"",
          "                    $properties = @{Title=$update.Title;KBArticleIDs=$update.KBArticleIDs;Hash=$hash;}",
          "                    $installedKbs += New-Object -TypeName PSObject -Property $properties",
          "                }",
          "            }",
          "            if(($downloadErrors + $installErrors) -gt 0)",
          "            {",
          "                $Logger.Info(\"$($downloadErrors.ToString()) download and $($installErrors.ToString()) installation errors occurred.\")",
          "                exit -1",
          "            }",
          "            if($installedKbs)",
          "            {",
          "                $stateFile = Join-Path $WorkingDirectory 'state.json'",
          "                $stateFileObjs = @()",
          "                if(Test-Path $stateFile)",
          "                {",
          "                    try",
          "                    {",
          "                        [array]$stateFileObjs = Get-Content -Path $stateFile -Raw | ConvertFrom-Json",
          "                    }",
          "                    catch",
          "                    {",
          "                        $Logger.Error(\"Attempt to read state file resulted in error: $($_)\")",
          "                        exit -1",
          "                    }",
          "                }",
          "                foreach($installedKb in $installedKbs)",
          "                {",
          "                    $match = $stateFileObjs | Where-Object {$_.Hash -eq $installedKb.Hash}",
          "                    if($match)",
          "                    {",
          "                        $Logger.Error(\"Multiple attempts to install the same KB failed: $($installedKb.Title)\")",
          "                        exit -1",
          "                    }",
          "                    else",
          "                    {",
          "                        $stateFileObjs += $installedKb",
          "                    }",
          "                }",
          "                try",
          "                {",
          "                    ConvertTo-Json -InputObject @($stateFileObjs) | Out-File $stateFile -Force",
          "                }",
          "                catch",
          "                {",
          "                    $Logger.Error(\"Writing state file resulted in error: $($_)\")",
          "                    exit -1",
          "                }",
          "            }",
          "            if($installedUpdates -and (-not $NoReboot))",
          "            {",
          "                $Logger.Info(\"Windows Updates were successfully installed. Rebooting.\")",
          "                exit 3010",
          "            }",
          "        }",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "    }",
          "}",
          "Function Invoke-AWSInstallWindowsUpdate {",
          "    Test-PreCondition",
          "    try {",
          "        $root = $PSScriptRoot.Split('\\')",
          "        $runCommandId = $root[$root.Count - 3]",
          "    } catch {",
          "        Write-Host ('Error encountered when obtaining the run command id: {0}.' -f $_.Exception.Message)",
          "        Exit -1",
          "        }",
          "    $command = 'Install-AwsUwiWindowsUpdates -Id $runCommandId'",
          "    if ($action -ieq 'Scan') { $command += ' -ListOnly' }",
          "    if ($includeList) { $command += ' -IncludeKbs $($includeList)' }",
          "    if ($excludeList) { $command += ' -ExcludeKbs $($excludeList)' }",
          "    if ($categoryList) { $command += ' -Categories $($categoryList)' }",
          "    if ($severityLevelList) { $command += ' -SeverityLevel $($severityLevelList)' }",
          "    if ($publishedDateAfter) { $command += ' -PublishedDateAfter $($publishedDateAfter)' }",
          "    if ($publishedDateBefore) { $command += ' -PublishedDateBefore $($publishedDateBefore)' }",
          "    if ($publishedDaysOld) { $command += ' -PublishedDaysOld $([int]$publishedDaysOld)' }",
          "    if ($allowReboot -ieq 'False') { $command += ' -NoReboot' }",
          "    Invoke-Expression $command",
          "}",
          "Invoke-AWSInstallWindowsUpdate"
        ]
      }
    }
  ]
}
