{
  "description": "## Id\nAWSResilienceHub-RestoreS3BucketFromBackupSOP_2020-09-21\n\n## Intent\nRestore an S3 bucket from a backup bucket\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * Backup S3 bucket to restore files from it to the target bucket\n  * Target S3 bucket\n\n## Depends on\nAWSResilienceHub-CleanS3BucketUtil_2020-03-03\n\n## Permissions required for AutomationAssumeRole\n  * s3:PutObject\n  * s3:GetObject\n  * s3:ListBucket\n  * s3:ListObjectVersions\n  * s3:ListBucketVersions\n  * s3:DeleteObject\n  * s3:DeleteObject*\n  * SNS:Publish\n  * ssm:StartAutomationExecution\n  * ssm:GetAutomationExecution\n  * iam:PassRole\n\n##### Permissions required in case KMS encryption is used\n  * kms:GenerateDataKey\n  * kms:Decrypt\n  * kms:Encrypt\n\n## Supports Rollback\nNo\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) S3BackupBucketName\n  * type: String\n  * description: The S3 backup bucket name to copy files from it to the S3 restore bucket\n\n### (Required) S3BucketToRestoreName\n  * type: String\n  * description: The S3 bucket name to restore files from the S3 backup bucket\n\n### (Required) SNSTopicARNForManualApproval\n  * type: String\n  * description: The ARN of the SNS Topic where a user will receive the notification about the manual approval of restore bucket clean-up if some files exist there\n\n### (Required) IAMPrincipalForManualApproval\n  * type: String\n  * description: ARN of AWS authenticated principal who are able to either approve or reject the clean-up of restore bucket if there are some. Can be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN\n\n### (Optional) ApproveCleanRestoreBucketAutomatically\n  * type: Boolean\n  * description: If true, approve cleaning of the restore bucket automatically if files exist there. Otherwise, give user a chance to decide\n  * default: false\n\n## Details\nThe document checks if target bucket has any files, requests approval to clean target bucket if necessary,\ncleans target bucket and copies files from backup bucket to target bucket.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * CheckExistenceOfObjectsInRestoreBucket\n  * CleanOrRestoreBranch\n  * ApproveCleanRestoreBucketOrCancel\n  * CleanRestoreBucket\n  * RestoreFromBackup\n  * OutputRecoveryTime\n\n## Outputs\n### CleanRestoreBucket.NumberOfDeletedObjects\n  * type: String\n  * description: Number of objects deleted from target bucket before restore\n\n### RestoreFromBackup.RecoveryTimeSeconds\n  * type: String\n  * description: Time in seconds taken by copying files only\n\n### RestoreFromBackup.RestoredFilesNumber\n  * type: String\n  * description: Number of restored files\n\n### OutputRecoveryTime.RecoveryTime\n  * type: String\n  * description: SOP execution time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "S3BackupBucketName": {
      "type": "String",
      "description": "(Required) The S3 backup bucket name to copy files from it to the S3 restore bucket."
    },
    "S3BucketToRestoreName": {
      "type": "String",
      "description": "(Required) The S3 bucket name to restore files from the S3 backup bucket."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "SNSTopicARNForManualApproval": {
      "type": "String",
      "description": "(Required) The ARN of the SNS Topic where a user will receive the notification\nabout the manual approval of restore bucket clean-up if some files exist there."
    },
    "IAMPrincipalForManualApproval": {
      "type": "String",
      "description": "(Required) ARN of AWS authenticated principal who are able to either approve or reject the clean-up of restore bucket if there are some files.\nCan be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN"
    },
    "ApproveCleanRestoreBucketAutomatically": {
      "type": "Boolean",
      "description": "(Optional) If it is true, approve cleaning of the restore bucket automatically if files exist there.\nOtherwise, give a user a chance to decide. It is false by default.",
      "default": false
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime",
    "CleanRestoreBucket.NumberOfDeletedObjects",
    "RestoreFromBackup.RecoveryTimeSeconds",
    "RestoreFromBackup.RestoredFilesNumber"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "start_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "CheckExistenceOfObjectsInRestoreBucket",
      "description": "Check if there are already any files in restore bucket and output their amount",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "NumberOfObjectsExistInRestoreBucket",
          "Selector": "$.Payload.NumberOfObjectsExistInRestoreBucket",
          "Type": "String"
        },
        {
          "Name": "AreObjectsExistInRestoreBucket",
          "Selector": "$.Payload.AreObjectsExistInRestoreBucket",
          "Type": "Boolean"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "check_existence_of_objects_in_bucket",
        "InputPayload": {
          "S3BucketToRestoreName": "{{S3BucketToRestoreName}}"
        },
        "Script": "import boto3\nfrom datetime import datetime\nfrom botocore.config import Config\n\n\n\n\ndef check_existence_of_objects_in_bucket(events, context):\n    \"\"\"\n    Check existence of versioned and deleted objects in bucket\n    :return: Number of objects exist in restore bucket\n    \"\"\"\n    if 'S3BucketToRestoreName' not in events:\n        raise KeyError('Requires S3BucketToRestoreName  in events')\n\n    s3_bucket_to_restore_name = events['S3BucketToRestoreName']\n\n    print(f'Sending the list_object_versions request fore the {s3_bucket_to_restore_name} bucket...')\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    response: dict = boto3.client('s3', config=config).list_object_versions(Bucket=s3_bucket_to_restore_name)\n    print(f'The response from the list_object_versions: {response}')\n\n    versions: dict = response.get('Versions')\n    delete_markers: dict = response.get('DeleteMarkers')\n\n    number_of_objects_exist_in_restore_bucket = 0\n    if versions:\n        number_of_objects_exist_in_restore_bucket += len(versions)\n    if delete_markers:\n        number_of_objects_exist_in_restore_bucket += len(delete_markers)\n\n    print(f'The number of existing objects in restore bucket is {number_of_objects_exist_in_restore_bucket}')\n\n    return {'NumberOfObjectsExistInRestoreBucket': str(number_of_objects_exist_in_restore_bucket),\n            \"AreObjectsExistInRestoreBucket\": False if number_of_objects_exist_in_restore_bucket == 0 else True}"
      }
    },
    {
      "name": "CleanOrRestoreBranch",
      "description": "Check if there are any files to clean and if approve is required",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ApproveCleanRestoreBucketAutomatically}}",
                "BooleanEquals": false
              },
              {
                "Variable": "{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "ApproveCleanRestoreBucketOrCancel"
          },
          {
            "And": [
              {
                "Variable": "{{ApproveCleanRestoreBucketAutomatically}}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "CleanRestoreBucket"
          }
        ],
        "Default": "RestoreFromBackup"
      }
    },
    {
      "name": "ApproveCleanRestoreBucketOrCancel",
      "description": "Request approve from user to clean target bucket",
      "action": "aws:approve",
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "inputs": {
        "NotificationArn": "{{SNSTopicARNForManualApproval}}",
        "Message": "Do you agree to clean up the {{S3BucketToRestoreName}} bucket before the restore process? There {{CheckExistenceOfObjectsInRestoreBucket.NumberOfObjectsExistInRestoreBucket}} file(-s) exist.",
        "MinRequiredApprovals": 1,
        "Approvers": [
          "{{IAMPrincipalForManualApproval}}"
        ]
      }
    },
    {
      "name": "CleanRestoreBucket",
      "description": "Clean target bucket",
      "action": "aws:executeAutomation",
      "inputs": {
        "DocumentName": "AWSResilienceHub-CleanS3BucketUtil_2020-03-03",
        "RuntimeParameters": {
          "AutomationAssumeRole": "{{AutomationAssumeRole}}",
          "S3BucketNameToClean": "{{S3BucketToRestoreName}}"
        }
      },
      "outputs": [
        {
          "Name": "NumberOfDeletedObjects",
          "Selector": "$.NumberOfDeletedObjects",
          "Type": "String"
        }
      ]
    },
    {
      "name": "RestoreFromBackup",
      "description": "Restore by copying files from source bucket to target bucket",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestoredFilesNumber",
          "Selector": "$.Payload.RestoredFilesNumber",
          "Type": "Integer"
        },
        {
          "Name": "RecoveryTimeSeconds",
          "Selector": "$.Payload.RecoveryTimeSeconds",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "restore_from_backup",
        "InputPayload": {
          "S3BackupBucketName": "{{S3BackupBucketName}}",
          "S3BucketToRestoreName": "{{S3BucketToRestoreName}}"
        },
        "Script": "import boto3\nfrom datetime import datetime\nfrom botocore.config import Config\n\n\n\n\ndef restore_from_backup(events, context):\n    \"\"\"\n    Restore objects from backup bucket\n    :return: Copied files number, recovery time seconds\n    \"\"\"\n    if 'S3BucketToRestoreName' not in events or 'S3BackupBucketName' not in events:\n        raise KeyError('Requires S3BucketToRestoreName and S3BackupBucketName in events')\n\n    start = datetime.utcnow()\n\n    s3_backup_bucket_name = events['S3BackupBucketName']\n    s3_bucket_to_restore_name = events['S3BucketToRestoreName']\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    s3_client = boto3.client('s3', config=config)\n    paginator = s3_client.get_paginator('list_objects_v2')\n    pages = paginator.paginate(Bucket=s3_backup_bucket_name)\n\n    print(f'Starting to copy files from the {s3_backup_bucket_name} bucket '\n          f'to the {s3_bucket_to_restore_name} bucket...')\n\n    copied_count = 0\n    for page in pages:\n        print(f'The response from the list_objects_v2: {page}')\n        if 'Contents' in page:\n            for content in page[\"Contents\"]:\n                print(f'Copying the file {content[\"Key\"]}...')\n\n                copy_source = {\n                    'Bucket': s3_backup_bucket_name,\n                    'Key': content[\"Key\"]\n                }\n                s3_client.copy(copy_source, s3_bucket_to_restore_name, content[\"Key\"])\n\n                print(f'The file {content[\"Key\"]} was successfully copied')\n\n                copied_count += 1\n\n    print(f'The file number of copied files is {copied_count}')\n\n    return {'CopiedFilesNumber': copied_count, 'RecoveryTimeSeconds': str((datetime.utcnow() - start).total_seconds())}"
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "recovery_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
