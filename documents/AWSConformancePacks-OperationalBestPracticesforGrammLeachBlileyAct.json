{
  "schemaVersion": "1.0",
  "description": "Operational Best Practices for Gramm-Leach-Bliley Act (GLBA)",
  "templateBody": {
    "Parameters": {
      "AccessKeysRotatedParamMaxAccessKeyAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMaxPasswordAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMinimumPasswordLength": {
        "Default": "14",
        "Type": "String"
      },
      "IamPasswordPolicyParamPasswordReusePrevention": {
        "Default": "24",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireLowercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireNumbers": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireSymbols": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireUppercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Default": "90",
        "Type": "String"
      },
      "RedshiftClusterConfigurationCheckParamClusterDbEncrypted": {
        "Default": "TRUE",
        "Type": "String"
      },
      "RedshiftClusterConfigurationCheckParamLoggingEnabled": {
        "Default": "TRUE",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Default": "TRUE",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Default": "TRUE",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Default": "TRUE",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Default": "TRUE",
        "Type": "String"
      }
    },
    "Resources": {
      "AccessKeysRotated": {
        "Properties": {
          "ConfigRuleName": "access-keys-rotated",
          "InputParameters": {
            "maxAccessKeyAge": {
              "Fn::If": [
                "accessKeysRotatedParamMaxAccessKeyAge",
                {
                  "Ref": "AccessKeysRotatedParamMaxAccessKeyAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ACCESS_KEYS_ROTATED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwCacheEnabledAndEncrypted": {
        "Properties": {
          "ConfigRuleName": "api-gw-cache-enabled-and-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AutoscalingLaunchConfigPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "autoscaling-launch-config-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::AutoScaling::LaunchConfiguration"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "BackupRecoveryPointEncrypted": {
        "Properties": {
          "ConfigRuleName": "backup-recovery-point-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Backup::RecoveryPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "BACKUP_RECOVERY_POINT_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudTrailEncryptionEnabled": {
        "Properties": {
          "ConfigRuleName": "cloud-trail-encryption-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUD_TRAIL_ENCRYPTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CloudwatchLogGroupEncrypted": {
        "Properties": {
          "ConfigRuleName": "cloudwatch-log-group-encrypted",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CLOUDWATCH_LOG_GROUP_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectArtifactEncryption": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-artifact-encryption",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_ARTIFACT_ENCRYPTION"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "CodebuildProjectS3LogsEncrypted": {
        "Properties": {
          "ConfigRuleName": "codebuild-project-s3-logs-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::CodeBuild::Project"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "CODEBUILD_PROJECT_S3_LOGS_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DmsReplicationNotPublic": {
        "Properties": {
          "ConfigRuleName": "dms-replication-not-public",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DMS_REPLICATION_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DynamodbTableEncryptedKms": {
        "Properties": {
          "ConfigRuleName": "dynamodb-table-encrypted-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::DynamoDB::Table"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DYNAMODB_TABLE_ENCRYPTED_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsSnapshotPublicRestorableCheck": {
        "Properties": {
          "ConfigRuleName": "ebs-snapshot-public-restorable-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2EbsEncryptionByDefault": {
        "Properties": {
          "ConfigRuleName": "ec2-ebs-encryption-by-default",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_EBS_ENCRYPTION_BY_DEFAULT"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EcsContainersReadonlyAccess": {
        "Properties": {
          "ConfigRuleName": "ecs-containers-readonly-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ECS::TaskDefinition"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ECS_CONTAINERS_READONLY_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsAccessPointEnforceRootDirectory": {
        "Properties": {
          "ConfigRuleName": "efs-access-point-enforce-root-directory",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EFS::AccessPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_ACCESS_POINT_ENFORCE_ROOT_DIRECTORY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsAccessPointEnforceUserIdentity": {
        "Properties": {
          "ConfigRuleName": "efs-access-point-enforce-user-identity",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EFS::AccessPoint"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_ACCESS_POINT_ENFORCE_USER_IDENTITY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EfsEncryptedCheck": {
        "Properties": {
          "ConfigRuleName": "efs-encrypted-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EFS_ENCRYPTED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchEncryptedAtRest": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-encrypted-at-rest",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_ENCRYPTED_AT_REST"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchInVpcOnly": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-in-vpc-only",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_IN_VPC_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchNodeToNodeEncryptionCheck": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-node-to-node-encryption-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Elasticsearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EmrMasterNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "emr-master-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EMR_MASTER_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EncryptedVolumes": {
        "Properties": {
          "ConfigRuleName": "encrypted-volumes",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Volume"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ENCRYPTED_VOLUMES"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "GuarddutyEnabledCentralized": {
        "Properties": {
          "ConfigRuleName": "guardduty-enabled-centralized",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "GUARDDUTY_ENABLED_CENTRALIZED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamGroupHasUsersCheck": {
        "Properties": {
          "ConfigRuleName": "iam-group-has-users-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Group"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_GROUP_HAS_USERS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPasswordPolicy": {
        "Properties": {
          "ConfigRuleName": "iam-password-policy",
          "InputParameters": {
            "MaxPasswordAge": {
              "Fn::If": [
                "iamPasswordPolicyParamMaxPasswordAge",
                {
                  "Ref": "IamPasswordPolicyParamMaxPasswordAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "MinimumPasswordLength": {
              "Fn::If": [
                "iamPasswordPolicyParamMinimumPasswordLength",
                {
                  "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PasswordReusePrevention": {
              "Fn::If": [
                "iamPasswordPolicyParamPasswordReusePrevention",
                {
                  "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireLowercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireLowercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireNumbers": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireNumbers",
                {
                  "Ref": "IamPasswordPolicyParamRequireNumbers"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireSymbols": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireSymbols",
                {
                  "Ref": "IamPasswordPolicyParamRequireSymbols"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireUppercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireUppercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_PASSWORD_POLICY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithAdminAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-admin-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithFullAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-full-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamRootAccessKeyCheck": {
        "Properties": {
          "ConfigRuleName": "iam-root-access-key-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_ROOT_ACCESS_KEY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserGroupMembershipCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-group-membership-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_GROUP_MEMBERSHIP_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserNoPoliciesCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-no-policies-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_NO_POLICIES_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserUnusedCredentialsCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-unused-credentials-check",
          "InputParameters": {
            "maxCredentialUsageAge": {
              "Fn::If": [
                "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge",
                {
                  "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_UNUSED_CREDENTIALS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InstancesInVpc": {
        "Properties": {
          "ConfigRuleName": "ec2-instances-in-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INSTANCES_IN_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InternetGatewayAuthorizedVpcOnly": {
        "Properties": {
          "ConfigRuleName": "internet-gateway-authorized-vpc-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::InternetGateway"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "KinesisStreamEncrypted": {
        "Properties": {
          "ConfigRuleName": "kinesis-stream-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Kinesis::Stream"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "KINESIS_STREAM_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaFunctionPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "lambda-function-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaInsideVpc": {
        "Properties": {
          "ConfigRuleName": "lambda-inside-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_INSIDE_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "MfaEnabledForIamConsoleAccess": {
        "Properties": {
          "ConfigRuleName": "mfa-enabled-for-iam-console-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchAccessControlEnabled": {
        "Properties": {
          "ConfigRuleName": "opensearch-access-control-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_ACCESS_CONTROL_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchEncryptedAtRest": {
        "Properties": {
          "ConfigRuleName": "opensearch-encrypted-at-rest",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_ENCRYPTED_AT_REST"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchInVpcOnly": {
        "Properties": {
          "ConfigRuleName": "opensearch-in-vpc-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_IN_VPC_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "OpensearchNodeToNodeEncryptionCheck": {
        "Properties": {
          "ConfigRuleName": "opensearch-node-to-node-encryption-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::OpenSearch::Domain"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "OPENSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstancePublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "rds-instance-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsSnapshotEncrypted": {
        "Properties": {
          "ConfigRuleName": "rds-snapshot-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBSnapshot",
              "AWS::RDS::DBClusterSnapshot"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_SNAPSHOT_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsSnapshotsPublicProhibited": {
        "Properties": {
          "ConfigRuleName": "rds-snapshots-public-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBSnapshot",
              "AWS::RDS::DBClusterSnapshot"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsStorageEncrypted": {
        "Properties": {
          "ConfigRuleName": "rds-storage-encrypted",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_STORAGE_ENCRYPTED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterConfigurationCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-configuration-check",
          "InputParameters": {
            "clusterDbEncrypted": {
              "Fn::If": [
                "redshiftClusterConfigurationCheckParamClusterDbEncrypted",
                {
                  "Ref": "RedshiftClusterConfigurationCheckParamClusterDbEncrypted"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "loggingEnabled": {
              "Fn::If": [
                "redshiftClusterConfigurationCheckParamLoggingEnabled",
                {
                  "Ref": "RedshiftClusterConfigurationCheckParamLoggingEnabled"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_CONFIGURATION_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterPublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3AccountLevelPublicAccessBlocksPeriodic": {
        "Properties": {
          "ConfigRuleName": "s3-account-level-public-access-blocks-periodic",
          "InputParameters": {
            "BlockPublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "BlockPublicPolicy": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "IgnorePublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RestrictPublicBuckets": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketLevelPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-level-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPolicyGranteeCheck": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-policy-grantee-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_POLICY_GRANTEE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicReadProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-read-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_READ_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicWriteProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-write-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketServerSideEncryptionEnabled": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-server-side-encryption-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3DefaultEncryptionKms": {
        "Properties": {
          "ConfigRuleName": "s3-default-encryption-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_DEFAULT_ENCRYPTION_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerEndpointConfigurationKmsKeyConfigured": {
        "Properties": {
          "ConfigRuleName": "sagemaker-endpoint-configuration-kms-key-configured",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerNotebookInstanceKmsKeyConfigured": {
        "Properties": {
          "ConfigRuleName": "sagemaker-notebook-instance-kms-key-configured",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerNotebookNoDirectInternetAccess": {
        "Properties": {
          "ConfigRuleName": "sagemaker-notebook-no-direct-internet-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecretsmanagerRotationEnabledCheck": {
        "Properties": {
          "ConfigRuleName": "secretsmanager-rotation-enabled-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SecretsManager::Secret"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECRETSMANAGER_ROTATION_ENABLED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecurityhubEnabled": {
        "Properties": {
          "ConfigRuleName": "securityhub-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECURITYHUB_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SnsEncryptedKms": {
        "Properties": {
          "ConfigRuleName": "sns-encrypted-kms",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SNS::Topic"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SNS_ENCRYPTED_KMS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SsmDocumentNotPublic": {
        "Properties": {
          "ConfigRuleName": "ssm-document-not-public",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SSM_DOCUMENT_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SubnetAutoAssignPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "subnet-auto-assign-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Subnet"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcSgOpenOnlyToAuthorizedPorts": {
        "Properties": {
          "ConfigRuleName": "vpc-sg-open-only-to-authorized-ports",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      }
    },
    "Conditions": {
      "accessKeysRotatedParamMaxAccessKeyAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "AccessKeysRotatedParamMaxAccessKeyAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMaxPasswordAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMaxPasswordAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMinimumPasswordLength": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamPasswordReusePrevention": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireLowercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireNumbers": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireNumbers"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireSymbols": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireSymbols"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireUppercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
              }
            ]
          }
        ]
      },
      "redshiftClusterConfigurationCheckParamClusterDbEncrypted": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterConfigurationCheckParamClusterDbEncrypted"
              }
            ]
          }
        ]
      },
      "redshiftClusterConfigurationCheckParamLoggingEnabled": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterConfigurationCheckParamLoggingEnabled"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
              }
            ]
          }
        ]
      }
    }
  }
}
