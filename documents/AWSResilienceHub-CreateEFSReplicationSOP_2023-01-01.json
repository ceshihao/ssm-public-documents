{
  "description": "## Id\nAWSResilienceHub-CreateEFSReplicationSOP_2023-01-01\n\n## Intent\nCreate a EFS Replication configuration \n\n## Type\nSOP\n\n## Risk\nLow\n\n## Requirements\n  * EFS file system\n  * Target Region\n  * One Zone Boolean Value\n\n\n## Permissions required for AutomationAssumeRole\n  * elasticfilesystem:CreateReplicationConfiguration\n  * elasticfilesystem:DescribeReplicationConfigurations\n  * elasticfilesystem:CreateFileSystem\n\n## Supports Rollback\nNo\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n### (Required) FileSystemId\n  * type: String\n  * description: ID of the EFS file system\n### (Required) Region\n  * type: String\n  * description: (Required)Replica Target Region\n ### (Required) OneZone:\n  * type: Boolean\n  * description: Explicitly state if the replica should be a One Zone EFS\n### (Optional)AvailabilityZoneName:\n  * type: String\n  * description: If One Zone is true, add the desired AZ\n ### (Optional) KmsKeyId:\n  * type: String\n  * description: KMS key for encryption. If you do not specify a KMS key, Amazon EFS uses your default KMS key for Amazon EFS, /aws/elasticfilesystem.\n\n## Details\nThe document creates an EFS Replication Configuration\n\n## Steps executed in normal flow\n \n  * RecordStartTime\n  * OneZoneOrMultiZone\n  * Create<X>ZoneReplication\n  * OutputRecoveryTime\n\n## Outputs\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: SOP execution time in seconds\n  ",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "FileSystemId": {
      "type": "String",
      "description": "(Required) ID of the EFS"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf"
    },
    "OneZone": {
      "type": "Boolean",
      "description": "(Required) Explicitly state if the replica should be a One Zone EFS"
    },
    "AvailabilityZoneName": {
      "type": "String",
      "description": "(Optional)If One Zone is true, add the desired AZ",
      "default": ""
    },
    "Region": {
      "type": "String",
      "description": "(Required)Replica Target Region"
    },
    "KmsKeyId": {
      "type": "String",
      "description": "(Optional)KMS key for encryption. If you do not specify a KMS key, Amazon EFS uses your default KMS key for Amazon EFS, /aws/elasticfilesystem.",
      "allowedPattern": "(arn:aws:kms:\\S+:\\d+:key\\/\\S+)|(^$)",
      "default": ""
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "OneZoneOrMultiZone",
      "action": "aws:branch",
      "description": "Efs Replication Zone Type",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CreateOneZoneReplication",
            "Variable": "{{OneZone}}",
            "BooleanEquals": true
          },
          {
            "NextStep": "CreateMultiZoneReplication",
            "Variable": "{{OneZone}}",
            "BooleanEquals": false
          }
        ]
      }
    },
    {
      "name": "CreateOneZoneReplication",
      "description": "Create Replication",
      "action": "aws:executeScript",
      "nextStep": "OutputRecoveryTime",
      "outputs": [
        {
          "Name": "Destination",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "create_one_zone_efs_replication",
        "InputPayload": {
          "FileSystemId": "{{ FileSystemId }}",
          "Region": "{{Region}}",
          "AvailabilityZoneName": "{{AvailabilityZoneName}}",
          "KmsKeyId": "{{KmsKeyId}}"
        },
        "Script": "import logging\nimport time\nfrom typing import List\nimport json\nimport uuid\nimport sys\nimport subprocess\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef update_boto3_version():\n    boto_modules = []\n    for m in sys.modules.keys():\n        if m.startswith(\"boto\"):\n            boto_modules.append(m)\n    for m in boto_modules:\n        del sys.modules[m]\n    subprocess.check_call(\n        [sys.executable, \"-m\", \"pip\", \"install\", \"boto3\", \"-t\", \"/tmp/\"]\n    )\n    sys.path.insert(0, \"/tmp/\")\n\n\n\ndef create_one_zone_efs_replication(events, context):\n    update_boto3_version()\n    import boto3\n    efs_client = boto3.client(\"efs\")\n\n    destination = {\n        \"Region\": events[\"Region\"],\n        \"AvailabilityZoneName\": events[\"AvailabilityZoneName\"],\n    }\n\n    if bool(events.get(\"KmsKeyId\")):\n        destination[\"KmsKeyId\"] = events[\"KmsKeyId\"]\n    replicaConfigData = efs_client.create_replication_configuration(\n        SourceFileSystemId=events[\"FileSystemId\"],\n        Destinations=[\n            destination\n        ],\n    )\n    return replicaConfigData[\"Destinations\"][0]"
      }
    },
    {
      "name": "CreateMultiZoneReplication",
      "description": "Create Replication",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "Destination",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "create_multi_zone_efs_replication",
        "InputPayload": {
          "FileSystemId": "{{ FileSystemId }}",
          "Region": "{{Region}}",
          "KmsKeyId": "{{KmsKeyId}}"
        },
        "Script": "import logging\nimport time\nfrom typing import List\nimport json\nimport uuid\nimport sys\nimport subprocess\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef update_boto3_version():\n    boto_modules = []\n    for m in sys.modules.keys():\n        if m.startswith(\"boto\"):\n            boto_modules.append(m)\n    for m in boto_modules:\n        del sys.modules[m]\n    subprocess.check_call(\n        [sys.executable, \"-m\", \"pip\", \"install\", \"boto3\", \"-t\", \"/tmp/\"]\n    )\n    sys.path.insert(0, \"/tmp/\")\n\n\n\ndef create_multi_zone_efs_replication(events, context):\n    update_boto3_version()\n    import boto3\n\n    efs_client = boto3.client(\"efs\")\n    destination = {\n        \"Region\": events[\"Region\"],\n    }\n\n    if bool(events.get(\"KmsKeyId\")):\n        destination[\"KmsKeyId\"] = events[\"KmsKeyId\"]\n    replicaConfigData = efs_client.create_replication_configuration(\n        SourceFileSystemId=events[\"FileSystemId\"],\n        Destinations=[destination],\n    )\n    return replicaConfigData[\"Destinations\"][0]"
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
