{
  "description": "## Intent\nReboot an Amazon EC2 instance.\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n* EC2 Instance\n\n## Permission required for AutomationAssumeRole\n* ec2:RebootInstances\n* ec2:DescribeInstanceStatus\n* iam:PassRole\n\n## Supports Rollback\nNo\n\n## Inputs\n### EC2InstanceIdentifier\n  * Description: (Required) EC2 Instance Identifier\n  * Type: String\n### AutomationAssumeRole:\n  * Description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * Type: String\n\n## Details\nThe document checks that the instance is in an available state, then it reboots the instance and validates that the instance is available again.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * AssertInstanceInAvailableState\n  * RebootEC2Instance\n  * ValidateInstanceIsAvailable\n  * OutputRecoveryTime\n  \n## Outputs\n  * `OutputRecoveryTime.RecoveryTime`: recovery time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "parameters": {
    "EC2InstanceIdentifier": {
      "type": "String",
      "description": "(Required) EC2InstanceIdentifier"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "AssertInstanceInAvailableState",
      "description": "Assert that the Amazon EC2 instance is available.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{ EC2InstanceIdentifier }}"
        ],
        "PropertySelector": "$.InstanceStatuses..InstanceState.Name",
        "DesiredValues": [
          "running"
        ]
      }
    },
    {
      "name": "RebootEC2Instance",
      "description": "Reboot the Amazon EC2 instance.",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "rebootInstances",
        "InstanceIds": [
          "{{ EC2InstanceIdentifier }}"
        ]
      }
    },
    {
      "name": "ValidateInstanceIsAvailable",
      "description": "Assert that the Amazon EC2 instance is available.",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 900,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{ EC2InstanceIdentifier }}"
        ],
        "PropertySelector": "$.InstanceStatuses..InstanceState.Name",
        "DesiredValues": [
          "running"
        ]
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
