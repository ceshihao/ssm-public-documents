{
  "description": "## Intent\nModify an Amazon EC2 ASG's instances to utilize a larger version of the same instance type. For example, instead of m5.xlarge, Amazon EC2 ASG instances will utilize m5.2xlarge.\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n* Available ASG\n\n## Permission required for AutomationAssumeRole\n* autoscaling:UpdateAutoScalingGroup\n* autoscaling:DescribeAutoScalingGroups\n* autoscaling:StartInstanceRefresh\n* autoscaling:DescribeInstanceRefreshes\n* ec2:DescribeLaunchTemplateVersions\n* ec2:DescribeInstanceTypeOfferings\n* ec2:CreateLaunchTemplateVersion\n* ec2:DeleteLaunchTemplateVersions\n* ec2:RunInstances\n* iam:PassRole\n\n## Supports Rollback\nYes\n\n## Inputs\n### AutoScalingGroupName:\n* type: String\n* description: (Required) The Name of the Amazon EC2 Auto Scaling group to scale-up\n### AutomationAssumeRole:\n* type: String\n* description: \n    (Optional) The ARN of the role that allows Automation to perform\n    the actions on your behalf. If no role is specified, Systems Manager Automation\n    uses your IAM permissions to run this document.\n    default: ''\n\n## Details\nThe document fetches the original instance type, calculates the next bigger instance type based on it,\nupgrades the instance type based on the calculated one, refreshes the ASG's instances and waits for the refresh to complete.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * CurrentSetup\n  * UpgradeInstanceType\n  * RefreshInstances\n  * WaitForRefresh\n  * OutputRecoveryTime\n\n## Outputs\n* `OutputRecoveryTime.RecoveryTime`: recovery time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "parameters": {
    "AutoScalingGroupName": {
      "type": "String",
      "description": "(Required) The Name of the ASG to scale-up",
      "allowedPattern": "^[!-9;-~]+$"
    },
    "Dryrun": {
      "type": "Boolean",
      "default": true,
      "description": "(Optional) Dryrun indicates a testing run, changes will be rolled back.",
      "allowedPattern": "^(true|false)$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:[0-9]{12}:[^\n\r]*$"
    }
  },
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  return datetime.now(timezone.utc).isoformat()"
      },
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "name": "CurrentSetup",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "OriginalInstanceType",
          "Selector": "$.Payload.OriginalInstanceType",
          "Type": "String"
        },
        {
          "Name": "LaunchTemplateVersion",
          "Selector": "$.Payload.LaunchTemplateVersion",
          "Type": "String"
        },
        {
          "Name": "LaunchTemplateName",
          "Selector": "$.Payload.LaunchTemplateName",
          "Type": "String"
        },
        {
          "Name": "BiggerInstanceType",
          "Selector": "$.Payload.BiggerInstanceType",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "get_instance_data",
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef get_instance_data(events, context):\n    asg = boto3.client('autoscaling')\n    ec2 = boto3.client('ec2')\n    describe_asg = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])\n    if 'MixedInstancesPolicy' in describe_asg['AutoScalingGroups'][0]:\n        raise Exception('Cannot run this SOP on ASG that has a MixedInstancesPolicy')\n    current_state = get_current_state(ec2, describe_asg)\n    bigger_instance_type = get_bigger_instance(current_state['OriginalInstanceType'], ec2)\n    return {**current_state, **{'BiggerInstanceType': bigger_instance_type}}\n\n\n\ndef get_current_state(ec2, describe_asg):\n    if 'LaunchTemplate' in describe_asg['AutoScalingGroups'][0]:\n        launch_template_version = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['Version']\n        launch_template_name = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['LaunchTemplateName']\n        describe_template = ec2.describe_launch_template_versions(\n            LaunchTemplateName=launch_template_name, Versions=[launch_template_version])\n        current_instance_type = describe_template['LaunchTemplateVersions'][0]['LaunchTemplateData']['InstanceType']\n        return {'OriginalInstanceType': current_instance_type, 'LaunchTemplateVersion': launch_template_version,\n                'LaunchTemplateName': launch_template_name, 'LaunchConfigurationName': ''}\n    else:\n        raise Exception('This SOP requires the Auto Scaling group to have a Launch Template.')\n\n\n\ndef get_bigger_instance(current_instance_type, ec2):\n    instance_type_size = current_instance_type.rsplit(\".\", 1)\n    instance_sizes = [\"nano\", \"micro\", \"small\", \"medium\", \"large\", \"xlarge\", \"2xlarge\", \"3xlarge\", \"4xlarge\",\n                      \"6xlarge\", \"8xlarge\", \"9xlarge\", \"10xlarge\", \"12xlarge\", \"16xlarge\", \"18xlarge\", \"24xlarge\",\n                      \"32xlarge\", \"56xlarge\", \"112xlarge\"]\n    bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1\n    possible_instance_types = []\n    for i in range(len(instance_sizes) - bigger_size_start_idx):\n        possible_instance_types.append(instance_type_size[0] + \".\" + instance_sizes[bigger_size_start_idx + i])\n    instance_types_response = ec2.describe_instance_type_offerings(\n        Filters=[{'Name': 'instance-type', \"Values\": [instance_type_size[0] + \".*\"]}])\n    all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]\n    bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]\n    if bigger_instances:\n        return bigger_instances[0]\n    else:\n        raise Exception(\"Could not identify bigger instance type than current instance type: \" + current_instance_type)\n",
        "InputPayload": {
          "AutoScalingGroupName": "{{AutoScalingGroupName}}"
        }
      },
      "description": "Record current set up and gather the larger instance to which we will upgrade the ASG."
    },
    {
      "name": "UpgradeInstanceType",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "update_asg",
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef update_asg(events, context):\n    asg = boto3.client('autoscaling')\n    ec2 = boto3.client('ec2')\n    new_instance_type = events['BiggerInstanceType']\n    if events['LaunchTemplateName']:\n        create_template_response = ec2.create_launch_template_version(\n            LaunchTemplateName=events['LaunchTemplateName'],\n            SourceVersion=events['LaunchTemplateVersion'],\n            LaunchTemplateData={'InstanceType': new_instance_type},\n            VersionDescription=\"Uses instance type \" + new_instance_type)\n        new_version = str(create_template_response['LaunchTemplateVersion']['VersionNumber'])\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\n                                      LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],\n                                                      'Version': new_version})\n        return {'LaunchTemplate': events['LaunchTemplateName'] + ':' + new_version}\n    else:\n        raise Exception('This SOP requires the Auto Scaling group to have an Launch Template.')",
        "InputPayload": {
          "AutoScalingGroupName": "{{ AutoScalingGroupName }}",
          "LaunchTemplateName": "{{ CurrentSetup.LaunchTemplateName }}",
          "LaunchTemplateVersion": "{{ CurrentSetup.LaunchTemplateVersion }}",
          "BiggerInstanceType": "{{ CurrentSetup.BiggerInstanceType }}"
        }
      },
      "outputs": [
        {
          "Selector": "$.Payload.LaunchTemplate",
          "Name": "LaunchTemplate",
          "Type": "String"
        }
      ],
      "description": "Upgrade ASG to use the larger instance type. This will upgrade the Launch Template."
    },
    {
      "name": "RefreshInstances",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "autoscaling",
        "Api": "StartInstanceRefresh",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}"
      },
      "outputs": [
        {
          "Selector": "$.InstanceRefreshId",
          "Name": "InstanceRefreshId",
          "Type": "String"
        }
      ],
      "description": "Refresh instances to upgrade to new instance type"
    },
    {
      "name": "WaitForRefresh",
      "action": "aws:waitForAwsResourceProperty",
      "inputs": {
        "Service": "autoscaling",
        "Api": "DescribeInstanceRefreshes",
        "PropertySelector": "$.InstanceRefreshes[0].Status",
        "DesiredValues": [
          "Successful"
        ],
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "InstanceRefreshIds": [
          "{{RefreshInstances.InstanceRefreshId}}"
        ]
      },
      "description": "Wait for RefreshInstances to complete"
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  from dateutil import parser\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{RecordStartTime.StartTime}}"
        }
      },
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "DryrunBranch",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "EmptyStepForEnd",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": false
          },
          {
            "NextStep": "RollBackScaleUpChange",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": true
          }
        ]
      },
      "description": "If this is NOT a dryrun, skip to the end. If it is a dryrun, proceed to rollback."
    },
    {
      "name": "RollBackScaleUpChange",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "rollback_scaleup",
        "Script": "import logging\nimport random\nimport time\nfrom math import ceil\n\nimport boto3\nfrom botocore.config import Config\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef rollback_scaleup(events, context):\n    asg = boto3.client('autoscaling')\n    ec2 = boto3.client('ec2')\n    if events['LaunchTemplateName']:\n        name_version = events['LaunchTemplate'].rsplit(\":\", 1)\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\n                                      LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],\n                                                      'Version': events['LaunchTemplateVersion']})\n        ec2.delete_launch_template_versions(LaunchTemplateName=name_version[0], Versions=[name_version[1]])\n    else:\n        raise Exception('This SOP requires the Auto Scaling group to have an Launch Template.')\n",
        "InputPayload": {
          "AutoScalingGroupName": "{{ AutoScalingGroupName }}",
          "LaunchTemplateName": "{{ CurrentSetup.LaunchTemplateName }}",
          "LaunchTemplateVersion": "{{ CurrentSetup.LaunchTemplateVersion }}",
          "LaunchTemplate": "{{ UpgradeInstanceType.LaunchTemplate }}"
        }
      },
      "description": "Rollback by updating the ASG to use the previous Launch Template"
    },
    {
      "name": "RefreshInstancesRollback",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "autoscaling",
        "Api": "StartInstanceRefresh",
        "AutoScalingGroupName": "{{AutoScalingGroupName}}"
      },
      "outputs": [
        {
          "Name": "RollbackInstanceRefreshId",
          "Selector": "$.InstanceRefreshId",
          "Type": "String"
        }
      ],
      "description": "Refresh instances to previous version (perform rollback)"
    },
    {
      "name": "WaitForRollback",
      "action": "aws:waitForAwsResourceProperty",
      "inputs": {
        "Service": "autoscaling",
        "Api": "DescribeInstanceRefreshes",
        "PropertySelector": "$.InstanceRefreshes[0].Status",
        "DesiredValues": [
          "Successful"
        ],
        "AutoScalingGroupName": "{{AutoScalingGroupName}}",
        "InstanceRefreshIds": [
          "{{RefreshInstancesRollback.RollbackInstanceRefreshId}}"
        ]
      },
      "description": "Wait for rollback to complete"
    },
    {
      "name": "EmptyStepForEnd",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT1S"
      },
      "description": "End"
    }
  ]
}
