{
  "description": "The **AWSSupport-TroubleshootAPIGatewayHttpErrors** helps troubleshoot 5XX/4XX errors when invoking a deployed Amazon API Gateway REST API by:\n1. Parsing access and/or execution logs\n2. Analysing errors and providing remediation steps via re:Post articles and/or AWS documentation.\n\n## Limitations:\n1. Logging must be enabled. See [Set up Amazon CloudWatch API logging using the API Gateway console](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-using-console).\n2. Logs must have been enabled prior to the error(s) occurring. Log capturing and analysis cannot be done retrospectively.\n3. Errors covered: 500, 502, 503, 504, 401, 403, 429.\n4. Only REST API. WebSocket and HTTP (v2) are **not** covered by this runbook.\n\n## Important:\nUsing this runbook might incur extra charges against your AWS account for the Amazon CloudWatch Logs captured by your REST API, and Amazon CloudWatch Logs Insights used in the analysis. See [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/) for more details on the charges that my be incurred.  If the ```aws:deletestack``` step fails, go to the AWS CloudFormation console to manually delete the stack. The stack name created by this runbook begins with ```AWSSupport-TroubleshootAPIGatewayHttpErrors```. For information about deleting AWS CloudFormation stacks, see [Deleting a stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-delete-stack.html) in the AWS CloudFormation User Guide.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "AnalyseLogs.Message"
  ],
  "parameters": {
    "RestApiId": {
      "type": "String",
      "description": "(Required) The API ID for the API that requires troubleshooting.",
      "allowedPattern": "^[a-zA-Z0-9]{10}$"
    },
    "StageName": {
      "type": "String",
      "description": "(Required) The name of the deployed stage.",
      "allowedPattern": "^[a-zA-Z0-9_\\-]{1,128}$"
    },
    "ResourcePath": {
      "type": "String",
      "description": "(Optional) The resource path for which method is configured. Examples: '/', '/store/items', '/{resource}' , etc.",
      "allowedPattern": "^[a-zA-Z0-9{}/_\\-{}+]+$",
      "default": "/"
    },
    "HttpMethod": {
      "type": "String",
      "description": "(Optional) The method for the configured resource path.",
      "allowedValues": [
        "ANY",
        "DELETE",
        "HEAD",
        "OPTIONS",
        "GET",
        "POST",
        "PUT",
        "PATCH"
      ],
      "default": "GET"
    },
    "StartTime": {
      "type": "String",
      "description": "(Optional) The start date and time for querying the CloudWatch Logs. The format must be 'yyyy-MM-ddTHH:mm:ss' and timezone needs to be UTC. For example, 2023-01-20T00:00:00. If no date-time is entered, the start will be 3 days before the current date and time.",
      "allowedPattern": "^$|^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$",
      "default": ""
    },
    "EndTime": {
      "type": "String",
      "description": "(Optional) The end date and time for querying the CloudWatch Logs. The format must be 'yyyy-MM-ddTHH:mm:ss' and timezone needs to be UTC. For example, 2023-01-25T00:00:00. If no date-time is entered, the end will be the current date and time.",
      "allowedPattern": "^$|^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$",
      "default": ""
    },
    "AccessLogs": {
      "type": "Boolean",
      "description": "(Optional) Should access logs be analysed.",
      "allowedValues": [
        true,
        false
      ],
      "default": false
    },
    "RequestId": {
      "type": "String",
      "description": "(Optional) The request ID for request where error was observed.",
      "allowedPattern": "^$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "default": ""
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows AWS Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckApiExists",
      "action": "aws:executeScript",
      "description": "Checks whether the provided REST API exists.",
      "onFailure": "Abort",
      "nextStep": "BranchOnCheckApiExists",
      "inputs": {
        "InputPayload": {
          "RestApiId": "{{ RestApiId }}"
        },
        "Handler": "check_api_exists",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef check_api_exists(event, _) -> dict:\n    \"\"\"\n    Checks if an API Gateway REST API exists and is accessible.\n\n    Args:\n        event (dict): Contains RestApiId to check\n        _ (dict): Lambda context object (not used)\n\n    Returns:\n        dict: Contains boolean flags for API existence and authorization status\n              {\n                  \"ApiExists\": bool,\n                  \"Authorized\": bool\n              }\n    \"\"\"\n    apigw = boto3.client(\"apigateway\")\n    api_id = event.get(\"RestApiId\", \"\")\n    if not api_id:\n        return {\"ApiExists\": False, \"Authorized\": True}\n\n    try:\n        response = apigw.get_rest_api(restApiId=api_id)\n        if response.get(\"id\") == api_id:\n            return {\"ApiExists\": True, \"Authorized\": True}\n        return {\"ApiExists\": False, \"Authorized\": True}\n\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        if error_code == \"NotFoundException\":\n            return {\"ApiExists\": False, \"Authorized\": True}\n        elif error_code == \"UnauthorizedException\":\n            return {\"ApiExists\": False, \"Authorized\": False}\n        else:\n            print(f\"[ERROR] Unexpected error when checking API {api_id}: {error_code} - {str(e)}\")\n            raise RuntimeError(f\"Unexpected API Gateway error: {error_code} - {str(e)}\")\n"
      },
      "outputs": [
        {
          "Name": "ApiExists",
          "Selector": "$.Payload.ApiExists",
          "Type": "Boolean"
        },
        {
          "Name": "Authorized",
          "Selector": "$.Payload.Authorized",
          "Type": "Boolean"
        }
      ]
    },
    {
      "name": "BranchOnCheckApiExists",
      "action": "aws:branch",
      "description": "Confirms if the API exists and determines next step.",
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ CheckApiExists.ApiExists }}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{ CheckApiExists.Authorized }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "CheckStageExists"
          }
        ],
        "Default": "NoResourceOrNotAuthorized"
      }
    },
    {
      "name": "CheckStageExists",
      "action": "aws:executeScript",
      "description": "Checks whether the provided stage name exists in the given API.",
      "onFailure": "Abort",
      "nextStep": "BranchOnCheckStageExists",
      "inputs": {
        "InputPayload": {
          "RestApiId": "{{ RestApiId }}",
          "StageName": "{{ StageName }}"
        },
        "Handler": "check_stage_exists",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef check_stage_exists(event: dict, _) -> dict:\n    \"\"\"\n    Verifies if a stage exists in the specified API Gateway REST API and checks access logging configuration.\n\n    Args:\n        event (dict): Contains 'RestApiId' and 'StageName' to check\n        _ (dict): Lambda context object (not used)\n\n    Returns:\n        dict: Contains stage existence status, authorization status, and CloudWatch log group\n              {\n                  \"StageExists\": bool,\n                  \"Authorized\": bool,\n                  \"AccessLogGroup\": str\n              }\n    \"\"\"\n    apigw = boto3.client(\"apigateway\")\n    exists: bool = False\n    authorized: bool = True\n    api_id: str = event.get(\"RestApiId\", \"\")\n    api_stage: str = event.get(\"StageName\", \"\")\n    access_log_group: str = \"\"\n\n    if not api_id or not api_stage:\n        return {\"StageExists\": False, \"Authorized\": authorized, \"AccessLogGroup\": access_log_group}\n    else:\n        try:\n            response = apigw.get_stage(restApiId=api_id, stageName=api_stage)\n            exists = \"stageName\" in response and response[\"stageName\"] == api_stage\n            if exists and \"accessLogSettings\" in response:\n                access_log_group = response[\"accessLogSettings\"][\"destinationArn\"]\n        except ClientError as e:\n            error_code = e.response[\"Error\"][\"Code\"]\n            if error_code == \"NotFoundException\":\n                print(f\"[WARNING] The API stage {api_stage} for API ID {api_id} was not found.\")\n                exists = False\n            elif error_code == \"UnauthorizedException\":\n                print(\n                    \"[WARNING] The IAM Role provided is not authorized to call apigateway:GetStage on the provided resource.\"\n                )\n                authorized = False\n            else:\n                print(\n                    f\"[ERROR] An issue occurred when attempting to retrieve the stage {api_stage} for API ID {api_id}\\nError message: {str(e)}\"\n                )\n                raise RuntimeError(f\"Unexpected API Gateway error: {error_code} - {str(e)}\")\n\n    return {\"StageExists\": exists, \"Authorized\": authorized, \"AccessLogGroup\": access_log_group}\n"
      },
      "outputs": [
        {
          "Name": "StageExists",
          "Selector": "$.Payload.StageExists",
          "Type": "Boolean"
        },
        {
          "Name": "Authorized",
          "Selector": "$.Payload.Authorized",
          "Type": "Boolean"
        },
        {
          "Name": "AccessLogGroup",
          "Selector": "$.Payload.AccessLogGroup",
          "Type": "String"
        }
      ]
    },
    {
      "name": "BranchOnCheckStageExists",
      "action": "aws:branch",
      "description": "Confirms whether stage exists and determines next step.",
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ CheckStageExists.StageExists }}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{ CheckStageExists.Authorized }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "CheckResourceExists"
          }
        ],
        "Default": "NoResourceOrNotAuthorized"
      }
    },
    {
      "name": "CheckResourceExists",
      "action": "aws:executeScript",
      "description": "Checks if the provided resouces exists in the API.",
      "onFailure": "Abort",
      "nextStep": "BranchOnCheckResourceExists",
      "inputs": {
        "InputPayload": {
          "RestApiId": "{{ RestApiId }}",
          "ResourcePath": "{{ ResourcePath }}"
        },
        "Handler": "check_resource_exists",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef check_resource_exists(event: dict, _) -> dict:\n    \"\"\"\n    Verifies if a resource path exists in the specified API Gateway REST API.\n\n    Args:\n        event (dict): Contains 'RestApiId' and 'ResourcePath' to check\n        _ (dict): Lambda context object (not used)\n\n    Returns:\n        dict: Contains resource existence status, authorization status, and resource ID\n              {\n                  \"ResourceExists\": bool,\n                  \"Authorized\": bool,\n                  \"ResourceId\": str\n              }\n    \"\"\"\n    apigw = boto3.client(\"apigateway\")\n    exists = False\n    authorized = True\n    api_id = event.get(\"RestApiId\", \"\")\n    resource_path = event.get(\"ResourcePath\", \"\")\n    resource_id = \"\"\n\n    if not api_id or not resource_path:\n        return {\"ResourceExists\": exists, \"Authorized\": authorized, \"ResourceId\": resource_id}\n\n    try:\n        # No need to catch NotFoundException as existence is being checked here rather than by the API.\n        paginator = apigw.get_paginator(\"get_resources\")\n        page_iterator = paginator.paginate(restApiId=api_id)\n        for page in page_iterator:\n            for item in page[\"items\"]:\n                if item[\"path\"] == resource_path:\n                    exists = True\n                    resource_id = item[\"id\"]\n\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        if error_code == \"NotFoundException\":\n            print(f\"[WARNING] API {api_id} was not found.\")\n            exists = False\n        elif error_code == \"UnauthorizedException\":\n            print(f\"[WARNING] Not authorized to access resources for API {api_id}.\")\n            authorized = False\n        else:\n            print(f\"[ERROR] Unexpected error when retrieving resources for API {api_id}: {error_code} - {str(e)}\")\n            raise RuntimeError(f\"Unexpected API Gateway error: {error_code} - {str(e)}\")\n\n    return {\"ResourceExists\": exists, \"Authorized\": authorized, \"ResourceId\": resource_id}\n"
      },
      "outputs": [
        {
          "Name": "ResourceExists",
          "Selector": "$.Payload.ResourceExists",
          "Type": "Boolean"
        },
        {
          "Name": "Authorized",
          "Selector": "$.Payload.Authorized",
          "Type": "Boolean"
        },
        {
          "Name": "ResourceId",
          "Selector": "$.Payload.ResourceId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "BranchOnCheckResourceExists",
      "action": "aws:branch",
      "description": "Confirms whether the provided resource exists and determines next step.",
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ CheckResourceExists.ResourceExists }}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{ CheckResourceExists.Authorized }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "CheckMethodExists"
          }
        ],
        "Default": "NoResourceOrNotAuthorized"
      }
    },
    {
      "name": "CheckMethodExists",
      "action": "aws:executeScript",
      "description": "Checks if the provided method exists in the given resource.",
      "onFailure": "Abort",
      "nextStep": "BranchOnCheckMethodExists",
      "inputs": {
        "InputPayload": {
          "RestApiId": "{{ RestApiId }}",
          "ResourceId": "{{ CheckResourceExists.ResourceId }}",
          "HttpMethod": "{{ HttpMethod }}"
        },
        "Handler": "check_method_exists",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef check_method_exists(event: dict, _) -> dict:\n    \"\"\"\n    Verifies if an HTTP method exists for a specific resource in the API Gateway REST API.\n\n    Args:\n        event (dict): Contains required parameters:\n            - RestApiId (str): ID of the API Gateway REST API\n            - ResourceId (str): ID of the resource to check\n            - HttpMethod (str): HTTP method to verify (GET, POST, PUT, etc.)\n        _ (dict): Lambda context object (not used)\n\n    Returns:\n        dict: Contains method existence and authorization status\n              {\n                  \"MethodExists\": bool,\n                  \"Authorized\": bool\n              }\n    \"\"\"\n    apigw = boto3.client(\"apigateway\")\n    exists: bool = False\n    authorized: bool = True\n    api_id: str = event.get(\"RestApiId\", \"\")\n    resource_id: str = event.get(\"ResourceId\", \"\")\n    http_method: str = event.get(\"HttpMethod\", \"\")\n\n    if not api_id or not resource_id or not http_method:\n        return {\"MethodExists\": exists, \"Authorized\": authorized}\n\n    try:\n        response = apigw.get_method(restApiId=api_id, resourceId=resource_id, httpMethod=http_method)\n\n        if response.get(\"httpMethod\", \"\") == http_method:\n            exists = True\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        if error_code == \"NotFoundException\":\n            print(f\"[WARNING] Method {http_method} not found for resource {resource_id} in API {api_id}.\")\n            exists = False\n        elif error_code == \"UnauthorizedException\":\n            print(\n                f\"[WARNING] Not authorized to access method {http_method} for resource {resource_id} in API {api_id}.\"\n            )\n            authorized = False\n        else:\n            print(\n                f\"[ERROR] Unexpected error when retrieving method {http_method} for resource {resource_id} in API {api_id}: {error_code} - {str(e)}\"\n            )\n            raise RuntimeError(f\"Unexpected API Gateway error: {error_code} - {str(e)}\")\n\n    return {\"MethodExists\": exists, \"Authorized\": authorized}\n"
      },
      "outputs": [
        {
          "Name": "MethodExists",
          "Selector": "$.Payload.MethodExists",
          "Type": "Boolean"
        },
        {
          "Name": "Authorized",
          "Selector": "$.Payload.Authorized",
          "Type": "Boolean"
        }
      ]
    },
    {
      "name": "BranchOnCheckMethodExists",
      "action": "aws:branch",
      "description": "Confirms if the provided method exists and determines next step.",
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ CheckMethodExists.MethodExists }}",
                "BooleanEquals": true
              },
              {
                "Variable": "{{ CheckMethodExists.Authorized }}",
                "BooleanEquals": true
              }
            ],
            "NextStep": "AnalyseLogs"
          }
        ],
        "Default": "NoResourceOrNotAuthorized"
      }
    },
    {
      "name": "NoResourceOrNotAuthorized",
      "action": "aws:sleep",
      "description": "Step to execute if no resource is found or the user is not authorized to describe the resources.",
      "inputs": {
        "Duration": "PT1S"
      },
      "isEnd": true
    },
    {
      "name": "AnalyseLogs",
      "action": "aws:executeScript",
      "description": "Search for logs using the provided parameters and return recommendations based on an errors found.",
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "RestApiId": "{{ RestApiId }}",
          "StageName": "{{ StageName }}",
          "ResourcePath": "{{ ResourcePath }}",
          "ResourceId": "{{ CheckResourceExists.ResourceId }}",
          "HttpMethod": "{{ HttpMethod }}",
          "StartTime": "{{ StartTime }}",
          "EndTime": "{{ EndTime }}",
          "AccessLogs": "{{ AccessLogs }}",
          "AccessLogName": "{{ CheckStageExists.AccessLogGroup }}",
          "RequestId": "{{ RequestId }}"
        },
        "Handler": "check_logs",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\nimport re\nimport time\nfrom datetime import datetime, timedelta\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nBACKOFF_RATE = 1.5\n\n\ndef validate_time_range(start_time: str, end_time: str) -> bool:\n    \"\"\"\n    Validate that start_time is before end_time.\n\n    Args:\n        start_time (str): Start time string in ISO format\n        end_time (str): End time string in ISO format\n\n    Returns:\n        bool: True if time range is valid, False otherwise\n    \"\"\"\n    if start_time and end_time:\n        try:\n            start = parser.parse(start_time)\n            end = parser.parse(end_time)\n            return start < end\n        except Exception as e:\n            print(f\"[ERROR] Invalid time format: {str(e)}\")\n            return False\n    return True\n\n\nclass ErrorPattern:\n\n    def __init__(self, pattern, articles, redacted_message_pattern=r\"\", redact=True):\n        \"\"\"\n        Initialize an error pattern matcher for API Gateway logs.\n\n        Args:\n            pattern (str): Regex pattern to match error messages\n            articles (list): List of knowledge base article URLs related to the error\n            redacted_message_pattern (str, optional): Pattern for redacting sensitive info. Defaults to empty string\n            redact (bool, optional): Whether to redact sensitive information. Defaults to True\n\n        Note:\n            Used to identify specific error patterns in API Gateway logs and\n            provide relevant troubleshooting articles.\n        \"\"\"\n        self._pattern = pattern\n        self._articles = articles\n        self.redact = redact\n        self.redacted_message_pattern = redacted_message_pattern\n\n    @property\n    def pattern(self):\n        return self._pattern\n\n    @property\n    def articles(self):\n        return self._articles\n\n\nERRORS = [\n    ErrorPattern(\n        pattern=r\"(.*[Nn]etwork error communicating with endpoint.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-network-endpoint-error\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Execution failed due to configuration error: Invalid endpoint address.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-invalid-endpoint-address\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Execution failed due to a timeout error.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Malformed Lambda proxy response.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Lambda invocation failed with status: 429.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\".*401 Unauthorized.*\",\n        articles=[\n            \"https://repost.aws/knowledge-center/api-gateway-cognito-401-unauthorized\",\n            \"https://repost.aws/knowledge-center/api-gateway-401-error-lambda-authorizer\",\n        ],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(401 Unauthorized).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Missing Authentication Token.*)\",\n        articles=[\n            \"https://repost.aws/knowledge-center/api-gateway-authentication-token-errors\",\n            \"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\",\n        ],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*not authorized to perform: execute-api:Invoke on resource.*)\",\n        articles=[\n            \"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\",\n            \"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\",\n        ],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(not authorized to perform: execute-api:Invoke on resource).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*not authorized to access this resource.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\"],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(not authorized to access this resource).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*User: anonymous is not authorized to perform: execute-api:Invoke on resource.*)\",\n        articles=[\n            \"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\",\n            \"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\",\n        ],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(not authorized to perform: execute-api:Invoke on resource).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*User is not authorized to access this resource with an explicit deny.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(not authorized to perform: execute-api:Invoke on resource).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*The security token included in the request is invalid.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Signature expired.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Invalid API Key identifier specified.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*The request signature we calculated does not match the signature you provided.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Forbidden.*)\",\n        articles=[\n            \"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\",\n            \"https://repost.aws/knowledge-center/api-gateway-vpc-connections\",\n        ],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Authorization header requires.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\"],\n        redact=True,\n        redacted_message_pattern=r\"(\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\)).*(Authorization header requires).*\",\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Method completed with status: 502.*)\",\n        articles=[\"https://repost.aws/knowledge-center/malformed-502-api-gateway\"],\n        redact=False,\n    ),\n    ErrorPattern(\n        pattern=r\"(.*Execution failed due to configuration error.*)\",\n        articles=[\"https://repost.aws/knowledge-center/api-gateway-500-error-vpc\"],\n        redact=False,\n    ),\n]\n\n\ndef analyse_logs(query_logs, access_log_message):\n    \"\"\"\n    Analyzes API Gateway logs for known error patterns and provides troubleshooting guidance.\n\n    Args:\n        query_logs (str): Log messages from API Gateway execution logs\n        access_log_message (str): Additional access log messages to append\n\n    Returns:\n        str: Analysis result containing:\n            - Found error message (if any)\n            - Relevant troubleshooting articles\n            - Access log messages (if provided)\n            - \"No errors found\" message if no patterns match\n\n    Note:\n        Searches through predefined error patterns and returns the first match\n        with corresponding troubleshooting articles.\n    \"\"\"\n    if access_log_message:\n        access_log_message = f\"\\n{access_log_message}\"\n    if query_logs:\n        for error in ERRORS:\n            found = re.search(error.pattern, query_logs)\n            if found:\n                log_line = query_logs[found.start() : found.end()]\n                if error.redact:\n                    to_redact = re.search(error.redacted_message_pattern, log_line)\n                    log_line = (\n                        \" \".join([match for match in to_redact.groups()]) + \" [sensitive information has been redacted]\"\n                    )\n                articles = \"\\n- \".join(error.articles)\n                return f\"Found the following error:\\n\\nLog: {log_line}\\n\\nRecommended articles:\\n{articles}{access_log_message}\"\n        return \"No error were found in the log group during the time range provided.\"\n    else:\n        return \"No log group was found for the API.\"\n\n\ndef log_insights_query(query, log_group, start_time, end_time, is_access_log_query):\n    \"\"\"\n    Executes a CloudWatch Logs Insights query with exponential backoff retry.\n\n    Args:\n        query (str): CloudWatch Logs Insights query string\n        log_group (str): Name of the log group to query\n        start_time (int): Start time in Unix timestamp format\n        end_time (int): End time in Unix timestamp format\n        is_access_log_query (bool): Whether this is an access log query\n\n    Returns:\n        str: Query results joined as a single string, or None if log group not found\n\n    Raises:\n        SystemExit: If query fails with an unexpected error\n\n    Note:\n        - Uses exponential backoff for query polling\n        - Handles ResourceNotFoundException differently for access logs\n        - Joins multiple log lines with newlines\n    \"\"\"\n    logs = boto3.client(\"logs\")\n    try:\n        query_response = logs.start_query(\n            logGroupName=log_group, startTime=start_time, endTime=end_time, queryString=query\n        )\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        if error_code == \"ResourceNotFoundException\":\n            return None\n        else:\n            print(f\"[ERROR] Failed to start CloudWatch Logs Insights query: {error_code} - {str(e)}\")\n            raise RuntimeError(f\"CloudWatch Logs error: {error_code} - {str(e)}\")\n    query_id = query_response[\"queryId\"]\n\n    response = logs.get_query_results(queryId=query_id)\n    wait = 1\n    while response[\"status\"] == \"Running\":\n        time.sleep(wait)\n        wait *= BACKOFF_RATE\n        response = logs.get_query_results(queryId=query_id)\n\n    if not is_access_log_query and response[\"status\"] in [\"Failed\", \"Timeout\", \"Cancelled\", \"Unknown\"]:\n        print(f\"[ERROR] CloudWatch Log Insights query failed. Query status: {response['status']}\")\n        raise RuntimeError(f\"CloudWatch Logs Insights query failed with status: {response['status']}\")\n\n    query_result = response[\"results\"]\n    return \"\\n\".join([line[0][\"value\"] for line in query_result])\n\n\ndef check_logs(event: dict, _) -> dict:\n    \"\"\"\n    Main handler for checking API Gateway logs for errors.\n\n    Args:\n        event (dict): Contains required parameters:\n            - RestApiId (str): ID of the API Gateway\n            - StageName (str): Stage name to check\n            - StartTime (str, optional): Start time for log search\n            - EndTime (str, optional): End time for log search\n            - RequestId (str, optional): Specific request ID to search\n            - AccessLogName (str, optional): Access log group name\n        _ (dict): Lambda context object (not used)\n\n    Returns:\n        str: Analysis results containing:\n            - Error messages found\n            - Relevant troubleshooting articles\n            - Access log error messages if applicable\n\n    Note:\n        - Handles both execution logs and access logs\n        - Supports time range and specific request ID filtering\n        - Defaults to last 15 minutes if no time range specified\n    \"\"\"\n    api_id: str = event.get(\"RestApiId\", \"\")\n    stage = event.get(\"StageName\", \"\")\n    start_time = event.get(\"StartTime\", \"\")\n    if start_time:\n        try:\n            start_time = int(parser.parse(event[\"StartTime\"]).timestamp())\n        except Exception as e:\n            print(f\"[ERROR] Invalid StartTime format: {event['StartTime']} - {str(e)}\")\n            raise ValueError(f\"Invalid StartTime format: {event['StartTime']}\")\n    else:\n        start_time = int((datetime.now() - timedelta(minutes=15)).timestamp())\n\n    end_time = event.get(\"EndTime\", \"\")\n    if end_time:\n        try:\n            end_time = int(parser.parse(end_time).timestamp())\n        except Exception as e:\n            print(f\"[ERROR] Invalid EndTime format: {end_time} - {str(e)}\")\n            raise ValueError(f\"Invalid EndTime format: {end_time}\")\n    else:\n        end_time = int(datetime.now().timestamp())\n\n    # Validate time range\n    if not validate_time_range(event.get(\"StartTime\", \"\"), event.get(\"EndTime\", \"\")):\n        print(\"[ERROR] StartTime must be before EndTime\")\n        raise ValueError(\"StartTime must be before EndTime\")\n\n    request_id = event.get(\"RequestId\", \"\")\n    access_logs_arn = event.get(\"AccessLogName\", \"\")\n\n    log_group = f\"API-Gateway-Execution-Logs_{api_id}/{stage}\"\n    access_log_message = \"\"\n\n    if access_logs_arn:\n        access_log_group = access_logs_arn.split(\":\")[-1]\n        # specifically looking for 5XX errors\n        access_logs_query = 'fields @message | filter status like \"5\" | sort @timestamp desc'\n        access_logs = log_insights_query(access_logs_query, access_log_group, start_time, end_time, True)\n        if access_logs:\n            access_log_message = \"5XX errors found in access logs. Recommended article for review:\\nhttps://repost.aws/knowledge-center/api-gateway-find-5xx-errors-cloudwatch\"\n\n    query = \"fields @message | sort @timestamp desc\"\n    if request_id:\n        query = (\n            f'fields @message | parse @message \"(*) *\" as rid, msg | filter rid = \"{request_id}\" | sort @timestamp desc'\n        )\n\n    cw_logs = log_insights_query(query, log_group, start_time, end_time, False)\n    return analyse_logs(cw_logs, access_log_message)\n"
      },
      "outputs": [
        {
          "Name": "Message",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ]
}
