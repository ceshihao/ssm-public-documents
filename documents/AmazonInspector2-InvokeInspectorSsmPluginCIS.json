{
  "schemaVersion": "2.2",
  "description": "Invokes Inspector ssm plugin in CIS benchmark evaluation mode",
  "parameters": {
    "BenchmarkProfile": {
      "type": "String",
      "allowedValues": [
        "LEVEL_1",
        "LEVEL_2"
      ],
      "description": "Benchmark profile",
      "default": "LEVEL_1"
    },
    "CloudFrontUrl": {
      "type": "String",
      "description": "CloudFront distribution server url",
      "default": "CFRONT_SERVER_URL"
    },
    "ManifestUri": {
      "type": "String",
      "description": "Object key for most recent benchmarks manifest file",
      "default": "MANIFEST_URI"
    },
    "S3Url": {
      "type": "String",
      "description": "S3 server url"
    },
    "ScanArn": {
      "type": "String",
      "description": "Scan identifier",
      "default": "SCAN_ID"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "invokeCisBenchmarkEvaluatorWindows",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "runCommand": [
          "function error($msg) {Write-Host \"$(Get-Date -Format o): [ERROR] $msg\" -ForegroundColor Red}",
          "function warn($msg) {Write-Host \"$(Get-Date -Format o): [WARN] $msg\" -ForegroundColor DarkYellow}",
          "function info($msg) {Write-Host \"$(Get-Date -Format o): [INFO] $msg\"}",
          "info \"Evaluate CIS Benchmark on windows platform\"",
          "",
          "$INSPECTOR_SSM_PLUGIN_EXE = 'C:\\Program Files\\Amazon\\Inspector\\inspectorssmplugin.exe'",
          "$INPUT_FILES = 'C:\\ProgramData\\Amazon\\Inspector\\Input'",
          "$INSPECTOR_SSM_PLUGIN_OUTPUT = 'C:\\ProgramData\\Amazon\\Inspector\\Output'",
          "$PROCESS_NAME = \"inspectorssmplugin\"",
          "$INSPECTOR_EXCLUSION_TAG = \"inspectorec2exclusion\"",
          "",
          "function Retry-Command {",
          "    [CmdletBinding()]",
          "    Param(",
          "        [Parameter(Position=0, Mandatory=$true)]",
          "        [scriptblock]$ScriptBlock,",
          "",
          "        [Parameter(Position=1, Mandatory=$true)]",
          "        [string]$ErrorMessage,",
          "",
          "        [Parameter(Position=2, Mandatory=$false)]",
          "        [int]$Maximum = 3,",
          "",
          "        [Parameter(Position=3, Mandatory=$false)]",
          "        [int]$Delay = 1",
          "    )",
          "",
          "    Begin {",
          "        $count = 0",
          "    }",
          "",
          "    Process {",
          "        do {",
          "            $count++",
          "            try {",
          "                Invoke-Command -Command $ScriptBlock",
          "                return",
          "            } catch {",
          "                error $_.Exception.InnerException.Message -ErrorAction Continue",
          "                info \"Waiting for $Delay second(s) before retrying...\"",
          "                Start-Sleep -Seconds $Delay",
          "            }",
          "        } while ($count -lt $Maximum)",
          "",
          "        error \"$ErrorMessage\"",
          "        Exit 1",
          "    }",
          "}",
          "",
          "function isExcluded{",
          "    try {",
          "        $metadata_uri = \"http://169.254.169.254/latest\"",
          "        $token = Invoke-RestMethod -Headers @{\"X-aws-ec2-metadata-token-ttl-seconds\" = \"21600\"} -Method PUT -Uri \"$metadata_uri/api/token\"",
          "        $response = Invoke-RestMethod -Headers @{\"X-aws-ec2-metadata-token\" = $token} -Method GET -Uri \"$metadata_uri/meta-data/tags/instance/\"",
          "        $tags = $response.toLower().Split([Environment]::NewLine)",
          "        return ($tags -contains $INSPECTOR_EXCLUSION_TAG)",
          "    } catch {",
          "       warn $_.Exception.Message -ErrorAction Continue",
          "       info \"Failed to get instance tags from instance metadata.\"",
          "       return $false",
          "    }",
          "}",
          "",
          "try {",
          "    if (isExcluded) {",
          "        info \"exiting: instance is inspector excluded, skipping CIS Benchmark evaluation for the instance.\"",
          "        Exit 0",
          "    }",
          "",
          "    Retry-Command -ScriptBlock {",
          "        info \"Checking for installed binary...\"",
          "        if (-not(Test-Path -Path $INSPECTOR_SSM_PLUGIN_EXE -PathType Leaf)) {",
          "            throw \"$INSPECTOR_SSM_PLUGIN_EXE does not exist\"",
          "        }",
          "    } -Delay 60 -Maximum 5 -ErrorMessage \"Inspector ssm plugin binary is not installed, exiting...\"",
          "",
          "    $manifest_uri = \"{{ManifestUri}}\"",
          "    $cfront_url = \"{{CloudFrontUrl}}\"",
          "    $s3_url = \"{{S3Url}}\"",
          "    $profile = \"{{BenchmarkProfile}}\"",
          "    $scan_id = \"{{ScanArn}}\"",
          "",
          "    $domain = \"prod\"",
          "    info \"Provided domain: $domain\"",
          "    if (Test-Path -Path $INPUT_FILES) {",
          "        info \"Input files directory already exists: $INPUT_FILES\"",
          "    } else {",
          "        info \"Creating directory for input files: $INPUT_FILES\"",
          "        New-Item $OVAL_FILES -itemType Directory",
          "    }",
          "",
          "    info \"Starting cis benchmark evaluation evaluation using inspector ssm plugin\"",
          "    $proc = Start-Process -FilePath $INSPECTOR_SSM_PLUGIN_EXE -PassThru -Wait -ArgumentList \"-mode cis -cis-manifest-path \"\"$manifest_uri\"\" -server-url \"\"$cfront_url\"\" -server-url-fallback \"\"$s3_url\"\" -benchmark-profile \"\"$profile\"\" -scan-id \"\"$scan_id\"\" -domain \"\"$domain\"\" -concurrency 1\"",
          "    if ($proc.ExitCode -ne 0) {",
          "        warn \"inspectorssmplugin.exe exited with status code $($proc.ExitCode) while evaluating CIS benchmark\"",
          "        Exit 1",
          "    } else {",
          "        info \"Completed processing of CIS benchmark evaluation\"",
          "        Exit 0",
          "    }",
          "} catch {",
          "    error $_",
          "    error \"Unknown error\"",
          "    Exit 1",
          "}"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "invokeCisBenchmarkEvaluatorLinux",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "#",
          "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "#",
          "",
          "set -x",
          "",
          "fail () {",
          "  echo $1",
          "  echo $1 >&2",
          "  exit 1",
          "}",
          "",
          "is_excluded () {",
          "  metadata_uri=\"http://169.254.169.254/latest\"",
          "  TOKEN=$(curl -sS -X PUT \"$metadata_uri/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")",
          "  response=$(curl -sS -w \"\\n%{http_code}\" -H \"X-aws-ec2-metadata-token: $TOKEN\" -v $metadata_uri/meta-data/tags/instance 2> /dev/null)",
          "  http_code=$(tail -n1 <<< \"$response\")",
          "  if [ $http_code -ne 200 ]; then",
          "    echo \"Failed to get instance tags from instance metadata.\"",
          "    return 1",
          "  fi",
          "  tags=$(sed '$ d' <<< \"$response\")",
          "  INSPECTOR_EXCLUSION_TAG=\"inspectorec2exclusion\"",
          "",
          "  # put hard newline character in variable",
          "  nl=$(printf \"\\nx\")",
          "  nl=${nl%x}",
          "",
          "  while [ \"$tags\" != \"$tag\" ] ;do",
          "      # extract the substring from start of string up to delimiter.",
          "      tag=${tags%%$nl*}",
          "      # delete this first \"element\" AND next separator, from $tags.",
          "      tags=\"${tags#$tag$nl}\"",
          "      tag_lower=$(echo \"$tag\" | tr \"[:upper:]\" \"[:lower:]\")",
          "      if [ \"$tag_lower\" == \"$INSPECTOR_EXCLUSION_TAG\" ]; then",
          "        echo \"Inspector exclusion tag found: $tag\"",
          "        return 0",
          "      fi",
          "  done",
          "  return 1",
          "}",
          "",
          "retry () {",
          "  local attempt=0",
          "  local max_attempts=5",
          "  local delay=60",
          "  while",
          "    \"$1\" && break || {",
          "        attempt=$((attempt+1))",
          "        echo \"Waiting for $delay second(s) before retrying...\"",
          "        sleep $delay;",
          "    }",
          "    [ $attempt -lt $max_attempts ]",
          "  do :; done",
          "  if [ $attempt -eq $max_attempts ]; then",
          "    echo \"Retries completed after $attempt attempts.\"",
          "    fail \"$2\"",
          "  fi",
          "}",
          "",
          "INSPECTOR_ROOT_DIR=\"/opt/aws/inspector\"",
          "INSPECTOR_SSM_PLUGIN=\"$INSPECTOR_ROOT_DIR/bin/inspectorssmplugin\"",
          "INSPECTOR_OUTPUT_DIR=\"$INSPECTOR_ROOT_DIR/var/output\"",
          "",
          "MANIFEST_URI=\"{{ManifestUri}}\"",
          "CFRONT_URL=\"{{CloudFrontUrl}}\"",
          "S3_URL=\"{{S3Url}}\"",
          "PROFILE=\"{{BenchmarkProfile}}\"",
          "SCAN_ID=\"{{ScanArn}}\"",
          "",
          "DOMAIN=\"prod\"",
          "",
          "if is_excluded; then",
          "  echo \"Exiting: instance is tagged as excluded, skipping the evaluation for an instance.\"",
          "  exit 0",
          "fi",
          "",
          "is_installed () {",
          "  if [ ! -f $INSPECTOR_SSM_PLUGIN ]; then",
          "    echo \"$INSPECTOR_SSM_PLUGIN does not exist\"",
          "    (exit 1)",
          "  else",
          "    echo \"$INSPECTOR_SSM_PLUGIN exist\"",
          "  fi",
          "}",
          "",
          "echo \"Checking the installation of inspector ssm plugin...\"",
          "retry is_installed \"Inspector ssm plugin is not installed. Exiting...\"",
          "echo \"Inspector ssm plugin is installed.\"",
          "",
          "echo \"Starting cis benchmark evaluation evaluation using inspector ssm plugin\"",
          "exec \"$INSPECTOR_SSM_PLUGIN\" -mode cis -cis-manifest-path \"$MANIFEST_URI\" -server-url \"$CFRONT_URL\" -server-url-fallback \"$S3_URL\" -benchmark-profile \"$PROFILE\" -scan-id \"$SCAN_ID\" -domain \"$DOMAIN\" -concurrency 1",
          ""
        ]
      }
    }
  ]
}
