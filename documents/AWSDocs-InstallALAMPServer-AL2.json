{
  "schemaVersion": "0.3",
  "description": "Tutorial: Install a LAMP Web Server on Amazon Linux 2\n===\n\nThis Automation document helps you launch an Elastic Compute Cloud (EC2) instance using an Amazon Linux 2 AMI and install an Apache web server with PHP and MySQL support (sometimes called a LAMP web server or LAMP stack). You can use this server to host a static website or deploy a dynamic PHP application that reads and writes information to a database. This Automation document automates the procedure described in [Tutorial: Install a LAMP Web Server on Amazon Linux 2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances*.\n\nPre-requisites\n---\n\nTo run the following Automation document, you must have permissions to run Automation workflows and create the resources below. The Automation workflow runs in the context of the current AWS Identity and Access Management (IAM) user.\n\nResources Created\n---\n\nThis Automation document launches a CloudFormation stack to create the following resources.\n\n* A Virtual Private Cloud (VPC) with a route table, public subnet via an Internet Gateway (IGW), network ACL, and Security Group\n* A Security Group allowing access to HTTP/80\n* An IAM Instance Profile Role so the EC2 instance can register with AWS Systems Manager\n* An EC2 instance launched using the latest Amazon Linux AMI\n\nOutputs\n---\n\nOnce the Automation has completed, you will be able to navigate to the phpMyAdmin dashboard by navigating to the public DNS address (or the public IP address) of the launched instance followed by a forward slash and the name of the installation directory. For example:\n\n>http://my.public.dns.amazonaws.com/phpMyAdmin\n\nNext Steps\n---\n\nOnce you have completed this Automation document, we recommend running the follow-up Automation document [```AWS-HostingAWordPressBlog-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-HostingAWordPressBlog-AL2/description) which automates the procedure describe in [Tutorial: Hosting a WordPress Blog with Amazon Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html).\n\nCleanup\n---\n\nTo remove resources created by this Automation document, navigate to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created. \n\n**Important:**\n\nIf you delete the stack created, then you must run this document again before using the Automation document ```AWS-HostingAWordPressBlog-AL2```.",
  "mainSteps": [
    {
      "name": "createLAMPStackResources",
      "action": "aws:createStack",
      "maxAttempts": 1,
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Capabilities": [
          "CAPABILITY_NAMED_IAM"
        ],
        "StackName": "LAMPStack-AL2",
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: AWS CloudFormation template for Tutorial - Install a LAMP Web Server on Amazon Linux 2\nParameters :\n  LatestAmazonLinuxAmiId :\n    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'\nResources:\n  ManagedInstanceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - ssm.amazonaws.com\n            - ec2.amazonaws.com\n          Action: sts:AssumeRole\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n      Path: '/'\n      Policies:\n      - PolicyName: putParameter\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          # Allows access to Parameter Store parameters specific to the tutorial\n          - Effect: Allow\n            Action:\n            - ssm:PutParameter\n            Resource: 'arn:aws:ssm:*:*:parameter/Tutorials/Passwords/AL2/*'\n  ManagedInstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Path: '/'\n      Roles:\n      - !Ref ManagedInstanceRole\n      InstanceProfileName: ManagedInstanceProfileLAMPAL2\n  VPC:\n    Type: 'AWS::EC2::VPC'\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: Automation-LAMPStack-AL2\n  InternetGateway:\n    Type: 'AWS::EC2::InternetGateway'\n    Properties:\n      Tags:\n      - Key: Name\n        Value: Automation-LAMPStack-AL2\n  VPCGatewayAttachment:\n    Type: 'AWS::EC2::VPCGatewayAttachment'\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n  SubnetPublic:\n    Type: 'AWS::EC2::Subnet'\n    Properties:\n      AvailabilityZone: !Select [0, !GetAZs '']\n      CidrBlock: 10.0.0.0/20\n      MapPublicIpOnLaunch: true\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-LAMPStack-AL2\n  RouteTablePublic:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-LAMPStack-AL2\n  RouteTableAssociationPublic:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref SubnetPublic\n      RouteTableId: !Ref RouteTablePublic\n  RouteTablePublicInternetRoute:\n    Type: 'AWS::EC2::Route'\n    DependsOn: VPCGatewayAttachment\n    Properties:\n      RouteTableId: !Ref RouteTablePublic\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref InternetGateway\n  NetworkAclPublic:\n    Type: 'AWS::EC2::NetworkAcl'\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-LAMPStack-AL2\n  SubnetNetworkAclAssociationPublic:\n    Type: 'AWS::EC2::SubnetNetworkAclAssociation'\n    Properties:\n      SubnetId: !Ref SubnetPublic\n      NetworkAclId: !Ref NetworkAclPublic\n  NetworkAclEntryInPublicAllowAll:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref NetworkAclPublic\n      RuleNumber: 100\n      Protocol: -1\n      RuleAction: allow\n      Egress: false\n      CidrBlock: '0.0.0.0/0'\n  NetworkAclEntryOutPublicAllowAll:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref NetworkAclPublic\n      RuleNumber: 100\n      Protocol: -1\n      RuleAction: allow\n      Egress: true\n      CidrBlock: '0.0.0.0/0'\n  InstanceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Security Group created for AWS-InstallLAMPWebServer'\n      GroupName: Automation-LAMPStack-AL2-HTTP\n      SecurityGroupIngress: \n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n      SecurityGroupEgress: \n        - IpProtocol: -1\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n      Tags: \n        - Key: Name\n          Value: Automation-LAMPStack-AL2\n      VpcId: !Ref VPC\n  LinuxEc2Instance: \n    Type: AWS::EC2::Instance\n    Properties: \n      InstanceType: t2.small\n      ImageId: !Ref LatestAmazonLinuxAmiId\n      NetworkInterfaces: \n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet: \n            - Ref: 'InstanceSecurityGroup'\n          SubnetId: \n            Ref: 'SubnetPublic'\n      IamInstanceProfile: !Ref ManagedInstanceProfile\n      Tags:\n        - Key: Name\n          Value: Automation-LAMPStack-AL2\nOutputs:\n  TemplateID:\n    Description: 'Template id.'\n    Value: 'vpc'\n  SubnetPublic:\n    Description: 'Subnet A public.'\n    Value: !Ref SubnetPublic\n    Export:\n      Name: !Sub '${AWS::StackName}-SubnetPublic'\n      ",
        "TimeoutInMinutes": 5
      },
      "description": "**Create the Amazon Linux Instance**\n\nThe first step of this Automation document creates a CloudFormation stack which then creates the required resources for this tutorial. This includes a VPC, route table, internet gateway, network ACLs, subnet, security group, IAM Instance profile role, and an EC2 instance. This step can take approximately 5-7 minutes to complete."
    },
    {
      "name": "outputPublicDNS",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Outputting public DNS address of EC2 instance",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "curl -fsq http://169.254.169.254/latest/meta-data/public-hostname"
          ],
          "executionTimeout": "3600",
          "workingDirectory": ""
        }
      },
      "description": "**Output the public DNS address for the launched EC2 instance**\n\nThis step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to test your instance in subsequent steps. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance."
    },
    {
      "name": "installLAMPServer",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Installing LAMP Server",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "sudo yum update -y",
            "sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2",
            "sudo yum install -y httpd mariadb-server",
            "sudo systemctl start httpd",
            "sudo systemctl enable httpd",
            "sudo systemctl is-enabled httpd",
            "curl -fsq http://169.254.169.254/latest/meta-data/public-hostname"
          ],
          "executionTimeout": "3600",
          "workingDirectory": ""
        }
      },
      "description": "**Prepare the LAMP Server**\n\nThis step starts with installing the latest security updates and bug fixes. After updates have been installed, the Apache web server (```httd24```), MySQL (```mysql56-server```), and PHP software packages (```php70``` and ```php70-mysqlnd```) are installed on the instance. The Apache web server service is then configured to start automatically.\n\nOnce this step is complete, you can test your web server by entering the public DNS address (or the public IP address of your instance) in a web browser. You should see the Apache test page."
    },
    {
      "name": "setFilePermissions",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Setting file permissions",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "sudo usermod -a -G apache ec2-user",
            "groups ec2-user",
            "sudo chown -R ec2-user:apache /var/www",
            "sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \\;",
            "find /var/www -type f -exec sudo chmod 0664 {} \\;"
          ],
          "executionTimeout": "3600"
        }
      },
      "description": "**Setting File Permissions**\n\nThis step adds your user (```ec2-user```) to the ```apache``` group. After this, the group ownership of ```/var/www``` and its contents is changed to the ```apache``` group. The Automation then adds group write permissions and sets the group ID on future subdirectories for the directory ```/var/www``` and its subdirectories."
    },
    {
      "name": "testLAMPServer",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Testing LAMP server with PHP endpoint",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php"
          ],
          "executionTimeout": "3600"
        }
      },
      "description": "**Testing the LAMP server using the PHP Endpoint**\n\nThis step creates a PHP file, ```phpinfo.php```, in the Apache document root. Following this, you can navigate to the PHP information page by entering the public DNS address (or the public IP address of your instance) in a web browser. You should see the PHP information page."
    },
    {
      "name": "removePHP",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Removing PHP file from previous step",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "rm /var/www/html/phpinfo.php"
          ],
          "executionTimeout": "3600"
        }
      },
      "description": "**Removing the PHP Information page**\n\nThis step removes the ```phpinfo.php``` file created in the previous step. Although this can be useful information, it should not be broadcast to the internet for security reasons."
    },
    {
      "name": "secureDatabase",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Securing MySQL DB",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "sudo systemctl start mariadb",
            "root=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1)",
            "mysql --user=root <<_EOF_",
            "UPDATE mysql.user SET Password=PASSWORD('$root') WHERE User='root';",
            "DELETE FROM mysql.user WHERE User='';",
            "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');",
            "DROP DATABASE IF EXISTS test;",
            "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';",
            "FLUSH PRIVILEGES;",
            "_EOF_",
            "az=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)",
            "aws ssm put-parameter --name \"/Tutorials/Passwords/AL2/MySQL/root\" --type \"SecureString\" --value $root --description \"MySQL root DB Password\" --region \"${az::-1}\" --overwrite",
            "sudo systemctl enable mariadb"
          ],
          "executionTimeout": "3600",
          "workingDirectory": ""
        }
      },
      "description": "**Securing the MySQL Database**\n\nThis step automates the process of setting a root password and removing the insecure features from the MySQL installation. First, the MySQL database is started. Next, a random password is generated for the root user and set within MySQL; this password is stored within AWS Systems Manager Parameter Store. Additionally, the following configuration changes are made to MySQL database installation.\n\n* Removing anonymous user accounts\n* Disabling remote root login\n* Removing the test database\n\nLastly, the MySQL database is configured to start at every boot."
    },
    {
      "name": "installphpMyAdmin",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStackOnError",
      "inputs": {
        "Comment": "Installing phpMyAdmin",
        "DocumentName": "AWS-RunShellScript",
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-LAMPStack-AL2"
            ]
          }
        ],
        "Parameters": {
          "commands": [
            "sudo yum install php-mbstring -y",
            "sudo systemctl restart httpd",
            "sudo systemctl restart php-fpm",
            "cd /var/www/html",
            "wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz",
            "mkdir phpMyAdmin && tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1",
            "rm phpMyAdmin-latest-all-languages.tar.gz",
            "sudo systemctl start mariadb"
          ],
          "executionTimeout": "3600"
        }
      },
      "description": "**Install phpMyAdmin**\n\nThis step installs phpMyAdmin on your instance, which is a web-based database management tool that you can use to view and edit the MySQL databases. After this step completes, you can access phpMyAdmin by entering the public DNS address (or the public IP address of your instance) followed by a forward slash and the name ```phpMyAdmin``` in a web browser. For example:\n\n>http://my.public.dns.amazonaws.com/phpMyAdmin\n\nYou should see the phpMyAdmin login page. To login, enter ```root``` as the user name and the value of the Parameter Store parameter [```/Tutorials/Passwords/AL2/MySQL/root```](https://console.aws.amazon.com/systems-manager/parameters/%252FTutorials%252FPasswords%252FMySQL%252Froot/description).\n\n\n**Important**\n\n\nWe do not recommend using phpMyAdmin to access a LAMP server unless you have enabled SSL/TLS in Apache; otherwise, your database administrator password and other data are transmitted insecurely across the internet. For security recommendations from the developers, see [Securing your phpMyAdmin installation](https://docs.phpmyadmin.net/en/latest/setup.html#securing-your-phpmyadmin-installation).",
      "isEnd": true
    },
    {
      "name": "deleteStackOnError",
      "action": "aws:deleteStack",
      "maxAttempts": 1,
      "inputs": {
        "StackName": "{{ createLAMPStackResources.StackId }}"
      },
      "description": "**Delete the CloudFormation stack**\n\nThis step deletes the launched CloudFormation stack and the associated resources. This step will only be available in the event that a previous step failed.",
      "isEnd": true
    }
  ],
  "outputs": [
    "createLAMPStackResources.StackId",
    "outputPublicDNS.Output"
  ]
}
