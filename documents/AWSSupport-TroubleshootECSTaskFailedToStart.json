{
  "schemaVersion": "0.3",
  "description": "The AWSSupport-TroubleshootECSTaskFailedToStart runbook helps you troubleshoot why an Amazon Elastic Container Service (Amazon ECS) task in an Amazon ECS cluster failed to start. You must run this runbook in the same AWS Region as your task that failed to start. The runbook analyzes the following common issues that can prevent a task from starting:\n\n- Network connectivity to the configured container registry\n- Missing IAM permissions required by the task execution role\n- VPC endpoint connectivity\n- Security group rule configuration\n- AWS Secrets Manager secrets references\n- Logging configuration\n\n## Note:\n\nIf the analysis determines that network connectivity needs to be tested, an AWS Lambda function and requisite IAM role are created in your account. These resources are used to simulate the network connectivity of your failed task. The automation deletes these resources after the analysis is complete or if an error occurs during execution. However, if the automation fails to delete the resources, you must do so manually.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows AWS Systems Manager Automation to perform the actions on your behalf. If no role is specified, AWS Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "ClusterName": {
      "type": "String",
      "description": "(Required) The name of the Amazon ECS cluster where the task failed to start.",
      "allowedPattern": "^[a-zA-Z0-9_-]{1,255}$"
    },
    "TaskId": {
      "type": "String",
      "description": "(Required) The ID of the failed task. Use the most recently failed task.",
      "allowedPattern": "^[a-z0-9]{1,255}$"
    },
    "CloudwatchRetentionPeriod": {
      "type": "Integer",
      "description": "(Optional) The retention period, in days, for the AWS Lambda function logs to be stored in Amazon CloudWatch Logs. This is only necessry if the analysis determines network connectivity needs to be tested.",
      "default": 30,
      "allowedValues": [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90
      ]
    }
  },
  "mainSteps": [
    {
      "name": "PreflightPermissionChecks",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeScript",
      "description": "Verifies that the user or role who started the automation has the required IAM permissions. If you don't have sufficient permissions to use this runbook, the missing required permissions are included in the output of the automation.",
      "timeoutSeconds": 60,
      "inputs": {
        "InputPayload": {
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "iam_permission_handler.iam_permission_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "PermissionCheckResults",
          "Selector": "$.Payload.results",
          "Type": "String"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ],
      "nextStep": "BranchOnUserHasPermission"
    },
    {
      "name": "BranchOnUserHasPermission",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether you have permissions to all required actions for the runbook.",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ PreflightPermissionChecks.PermissionCheckResults }}",
              "StringEquals": "FAILED"
            },
            "NextStep": "NetworkToolDeployment"
          }
        ],
        "Default": "ExecutionResults"
      },
      "nextStep": "ExecutionResults"
    },
    {
      "name": "NetworkToolDeployment",
      "action": "aws:executeScript",
      "description": "Creates an AWS Lambda function in your VPC if the analysis determines network connectivity needs to be tested.",
      "onFailure": "step:DeletionLifecycle",
      "onCancel": "step:DeletionLifecycle",
      "timeoutSeconds": 400,
      "inputs": {
        "InputPayload": {
          "ClusterName": "{{ ClusterName }}",
          "TaskId": "{{ TaskId }}",
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "lambda_deployment_handler.lambda_deployment_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "DeploymentResult",
          "Selector": "$.Payload.deployment_result",
          "Type": "String"
        },
        {
          "Name": "NetworkToolLambdaArn",
          "Selector": "$.Payload.network_tool_lambda_arn",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.message",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnNetworkToolDeploymentStatus"
    },
    {
      "name": "BranchOnNetworkToolDeploymentStatus",
      "action": "aws:branch",
      "onFailure": "step:DeletionLifecycle",
      "onCancel": "step:DeletionLifecycle",
      "description": "Branches based on the results of the previous step.",
      "inputs": {
        "Choices": [
          {
            "Or": [
              {
                "Variable": "{{ NetworkToolDeployment.DeploymentResult }}",
                "StringEquals": "SUCCESS"
              },
              {
                "Variable": "{{ NetworkToolDeployment.DeploymentResult }}",
                "StringEquals": "SKIPPED"
              }
            ],
            "NextStep": "CoreFailureReasonEvaluation"
          }
        ],
        "Default": "DeletionLifecycle"
      },
      "nextStep": "DeletionLifecycle"
    },
    {
      "name": "CoreFailureReasonEvaluation",
      "action": "aws:executeScript",
      "description": "Analyzes possible causes for the failure to start your task.",
      "onFailure": "step:DeletionLifecycle",
      "onCancel": "step:DeletionLifecycle",
      "timeoutSeconds": 600,
      "inputs": {
        "InputPayload": {
          "ClusterName": "{{ ClusterName }}",
          "TaskId": "{{ TaskId }}",
          "NetworkTool": "{{ NetworkToolDeployment.NetworkToolLambdaArn }}",
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "core_evaluation_handler.core_evaluation_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "AnalysisMessage",
          "Selector": "$.Payload.AnalysisMessage",
          "Type": "String"
        },
        {
          "Name": "TaskAnalysisInfoCodes",
          "Selector": "$.Payload.TaskAnalysisInfoCodes",
          "Type": "StringList"
        },
        {
          "Name": "TaskAnalysisExecutionLogs",
          "Selector": "$.Payload.TaskAnalysisExecutionLogs",
          "Type": "String"
        }
      ],
      "nextStep": "DeletionLifecycle"
    },
    {
      "name": "DeletionLifecycle",
      "action": "aws:executeScript",
      "description": "Deletes resources created by this automation.",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "timeoutSeconds": 200,
      "inputs": {
        "InputPayload": {
          "NetworkTool": "{{ NetworkToolDeployment.NetworkToolLambdaArn }}",
          "CloudwatchRetentionPeriod": "{{ CloudwatchRetentionPeriod }}",
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "deletion_handler.deletion_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        },
        {
          "Name": "EniList",
          "Selector": "$.Payload.eni_list",
          "Type": "StringList"
        },
        {
          "Name": "EniDeletionFlag",
          "Selector": "$.Payload.eni_deletion_flag",
          "Type": "String"
        }
      ],
      "nextStep": "ExecutionResults",
      "isCritical": true
    },
    {
      "name": "ExecutionResults",
      "action": "aws:executeScript",
      "description": "Formats the output of the automation to return the results of the analysis to the console.",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "timeoutSeconds": 200,
      "inputs": {
        "InputPayload": {
          "PreflightPermissionChecks": "{{ PreflightPermissionChecks.Message }}",
          "CoreFailureReasonEvaluation": "{{ CoreFailureReasonEvaluation.AnalysisMessage }}",
          "TaskAnalysisExecutionLogs": "{{ CoreFailureReasonEvaluation.TaskAnalysisExecutionLogs }}",
          "NetworkToolDeployment": "{{ NetworkToolDeployment.Message }}",
          "DeletionLifecycle": "{{ DeletionLifecycle.Message }}"
        },
        "Handler": "output_handler.output_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "TaskFailureReason",
          "Selector": "$.Payload.FailureReason",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.InfoCodes",
          "Type": "StringList"
        },
        {
          "Name": "ExecutionLogs",
          "Selector": "$.Payload.ExecutionLogs",
          "Type": "String"
        }
      ],
      "isCritical": true,
      "nextStep": "BranchOnCheckForLambdaEniDeletion"
    },
    {
      "name": "BranchOnCheckForLambdaEniDeletion",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether the AWS Lambda function and associated resources were created and need to be deleted.",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ NetworkToolDeployment.DeploymentResult }}",
                "StringEquals": "SUCCESS"
              },
              {
                "Variable": "{{ DeletionLifecycle.EniDeletionFlag }}",
                "StringEquals": "TRUE"
              }
            ],
            "NextStep": "SleepForHyperPlaneEni"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "SleepForHyperPlaneEni",
      "action": "aws:sleep",
      "description": "Sleeps for 30 minutes so the elastic network interface for the AWS Lambda function can be deleted.",
      "inputs": {
        "Duration": "PT30M"
      },
      "nextStep": "LambdaEniDeletionHandler"
    },
    {
      "name": "LambdaEniDeletionHandler",
      "action": "aws:executeScript",
      "description": "Deletes the AWS Lambda function network interface.",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "inputs": {
        "InputPayload": {
          "NetworkTool": "{{ NetworkToolDeployment.NetworkToolLambdaArn }}",
          "ENI": "{{ DeletionLifecycle.EniList }}",
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "eni_deletion_handler.eni_deletion_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ],
      "nextStep": "EniDeletionMessage"
    },
    {
      "name": "EniDeletionMessage",
      "action": "aws:executeScript",
      "description": "Formats the output of the AWS Lambda function network interface deletion step.",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "timeoutSeconds": 200,
      "inputs": {
        "InputPayload": {
          "EniDeletionMessage": "{{ LambdaEniDeletionHandler.Message }}",
          "NetworkToolStatus": "{{ NetworkToolDeployment.DeploymentResult }}",
          "AwsPartition": "{{ global:AWS_PARTITION }}"
        },
        "Handler": "output_handler.eni_deletion_output_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.DeletionStatus",
          "Type": "String"
        },
        {
          "Name": "InfoCodes",
          "Selector": "$.Payload.InfoCodes",
          "Type": "StringList"
        }
      ],
      "isCritical": true,
      "isEnd": true
    }
  ],
  "outputs": [
    "ExecutionResults.TaskFailureReason",
    "ExecutionResults.ExecutionLogs",
    "EniDeletionMessage.Status"
  ],
  "files": {
    "artifact.zip": {
      "checksums": {
        "SHA256": "9fa3374c81c3c105c549adf8ecc383724a75dc11c2d00d708a9a3721ca597e45"
      }
    }
  }
}
