{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-CheckXenToNitroMigrationRequirements** automation checks for the pre-requisites to migrate a Xen based EC2 Linux instance to [EC2 Nitro platform](https://aws.amazon.com/about-aws/whats-new/2019/12/amazon-ec2-nitro-system-based-instances-now-support-36-faster-amazon-ebs-optimized-instance-performance/) by performing the following checks:\n\n- Checks if the root volume is an EBS device\n- Checks if the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL) is enabled.\n- Verifies if the ENA module is installed on your EC2 instance.\n- Verifies if the NVMe module is installed on your EC2 instance. If yes, then the script verifies that the module is loaded in the initramfs image.\n- Analyzes /etc/fstab and looks for block devices being mounted using device names.\n- Determines if Operating System(OS) uses predictable network interface names by default.\n\n### Supported Operating Systems:\n* Red Hat Enterprise Linux (RHEL) 8 and 9\n* Amazon Linux 2 and Amazon Linux 2023\n* Ubuntu Server 18.04 LTS, 20.04 and 22.04\n* Debian 11 and 12 (AWS paritiion only)\n* SUSE12SP5 and SUSE15SP(5,6)",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) Provide the Xen based EC2 InstanceId you want to migrate to Nitro platform."
    }
  },
  "mainSteps": [
    {
      "name": "GetInstanceProperties",
      "action": "aws:executeAwsApi",
      "description": "Fetches the details of the provided EC2 instance.",
      "onFailure": "Abort",
      "isCritical": true,
      "maxAttempts": 3,
      "nextStep": "AssertIfInstanceHypervisorIsNitroAlready",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{InstanceId}}"
        ]
      },
      "outputs": [
        {
          "Name": "PlatformType",
          "Selector": "$.Reservations[0].Instances[0].Platform",
          "Type": "String"
        },
        {
          "Name": "RootVolumeType",
          "Selector": "$.Reservations[0].Instances[0].RootDeviceType",
          "Type": "String"
        },
        {
          "Name": "ENASupport",
          "Selector": "$.Reservations[0].Instances[0].EnaSupport",
          "Type": "Boolean"
        },
        {
          "Name": "InstanceType",
          "Selector": "$.Reservations[0].Instances[0].InstanceType",
          "Type": "String"
        }
      ]
    },
    {
      "name": "AssertIfInstanceHypervisorIsNitroAlready",
      "action": "aws:assertAwsResourceProperty",
      "description": "Checks if the current EC2 instance is already running on Nitro platform.",
      "onFailure": "Abort",
      "isCritical": true,
      "maxAttempts": 3,
      "nextStep": "CheckIfPlatformIsLinux",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceTypes",
        "InstanceTypes": [
          "{{ GetInstanceProperties.InstanceType }}"
        ],
        "PropertySelector": "$.InstanceTypes[0].Hypervisor",
        "DesiredValues": [
          "xen"
        ]
      }
    },
    {
      "name": "CheckIfPlatformIsLinux",
      "action": "aws:branch",
      "description": "Checks if the current EC2 instance is based on Linux Operating System",
      "isEnd": true,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Choices": [
          {
            "NextStep": "VerifySSMConnectivity",
            "Not": {
              "Variable": "{{GetInstanceProperties.PlatformType}}",
              "StringEquals": "windows"
            }
          }
        ]
      }
    },
    {
      "name": "VerifySSMConnectivity",
      "action": "aws:assertAwsResourceProperty",
      "description": "Verifies if the EC2 instance is connected & online with AWS Systems Manager",
      "onFailure": "Abort",
      "maxAttempts": 3,
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": true,
      "nextStep": "CheckOSSupport"
    },
    {
      "name": "CheckOSSupport",
      "action": "aws:runCommand",
      "description": "Validates if the Operating System(OS) is supported by this automation.",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "",
            "",
            "get_os_version(){",
            "    if [ -f /etc/os-release ]; then",
            "        linux_dist_name=$(grep -w \"NAME=\" /etc/os-release | awk -F'=' '{print $2}'|tr -d '\"')",
            "        linux_dist_ver=$(grep -E \"VER_ID|VERSION_ID\" /etc/os-release | awk -F'=' '{print $2}' | tr -d '\"')",
            "        linux_major_ver=$(echo \"$linux_dist_ver\" | awk -F'.' '{print $1}'|tr -d '\"')",
            "        linux_minor_ver=$(echo \"$linux_dist_ver\" | awk -F'.' '{print $2}'|tr -d '\"')",
            "    fi",
            "}",
            "",
            "check_supported_os_versions(){",
            "    if [ \"$linux_dist_name\" = \"Ubuntu\" ] && [ \"$linux_major_ver\" -lt 16 ]; then",
            "        unsupported_os",
            "    elif [ \"$linux_dist_name\" = \"Red Hat Enterprise Linux\" ] && [ \"$linux_major_ver\" -lt 7 ]; then",
            "        unsupported_os",
            "    elif [ \"$linux_dist_name\" = \"Amazon Linux\" ] && [ \"$(echo \"${linux_dist_ver} != 2018.03\"| bc)\" -eq 1 ] && [ \"$linux_major_ver\" -lt 2 ]; then",
            "        unsupported_os",
            "    elif [ \"$linux_dist_name\" = \"SLES\" ] && { { [ \"$linux_major_ver\" -lt 15 ] && [ \"$linux_minor_ver\" -lt 2 ]; } || { [ \"$linux_major_ver\" -lt 12 ] && [ \"$linux_minor_ver\" -lt 5 ]; };}; then",
            "        unsupported_os",
            "    elif [ \"$linux_dist_name\" = \"Debian GNU/Linux\" ] && [ \"$linux_dist_ver\" -lt 11 ] && [ \"$linux_dist_ver\" -gt 12 ]; then",
            "        unsupported_os",
            "    else",
            "        echo \"[INFO] Linux version is supported by this automation\"",
            "    fi ",
            "}",
            "",
            "unsupported_os() {",
            "        echo \"[ERROR] Linux version is not supported by this automation.\"",
            "        exit 1",
            "}",
            "",
            "",
            "get_os_version",
            "check_supported_os_versions"
          ]
        }
      },
      "nextStep": "CheckENADrivers"
    },
    {
      "name": "CheckENADrivers",
      "action": "aws:runCommand",
      "description": "Validates the availability of Enhanced Networking Adapter(ENA) drivers on the Operating System(OS)",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "get_ena_version(){",
            "    ena_version=$(modinfo ena|grep -Eo '^version:.*|^vermagic:.*' | awk '{print $2}')",
            "",
            "    if [ -z \"$ena_version\" ];then",
            "        echo \"[WARNING] Unable to get ENA version. Execute 'modinfo ena' command manually on the EC2 instance to find the version.\"",
            "        return 1",
            "    fi",
            "}",
            "",
            "",
            "main(){",
            "# This is the main function",
            "    if modinfo ena > /dev/null 2>&1;then",
            "        if get_ena_version; then",
            "            echo \"[PASSED] ENA Module with version $ena_version is installed and available on your EC2 instance.\"",
            "        fi",
            "    else",
            "       echo -e \"[FAILED] ENA Module is not installed on your instance. \\n\\t- Please install ENA module before changing your EC2 instance type to nitro. Look at the following link for further guidance:\"",
            "       echo -e \"\\t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enhanced-networking-ena-linux\"",
            "    fi",
            "}",
            "",
            "# Function calls start here",
            "main"
          ]
        }
      },
      "nextStep": "CheckNVMEDrivers"
    },
    {
      "name": "CheckNVMEDrivers",
      "action": "aws:runCommand",
      "description": "Validates the availability of NVMe drivers on the Operating System(OS)",
      "isCritical": true,
      "onFailure": "Continue",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "KERNEL_VERSION=\"$(uname -r)\" ",
            "readonly KERNEL_VERSION",
            "readonly PATH_TO_INITRAMFS_YUM=\"/boot/initramfs-${KERNEL_VERSION}.img\"",
            "readonly PATH_TO_INITRD_SUSE=\"/boot/initrd-${KERNEL_VERSION}\"",
            "readonly PATH_TO_INITRAMFS_DEB=\"/boot/initrd.img-${KERNEL_VERSION}\"",
            "readonly ALREADY_LOADED_INFO_MSG=\"[PASSED] NVMe Module already loaded in initramfs/initrd for kernel version.\"",
            "readonly GENERAL_LINUX_INSTRUCTIONS_FOR_REGENERATION=$(cat <<'EOF'",
            "\\t 1. Add NVMe drives to the dracut configuration files using the following commands:",
            "\\t\\t\\t - echo 'add_drivers+=\" nvme \"' >> /etc/dracut.conf.d/nvme.conf",
            "\\t\\t\\t - echo 'add_drivers+=\" nvme_core \"' >> /etc/dracut.conf.d/nvme_core.conf",
            "\\n",
            "\\t 2. Generate initramfs/initrd using the following command:",
            "\\t\\t\\t - sudo dracut -f -v",
            "\\n",
            "\\t 3. Generate modules and map files",
            "\\t\\t\\t - sudo depmod -a",
            "EOF",
            ")",
            "",
            "readonly DEBIAN_INSTRUCTIONS_FOR_REGENERATION=$(cat <<'EOF'",
            "\\t 1. Generate initramfs/initrd using the following command:",
            "\\t\\t\\t - update-initramfs -c -k all",
            "EOF",
            ")",
            "",
            "",
            "is_NVMe_blocklisted(){",
            "    if ! modprobe --showconfig | grep blacklist | grep nvme; then",
            "        echo \"[PASSED] NVMe module is not blocklisted.\"",
            "    else",
            "        echo \"[FAILED] NVMe module is blocklisted.\"",
            "    fi",
            "}",
            "",
            "check_NVMe_omitted () {",
            "    ",
            "    nvme_results=$(lsinitrd \"$1\"| grep -w nvme)",
            "    if ! echo \"$nvme_results\" | grep -w nvme; then ",
            "        return 240",
            "    elif echo \"$nvme_results\" | grep -e \"--omit-drivers\" -e \"-o\" | grep -w nvme > /dev/null 2>&1; then",
            "        echo \"[FAILED] NVMe module omitted in initramfs, ${1}, using parameter --omit-drivers or -o\"",
            "        return 240",
            "    elif grep -R 'omit' /etc/dracut.conf* | grep nvme; then",
            "        grep -RH 'omit' /etc/dracut.conf* | grep nvme | cut -d: -f1 | while read -r line;",
            "        do",
            "            echo \"[FAILED] NVMe module is omitted in file ${line}. Please remove this entry and rebuild the initramfs/initrd.\"",
            "        done",
            "        return 240",
            "    else",
            "        printf \"%b \\n\" \"$ALREADY_LOADED_INFO_MSG $KERNEL_VERSION\"",
            "    fi",
            "}",
            "",
            "check_NVMe_in_initrd () {",
            "    echo \"[INFO] Checking if NVMe module loaded in initramfs/initrd\"",
            "    if [ -f /etc/redhat-release ] ; then",
            "        is_NVMe_blocklisted",
            "        check_NVMe_omitted \"$PATH_TO_INITRAMFS_YUM\"",
            "        if [ $? -eq 240 ]; then        ",
            "            printf \"%b \\n\" \"$GENERAL_LINUX_INSTRUCTIONS_FOR_REGENERATION\"",
            "        fi",
            "    elif grep 'SUSE Linux' /etc/os-release > /dev/null 2>&1; then",
            "        is_NVMe_blocklisted",
            "        check_NVMe_omitted \"$PATH_TO_INITRD_SUSE\"",
            "        if [ $? -eq 240 ]; then        ",
            "            printf \"%b \\n\" \"$GENERAL_LINUX_INSTRUCTIONS_FOR_REGENERATION\"",
            "        fi",
            "    elif [ -f /etc/debian_version ] ; then",
            "        is_NVMe_blocklisted",
            "        check_NVMe_omitted \"$PATH_TO_INITRAMFS_DEB\"",
            "        if [ $? -eq 240 ]; then        ",
            "            printf \"%b \\n\" \"$DEBIAN_INSTRUCTIONS_FOR_REGENERATION\"",
            "        fi",
            "    elif grep 'Amazon Linux' /etc/os-release > /dev/null 2>&1; then",
            "        is_NVMe_blocklisted",
            "        check_NVMe_omitted \"$PATH_TO_INITRAMFS_DEB\"",
            "        if [ $? -eq 240 ]; then        ",
            "            printf \"%b \\n\" \"$GENERAL_LINUX_INSTRUCTIONS_FOR_REGENERATION\"",
            "        fi",
            "    fi",
            "}",
            "",
            "main() ",
            "{",
            "    if ! grep -w 'nvme' /lib/modules/\"$KERNEL_VERSION\"/modules.builtin > /dev/null 2>&1",
            "        then",
            "        if ! modinfo nvme > /dev/null 2>&1",
            "            then",
            "            # NVMe Module is not installed. ",
            "            echo \"[FAILED] NVMe Module is not available on your EC2 instance. \\n\\t- Please install NVMe module before changing instance type to Nitro. View link for further guidance:\"",
            "            echo \"\\t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html\"",
            "        else",
            "            echo \"[PASSED] NVMe module is installed on instance for kernel version ${KERNEL_VERSION}\"",
            "            check_NVMe_in_initrd",
            "        fi",
            "    else",
            "        echo \"[PASSED] NVMe module is present as a builtin module in kernel version ${KERNEL_VERSION}\"",
            "    fi",
            "}",
            "",
            "main"
          ]
        }
      },
      "nextStep": "CheckFSTABEntries"
    },
    {
      "name": "CheckFSTABEntries",
      "action": "aws:runCommand",
      "description": "Checks if the /etc/fstab contains entries with device names",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "onFailure": "Continue",
      "isCritical": true,
      "nextStep": "CheckPredictableNames",
      "inputs": {
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "TIMESTAMP=$(date +%F-%H:%M:%S)",
            "TEMP_DIR=\"/tmp/xen_to_nitro_automation\"",
            "TEMP_DEVICES_FILE_NAME=\"$TEMP_DIR/device_names\"",
            "FSTAB_MODIFIED_FILE_NAME=\"$TEMP_DIR/etc_fstab.modified.$TIMESTAMP\"",
            "",
            "mkdir -p $TEMP_DIR",
            "cp -p /etc/fstab \"$FSTAB_MODIFIED_FILE_NAME\"",
            "",
            "cat /etc/fstab | grep '^/dev' | grep -E 'sd[a-z]|xvd[a-z]|nvme([0-9]|1[0-9]|2[0-7])n1p?' | awk -F '/' '{print $3}' > \"$TEMP_DEVICES_FILE_NAME\"",
            "",
            "while read LINE; do ",
            "    UUID=$(ls -l /dev/disk/by-uuid | grep \"$LINE\" | sed -n \"s/^.* \\([^ ]*\\) -> .*$/\\1/p\");",
            "    if [ -n \"$UUID\" ]",
            "    then ",
            "        sed -i \"s|^/dev/${LINE}|UUID=${UUID}|\" \"$FSTAB_MODIFIED_FILE_NAME\"",
            "    fi",
            "done < \"$TEMP_DEVICES_FILE_NAME\"",
            "",
            "if [ -s \"$TEMP_DEVICES_FILE_NAME\" ]; then",
            "    echo -e \"[FAILED] Your FSTAB file contains device names. Mount the partitions using UUIDs before changing the EC2 instance type to Nitro instances.\\n\"",
            "    echo -e \"[INFO] Printing correct FSTAB file below:\"",
            "    cat \"$FSTAB_MODIFIED_FILE_NAME\"",
            "    rm  -rf \"$TEMP_DIR\"",
            "else ",
            "    rm  -rf \"$TEMP_DIR\"",
            "    echo -e \"[PASSED] FSTAB file looks fine and does not contain any entry with device names and are with UUID\"",
            "fi",
            ""
          ]
        }
      }
    },
    {
      "name": "CheckPredictableNames",
      "action": "aws:runCommand",
      "description": "Determines if Operating System(OS) uses predictable network interface names by default",
      "timeoutSeconds": 600,
      "maxAttempts": 3,
      "isCritical": true,
      "onFailure": "Continue",
      "nextStep": "GenerateReport",
      "inputs": {
        "InstanceIds": [
          "{{InstanceId}}"
        ],
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "readonly MISSING_NET_IFNAMES_MSG=$(cat <<'EndofMessage'",
            "\\n [FAILED] The option net.ifnames=0 is not present on the /etc/default/grub file. It is recommended to add this kernel parameter to disable predictable interface naming. You can fix this using the following steps:",
            "",
            "\\n *. Update the GRUB configuration file:",
            "\\t\\t\\t - sed -i '/^GRUB\\_CMDLINE\\_LINUX/s/\\\"$/\\ net\\.ifnames\\=0\\\"/' /etc/default/grub",
            "EndofMessage",
            ")",
            "",
            "readonly MISSING_BIOSDEV_NAME_MSG=$(cat <<'EndofMessage'",
            "\\n [FAILED] The option biosdevname=0 is not present on the /etc/default/grub file. You can fix this using the following steps:",
            "",
            "\\n *. Update the GRUB configuration file:",
            "\\t\\t\\t - sed -i '/^GRUB\\_CMDLINE\\_LINUX/s/\\\"$/\\ biosdevname\\=0\\\"/' /etc/default/grub",
            "EndofMessage",
            ")",
            "",
            "readonly REBUILD_GRUB=$(cat <<'EndofMessage'",
            "\\n *. Rebuild GRUB:",
            "\\t\\t\\t - grub2-mkconfig -o /boot/grub2/grub.cfg (For Non-Debian systems)",
            "\\t\\t\\t - update-grub (For Debian systems)",
            "",
            "\\t> For more details, please refer to the documentation - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html",
            "",
            "EndofMessage",
            ")",
            "",
            "",
            "check_predictable_interface_name() {",
            "    local rebuild_grub=0",
            "",
            "    if [ \"$linux_dist_name\" = \"Ubuntu\" ] || [ \"$linux_dist_name\" = \"Debian GNU/Linux\" ]; then",
            "        systemd_version=$(dpkg -l | grep -E 'udev|systemd'|tail -1|awk '{print $3}'|cut -d \"-\" -f 1)",
            "    else",
            "        systemd_version=$(rpm -qa | grep -e '^systemd-[0-9]\\+\\|^udev-[0-9]\\+' | tail -1|cut -d \"-\" -f 2)",
            "    fi",
            "",
            "    if [ \"$(echo $systemd_version|awk '{printf \"%.0f\",$1}')\" -gt 197 ]; then",
            "        printf \"\\n[INFO] systemd/udev version on this EC2 instance is %s, which is greater than 197, carrying out additional checks. Systems that use systemd or udev versions 197 or greater can rename Ethernet devices and they do not guarantee that a single network interface will be named eth0. This behavior can cause problems connecting to your instance.\\n\" \"$systemd_version\"",
            "",
            "        if [ -f /etc/default/grub ]; then",
            "            if ! grep -q \"net.ifnames\" /etc/default/grub ; then ",
            "                printf \"\\n %b \" \"$MISSING_NET_IFNAMES_MSG\";",
            "                rebuild_grub=1",
            "            else printf \"\\n [PASSED] The option net.ifnames=0 is present in /etc/default/grub file. No changes needed.\";",
            "            fi",
            "            ",
            "            if ! grep -q \"biosdevname\" /etc/default/grub; then ",
            "                printf \"\\n %b \" \"$MISSING_BIOSDEV_NAME_MSG\";",
            "                rebuild_grub=1",
            "            else printf \"\\n [PASSED] The option biosdevname=0 is present in /etc/default/grub file. No changes needed.\";",
            "            fi",
            "",
            "            if [ $rebuild_grub -eq 1 ]; then",
            "                printf \"\\n %b\" \"$REBUILD_GRUB\"",
            "            fi",
            "        fi",
            "    else",
            "        echo \"\\n [PASSED] No need to fix predictable network interface naming issues for this version of systemd/udev\"",
            "    fi",
            "}",
            "",
            "",
            "",
            "check_persistent_rules(){",
            "if [ -f /etc/udev/rules.d/70-persistent-net.rules ]; then",
            "    printf \"[FAILED] EC2 instance contains /etc/udev/rules.d/70-persistent-net.rules file, which must be deleted before creating the AMI. The file contains the MAC address for the Ethernet adapter of the original EC2 instance. If another EC2 instance boots with this file, the operating system will be unable to find the device and eth0 might fail, causing boot issues.\"",
            "else",
            "    printf \"\\n[PASSED] Operating System is not using /etc/udev/rules.d/70-persistent-net.rules\"",
            "fi",
            "}",
            "",
            "get_os_version(){",
            "    if [ -f /etc/os-release ]; then",
            "        linux_dist_name=$(grep -w \"NAME=\" /etc/os-release | awk -F'=' '{print $2}'|tr -d '\"')",
            "    fi",
            "}",
            "",
            "main(){",
            "",
            "    get_os_version",
            "    check_persistent_rules",
            "    check_predictable_interface_name",
            "}",
            "",
            "main"
          ]
        }
      }
    },
    {
      "name": "GenerateReport",
      "action": "aws:executeScript",
      "description": "Consolidates the results of all steps and generates a report on the passed and failed checks.",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "isEnd": true,
      "inputs": {
        "InputPayload": {
          "rootVolumeCheck": "{{ GetInstanceProperties.RootVolumeType }}",
          "checkENAattribute": "{{ GetInstanceProperties.ENASupport }}",
          "checkENADriversOutput": "{{ CheckENADrivers.Output }}",
          "checkNVMEDriversOutput": "{{ CheckNVMEDrivers.Output }}",
          "checkFSTABEntriesOutput": "{{ CheckFSTABEntries.Output }}",
          "checkFSTABEntriesStatus": "{{ CheckFSTABEntries.Status }}",
          "checkPredictableNamesOutput": "{{ CheckPredictableNames.Output }}"
        },
        "Handler": "script_handler",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\nHEADER = \"Total Number of Tests: 6\\n\\n\"\nFOOTER = (\n    \"\\n\\n For more information about these checks, refer to AWS Premium Support Knowledge Center Article\\n\"\n    \"https://aws.amazon.com/premiumsupport/knowledge-center/boot-error-linux-nitro-instance/\"\n)\n\n\ndef script_handler(events, _):\n    # Capturing other steps output.\n\n    root_volume_check_output = events[\"rootVolumeCheck\"]\n    check_ena_attribute_output = events[\"checkENAattribute\"]\n    check_ena_drivers_output = events[\"checkENADriversOutput\"]\n    check_nvme_drivers_output = events[\"checkNVMEDriversOutput\"]\n    check_fstab_entries_output = events[\"checkFSTABEntriesOutput\"]\n    check_fstab_entries_status = events[\"checkFSTABEntriesStatus\"]\n    check_predictable_names_output = events[\"checkPredictableNamesOutput\"]\n\n    steps_headers = [\n        \"\\n 1. Checking if the root volume is EBS: \\n\",\n        \"\\n \\n 2. Determining if ENA Attribute is enabled:\\n\",\n        \"\\n \\n 3. Checking ENA drivers status on the instance:\\n\",\n        \"\\n \\n 4. Checking NVME drivers status on the instance:\\n\",\n        \"\\n \\n 5. Checking FSTAB for entries with devices names:\\n\",\n        \"\\n \\n 6. Determine if OS uses predictable network interface names by default:\\n\",\n    ]\n    # Checking Root Volume results\n    if root_volume_check_output == \"ebs\":\n        check_root_volume_result = \"[PASSED] Root Volume attached with the instance is an EBS device.\"\n    else:\n        check_root_volume_result = \"[FAILED] Root Volume attached with the instance is not an EBS device.\"\n\n    # Checking FSTAB results\n    if check_fstab_entries_status == \"Failed\":\n        fstab_warning = (\n            \"\\n\\n Step checkFSTABEntries failed during execution. Make sure to delete the \"\n            \"/etc/fstab backup files created by script. To list all the FSTAB files, run the command \"\n            \"'ls -lhtr /etc/fstab.*' manually on the EC2 instance. \\n\"\n        )\n    else:\n        fstab_warning = \"\"\n    # Checking Root Volume results\n    if check_ena_attribute_output:\n        check_ena_output = \"[PASSED] Enhanced networking (ENA) attribute is ENABLED on the EC2 Instance.\"\n\n    else:\n        check_ena_output = (\n            \"[FAILED] Enhanced networking (ENA) attribute is NOT ENABLED on the EC2 Instance. Use the \"\n            \"ModifyInstanceAttribute[1] API call or modify-instance-attribute[2] AWS CLI command to enable the enhanced\"\n            \" networking enaSupport attribute.\\n For more details, refer to the Enhanced networking (ENA) \"\n            \"documentation[3].\\n\"\n            \"\\n       [1] https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\"\n            \"\\n       [2] https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-attribute.html|\"\n            \"\\n       [3] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL\"\n        )\n\n    result = (\n        HEADER\n        + steps_headers[0]\n        + check_root_volume_result\n        + steps_headers[1]\n        + check_ena_output\n        + steps_headers[2]\n        + check_ena_drivers_output\n        + steps_headers[3]\n        + check_nvme_drivers_output\n        + steps_headers[4]\n        + check_fstab_entries_output\n        + fstab_warning\n        + steps_headers[5]\n        + check_predictable_names_output\n        + FOOTER\n    )\n\n    return {\"output\": result}\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ],
  "outputs": [
    "GenerateReport.output"
  ]
}
