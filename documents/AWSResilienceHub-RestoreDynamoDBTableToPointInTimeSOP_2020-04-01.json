{
  "description": "## Id\nAWSResilienceHub-RestoreDynamoDBTableToPointInTimeSOP_2020-04-01\n\n## Intent\nRecover the table to a last known stable state using an existing point-in-time snapshot.\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * Source DynamoDB table\n  * You must enable point-in-time recovery (PITR) option for the source DynamoDB table.\n  * Target DynamoDB table\n\n## Permissions required for AutomationAssumeRole\n  * dynamodb:RestoreTableToPointInTime\n  * dynamodb:DescribeTable\n  * dynamodb:Scan\n  * dynamodb:Query\n  * dynamodb:UpdateItem\n  * dynamodb:PutItem\n  * dynamodb:GetItem\n  * dynamodb:DeleteItem\n  * dynamodb:BatchWriteItem\n\n##### Permissions required in case Kinesis Streaming destination is enabled\n  * kinesis:DescribeStream\n  * kinesis:PutRecord\n  * kinesis:PutRecords\n\n##### Permissions required to copy properties from source to restored table if `CopyAllProperties` option is enabled\n  * dynamodb:UpdateTable\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * dynamodb:CreateTableReplica\n  * dynamodb:CreateTable\n  * dynamodb:DescribeKinesisStreamingDestination\n  * dynamodb:EnableKinesisStreamingDestination\n  * dynamodb:DescribeTimeToLive\n  * dynamodb:UpdateTimeToLive\n  * dynamodb:ListTagsOfResource\n  * dynamodb:TagResource\n  * dynamodb:DescribeContributorInsights\n  * dynamodb:UpdateContributorInsights\n  * dynamodb:DescribeContinuousBackups\n  * dynamodb:UpdateContinuousBackups\n  * application-autoscaling:DescribeScalableTargets\n  * application-autoscaling:RegisterScalableTarget\n  * iam:PassRole (passed to application-autoscaling.amazonaws.com)\n  * cloudwatch:DescribeAlarms\n  * cloudwatch:PutMetricAlarm\n\n## Depends on\nAWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions.\n\n### (Required) DynamoDBTableSourceName\n  * type: String\n  * description: Name of the source DynamoDB table.\n\n### (Required) DynamoDBTableTargetName\n  * type: String\n  * description: DynamoDB Table Target Name\n\n### (Optional) RecoveryPointDateTime\n  * type: String\n  * description: The recovery point in time that is displayed in the “YYYY-MM-DDTHH:MM:SSZ” format.\n  * default: \"latest\"\n\n### (Optional) CopyAllProperties\n  * type: Boolean\n  * description: True or false. If set to True, all the settings are copied from source DynamoDB table to the restored DynamoDB table.\n  * default: True\n\n### (Optional) DynamoDBSourceTableAlarmNames\n  * type: StringList\n  * description: Alarm names of the source DynamoDB table to be recovered. Note: Only metric alarms that are based on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.\n  * max items: 10\n  * default: []\n\n## Details\nThis document verifies if the DynamoDB table is active and the point-in-time-recovery (PITR)\noption is enabled. It then restores the DynamoDB table to the latest snapshot or to the\nspecified point-in-time snapshot. After the restore is complete, the document waits for the\nDynamoDB table to become active. If `CopyAllProperties` is set to True, the document copies\nall the possible properties from the source DynamoDB table to the restored DynamoDB table.\nIf `DynamoDBSourceTableAlarmNames` is provided, the document copies the specified alarms\n(up to 10 alarms) from the source DynamoDB table.\nNote: Triggers and IAM policy can't be copied from the source DynamoDB table. Item count\ndoesn't appear immediately because DynamoDB updates this value once every 6 hours.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * verifyDynamoDBTableTargetStatus\n  * verifyDynamoDBTargetTablePointInTimeRecovery\n  * CheckIfUseLatestRecoveryPoint\n  * RestoreDynamoDBTableToPointInTime or RestoreDynamoDBTableLatestToPointInTime\n  * WaitTableToBeActive\n  * CheckIfNeedToCopyAllProperties\n  * CopyAllTableProperties\n  * OutputRecoveryTime\n\n## Outputs\n### RestoreDynamoDBTableLatestToPointInTime.TargetTableArn\n  * type: String\n  * description: Amazon Resource Name (ARN) of the restored DynamoDB table, provided it is recovered to the latest snapshot.\n\n### RestoreDynamoDBTableLatestToPointInTime.RecoveryPoint\n  * type: String\n  * description: Timestamp of the snapshot that is used to restore the DynamoDB table, provided it is recovered to the latest snapshot.\n\n### RestoreDynamoDBTableToPointInTime.TargetTableArn\n  * type: String\n  * description: Amazon Resource Name (ARN) of the restored DynamoDB table.\n\n### RestoreDynamoDBTableToPointInTime.RecoveryPoint\n  * type: String\n  * description: Timestamp of the snapshot that is used to restore DynamoDB table.\n\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: Time taken to recover DynamoDB table in seconds.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "DynamoDBTableSourceName": {
      "type": "String",
      "description": "(Required) Name of the source DynamoDB table."
    },
    "DynamoDBTableTargetName": {
      "type": "String",
      "description": "(Required) DynamoDB Table Target Name"
    },
    "RecoveryPointDateTime": {
      "type": "String",
      "description": "(Optional) The recovery point in time that is displayed in the “YYYY-MM-DDTHH:MM:SSZ” format.",
      "allowedPattern": "^latest$|^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d[0-5]\\d|Z)$",
      "default": "latest"
    },
    "CopyAllProperties": {
      "type": "Boolean",
      "description": "(Optional) True or false. If set to True, all the settings are copied from source DynamoDB table to the restored DynamoDB table.",
      "default": true
    },
    "DynamoDBSourceTableAlarmNames": {
      "type": "StringList",
      "description": "(Optional) Alarm names of the source DynamoDB table to be recovered. Note:Only metric alarms that are based on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.",
      "maxItems": 10,
      "default": []
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions."
    }
  },
  "outputs": [
    "RestoreDynamoDBTableLatestToPointInTime.TargetTableArn",
    "RestoreDynamoDBTableToPointInTime.TargetTableArn",
    "OutputRecoveryTime.RecoveryTime",
    "RestoreDynamoDBTableLatestToPointInTime.RecoveryPoint",
    "RestoreDynamoDBTableToPointInTime.RecoveryPoint"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "verifyDynamoDBTableTargetStatus",
      "description": "Verify that the target table is active",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableSourceName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "nextStep": "verifyDynamoDBTargetTablePointInTimeRecovery"
    },
    {
      "name": "verifyDynamoDBTargetTablePointInTimeRecovery",
      "description": "Verify that ContinuousBackupsStatus for the target table is enabled",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeContinuousBackups",
        "TableName": "{{ DynamoDBTableSourceName }}",
        "PropertySelector": "$.ContinuousBackupsDescription.ContinuousBackupsStatus",
        "DesiredValues": [
          "ENABLED"
        ]
      }
    },
    {
      "name": "CheckIfUseLatestRecoveryPoint",
      "description": "Check if recover from the latest snapshot or from the spicifed point in time",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "RestoreDynamoDBTableLatestToPointInTime",
            "Variable": "{{RecoveryPointDateTime}}",
            "EqualsIgnoreCase": "latest"
          }
        ],
        "Default": "RestoreDynamoDBTableToPointInTime"
      }
    },
    {
      "name": "RestoreDynamoDBTableLatestToPointInTime",
      "description": "Restore target table to the latest snapshot",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "RestoreTableToPointInTime",
        "SourceTableName": "{{ DynamoDBTableSourceName }}",
        "TargetTableName": "{{ DynamoDBTableTargetName }}",
        "UseLatestRestorableTime": true
      },
      "outputs": [
        {
          "Name": "RecoveryPoint",
          "Selector": "$.TableDescription.RestoreSummary.RestoreDateTime",
          "Type": "String"
        },
        {
          "Name": "TargetTableArn",
          "Selector": "$.TableDescription.TableArn",
          "Type": "String"
        }
      ],
      "nextStep": "WaitTableToBeActive"
    },
    {
      "name": "RestoreDynamoDBTableToPointInTime",
      "description": "Restore target table to the specified snapshot",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "RestoreTableToPointInTime",
        "SourceTableName": "{{ DynamoDBTableSourceName }}",
        "TargetTableName": "{{ DynamoDBTableTargetName }}",
        "RestoreDateTime": "{{ RecoveryPointDateTime }}"
      },
      "outputs": [
        {
          "Name": "RecoveryPoint",
          "Selector": "$.TableDescription.RestoreSummary.RestoreDateTime",
          "Type": "String"
        },
        {
          "Name": "TargetTableArn",
          "Selector": "$.TableDescription.TableArn",
          "Type": "String"
        }
      ],
      "nextStep": "WaitTableToBeActive"
    },
    {
      "name": "WaitTableToBeActive",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 3,
      "timeoutSeconds": 600,
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{DynamoDBTableTargetName}}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    },
    {
      "name": "CheckIfNeedToCopyAllProperties",
      "description": "Check that CopyAllProperties is enabled",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CopyAllTableProperties",
            "Variable": "{{CopyAllProperties}}",
            "BooleanEquals": true
          }
        ],
        "Default": "OutputRecoveryTime"
      }
    },
    {
      "name": "CopyAllTableProperties",
      "description": "Execute script to copy properties and alarms from the source table to the restored one",
      "action": "aws:executeAutomation",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01",
        "RuntimeParameters": {
          "AutomationAssumeRole": "{{AutomationAssumeRole}}",
          "DynamoDBTableSourceName": "{{DynamoDBTableSourceName}}",
          "DynamoDBTableTargetName": "{{DynamoDBTableTargetName}}",
          "DynamoDBSourceTableAlarmNames": "{{DynamoDBSourceTableAlarmNames}}"
        }
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      },
      "isEnd": true
    }
  ]
}
