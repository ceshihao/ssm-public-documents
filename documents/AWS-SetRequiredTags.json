{
  "description": "### Document Name - AWS-SetRequiredTags\n\n## What does this document do?\nThis document adds the specified tags to one or more AWS resources.\n\n## Notes\n* Not all resources support tagging. For a list of services that support tagging, see the [Resource Groups Tagging API Reference](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/Welcome.html).\n* Each resource can have up to 50 tags. For other limits, see the [Tag Naming and Usage Conventions in the AWS General Reference](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions).\n* You can only tag resources that are located in the current region for the AWS account.\n* To add tags to a resource, you need the necessary permissions for the service that the resource belongs to as well as permissions for adding tags. For more information see the [Resource Groups Tagging API Reference](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/Welcome.html).\n* This document will execute successfully even if setting tags fails for one or more resources. Please check the execution output for complete information on the successes and failures.\n\n## Input Parameters\n* RequiredTags: (Required) The tags to add to the resources.\n* ResourceARNs: (Required) The ARNs of the resources to add the tags to.\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* SetRequiredTags.SuccessfulResources: A list of the resources that were successfully tagged.\n* SetRequiredTags.FailedResources : A mapList of the resources where tagging failed and the reason for the failure.\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "RequiredTags": {
      "type": "StringMap",
      "description": "(Required) The tags to add to the resources.",
      "displayType": "textarea"
    },
    "ResourceARNs": {
      "type": "StringList",
      "description": "(Required) The ARNs of the resources to add the tags to.",
      "minItems": 1,
      "displayType": "textarea",
      "allowedPattern": "^(.*\\S.*)|^$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:iam::\\d{12}:role\\/[\\w+=,.@_\\/-]+|^$"
    }
  },
  "outputs": [
    "SetRequiredTags.SuccessfulResources",
    "SetRequiredTags.FailedResources"
  ],
  "mainSteps": [
    {
      "name": "SetRequiredTags",
      "action": "aws:executeScript",
      "description": "## SetRequiredTags\nAdds the specified tags to the target resources.\n## Inputs\n* RequiredTags: The tags to add to the resources.\n* ResourceARNs: The ARNs of the resources to add the tags to.\n## Outputs\n* SuccessfulResources: A list of the resources that were successfully tagged.\n* FailedResources: A mapList of the resources where tagging failed and the reason for the failure.\n",
      "onFailure": "Abort",
      "isCritical": true,
      "timeoutSeconds": 600,
      "isEnd": true,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "set_required_tags_handler",
        "InputPayload": {
          "RequiredTags": "{{RequiredTags}}",
          "ResourceARNs": "{{ResourceARNs}}"
        },
        "Script": "import json\nimport boto3\n\ndef set_required_tags_handler(event, context):\n  client = boto3.client('resourcegroupstaggingapi')\n\n  successesResources = []\n  FailedResources = []\n  resourcesArn = event[\"ResourceARNs\"]\n  tags = event[\"RequiredTags\"]\n\n  for arn in resourcesArn:\n      try:\n          response = client.tag_resources(ResourceARNList = [arn], Tags = tags)\n          successesResources.append(arn)\n\n      except Exception as e:\n        errorMsg = str(e)\n        FailedResources.append({'ResourceArn': arn , \"error\": errorMsg})\n\n  out = {\n      \"SuccessesResources\": successesResources,\n      \"FailedResources\": FailedResources\n  }\n  return out\n"
      },
      "outputs": [
        {
          "Name": "SuccessfulResources",
          "Selector": "$.Payload.SuccessesResources",
          "Type": "StringList"
        },
        {
          "Name": "FailedResources",
          "Selector": "$.Payload.FailedResources",
          "Type": "MapList"
        }
      ]
    }
  ]
}
