{
  "description": "### Document name - AWSFIS-Run-Network-Blackhole-Port\n\n## What does this document do?\nIt drops incoming or outgoing traffic for a configurable protocol (tcp or udp) and port using iptables. If iptables is not already installed on the instance, this SSM document will install it together with other dependencies listed below.\nThis SSM document supports Amazon Linux and Ubuntu operating systems only.\n\n## Dependencies installed by this SSM Document\n* iptables\n* atd\n* dig\nNote: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).\n\n## Input Parameters\n* Protocol: (Required) The protocol to blackhole.\n* Port: (Required) The port to blackhole.\n* TrafficType: The type of traffic to blackhole (default: ingress).\n* DurationSeconds: (Required) The duration - in seconds - of the test.\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n\n## Output Parameters\nNone.",
  "schemaVersion": "2.2",
  "parameters": {
    "Protocol": {
      "type": "String",
      "description": "(Required) Specify the protocol to blackhole (tcp|udp).",
      "allowedValues": [
        "tcp",
        "udp"
      ]
    },
    "Port": {
      "type": "String",
      "description": "(Required) Specify the port to blackhole.",
      "allowedPattern": "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
    },
    "TrafficType": {
      "type": "String",
      "description": "Specify the type of traffic to blackhole (egress|ingress) (default: ingress).",
      "default": "ingress",
      "allowedValues": [
        "egress",
        "ingress"
      ]
    },
    "DurationSeconds": {
      "type": "String",
      "description": "(Required) The duration - in seconds - of the test.",
      "allowedPattern": "^[0-9]+$"
    },
    "InstallDependencies": {
      "type": "String",
      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallDependencies",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameter: InstallDependencies\nIf set to True, this echo installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
      "inputs": {
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\n\nif [[ \"$( command -v atd 2>/dev/null )\" && \"$( command -v dig 2>/dev/null )\" && \"$( command -v iptables 2>/dev/null )\" ]]; then\n    if [[ -n \"\" ]] ; then\n        depmod -a\n        if modprobe sch_netem; then\n          exit\n        fi\n    else\n        echo Dependency is already installed. ; exit ;\n    fi\nfi\nif  [[ \"{{ InstallDependencies }}\" == True ]] ; then\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] && grep -i 'Amazon Linux' /etc/system-release  ; then\n    if ! grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      yum -y install at bind-utils iptables\n    elif grep -Fiq 'ID=\"amzn\"' /etc/os-release && grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      \n      yum -y install at bind-utils iptables\n    else\n      echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Amazon Linux, Ubuntu, CentOS (8, 9) and RHEL (8, 9) operating systems\"\n      exit 1\n    fi\n\n  elif grep -Fiq 'ID=\"centos\"' /etc/os-release  || grep -Fiq 'ID=\"rhel\"' /etc/os-release ; then\n    # Fetch OS Version\n    os_version_number=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '\"')\n    # if the version has a decimal, this line will remove it\n    os_major_version_number=${os_version_number%.*}\n    # Replace with version number in the url if required\n    if ! rpm --quiet -q epel-release &&  [ -n \"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\" ] ; then\n      epel_dl_url=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\"\n      epel_with_version=\"${epel_dl_url/VERSION/$os_major_version_number}\"\n      yum -y install $epel_with_version\n    fi\n    rhel_package=\"at bind-utils iptables\"\n    \n    yum -y install $rhel_package\n\n  elif grep -i \"Ubuntu\" /etc/issue ; then\n    apt-get update -y\n    # when installing, sometimes ubuntu has stderr that are not breaking errors.\n    install_error=$(apt-get install -y at dnsutils iptables) 2>&1\n    if [[ -n \"$install_error\" ]]  ; then\n        echo \"$install_error\"\n    fi\n    ubuntu_commands=( atd dig iptables )\n    for dependency_command in \"${ubuntu_commands[@]}\"\n    do\n       if ! command -v $dependency_command >/dev/null 2>&1 ; then\n            echo \"Exiting - $dependency_command not installed\"\n            exit 1\n       fi\n    done\n  else\n    echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Amazon Linux, Ubuntu, CentOS (8, 9) and RHEL (8, 9) operating systems\"\n    exit 1\n  fi\n  if [[ -n \"True\" ]] ; then\n    if ! systemctl is-enabled atd || ! systemctl is-active atd; then\n        echo \"Enabling and starting atd\"\n        systemctl enable atd\n        systemctl start atd\n    fi\n  fi\nelse\n  echo \"Dependencies are not installed - Please set InstallDependencies to True.\"\n  exit 1\nfi\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "FaultInjection",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameters: Protocol, Port, TrafficType, and DurationSeconds\nThis step blocks  `Protocol` 'TrafficType' traffic to `Port` for the given `DurationSeconds`, using the `iptables` command.\nThe script will block the traffic, and wait for the given duration to remove that. It has two rollback mechanisms in place:\n* It will listen for exit signals (SIGINT and SIGTERM), and will stop the fault injection if any of them is received.\n* It will periodically enqueue rollback checks into a queue (using `at` command). This way, if the command is stopped and the rollback\nwas not executed, the enqueued commands will to stop it. (for example, if the command is stopped using kill -9). This is just\nand extra safety check to avoid the fault to remain injected after the script is no longer running.\n",
      "inputs": {
        "maxAttempts": 1,
        "timeoutSeconds": 43200,
        "runCommand": [
          "#!/bin/bash\n\n\n# Treat unset variables as an error\nset -o nounset\n\n\n########################\n# Fault-specific logic #\n########################\n\nPORT={{ Port }}\nPROTOCOL={{ Protocol }}\nDURATION={{ DurationSeconds }}\nTRAFFIC={{ TrafficType }}\n\nif [ $DURATION -lt 1 ] || [ $DURATION -gt 43200 ]; then\n    echo \"Parameter DurationSeconds must be between 1 and 43200, was: '$DURATION'\"\n    exit 1\nfi\n\nif [[ -z \"${AWS_SSM_REGION_NAME}\" ]]; then\n  echo \"Environment variable AWS_SSM_REGION_NAME is not set. Run this script as part of an SSM document.\"\n  exit 1\nfi\n\n##################################\n#       Regional Endpoints       #\n##################################\n\nSSMMESSAGES_ENDPOINT=ssmmessages.us-east-1.amazonaws.com\nSSM_ENDPOINT=ssm.us-east-1.amazonaws.com\nEC2MESSAGES_ENDPOINT=ec2messages.us-east-1.amazonaws.com\n\n##################################\n\nFAULT_NAME=\"Run-Network-Blackhole-Port\"\n\nIP_REGEX=\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\nDELETE_MSG=\"#delete-after-fault-injection\"\nIMDS_IP=169.254.169.254\n\n# Get the REGION of the instance\nEC2_REGION=$AWS_SSM_REGION_NAME\n\n# List of endpoint we want to preserve (SSM API)\nENDPOINTS=(\n  \"${SSMMESSAGES_ENDPOINT}\"\n  \"${SSM_ENDPOINT}\"\n  \"${EC2MESSAGES_ENDPOINT}\"\n)\n\n# Only on EC2 instances add EC2 metadata. On-premise instances will be prefixed with \"mi-\"\nif [[ \"$AWS_SSM_INSTANCE_ID\" =~ ^i-.* ]]; then\n  echo \"Running on EC2 instance. Adding EC2 metadata IP to ENDPOINTS\"\n  ENDPOINTS+=(\"${IMDS_IP}\")\nfi\n\nforce_dns()\n{\n    # Force any new DNS resolution for that host to the latest known IPs\n    params=(\"$@\")\n    hostname=${params[0]}   # Hostname is expected as first argument\n    ips=(\"${params[@]:1}\")  # The rest will be the IPs\n    for ip in $(echo \"${ips[@]}\"); do\n      echo \"$ip $hostname $DELETE_MSG\" >> /etc/hosts\n    done\n}\n\nget_ips()\n{\n    # Returns if the input is a valid IP string, empty otherwise\n    local var_ip\n    var_ip=$(grep -E \"$IP_REGEX\" <<< \"$1\")\n    [  -z \"$var_ip\" ] || { echo \"$var_ip\" ; return ;}\n\n    # Returns IPs of the domain and force DNS resolution to that IP, empty otherwise\n    local var_dns\n    var_dns=$(dig +short $1)\n    [  -z \"$var_dns\" ] || { echo \"$var_dns\" ; force_dns \"$1\" \"$var_dns\" ; return ;}\n}\n\n# Creating the fault commands\nread -r -d '' ENABLE_FAULT_COMMAND <<'EOF'\n\n# Exit if FIS network fault is already running\ntest_file_exit() {\n    if [ \"$(ls $1 2>/dev/null | wc -l)\" -ge \"2\" ]; then { echo \"Fault might be already running (Found flag file matching \"$1\"). Exiting...\" 1>&2 ; exit 1; } ; fi;\n}\ntest_file_exit \"/var/lib/amazon/ssm/Run-Network-*.flag\"\n\nif [[ \"${PORT}\" =~ ^(443|80)$ ]] && [ \"$TRAFFIC\" = \"egress\" ]; then\n    # Create new iptables chain\n    iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n\n    # Allowlist the SSM endpoints\n    for e in ${ENDPOINTS[*]};\n        do\n            get_ips $e >/dev/null 2>&1 # Get the IP and modify the /etc/hosts for domain names\n            iptables -A fault-out -p tcp --dport ${PORT} -d $e -j ACCEPT\n            iptables -A fault-in -m conntrack --ctstate ESTABLISHED,RELATED -d $e -j ACCEPT\n    done\n    iptables -I INPUT -j fault-in\n\n    # Block the requested port/protocol\n    iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I OUTPUT -j fault-out\n\nelif ! [[ \"${PORT}\" =~ ^(443|80)$ ]] && [ \"${TRAFFIC}\" = \"egress\" ] ; then\n    # Create new iptables chain\n    iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    # Block the requested port/protocol\n    iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I OUTPUT -j fault-out\n\nelif [ \"${TRAFFIC}\" = \"ingress\" ] ; then\n    # Create new iptables chain\n    iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    # Block the requested port/protocol\n    iptables -A fault-in -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I INPUT -j fault-in\nfi\n\nEOF\n\n\n# Creating the disable fault commands\nread -r -d '' DISABLE_FAULT_COMMAND <<EOF\necho \"Rolling back...\"\ncheck_chain_exists()\n{\n    iptables --list \"\\$1\" >/dev/null 2>&1\n}\nif check_chain_exists fault-out; then\n    iptables -F fault-out\n    iptables -D OUTPUT -j fault-out\n    iptables -X fault-out\nfi\nif check_chain_exists  fault-in; then\n    iptables -F fault-in\n    iptables -D INPUT -j fault-in\n    iptables -X fault-in\nfi\ncat /etc/hosts | sed \"/$DELETE_MSG/d\" | tee /etc/hosts\nEOF\n\n\n#################################\n# General fault-execution logic #\n#################################\n\nSTOP_TIME=$(( $(date +%s) + $DURATION ))\n\nMAX_FLAG_AGE_SECONDS=10\nATTEMPT_ROLLBACK_AT_SECONDS=20\nINJECTION_LOOP_SLEEP_SECONDS=5\n\nRANDOM_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32)\nFLAG_PATH=\"/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING.flag\"\nROLLBACK_PATH=\"/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING-Rollback.sh\"\n\n# Creating a file with rollback check command to be executed by atd\ncat << EOF > \"$ROLLBACK_PATH\"\n#!/bin/bash\n# Dont sleep if run in terminal\nif ! [ -t 0 ] ; then\n  sleep $ATTEMPT_ROLLBACK_AT_SECONDS\nfi\nif ! [ -f \"$FLAG_PATH\" ] || [ \"\\$(( \\$(date +%s) - \\$(stat -c \"%Y\" \"$FLAG_PATH\") ))\" -gt $MAX_FLAG_AGE_SECONDS ] || [ -t 0 ]; then\n  $DISABLE_FAULT_COMMAND\n  rm -f \"$FLAG_PATH\"\n  # Dont delete rollback script if run in terminal\n  if ! [ -t 0 ] ; then\n    rm -f \"$ROLLBACK_PATH\"\n  fi\nfi\nEOF\necho \"Temporary rollback file created: $ROLLBACK_PATH\"\n\n# Enqueue a rollback check after $ATTEMPT_ROLLBACK_AT_SECONDS seconds\nschedule_rollback_attempt() {\n  echo \"bash $ROLLBACK_PATH\" | at now 2> >(sed '/warning: commands will be executed using \\/bin\\/sh/d' )\n}\n\n# Function to delete the flag file and rollback the fault injection\nrollback() {\n  rm \"$FLAG_PATH\"\n  rm \"$ROLLBACK_PATH\"\n  eval \"$DISABLE_FAULT_COMMAND\" ; STATUS=$?\n  echo Rollback done.\n  exit $STATUS\n}\n\n# Binding the rollback function to these exit signals\ntrap rollback INT\ntrap rollback TERM\n\necho \"Making sure atd daemon is running\"\n# atd must be running in order to use \"at\" later\natd || { echo Failed to run atd daemon, exiting... 1>&2 ; exit 1; }\n\necho \"Scheduling rollback\"\nschedule_rollback_attempt\n\n# Injecting fault\necho \"Enabling fault injection\"\ntouch \"$FLAG_PATH\"\neval \"$ENABLE_FAULT_COMMAND\"\n\n# For the duration of the injection, the flag file is updated, and a rollback check is enqueued\nwhile [[ $(date +%s) -lt $STOP_TIME ]] ; do\n  # If the background rollback process fires, it will delete the script\n  # from disk containing the rollback logic.  That should not happen while\n  # this script is running, but if it does, we immediately fail the script\n  # to prevent the script from continuing to run as if the fault were active.\n  if ! [ -f \"$ROLLBACK_PATH\" ]; then\n    echo Fault rollback script was deleted from disk prematurely, exiting... 1>&2\n    # though the rollback likely already happened, we attempt rollback again since\n    # the rollback script might have been deleted by some unanticipated mechanism\n    eval \"$DISABLE_FAULT_COMMAND\"\n    exit 1\n  fi\n  touch \"$FLAG_PATH\"\n  schedule_rollback_attempt\n  sleep $INJECTION_LOOP_SLEEP_SECONDS\ndone\n\n# After the desired duration, the fault injection is removed\nrollback\n"
        ]
      }
    }
  ]
}
