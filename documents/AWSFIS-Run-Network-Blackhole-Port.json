{
  "description": "### Document name - AWSFIS-Run-Network-Blackhole-Port\n\n## What does this document do?\nIt drops incoming or outgoing traffic for a configurable protocol (tcp or udp) and port using iptables. If iptables is not already installed on the instance, this SSM document will install it together with other dependencies listed below.\nThis SSM document supports Amazon Linux and Ubuntu operating systems only.\n\n## Dependencies installed by this SSM Document\n* atd\n* dig\n* iptables\nNote: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).\n\n## Input Parameters\n* Protocol: (Required) Specify the protocol to blackhole (tcp|udp).\n* Port: (Required) Specify the port to blackhole.\n* TrafficType: Specify the type of traffic to delay (egress|ingress) (default: ingress).\n* DurationSeconds: (Required) The duration - in seconds - of the fault injection.\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances (default: True).\n\n## Output Parameters\nNone.",
  "schemaVersion": "2.2",
  "parameters": {
    "Protocol": {
      "type": "String",
      "description": "(Required) Specify the protocol to blackhole (tcp|udp).",
      "allowedValues": [
        "tcp",
        "udp"
      ]
    },
    "Port": {
      "type": "String",
      "description": "(Required) Specify the port to blackhole.",
      "allowedPattern": "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
    },
    "TrafficType": {
      "type": "String",
      "description": "Specify the type of traffic to delay (egress|ingress) (default: ingress).",
      "default": "ingress",
      "allowedValues": [
        "egress",
        "ingress"
      ]
    },
    "DurationSeconds": {
      "type": "String",
      "description": "(Required) The duration - in seconds - of the fault injection.",
      "allowedPattern": "^[0-9]+$"
    },
    "InstallDependencies": {
      "type": "String",
      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True).",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallDependencies",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.",
      "inputs": {
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\nvalidate_installation_settings() {\n  if [[ \"{{ InstallDependencies }}\" == False ]]; then\n    echo \"Dependencies are not installed - Please set InstallDependencies to True.\"\n    exit 1\n  fi\n  echo \"Installing required dependencies\"\n}\n\n#################################\n#       Dependency Logic        #\n#################################\n\nfunction install_sch_netem_module() {\n  ssm_working_dir=$(pwd)\n  # Work from a directory that Amazon SSM Agent creates\n  cd /etc/amazon/ssm/\n  current_working_dir=$(pwd)\n  kernel_version=$(uname -r)\n  # Default location of sch_netem module\n  sched_module_local_path=/lib/modules/\"$kernel_version\"/kernel/net/sched/\n  sch_netem_kernel_module_file=sch_netem.ko\n  # Check if there is no compressed and uncompressed version of the module\n  if [ ! -f \"${sched_module_local_path}$sch_netem_kernel_module_file\" ] && [ ! -f \"${sched_module_local_path}$sch_netem_kernel_module_file\".xz ]; then\n    echo \"sch_netem does not exist, installing\"\n    # We will download and install the sch_netem kernel module to avoid the need for a reboot, as\n    # would be required if we used `yum install kernel-modules-extra`.\n    temp_dir=kernel-lib\n    # If the yumdownloader comes back with no module available, then fail\n    if yumdownloader kernel-modules-extra-\"$kernel_version\" --destdir \"$temp_dir\" 2>&1 | grep \"No package kernel-modules-extra-$kernel_version available.\"; then\n      echo \"No sch_netem module for the kernel version $kernel_version\"\n      echo \"Exiting - Unable to install sch_netem. kernel module sch_netem must be installed for this document to run\"\n      rm -rf \"$temp_dir\"\n      exit 1\n    fi\n    # We need to CD into the temp_dir for cpio since it does not work with absolute or relative paths well\n    cd \"$temp_dir\"\n    # Unpacks the modules into lib/\n    # version is downloaded but will differ from $kernel_version, depending OS.\n    rpm2cpio kernel-modules-extra-\"$kernel_version\".rpm | cpio -id\n    # Move back to the working dir.\n    cd \"$current_working_dir\"\n    # if sch_netem exists in the rpm lib, move it to /etc/amazon/ssm\n    sch_netem_path=$(find \"$temp_dir\"/lib -name \"$sch_netem_kernel_module_file\".xz)\n    if [ -n \"${sch_netem_path}\" ]; then\n      echo \"Downloaded Kernel Modules, and sch_netem exists. Loading Module\"\n      mv \"${sch_netem_path}\" \"$current_working_dir\"\n      # Do not need the rest of the temp_dir\n      rm -rf \"$temp_dir\"\n      echo \"Unpacking sch_netem\"\n      xz -d \"$sch_netem_kernel_module_file\".xz\n      rm -f \"$sch_netem_kernel_module_file\".xz\n      # Create a symlink to the default location so that the module can be added to the list of available modules by depmod\n      ln -s \"$current_working_dir\"/$sch_netem_kernel_module_file /lib/modules/\"$kernel_version\"/\"$sch_netem_kernel_module_file\"\n      echo \"Loading sch_netem\"\n      # Refresh the list of available modules\n      depmod -a\n      modprobe sch_netem\n      # Check if loaded successfully\n      if lsmod | grep -wq \"sch_netem\"; then\n        echo \"$sch_netem_kernel_module_file module installed and loaded\"\n      else\n        echo \"Exiting - Error loading module, kernel module sch_netem.ko must be installed for this document to run\"\n        exit 1\n      fi\n    else\n      # make sure our temp file deleted.\n      rm -rf \"$temp_dir\"\n      echo \"Exiting - Unable to install sch_netem. kernel module sch_netem must be installed for this document to run\"\n      exit 1\n    fi\n  # Check if the module exists and enable it\n  elif [[ -f \"${sched_module_local_path}/$sch_netem_kernel_module_file\" ]]; then\n    if modinfo ${sched_module_local_path}/$sch_netem_kernel_module_file -F vermagic | awk '{print $1}' | grep -Fi \"$kernel_version\"; then\n      # Lets build an updated list of available modules first\n      depmod -a\n      # Insert module\n      modprobe sch_netem\n    fi\n  # if the compressed module exist, uncompress and enable\n  elif [[ -f \"${sched_module_local_path}$sch_netem_kernel_module_file\".xz ]] && [ ! -f \"${sched_module_local_path}$sch_netem_kernel_module_file\" ]; then\n    # Module exists, so we need to unpack it and insert the module in the kernel it\n    xz -d -k \"${sched_module_local_path}/$sch_netem_kernel_module_file\".xz\n    if modinfo ${sched_module_local_path}/$sch_netem_kernel_module_file -F vermagic | awk '{print $1}' | grep -Fi \"$kernel_version\"; then\n      # Lets build an updated list of available modules first\n      depmod -a\n      # Insert module\n      modprobe sch_netem\n    fi\n  fi\n  cd \"$ssm_working_dir\"\n}\n\nfunction check_and_install_netem() {\n  if ! lsmod | grep -wq \"sch_netem\"; then\n    # To avoid issues with SELinux we wrap everything in sudo.\n    # In order to call the install_sch_netem_module function wrapped with sudo,\n    # we need to pass it as a command rather than a function call.\n    SUDOINSTALL=$(declare -f install_sch_netem_module)\n    sudo bash -c \"$SUDOINSTALL; install_sch_netem_module\" 2>&1\n    # Check if loaded\n    if lsmod | grep -wq \"sch_netem\"; then\n      echo \"sch_netem.ko Module loaded\"\n    else\n      echo \"Exiting - Error loading module, kernel module sch_netem.ko must be installed for this document to run\"\n      exit 1\n    fi\n  fi\n}\n\nfunction adjust_rhel_package() {\n  # For centos/rhel 7 the package is iproute, so remove the suffix if iproute is there\n  # since this command is directly related to the use of sch_netem.\n  if [[ ${rhel_package} == *iproute-tc* ]] && [ \"$os_major_version_number\" -eq \"7\" ]; then\n    rhel_package=${rhel_package/iproute-tc/iproute}\n  fi\n}\n\n# Configure ATD service if required\nconfigure_atd() {\n  if ! systemctl is-enabled atd || ! systemctl is-active atd; then\n    echo \"Enabling and starting atd\"\n    systemctl enable atd\n    systemctl start atd\n  fi\n}\n\n########################################################################################################################\n # This script builds a list of available modules and enables sch_netem                                                #\n # sch_netem kernel module is responsible for emulating traffic,                                                       #\n # FIS SSM Documents use this module when creating network faults, such as the packet loss fault and the latency fault #\n########################################################################################################################\n# Build a list of the available modules\nenable_netem() {\n  if ! command -v depmod &> /dev/null; then\n    echo \"WARN depmod is not available. Command could fail due to missing sch_netem\"\n    return 0\n  else\n    depmod -a\n    # Enable the sch_netem module, if there is a failure, exit\n    if ! modprobe sch_netem; then\n      echo \"WARN Cannot enable sch_netem\"\n      echo \"WARN Command could fail due to missing sch_netem\"\n      return 0\n    fi\n  fi\n  return 0\n}\n\n# Check if dependencies are already installed\ncheck_existing_dependencies() {\n  if [[ \"$( command -v atd 2>/dev/null )\" && \"$( command -v dig 2>/dev/null )\" && \"$( command -v iptables 2>/dev/null )\" ]]; then\n  \n    echo \"Dependencies are already installed.\"\n    exit\n  \n  fi\n}\n\n# Handle Amazon Linux installations\ninstall_amazon_linux() {\n  if ! grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release; then\n  \n    yum -y install at bind-utils iptables\n  elif grep -Fiq 'ID=\"amzn\"' /etc/os-release && grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release; then\n  \n    yum -y install at bind-utils iptables\n  else\n    echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Ubuntu, CentOS 9 and RHEL (8, 9) operating systems\"\n    exit 1\n  fi\n}\n\n# Handle RHEL/CentOS installations\ninstall_rhel_centos() {\n  # Fetch OS Version\n  os_version_number=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '\"')\n  # if the version has a decimal, this line will remove it\n  os_major_version_number=${os_version_number%.*}\n  # Replace with version number in the url if required\n  if ! rpm --quiet -q epel-release; then\n    epel_dl_url=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\"\n    epel_with_version=\"${epel_dl_url/VERSION/$os_major_version_number}\"\n    yum -y install $epel_with_version\n  fi\n  rhel_package=\"at bind-utils iptables\"\n  \n  yum -y install $rhel_package\n}\n\n# Handle Ubuntu installations\ninstall_ubuntu() {\n  apt-get update -y\n  # when installing, sometimes ubuntu has stderr that are not breaking errors.\n  install_error=$(apt-get install -y at dnsutils iptables 2>&1)\n  if [[ -n \"$install_error\" ]]; then\n    echo \"$install_error\"\n  fi\n\n  ubuntu_commands=( atd dig iptables )\n  for dependency_command in \"${ubuntu_commands[@]}\"; do\n    if ! command -v $dependency_command >/dev/null 2>&1; then\n      echo \"Exiting - $dependency_command not installed\"\n      exit 1\n    fi\n  done\n}\n\n# Main function to orchestrate the installation process\nmain() {\n  check_existing_dependencies\n  validate_installation_settings\n\n  if [ -f \"/etc/system-release\" ] && grep -i 'Amazon Linux' /etc/system-release; then\n    install_amazon_linux\n  elif grep -Fiq 'ID=\"centos\"' /etc/os-release || grep -Fiq 'ID=\"rhel\"' /etc/os-release; then\n    install_rhel_centos\n  elif grep -i \"Ubuntu\" /etc/issue; then\n    install_ubuntu\n  else\n    echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Ubuntu, CentOS 9 and RHEL (8, 9) operating systems\"\n    exit 1\n  fi\n  configure_atd\n}\n\n# Execute main function\nmain\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "FaultInjection",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameters: Protocol, Port, TrafficType, and DurationSeconds\nThis step blocks  `Protocol` 'TrafficType' traffic to `Port` for the given `DurationSeconds`, using the `iptables` command.\nThe script will block the traffic, and wait for the given duration to remove that. It has two rollback mechanisms in place:\n* It will listen for exit signals (SIGINT and SIGTERM), and will stop the fault injection if any of them is received.\n* It will periodically enqueue rollback checks into a queue (using `at` command). This way, if the command is stopped and the rollback\nwas not executed, the enqueued commands will to stop it. (for example, if the command is stopped using kill -9). This is just\nand extra safety check to avoid the fault to remain injected after the script is no longer running.",
      "inputs": {
        "maxAttempts": 1,
        "timeoutSeconds": 43200,
        "runCommand": [
          "#!/bin/bash\nset -o errexit -o errtrace -o nounset -o pipefail\n\n########################\n# Fault-specific logic #\n########################\n\nPORT={{ Port }}\nPROTOCOL={{ Protocol }}\nDURATION={{ DurationSeconds }}\nTRAFFIC_TYPE={{ TrafficType }}\n\nvalidate_parameter_within_range() {\n  local parameter=$1\n  local value=$2\n  local min=$3\n  local max=$4\n\n  if (( value >= min && value <= max )); then\n    return 0\n  fi\n\n  echo \"Parameter $parameter must be between $min and $max, was: '$value'\" >&2\n  exit 1\n}\n\nvalidate_running_in_ssm_document() {\n  # Check if the script is running in an SSM document by verifying that AWS_SSM_REGION_NAME environment variable is set\n  if [[ -n \"${AWS_SSM_REGION_NAME-}\" ]]; then\n    return 0\n  fi\n\n  echo \"Environment variable AWS_SSM_REGION_NAME is not set. Run this script as part of an SSM document.\" >&2\n  exit 1\n}\n\nforce_dns() {\n  local -r hostname=\"$1\"    # Hostname is expected as first argument\n  local -ar ips=(\"${@:2}\")  # The rest will be the IPs\n\n  # Force any new DNS resolution for that host to the latest known IPs\n  for ip in \"${ips[@]}\"; do\n    echo \"$ip $hostname ${DELETE_MSG:-\"#delete-after-fault-injection\"}\" >> \"${HOSTS_FILE:-/etc/hosts}\"\n  done\n\n  return 0\n}\n\nadd_imds_ip_to_protected_endpoints() {\n  local -r instance_id=\"$1\"\n\n  # Only on EC2 instances add EC2 metadata. On-premise instances will be prefixed with \"mi-\"\n  if [[ \"$instance_id\" =~ ^i-.* ]]; then\n    echo \"Running on EC2 instance. Adding EC2 metadata IP to PROTECTED_ENDPOINTS\"\n    PROTECTED_ENDPOINTS+=(\"${IMDS_IP:-\"169.254.169.254\"}\") \n  fi\n\n  return 0\n}\n\nget_ips_from_input() {\n  local -r input=\"$1\"\n  local -r regex=\"$2\"\n\n  # Echoes the input and returns 0 if the input is valid, otherwise returns 1\n  local -r validated_input=$(grep -E \"$regex\" <<< \"$input\")\n  [ -z \"$validated_input\" ] || { echo \"$validated_input\" ; return 0 ;}\n\n  return 1\n}\n\nget_ips_from_dns() {\n  local -r domain=\"$1\"\n  local -a resolved_ips=()\n\n  # Echoes IPs of the domain and forces DNS resolution to the IPs then returns 0, otherwise returns 1\n  # Since `dig` can return different IPs, we call it 10 times to maximize the chances of covering as many IPs as possible for the provided domain\n  for _ in {1..10}\n    do\n      local -a dig_output=( $(dig +short \"$domain\" | grep -v '[[:alpha:]]') )\n      [ ${#dig_output[@]} -eq 0 ] || resolved_ips+=(\"${dig_output[@]}\")\n    done\n\n  if [ ${#resolved_ips[@]} -gt 0 ]; then\n    local -ar unique_resolved_ips=( $(printf '%s\\n' \"${resolved_ips[@]}\" | sort -u) )\n    [ ${#unique_resolved_ips[@]} -eq 0 ] || { echo \"${unique_resolved_ips[@]}\" ; force_dns \"$domain\" \"${unique_resolved_ips[@]}\" ; return 0 ;}\n  fi\n\n  return 1\n}\n\nget_ips()\n{\n  local -r input=\"$1\"\n\n  get_ips_from_input \"$input\" \"$IP_REGEX\" ||\n  get_ips_from_dns \"$input\"\n}\n\nvalidate_parameter_within_range \"DurationSeconds\" $DURATION 1 43200\nvalidate_running_in_ssm_document\n\nFAULT_NAME=\"Run-Network-Blackhole-Port\"\n\nIP_REGEX=\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\nIMDS_IP=169.254.169.254\n\nDELETE_MSG=\"#delete-after-fault-injection\"\n\n# Get the REGION of the instance\nEC2_REGION=$AWS_SSM_REGION_NAME\n\n# Endpoints we want to preserve (SSM API)\nSSMMESSAGES_ENDPOINT=ssmmessages.$AWS_SSM_REGION_NAME.amazonaws.com\nSSM_ENDPOINT=ssm.$AWS_SSM_REGION_NAME.amazonaws.com\nEC2MESSAGES_ENDPOINT=ec2messages.$AWS_SSM_REGION_NAME.amazonaws.com\n\nPROTECTED_ENDPOINTS=(\n  \"${SSMMESSAGES_ENDPOINT}\"\n  \"${SSM_ENDPOINT}\"\n  \"${EC2MESSAGES_ENDPOINT}\"\n)\n\nadd_imds_ip_to_protected_endpoints \"$AWS_SSM_INSTANCE_ID\"\n\n# Function to enable fault\nenable_fault() {\n  # Exit if FIS network fault is already running\n  test_file_exit() {\n    if [ \"$(ls $1 2>/dev/null | wc -l)\" -ge \"2\" ]; then { echo \"Fault might be already running (Found flag file matching \"$1\"). Exiting...\" 1>&2 ; exit 1; } ; fi;\n  }\n  test_file_exit \"/var/lib/amazon/ssm/Run-Network-*.flag\"\n\n  if [[ \"${PORT}\" =~ ^(443|80)$ ]] && [ \"$TRAFFIC_TYPE\" = \"egress\" ]; then\n    # Create new iptables chain\n    iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n\n    # Allowlist the SSM endpoints\n    for e in ${PROTECTED_ENDPOINTS[*]};\n      do\n        get_ips $e >/dev/null 2>&1 # Get the IP and modify the /etc/hosts for domain names\n        iptables -A fault-out -p tcp --dport ${PORT} -d $e -j ACCEPT\n        iptables -A fault-in -m conntrack --ctstate ESTABLISHED,RELATED -d $e -j ACCEPT\n    done\n    iptables -I INPUT -j fault-in\n\n    # Block the requested port/protocol\n    iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I OUTPUT -j fault-out\n\n  elif ! [[ \"${PORT}\" =~ ^(443|80)$ ]] && [ \"${TRAFFIC_TYPE}\" = \"egress\" ] ; then\n    # Create new iptables chain\n    iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    # Block the requested port/protocol\n    iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I OUTPUT -j fault-out\n\n  elif [ \"${TRAFFIC_TYPE}\" = \"ingress\" ] ; then\n    # Create new iptables chain\n    iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }\n    # Block the requested port/protocol\n    iptables -A fault-in -p ${PROTOCOL} --dport ${PORT} -j DROP\n    iptables -I INPUT -j fault-in\n  fi\n}\n\n# Function to disable fault\ndisable_fault() {\n  echo \"Rolling back...\"\n  check_chain_exists()\n  {\n    iptables --list \"$1\" >/dev/null 2>&1\n  }\n  if check_chain_exists fault-out; then\n    iptables -F fault-out\n    iptables -D OUTPUT -j fault-out\n    iptables -X fault-out\n  fi\n  if check_chain_exists fault-in; then\n    iptables -F fault-in\n    iptables -D INPUT -j fault-in\n    iptables -X fault-in\n  fi\n  temp_file=$(mktemp)\n  sed \"/$DELETE_MSG/d\" /etc/hosts > $temp_file\n  cat $temp_file > /etc/hosts\n  rm -f $temp_file\n}\n\n#################################\n# General fault-execution logic #\n#################################\n\n# Function to generate the flag path\nget_flag_path() {\n  local fault_name=\"$1\"\n  local random_string=\"$2\"\n  echo \"/var/lib/amazon/ssm/$fault_name-$random_string.flag\"\n}\n\n# Function to generate the rollback path\nget_rollback_path() {\n  local fault_name=\"$1\"\n  local random_string=\"$2\"\n  echo \"/var/lib/amazon/ssm/$fault_name-$random_string-Rollback.sh\"\n}\n\nget_user_vars() {\n    # Define system variable patterns to exclude\n    local patterns=(\n        '^BASH_'\n        '^COMP_'\n        '^EUID$'\n        '^PPID$'\n        '^SHELLOPTS$'\n        '^UID$'\n        '^PWD$'\n        '^OLDPWD$'\n        '^SHLVL$'\n        '^_$'\n    )\n    \n    # Join patterns with |\n    local exclude_pattern=$(IFS='|'; echo \"${patterns[*]}\")\n    \n    # Get variables using set\n    set | grep \"^[A-Za-z][A-Za-z0-9_]*=\" | \n    grep -Ev \"$exclude_pattern\" | \n    grep -Ev \"^(patterns|exclude_pattern)=\"\n}\n\n# Function to create rollback script\ncreate_rollback_script() {\n  local FLAG_PATH=\"$1\"\n  local ROLLBACK_PATH=\"$2\"\n  local MAX_FLAG_AGE_SECONDS=\"$3\"\n  local ATTEMPT_ROLLBACK_AT_SECONDS=\"$4\"\n  local DISABLE_FAULT_COMMAND=\"$5\"\n\n  # Creating a file with rollback check command to be executed by atd\n  cat << EOF > \"$ROLLBACK_PATH\"\n#!/bin/bash\n# Environment variables needed to run the rollback command\n$(get_user_vars)\n\n# Dont sleep if run in terminal\nif ! [ -t 0 ] ; then\n  sleep $ATTEMPT_ROLLBACK_AT_SECONDS\nfi\n\n# Include the function definition\n$(declare -f \"$DISABLE_FAULT_COMMAND\")\n\nif ! [ -f \"$FLAG_PATH\" ] || [ \"\\$(( \\$(date +%s) - \\$(stat -c \"%Y\" \"$FLAG_PATH\") ))\" -gt $MAX_FLAG_AGE_SECONDS ] || [ -t 0 ]; then\n  $DISABLE_FAULT_COMMAND\n  rm -f \"$FLAG_PATH\"\n  # Dont delete rollback script if run in terminal\n  if ! [ -t 0 ] ; then\n    rm -f \"$ROLLBACK_PATH\"\n  fi\nfi\nEOF\n\n  echo \"Temporary rollback file created: $ROLLBACK_PATH\"\n}\n\n# Function to schedule rollback attempt\nschedule_rollback_attempt() {\n  local ROLLBACK_PATH=\"$1\"\n  echo \"bash $ROLLBACK_PATH\" | at now 2>&1 | grep -v \"warning: commands will be executed using /bin/sh\"\n}\n\n# Function to perform rollback\nrollback() {\n  local DISABLE_FAULT_COMMAND=\"$1\"\n  local FLAG_PATH=\"$2\"\n  local ROLLBACK_PATH=\"$3\"\n\n  eval \"$DISABLE_FAULT_COMMAND\" ; local STATUS=$?\n  rm -f \"$FLAG_PATH\"\n  rm -f \"$ROLLBACK_PATH\"\n  echo \"Rollback done.\"\n  exit $STATUS\n}\n\n# Function to run fault injection loop\nrun_fault_injection_loop() {\n  local STOP_TIME=\"$1\"\n  local FLAG_PATH=\"$2\"\n  local ROLLBACK_PATH=\"$3\"\n  local INJECTION_LOOP_SLEEP_SECONDS=\"$4\"\n  local DISABLE_FAULT_COMMAND=\"$5\"\n\n  # For the duration of the injection, the flag file is updated, and a rollback check is enqueued\n  while [[ $(date +%s) -lt $STOP_TIME ]] ; do\n    # If the background rollback process fires, it will delete the script\n    # from disk containing the rollback logic. That should not happen while\n    # this script is running, but if it does, we immediately fail the script\n    # to prevent the script from continuing to run as if the fault were active.\n    if ! [ -f \"$ROLLBACK_PATH\" ]; then\n      echo \"Fault rollback script was deleted from disk prematurely, exiting...\" 1>&2\n      # though the rollback likely already happened, we attempt rollback again since\n      # the rollback script might have been deleted by some unanticipated mechanism\n      eval \"$DISABLE_FAULT_COMMAND\"\n      exit 1\n    fi\n    \n    touch \"$FLAG_PATH\"\n    schedule_rollback_attempt \"$ROLLBACK_PATH\"\n    sleep \"$INJECTION_LOOP_SLEEP_SECONDS\"\n  done\n}\n\n# Main execution starts here\nrun_post_fault_injection() {\n  local FAULT_NAME=\"$1\"\n  local DURATION=\"$2\"\n  local ENABLE_FAULT_COMMAND=\"$3\"\n  local DISABLE_FAULT_COMMAND=\"$4\"\n\n  # Constants\n  local -r MAX_FLAG_AGE_SECONDS=10\n  local -r INJECTION_LOOP_SLEEP_SECONDS=5\n  local -r ATTEMPT_ROLLBACK_AT_SECONDS=20\n  local -r STOP_TIME=$(( $(date +%s) + DURATION ))\n  local -r RANDOM_STRING=$(LC_ALL=C cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | head -c 32)\n  \n  # Define paths\n  local -r FLAG_PATH=$(get_flag_path \"$FAULT_NAME\" \"$RANDOM_STRING\")\n  local -r ROLLBACK_PATH=$(get_rollback_path \"$FAULT_NAME\" \"$RANDOM_STRING\")\n\n  # Create rollback script\n  create_rollback_script \"$FLAG_PATH\" \"$ROLLBACK_PATH\" \"$MAX_FLAG_AGE_SECONDS\" \"$ATTEMPT_ROLLBACK_AT_SECONDS\" \"$DISABLE_FAULT_COMMAND\"\n\n  # Binding the rollback function to these exit signals\n  trap 'rollback \"$DISABLE_FAULT_COMMAND\" \"$FLAG_PATH\" \"$ROLLBACK_PATH\"' INT TERM\n\n  echo \"Making sure atd daemon is running\"\n  # atd must be running in order to use \"at\" later\n  atd || { echo \"Failed to run atd daemon, exiting...\" 1>&2 ; exit 1; }\n\n  echo \"Scheduling rollback\"\n  schedule_rollback_attempt \"$ROLLBACK_PATH\"\n\n  # Injecting fault\n  echo \"Enabling fault injection\"\n  touch \"$FLAG_PATH\"\n  eval \"$ENABLE_FAULT_COMMAND\"\n\n  # Run fault injection loop\n  run_fault_injection_loop \"$STOP_TIME\" \"$FLAG_PATH\" \"$ROLLBACK_PATH\" \"$INJECTION_LOOP_SLEEP_SECONDS\" \"$DISABLE_FAULT_COMMAND\"\n\n  # After the desired duration, the fault injection is removed\n  rollback \"$DISABLE_FAULT_COMMAND\" \"$FLAG_PATH\" \"$ROLLBACK_PATH\"\n}\nrun_post_fault_injection \"$FAULT_NAME\" \"$DURATION\" enable_fault disable_fault"
        ]
      }
    }
  ]
}
