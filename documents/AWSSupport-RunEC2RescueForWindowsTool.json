{
  "schemaVersion": "2.2",
  "description": "The **AWSSupport-RunEC2RescueForWindowsTool** document runs the [EC2Rescue for Windows Server](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/Windows-Server-EC2Rescue.html) troubleshooting tool on the target Amazon Elastic Compute Cloud (Amazon EC2) Windows managed instance to help troubleshoot common issues.\n> * **ResetAccess**: Resets the local Administrator password. The local Administrator password of the current instance is randomly generated and securely stored in AWS Systems Manager Parameter Store as `/EC2Rescue/Password/<INSTANCE_ID>`. If you select this action and provide no `Parameters`, the password is encrypted with the default KMS key `alias/aws/ssm`. Optionally, you can specify a KMS key ID in `Parameters` to encrypt the password with your own key.\n> * **CollectLogs**: [Collects logs and configuration files](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2rw-cli.html#ec2rw-collect) from the operating system, and uploads them to an Amazon S3 bucket in your account by running EC2Rescue with the `/collect:all` action. If you select this action, `Parameters` must include an Amazon S3 bucket name to upload the logs to.\n> * **FixAll**: Attempts to [detect and address issues](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2rw-cli.html#ec2rw-rescue) on an offline Windows root volume attached to the current instance by running EC2Rescue with the `/rescue:all` action. If you select this action, `Parameters` must include the block device name to rescue. For example, `xvdf`. For more information see [Use EC2Rescue for Windows Server with Systems Manager Run Command](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2rw-ssm.html).",
  "parameters": {
    "Command": {
      "type": "String",
      "description": "(Required) The action to perform. The current allowed values are: `ResetAccess`, `CollectLogs`, or `FixAll`.",
      "default": "ResetAccess",
      "allowedValues": [
        "ResetAccess",
        "CollectLogs",
        "FixAll"
      ]
    },
    "Parameters": {
      "type": "String",
      "description": "(Required) Parameters for the command: `ResetAccess`: The AWS KMS key ID or alias. | `CollectLogs`: The Amazon S3 bucket name to upload the logs to | `FixAll`: The device name for the offline remediation.",
      "allowedPattern": "^[0-9a-z][a-z0-9-.]{3,63}$|^(dev/[a-z0-9]{2,10}|xv[a-z0-9]{1,10})$|^(alias\\aws\\ssm|[a-zA-Z0-9-/_]{1,32})$",
      "default": "alias/aws/ssm"
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:configurePackage",
      "description": "Installs the EC2Rescue for Windows Server troubleshooting tool using the AWS Systems Manager Distributor package `AWSSupport-EC2Rescue`.",
      "maxAttempts": 3,
      "name": "installEC2Rescue",
      "inputs": {
        "name": "AWSSupport-EC2Rescue",
        "action": "Install",
        "version": "latest"
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "runEC2RescueForWindows",
      "description": "Runs the PowerShell with the action specified in the `Command` parameter.",
      "inputs": {
        "runCommand": [
          "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
          "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
          "",
          "# Check if the AWS PowerShell module is available",
          "if (Get-Module -ListAvailable -Name AWSPowershell) {",
          "    # Import the AWS PowerShell module",
          "    Import-Module AWSPowershell",
          "    # Import the EC2Rescue module with the Force parameter to ensure it loads even if already loaded",
          "    Import-Module EC2Rescue -Force",
          "",
          "    # Define command and parameters variables",
          "    $command = \"{{ Command }}\"",
          "    $parameters = \"{{ Parameters }}\".Trim()  # Trim any whitespace from the parameters string",
          "",
          "    # Check if parameters are empty or only whitespace",
          "    if ([string]::IsNullOrWhiteSpace($parameters)) {",
          "        Write-Host \"No parameters specified.\"",
          "        Exit 255",
          "    }",
          "",
          "    # Process the command via a switch statement",
          "    switch ($command) {",
          "        FixAll {",
          "            # Attempt to fix all issues for the specified block device",
          "            $output = Invoke-EC2RescueFixAll -BlockDeviceName $parameters",
          "            if (!$output) {",
          "                Write-Host \"Failed to rescue offline volume ${parameters}\"",
          "                Exit 255",
          "            } else {",
          "                Write-Host $output",
          "            }",
          "        }",
          "        CollectLogs {",
          "            # Set S3 bucket name and path for logs",
          "            $s3BucketName = $parameters",
          "            $s3Path = \"AWSSupport-RunEC2RescueForWindowsTool/\"",
          "",
          "            # Check if the S3 bucket exists and is accessible",
          "            if (Test-S3Bucket -BucketName $s3BucketName) {",
          "                Write-Host \"Collecting logs from the current Windows instance.\"",
          "                $logFile = Invoke-EC2RescueCollectLogBundle -Logs \"all\"",
          "                Write-Host \"Log collection completed. Uploading logs to S3 bucket ${s3BucketName} under path ${s3Path}.\"",
          "                Copy-EC2RescueLogBundleToS3 -FilePath $logFile -S3BucketName $s3BucketName -S3Path $s3Path",
          "                Write-Host \"Log upload completed.\"",
          "            } else {",
          "                Write-Host (\"No S3 bucket called \" + $s3BucketName + \" found in the current AWS account, or access denied. Please specify an S3 bucket you own, and that this instance has access to.\")",
          "                Exit 255",
          "            }",
          "        }",
          "        ResetAccess {",
          "            # Reset the local Administrator password and stores the password in Parameter Store",
          "            Invoke-EC2RescueResetPasswordWithParameterStore -KMSKey $parameters",
          "        }",
          "    }",
          "} else {",
          "    # If the required module is not installed, notify the user and provide download instructions",
          "    Write-Host 'AWS Tools for Windows PowerShell not installed. Please install the latest version of the AWS Tools for Windows PowerShell and try again.'",
          "    Write-Host 'Download location: https://aws.amazon.com/powershell/'",
          "    Exit 255",
          "}"
        ]
      }
    }
  ]
}
