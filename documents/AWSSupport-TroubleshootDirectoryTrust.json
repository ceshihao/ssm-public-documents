{
  "description": "The **AWSSupport-TroubleshootDirectoryTrust** runbook helps to diagnose trust creation issues between an AWS Managed Microsoft AD and a Microsoft Active Directory. The automation ensures the directory type supports trusts, and then checks the associated security group rules, network access control lists (network ACLs), and route tables for potential connectivity issues.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "DirectoryId": {
      "type": "String",
      "description": "(Optional) The ID of the AWS Managed Microsoft AD to troubleshoot.",
      "allowedPattern": "^d-[a-z0-9]{10}$",
      "default": ""
    },
    "TrustId": {
      "type": "String",
      "description": "(Optional) The ID of the trust relationship to troubleshoot.",
      "allowedPattern": "^$|^t-[0-9a-f]{10}$",
      "default": ""
    },
    "RemoteDomainCidrs": {
      "type": "StringList",
      "description": "(Required) The CIDR(s) of the remote domain you are attempting to establish a trust relationship with. You can add multiple CIDRs using comma-separated values. For example, `172.31.48.0/20`, `192.168.1.10/32`.",
      "allowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/(3[0-2]|[1-2][0-9]|[1-9]))$"
    },
    "RemoteDomainName": {
      "type": "String",
      "description": "(Required) The fully qualified domain name of the remote domain you are establishing a trust relationship with.",
      "allowedPattern": "^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+[.]?$"
    },
    "RequiredTrafficSG": {
      "type": "String",
      "description": "(Optional) The default port requirements for AWS Managed Microsoft AD. In most cases, you should not modify the default value.",
      "allowedPattern": "^\\{(\\\"(inbound|outbound)\\\"\\:\\{(\\\"(tcp|udp|icmp|\\-1)\\\"\\:\\[\\[\\-?\\d+,\\-?\\d+\\](,\\[\\-?\\d+,\\-?\\d+\\]){0,10}\\],?){1,10}\\},?){1,2}\\}",
      "default": "{\"inbound\":{\"tcp\":[[53,53],[88,88],[135,135],[389,389],[445,445],[464,464],[636,636],[1024,65535]],\"udp\":[[53,53],[88,88],[123,123],[138,138],[389,389],[445,445],[464,464]],\"icmp\":[[-1,-1]]},\"outbound\":{\"-1\":[[0,65535]]}}"
    },
    "RequiredTrafficACL": {
      "type": "String",
      "description": "(Optional) The default port requirements for AWS Managed Microsoft AD. In most cases, you should not modify the default value.",
      "allowedPattern": "^\\{(\\\"(inbound|outbound)\\\"\\:\\{(\\\"(tcp|udp|icmp|\\-1)\\\"\\:\\[\\[\\-?\\d+,\\-?\\d+\\](,\\[\\-?\\d+,\\-?\\d+\\]){0,10}\\],?){1,10}\\},?){1,2}\\}",
      "default": "{\"inbound\":{\"tcp\":[[53,53],[88,88],[135,135],[389,389],[445,445],[464,464],[636,636],[1024,65535]],\"udp\":[[53,53],[88,88],[123,123],[138,138],[389,389],[445,445],[464,464]],\"icmp\":[[-1,-1]]},\"outbound\":{\"-1\":[[0,65535]]}}"
    }
  },
  "outputs": [
    "evaluateRemoteDomainCidr.output",
    "evalDirectorySecurityGroup.output",
    "evalAclEntries.output"
  ],
  "mainSteps": [
    {
      "name": "assertDirectoryType",
      "action": "aws:assertAwsResourceProperty",
      "description": "Confirms the directory type is AWS Managed Microsoft AD.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ds",
        "Api": "DescribeDirectories",
        "DirectoryIds": [
          "{{ DirectoryId }}"
        ],
        "PropertySelector": "$.DirectoryDescriptions[0].Type",
        "DesiredValues": [
          "MicrosoftAD"
        ]
      },
      "isCritical": true,
      "nextStep": "getDirectoryInfo"
    },
    {
      "name": "getDirectoryInfo",
      "action": "aws:executeAwsApi",
      "description": "Gets information about the AWS Managed Microsoft AD.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ds",
        "Api": "DescribeDirectories",
        "DirectoryIds": [
          "{{ DirectoryId }}"
        ]
      },
      "outputs": [
        {
          "Name": "directoryDnsIpAddrs",
          "Selector": "$.DirectoryDescriptions[0].DnsIpAddrs",
          "Type": "StringList"
        },
        {
          "Name": "directoryVpcId",
          "Selector": "$.DirectoryDescriptions[0].VpcSettings.VpcId",
          "Type": "String"
        },
        {
          "Name": "directorySecurityGroupId",
          "Selector": "$.DirectoryDescriptions[0].VpcSettings.SecurityGroupId",
          "Type": "String"
        },
        {
          "Name": "directorySubnets",
          "Selector": "$.DirectoryDescriptions[0].VpcSettings.SubnetIds",
          "Type": "StringList"
        }
      ],
      "nextStep": "branchOnGetDirectoryTrust"
    },
    {
      "name": "branchOnGetDirectoryTrust",
      "action": "aws:branch",
      "description": "Branches automation if a value is provided for the `TrustId` input parameter.",
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "getDirectoryTrust",
            "Variable": "{{ TrustId }}",
            "StartsWith": "t-"
          }
        ],
        "Default": "getDirectoryConditionalForwarder"
      },
      "nextStep": "getDirectoryConditionalForwarder",
      "isCritical": true
    },
    {
      "name": "getDirectoryTrust",
      "action": "aws:executeAwsApi",
      "description": "Gets information about the trust relationship.",
      "onFailure": "Continue",
      "inputs": {
        "Service": "ds",
        "Api": "DescribeTrusts",
        "DirectoryId": "{{ DirectoryId }}",
        "TrustIds": [
          "{{ TrustId }}"
        ]
      },
      "outputs": [
        {
          "Name": "directoryTrustState",
          "Selector": "$.Trusts[0].TrustState",
          "Type": "String"
        },
        {
          "Name": "directoryTrust",
          "Selector": "$.Trusts[0]",
          "Type": "StringMap"
        }
      ],
      "nextStep": "getDirectoryConditionalForwarder"
    },
    {
      "name": "getDirectoryConditionalForwarder",
      "action": "aws:executeAwsApi",
      "description": "Gets the conditional forwarder DNS IP addresses for the `RemoteDomainName`.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ds",
        "Api": "DescribeConditionalForwarders",
        "DirectoryId": "{{ DirectoryId }}",
        "RemoteDomainNames": [
          "{{ RemoteDomainName }}"
        ]
      },
      "outputs": [
        {
          "Name": "directoryForwarderDnsIpAddrs",
          "Selector": "$.ConditionalForwarders[0].DnsIpAddrs",
          "Type": "StringList"
        }
      ],
      "nextStep": "getDirectoryIPRoutes"
    },
    {
      "name": "getDirectoryIPRoutes",
      "action": "aws:executeAwsApi",
      "description": "Gets information about IP routes that have been added to the AWS Managed Microsoft AD.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ds",
        "Api": "ListIpRoutes",
        "DirectoryId": "{{ DirectoryId }}"
      },
      "outputs": [
        {
          "Name": "directoryIPRoutes",
          "Selector": "$.IpRoutesInfo",
          "Type": "MapList"
        }
      ],
      "nextStep": "getDirectorySubnetCidrs"
    },
    {
      "name": "getDirectorySubnetCidrs",
      "action": "aws:executeAwsApi",
      "description": "Gets the CIDR blocks of the AWS Managed Microsoft AD subnets.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSubnets",
        "SubnetIds": [
          "{{ getDirectoryInfo.directorySubnets }}"
        ]
      },
      "outputs": [
        {
          "Name": "directorySubnetCidrs",
          "Selector": "$.Subnets..CidrBlock",
          "Type": "StringList"
        }
      ],
      "nextStep": "getDirectorySecurityGroup"
    },
    {
      "name": "getDirectorySecurityGroup",
      "action": "aws:executeAwsApi",
      "description": "Gets information about the security groups associated with the AWS Managed Microsoft AD.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSecurityGroups",
        "GroupIds": [
          "{{ getDirectoryInfo.directorySecurityGroupId }}"
        ]
      },
      "outputs": [
        {
          "Name": "directorySecurityGroups",
          "Selector": "$.SecurityGroups",
          "Type": "MapList"
        }
      ],
      "nextStep": "getDirectoryAcl"
    },
    {
      "name": "getDirectoryAcl",
      "action": "aws:executeAwsApi",
      "description": "Gets information about the network ACLs associated with the AWS Managed Microsoft AD.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeNetworkAcls",
        "Filters": [
          {
            "Name": "association.subnet-id",
            "Values": "{{ getDirectoryInfo.directorySubnets }}"
          }
        ]
      },
      "outputs": [
        {
          "Name": "directoryAcls",
          "Selector": "$.NetworkAcls",
          "Type": "MapList"
        }
      ],
      "nextStep": "evaluateRemoteDomainCidr"
    },
    {
      "name": "evaluateRemoteDomainCidr",
      "action": "aws:executeScript",
      "description": "Confirms the `RemoteDomainCidrs` are valid values. Confirms that the AWS Managed Microsoft AD has conditional forwarders for the `RemoteDomainCidrs`, and that the requisite IP routes have been added to the AWS Managed Microsoft AD if the `RemoteDomainCidrs` are non-RFC 1918 IP addresses.",
      "timeoutSeconds": 45,
      "onFailure": "Continue",
      "inputs": {
        "InputPayload": {
          "remoteCidrs": "{{ RemoteDomainCidrs }}",
          "directoryIPRoutes": "{{ getDirectoryIPRoutes.directoryIPRoutes }}"
        },
        "Handler": "function_handler",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\n# Handler Function\ndef function_handler(events, context):\n    err = False\n    directory_forwarder_dns_ipaddrs = []  # events['directoryForwarderDnsIpAddrs']\n    directory_ip_routes = events[\"directoryIPRoutes\"]\n    remote_cidrs = events[\"remoteCidrs\"]\n\n    # Check if all DNS entries in the Conditional Forwarder have a valid route if public\n    # The directoryForwarderDnsIpAddrs for the RemoteDomainName\n    for dns in directory_forwarder_dns_ipaddrs:\n        err = err or check_if_route_exist(dns, directory_ip_routes)\n\n    # Check if all remote CIDR entries have a valid route if public\n    for cidr in remote_cidrs:\n        err = err or check_if_route_exist(cidr, directory_ip_routes)\n\n    if err:\n        return {\n            \"error\": err,\n            \"output\": \"Error: One or more CIDR/IP requires an IP route to be reachable. See ExecutionLog\",\n        }\n    else:\n        return {\"error\": err, \"output\": \"Success: No issues with required IP routes\"}\n\n\n# Checks if an IP route exists for any public (non-RFC 1918) IP addresses\n# of the remote Active Directory. The function checks the CIDRs provided in the document input\n# and DNS entries of the Conditional Forwarders for the RemoteDomainName in the document input\ndef check_if_route_exist(net4, routes):\n    from ipaddress import ip_network\n\n    err = False\n    try:\n        net = ip_network(net4)\n        if not net.is_private:\n            while len(routes) > 0:\n                if net.overlaps(ip_network(routes[0])):\n                    # print(\"An IP Route exists for the public DNS \", dnsIp)\n                    print(\"An IP Route exists for the public DNS \", net4)\n                    break\n                routes.pop(0)\n            else:\n                print(\n                    \"Error: No IP routes have been added for\",\n                    net,\n                    \". A route must be added in order to route traffic to the remote directory.\",\n                )\n                err = True\n        else:\n            print(\"Success:\", net, \"does not require an IP route because is private\")\n\n        return err\n\n    except Exception as e:\n        print(\"Error: Please enter an acceptable host or network IP Address.\", str(e))\n        return True\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        },
        {
          "Name": "error",
          "Selector": "$.Payload.err",
          "Type": "Boolean"
        }
      ],
      "nextStep": "evalDirectorySecurityGroup"
    },
    {
      "name": "evalDirectorySecurityGroup",
      "action": "aws:executeScript",
      "description": "Evaluates security group rules.",
      "timeoutSeconds": 45,
      "onFailure": "Continue",
      "inputs": {
        "InputPayload": {
          "remoteCidrs": "{{ RemoteDomainCidrs }}",
          "directorySecurityGroups": "{{ getDirectorySecurityGroup.directorySecurityGroups }}",
          "requiredTraffic": "{{ RequiredTrafficSG }}"
        },
        "Handler": "function_handler",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\n# Handler Function\ndef function_handler(events, context):\n    import json\n\n    directory_security_groups = events[\"directorySecurityGroups\"]\n    remote_cidrs = events[\"remoteCidrs\"]\n    required_traffic = json.loads(events[\"requiredTraffic\"])\n    print(\"RequiredTraffic\", required_traffic)\n\n    # required = {\n    #    'inbound': {\n    #        'tcp':[[2,20],[636,636],[53,53],[1024,65535]],\n    #        'udp':[[2,20],[53,53],[138,138]],\n    #        'icmp':[[-1,-1]]\n    #    },\n    #    'outbound': {\n    #        '-1':[[0,65535]]\n    #   }\n    # }\n\n    err = False\n    source = {\"network-cidrs\": remote_cidrs, \"security-groups\": []}\n    err = eval_security_groups_traffic(directory_security_groups, source, required_traffic)\n\n    if err:\n        return {\"error\": err, \"output\": \"Error: Required traffic is not allowed in Security Groups. See ExecutionLog\"}\n    else:\n        return {\"error\": err, \"output\": \"Success: Required traffic is allowed in Security Groups\"}\n\n\ndef eval_security_groups_traffic(sgs, source, traffic):\n    from ipaddress import ip_network\n\n    try:\n        err = False\n        for sg in sgs:\n            for protocol, ranges in traffic.get(\"inbound\", []).items():\n                for range in ranges:\n                    allowed = False\n                    for r in sg.get(\"IpPermissions\", []):\n                        if r[\"IpProtocol\"] in (protocol, \"-1\"):\n                            if (\"FromPort\" not in r and \"ToPort\" not in r) or (\n                                r[\"FromPort\"] <= range[0] and r[\"ToPort\"] >= range[1]\n                            ):  # \"Rule allows port %s\" % r['fromPort']\n                                for user_id_group_pair in r.get(\"UserIdGroupPairs\", []):\n                                    for group_id in source.get(\"security-groups\", []):\n                                        if user_id_group_pair[\"GroupId\"] == group_id:\n                                            allowed = True\n                                            break\n                                for ip_range in r[\"IpRanges\"]:\n                                    for network_cidr in source.get(\"network-cidrs\", []):\n                                        if ip_network(ip_range[\"CidrIp\"], strict=False).overlaps(\n                                            ip_network(network_cidr, strict=False)\n                                        ):\n                                            allowed = True\n                                            break\n                    if not allowed:\n                        print(\n                            \"No inbound Security Group rule in\",\n                            sg[\"GroupId\"],\n                            \"allows connectivity for\",\n                            protocol.replace(\"-1\", \"all\").upper(),\n                            \"in range:\",\n                            range,\n                        )\n                        err = True\n\n            for protocol, ranges in traffic.get(\"outbound\", []).items():\n                for range in ranges:\n                    allowed = False\n                    for r in sg.get(\"IpPermissionsEgress\", []):\n                        if r[\"IpProtocol\"] in (protocol, \"-1\"):\n                            if (\"FromPort\" not in r and \"ToPort\" not in r) or (\n                                r[\"FromPort\"] <= range[0] and r[\"ToPort\"] >= range[1]\n                            ):  # \"Rule allows port %s\" % r['fromPort']\n                                for user_id_group_pair in r.get(\"UserIdGroupPairs\", []):\n                                    for group_id in source.get(\"security-groups\", []):\n                                        if user_id_group_pair[\"GroupId\"] == group_id:\n                                            allowed = True\n                                            break\n                                for ip_range in r[\"IpRanges\"]:\n                                    for network_cidr in source.get(\"network-cidrs\", []):\n                                        if ip_network(ip_range[\"CidrIp\"], strict=False).overlaps(\n                                            ip_network(network_cidr, strict=False)\n                                        ):\n                                            allowed = True\n                                            break\n                    if not allowed:\n                        print(\n                            \"No outbound Security Group rule in\",\n                            sg[\"GroupId\"],\n                            \"allows connectivity for\",\n                            protocol.replace(\"-1\", \"all\").upper(),\n                            \"in range:\",\n                            range,\n                        )\n                        err = True\n        return err\n\n    except Exception as e:\n        print(\"Failed to evaluate Security Groups.\", str(e))\n        return True\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        },
        {
          "Name": "error",
          "Selector": "$.Payload.err",
          "Type": "Boolean"
        }
      ],
      "nextStep": "evalAclEntries"
    },
    {
      "name": "evalAclEntries",
      "action": "aws:executeScript",
      "description": "Evaluates network ACLs.",
      "timeoutSeconds": 45,
      "onFailure": "Continue",
      "inputs": {
        "InputPayload": {
          "remoteCidrs": "{{ RemoteDomainCidrs }}",
          "directoryAcl": "{{ getDirectoryAcl.directoryAcls }}",
          "requiredTraffic": "{{ RequiredTrafficACL }}"
        },
        "Handler": "function_handler",
        "Runtime": "python3.11",
        "Script": "# Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\ndef function_handler(events, context):\n    import json\n\n    err = False\n    directory_network_acls = events[\"directoryAcl\"]\n    remote_cidrs = events[\"remoteCidrs\"]\n    required_traffic = json.loads(events[\"requiredTraffic\"])\n\n    source = {\"network-cidrs\": remote_cidrs, \"security-groups\": []}\n    allows = eval_acl_rules(directory_network_acls, source, required_traffic)\n    # print_allowed(allows)\n    err = check_allowed(allows, required_traffic)\n\n    if err:\n        return {\"error\": err, \"output\": \"Error: Required traffic is not allowed in Network ACLs. See ExecutionLog\"}\n    else:\n        return {\"error\": err, \"output\": \"Success: Required traffic is allowed in Network ACLs\"}\n\n\ndef print_allowed(allows):\n    for nacl_id, nacl in allows.items():\n        print(\"NetworkAclId\", nacl_id, \"Inbound:\", list(nacl[0].items()), \" <> Outbound:\", list(nacl[1].items()))\n\n\ndef eval_acl_rules(rules, source, traffic):\n    \"\"\"\n    Evaluate Network ACL rules and build allowed traffic mappings\n\n    Args:\n        rules: List of NACL rules to evaluate\n        source: Dictionary containing network CIDR ranges to check\n        traffic: Dictionary of required traffic patterns\n\n    Returns:\n        dict: Mapping of NACL IDs to allowed inbound/outbound traffic\n    \"\"\"\n    from collections import defaultdict\n    from ipaddress import ip_network\n\n    # Initialize containers for allowed traffic\n    in_allow = defaultdict(list)  # Inbound rules\n    out_allow = defaultdict(list)  # Outbound rules\n    allows = defaultdict(list)  # Final results per NACL\n\n    try:\n        for nacl in rules:\n            # Process rules in reverse numeric order (higher priority first)\n            for r in sorted(nacl[\"Entries\"], key=lambda k: k[\"RuleNumber\"], reverse=True):\n                for network_cidr in source.get(\"network-cidrs\", []):\n                    protocol = get_std_protocol(r[\"Protocol\"])\n\n                    # Check if the rule's CIDR overlaps with source CIDR\n                    if ip_network(r[\"CidrBlock\"], strict=False).overlaps(ip_network(network_cidr, strict=False)):\n                        # Handle ICMP protocol specially\n                        if protocol == \"icmp\":\n                            if \"IcmpTypeCode\" in r:\n                                f = r[\"IcmpTypeCode\"][\"Type\"]\n                                t = r[\"IcmpTypeCode\"][\"Code\"]\n                            else:\n                                f = -1\n                                t = -1\n                        # Handle protocols without port ranges\n                        elif \"PortRange\" not in r:\n                            f = 0\n                            t = 65535\n                        # Handle normal port ranges\n                        else:\n                            f = r[\"PortRange\"][\"From\"]\n                            t = r[\"PortRange\"][\"To\"]\n\n                        # Process inbound rules\n                        if not r[\"Egress\"]:\n                            if r[\"RuleAction\"] == \"allow\":\n                                in_allow[protocol] = range_add([f, t], in_allow[protocol])\n                            else:\n                                in_allow[protocol] = range_diff([f, t], in_allow[protocol])\n                        # Process outbound rules\n                        else:\n                            if r[\"RuleAction\"] == \"allow\":\n                                out_allow[protocol] = range_add([f, t], out_allow[protocol])\n                            else:\n                                out_allow[protocol] = range_diff([f, t], out_allow[protocol])\n\n            # Store processed rules for this NACL\n            allows[nacl[\"NetworkAclId\"]].append(in_allow.copy())  # [0] = inbound\n            allows[nacl[\"NetworkAclId\"]].append(out_allow.copy())  # [1] = outbound\n            in_allow.clear()\n            out_allow.clear()\n\n        return allows\n\n    except Exception as e:\n        print(\"Failed to evaluate Network ACLs.\", str(e))\n        return allows\n\n\ndef get_std_protocol(acl_protocol):\n    # defined at https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\n    customprotocol = {\n        \"-1\": \"-1\",\n        \"hopopt\": \"0\",\n        \"icmp\": \"1\",\n        \"igmp\": \"2\",\n        \"ggp\": \"3\",\n        \"ipv4\": \"4\",\n        \"st\": \"5\",\n        \"tcp\": \"6\",\n        \"cbt\": \"7\",\n        \"egp\": \"8\",\n        \"igp\": \"9\",\n        \"bbn-rcc-mon\": \"10\",\n        \"nvp-ii\": \"11\",\n        \"pup\": \"12\",\n        \"argus\": \"13\",\n        \"emcon\": \"14\",\n        \"xnet\": \"15\",\n        \"chaos\": \"16\",\n        \"udp\": \"17\",\n        \"mux\": \"18\",\n        \"dcn-meas\": \"19\",\n        \"hmp\": \"20\",\n        \"prm\": \"21\",\n        \"xns-idp\": \"22\",\n        \"trunk-1\": \"23\",\n        \"trunk-2\": \"24\",\n        \"leaf-1\": \"25\",\n        \"leaf-2\": \"26\",\n        \"rdp\": \"27\",\n        \"irtp\": \"28\",\n        \"iso-tp4\": \"29\",\n        \"netblt\": \"30\",\n        \"mfe-nsp\": \"31\",\n        \"merit-inp\": \"32\",\n        \"dccp\": \"33\",\n        \"3pc\": \"34\",\n        \"idpr\": \"35\",\n        \"xtp\": \"36\",\n        \"ddp\": \"37\",\n        \"idpr-cmtp\": \"38\",\n        \"tp++\": \"39\",\n        \"il\": \"40\",\n        \"ipv6\": \"41\",\n        \"sdrp\": \"42\",\n        \"ipv6-route\": \"43\",\n        \"ipv6-frag\": \"44\",\n        \"idrp\": \"45\",\n        \"rsvp\": \"46\",\n        \"gre\": \"47\",\n        \"dsr\": \"48\",\n        \"bna\": \"49\",\n        \"esp\": \"50\",\n        \"ah\": \"51\",\n        \"i-nlsp\": \"52\",\n        \"swipe\": \"53\",\n        \"narp\": \"54\",\n        \"mobile\": \"55\",\n        \"tlsp\": \"56\",\n        \"ipv6-icmp\": \"58\",\n        \"ipv6-nonxt\": \"59\",\n        \"ipv6-opts\": \"60\",\n        \"61\": \"61\",\n        \"cftp\": \"62\",\n        \"63\": \"63\",\n        \"sat-expak\": \"64\",\n        \"kryptolan\": \"65\",\n        \"rvd\": \"66\",\n        \"ippc\": \"67\",\n        \"68\": \"68\",\n        \"sat-mon\": \"69\",\n        \"visa\": \"70\",\n        \"ipcv\": \"71\",\n        \"cpnx\": \"72\",\n        \"cphb\": \"73\",\n        \"wsn\": \"74\",\n        \"pvp\": \"75\",\n        \"br-sat-mon\": \"76\",\n        \"sun-nd\": \"77\",\n        \"wb-mon\": \"78\",\n        \"wb-expak\": \"79\",\n        \"iso-ip\": \"80\",\n        \"vmtp\": \"81\",\n        \"secure-vmtp\": \"82\",\n        \"vines\": \"83\",\n        \"ttp\": \"84\",\n        \"nsfnet-igp\": \"85\",\n        \"dgp\": \"86\",\n        \"tcf\": \"87\",\n        \"eigrp\": \"88\",\n        \"ospfigp\": \"89\",\n        \"sprite-rpc\": \"90\",\n        \"larp\": \"91\",\n        \"mtp\": \"92\",\n        \"ax.25\": \"93\",\n        \"ipip\": \"94\",\n        \"micp\": \"95\",\n        \"scc-sp\": \"96\",\n        \"etherip\": \"97\",\n        \"encap\": \"98\",\n        \"99\": \"99\",\n        \"gmtp\": \"100\",\n        \"ifmp\": \"101\",\n        \"pnni\": \"102\",\n        \"pim\": \"103\",\n        \"aris\": \"104\",\n        \"scps\": \"105\",\n        \"qnx\": \"106\",\n        \"a/n\": \"107\",\n        \"ipcomp\": \"108\",\n        \"snp\": \"109\",\n        \"compaq-peer\": \"110\",\n        \"ipx-in-ip\": \"111\",\n        \"vrrp\": \"112\",\n        \"pgm\": \"113\",\n        \"114\": \"114\",\n        \"l2tp\": \"115\",\n        \"dd\": \"116\",\n        \"iatp\": \"117\",\n        \"stp\": \"118\",\n        \"srp\": \"119\",\n        \"uti\": \"120\",\n        \"smp\": \"121\",\n        \"sm\": \"122\",\n        \"ptp\": \"123\",\n        \"isis-over-ipv4\": \"124\",\n        \"fire\": \"125\",\n        \"crtp\": \"126\",\n        \"crudp\": \"127\",\n        \"sscopmce\": \"128\",\n        \"iplt\": \"129\",\n        \"sps\": \"130\",\n        \"pipe\": \"131\",\n        \"sctp\": \"132\",\n        \"fc\": \"133\",\n        \"rsvp-e2e-ignore\": \"134\",\n        \"mobility-header\": \"135\",\n        \"udplite\": \"136\",\n        \"mpls-in-ip\": \"137\",\n        \"manet\": \"138\",\n        \"hip\": \"139\",\n        \"shim6\": \"140\",\n        \"wesp\": \"141\",\n        \"rohc\": \"142\",\n        \"253\": \"253\",\n        \"254\": \"254\",\n    }\n    inv_map = {v: k for k, v in customprotocol.items()}\n    return inv_map.get(acl_protocol)\n\n\ndef range_add(new, interv):\n    \"\"\"\n    Add a new range to existing ranges and merge overlapping ranges\n\n    Args:\n        new: New range to add [start, end]\n        interv: List of existing ranges\n\n    Returns:\n        list: Updated list of merged ranges\n    \"\"\"\n    # Add new range and filter invalid entries\n    interv.append(new)\n    interv = [x for x in interv if x != [] and len(x) == 2 and all(isinstance(val, int) for val in x)]\n    interv.sort()\n\n    res = []\n    while len(interv) > 0:\n        # Handle single remaining range\n        if len(interv) == 1:\n            res.append(interv[0])\n            interv.pop(0)\n            continue\n        # Merge overlapping ranges\n        if interv[0][1] >= interv[1][0]:\n            tmp = [interv[0][0], max(interv[0][1], interv[1][1])]\n            interv[0] = tmp\n            interv.pop(1)\n            continue\n        # Add non-overlapping range\n        res.append(interv[0])\n        interv.pop(0)\n    return res\n\n\ndef range_diff(new, interv):\n    \"\"\"\n    Remove a range from existing ranges and handle splits\n\n    Args:\n        new: Range to remove [start, end]\n        interv: List of existing ranges\n\n    Returns:\n        list: Updated list of ranges after removal\n    \"\"\"\n    interv = range_add([], interv)\n    if not new:\n        new = [0, 0]\n\n    # Filter and sort intervals\n    interv = [x for x in interv if x != [] and len(x) == 2 and all(isinstance(val, int) for val in x)]\n    interv.sort()\n\n    res = []\n    # Process each interval\n    for t in interv:\n        s1, e1 = t\n        s2, e2 = new\n        s = sorted((s1, s2, e1, e2))\n\n        # Handle left portion of split\n        if s[0] == s1 and s[0] != s[1]:\n            v = s[1] if e1 < s2 else s[1] - 1\n            res.append([s[0], v])\n\n        # Handle right portion of split\n        if s[3] == e1 and s[2] != s[3]:\n            v = s[2] if e2 < s1 else s[2] + 1\n            res.append([v, s[3]])\n\n    # Return default range if empty\n    if len(res) == 0:\n        res = [[0, 0]]\n    return res\n\n\ndef check_range_allowed(nacl_rules, protocol, range):\n    \"\"\"\n    Check if a specific port/type-code range is allowed for a protocol in the NACL rules\n\n    Args:\n        nacl_rules: Dictionary containing protocol-specific rules\n        protocol: Protocol to check ('tcp', 'udp', 'icmp', etc.)\n        range: List containing [from_port, to_port] or [icmp_type, icmp_code]\n\n    Returns:\n        bool: True if the range is allowed, False otherwise\n    \"\"\"\n    # First check if there's a wildcard rule (-1) that allows all protocols\n    for r in nacl_rules.get(\"-1\", []):\n        # For ICMP, any wildcard rule allows all types/codes\n        # For other protocols, check if the port range is contained within the rule's range\n        if protocol == \"icmp\" or (r[0] <= range[0] and r[1] >= range[1]):\n            return True\n\n    # If no wildcard rule allows it, check protocol-specific rules\n    for r in nacl_rules.get(protocol, []):\n        if r[0] <= range[0] and r[1] >= range[1]:\n            return True\n\n    return False\n\n\ndef check_direction_rules(nacl_id, nacl_rules, traffic_rules, direction):\n    \"\"\"\n    Check all rules for a specific direction (inbound/outbound) in a NACL\n\n    Args:\n        nacl_id: ID of the Network ACL being checked\n        nacl_rules: Rules for the specific direction (inbound/outbound)\n        traffic_rules: Required traffic rules to check\n        direction: 'inbound' or 'outbound'\n\n    Returns:\n        bool: True if any required traffic is not allowed, False if all traffic is allowed\n    \"\"\"\n    # Iterate through each protocol and its ranges in the required traffic\n    for protocol, ranges in traffic_rules.items():\n        for range in ranges:\n            # Check if this specific range is allowed by any rule\n            if not check_range_allowed(nacl_rules, protocol, range):\n                print(\n                    f\"Error: No {direction} ACL rule in {nacl_id} allows connectivity for \"\n                    f\"{protocol.replace('-1', 'all').upper()} in range: {range}\"\n                )\n                return True\n    return False\n\n\ndef check_allowed(allows, traffic):\n    \"\"\"\n    Main function to check if all required traffic is allowed by the NACL rules\n\n    Args:\n        allows: Dictionary of NACL IDs to their inbound[0] and outbound[1] rules\n        traffic: Dictionary of required inbound/outbound traffic with protocol ranges\n\n    Returns:\n        bool: True if any required traffic is not allowed, False if all traffic is allowed\n\n    Notes:\n        - Each NACL is checked independently\n        - Rules are evaluated in order by rule number (lower numbers have higher priority)\n        - A deny rule takes precedence over allow rules with higher rule numbers\n        - Protocol -1 means all protocols are allowed\n        - For ICMP, the range represents [type, code] instead of port numbers\n    \"\"\"\n    for nacl_id, nacl in allows.items():\n        # Check inbound rules (index 0)\n        if check_direction_rules(nacl_id, nacl[0], traffic.get(\"inbound\", {}), \"inbound\"):\n            return True\n        # Check outbound rules (index 1)\n        if check_direction_rules(nacl_id, nacl[1], traffic.get(\"outbound\", {}), \"outbound\"):\n            return True\n    return False\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        },
        {
          "Name": "error",
          "Selector": "$.Payload.err",
          "Type": "Boolean"
        }
      ],
      "isEnd": true
    }
  ]
}
