{
  "description": "### Document name - AWSFIS-Run-CPU-Stress\n\n## What does this document do?\nIt runs CPU stress on an instance via stress-ng tool. If stress-ng is not already installed on the instance, this SSM document will install it, unless InstallDependencies parameter is set to False.\nThis SSM document supports Amazon Linux and Ubuntu operating systems only.\n\n## Dependencies installed by this SSM Document\n* stress-ng\nNote: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).\n\n## Input Parameters\n* DurationSeconds: (Required) The duration - in seconds - of the CPU stress.\n* CPU: Specify the number of CPU stressors to use (default 0 = all)\n* InstallDependencies: If set to True, this SSM document installs the required dependencies on the target instances. (default True)\n\n## Output Parameters\nNone.",
  "schemaVersion": "2.2",
  "parameters": {
    "DurationSeconds": {
      "type": "String",
      "description": "(Required) The duration - in seconds - of the CPU stress.",
      "allowedPattern": "^[0-9]+$"
    },
    "CPU": {
      "type": "String",
      "description": "Specify the number of CPU stressors to use (default: 0 which means \"all CPUs\")",
      "default": "0",
      "allowedPattern": "^[0-9]+$"
    },
    "LoadPercent": {
      "type": "String",
      "description": "Specify the target CPU load percentage. Valid values are between 0 (no load) and 100 (full load) (default: 100)",
      "default": "100",
      "allowedPattern": "^(100|[1-9]?[0-9])$"
    },
    "InstallDependencies": {
      "type": "String",
      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True)",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallDependencies",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
      "inputs": {
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\nif [[ \"$( command -v stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\nif  [[ \"{{ InstallDependencies }}\" == True ]] ; then\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if cat /etc/system-release | grep -i 'Amazon Linux' && ! grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      # Use amazon-linux-extras if available (Amazon Linux 2). Don't need it otherwise (Amazon Linux 1)\n      command -v amazon-linux-extras 2>/dev/null 1>&2 && amazon-linux-extras install testing\n      yum -y install stress-ng\n    elif grep -Fiq 'ID=\"amzn\"' /etc/os-release && grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      \n      \n##############################################################################\n# This script adds the Fedora repo for the stress-ng package.\n# This allows the package manager to track and update the package\n# if a newer version is released.\n#\n# It also pulls in the Fedora GPG key to validate the integrity of the\n# packages being pulled in from that repo.\n# If you want to remove the GPG key, run 'rm /etc/pki/rpm-gpg/fedora.gpg'.\n# Note that doing so will remove the ability for the package manager to\n# validate the integrity of the packages installed through the Fedora repo.\n#\n# Furthermore, if you want to remove the Fedora repo entirely from the package\n# manager, run 'rm /etc/yum.repos.d/*aws-fis-installed-fedora-linux-36.repo'.\n# Note that this will make the stress-ng package an orphaned package since it\n# was being tracked through the Fedora repo.\n##############################################################################\n\nfedora_linux_36_repo_gpg_key_fingerprint=\"53DED2CB922D8B8D9E63FD18999F7CBF38AB71F4\"\nif ! type stress-ng 2>/dev/null; then\n  curl -O https://getfedora.org/static/fedora.gpg --output-dir /etc/pki/rpm-gpg/\n  # Validate the Fedora repo GPG key\n  if ! gpg --show-keys --with-colons /etc/pki/rpm-gpg/fedora.gpg | grep fpr | cut -d ':' -f 10 | grep $fedora_linux_36_repo_gpg_key_fingerprint; then\n    echo \"Fedora repo GPG key fingerprint does not match expected value.\"\n    exit 1\n  fi\n\n  dnf config-manager --add-repo aws-fis-installed-fedora-linux-36\n  dnf config-manager --save --setopt *aws-fis-installed-fedora-linux-36.baseurl=https://dl.fedoraproject.org/pub/fedora/linux/releases/36/Everything/$(uname -m)/os/\n  dnf config-manager --save --setopt *aws-fis-installed-fedora-linux-36.gpgcheck=1\n  dnf config-manager --save --setopt *aws-fis-installed-fedora-linux-36.gpgkey=file:///etc/pki/rpm-gpg/fedora.gpg\nfi\n\n      yum -y install stress-ng\n    else\n      echo \"Exiting - This SSM document supports Amazon Linux and Ubuntu operating systems only.\"\n      exit 1\n    fi\n  elif cat /etc/issue | grep -i Ubuntu ; then\n    apt-get update -y\n    DEBIAN_FRONTEND=noninteractive apt-get install -y stress-ng\n  else\n    echo \"Exiting - This SSM document supports Amazon Linux and Ubuntu operating systems only.\"\n    exit 1\n  fi\nelse\n  echo \"Dependencies are not installed - Please set InstallDependencies to True.\"\n  exit 1\nfi\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "ExecuteStressNg",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameters: DurationSeconds and CPU\nThis step will stress the specified CPU number - or all CPUs if set to 0 (zero) - for the specified Duration time\nin seconds.\n",
      "inputs": {
        "maxAttempts": 1,
        "timeoutSeconds": 43200,
        "runCommand": [
          "#!/bin/bash\n\n########################\n# Fault-specific logic #\n########################\n\nif [ {{ DurationSeconds }} -lt 1 ] || [ {{ DurationSeconds }} -gt 43200 ] ; then echo DurationSeconds parameter value must be between 1 and 43200 && exit 1; fi\nif [ {{ LoadPercent }} -lt 0 ] || [ {{ LoadPercent }} -gt 100 ] ; then echo LoadPercent parameter value must be between 0 and 100 && exit 1; fi\npgrep stress-ng && echo Another stress-ng command is running, exiting... && exit 1\necho Initiating CPU stress for {{ DurationSeconds }} seconds...\nstress-ng --cpu {{ CPU }} --cpu-method matrixprod -t {{ DurationSeconds }}s --cpu-load {{ LoadPercent }}\necho Finished CPU stress.\n"
        ]
      }
    }
  ]
}
