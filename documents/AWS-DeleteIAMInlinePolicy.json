{
  "description": "### Document Name - AWS-DeleteIAMInlinePolicy\n\n## What does this document do?\nThis document deletes all inline policies attached to IAM identities (users, groups, or roles).\n\n## Input Parameters\n* IamArns: (Required) A comma separated list of the IAM identity ARNs to delete inline policies from. This list can include IAM users, groups, or roles.\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\nThis document has no outputs.\n\n## Minimum Permissions Required\n* `iam:ListUserPolicies` on the targeted IAM users.\n* `iam:DeleteUserPolicy` on the inline policies attached to the IAM users.\n* `iam:ListGroupPolicies` on the targeted IAM groups.\n* `iam:DeleteGroupPolicy` on the inline policies attached to the IAM groups.\n* `iam:ListRolePolicies` on the targeted IAM roles.\n* `iam:DeleteRolePolicy` on the inline policies attached to the IAM roles.\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "IamArns": {
      "type": "StringList",
      "description": "(Required) A comma separated list of the IAM identity ARNs to remove inline policies from.",
      "allowedPattern": "^(.*\\S.*)|^$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^(.*\\S.*)|^$"
    }
  },
  "mainSteps": [
    {
      "name": "DeleteIamInlinePolicies",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "isCritical": true,
      "timeoutSeconds": 600,
      "isEnd": true,
      "description": "## DeleteIamInlinePolicies\nDeletes the IAM inline policies attached to the targeted IAM identities.\n## Inputs\n* IamArns: The list of IAM identites to deleted inline policies from.\n## Outputs\nThis step has no outputs.\n",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "deleteiaminlinepolicies_handler",
        "InputPayload": {
          "IamArns": "{{IamArns}}"
        },
        "Script": "import boto3\nimport time\n\ndef deleteiaminlinepolicies_handler(event, context):\n  client = boto3.client('iam')\n  iamarns = event['IamArns']\n  for iamarn in iamarns:\n    identity_type = iamarn.split(\":\")[5][0]\n    if identity_type == 'u':\n      username = iamarn.split(\":\")[5][5:]\n      policies = (client.list_user_policies(UserName = username))['PolicyNames']\n      if not policies:\n        print(f'No Inline policy is associated with the IAM user: {username}')\n      else:\n        for policy in policies:\n          try:\n            client.delete_user_policy(UserName = username, PolicyName = policy)\n            print(f'The inline policy: {policy} was deleted for the IAM user: {username}')\n            continue\n          except Exception as e:\n            errorMsg = str(e)\n            raise Exception(\"Unable to perform the required action on inline policy: '{}'. error: '{}'\".format(policy, errorMsg))\n    elif identity_type == 'g':\n      groupname = iamarn.split(\":\")[5][6:]\n      policies = (client.list_group_policies(GroupName = groupname))['PolicyNames']\n      if not policies:\n        print(f'No Inline policy is associated with the IAM group: {groupname}')\n      else:\n        for policy in policies:\n          try:\n            client.delete_group_policy(GroupName = groupname, PolicyName = policy)\n            print(f'The inline policy: {policy} was deleted for the IAM group: {groupname}')\n            continue\n          except Exception as e:\n            errorMsg = str(e)\n            raise Exception(\"Unable to perform the required action on inline policy: '{}'. error: '{}'\".format(policy, errorMsg))\n    else:\n      rolename = iamarn.split(\":\")[5][5:]\n      policies = (client.list_role_policies(RoleName = rolename))['PolicyNames']\n      if not policies:\n        print(f'No Inline policy is associated with the IAM role: {rolename}')\n      else:\n        for policy in policies:\n          try:\n            client.delete_role_policy(RoleName = rolename, PolicyName = policy)\n            print(f'The inline policy: {policy} was deleted for the IAM role: {rolename}')\n            continue\n          except Exception as e:\n            errorMsg = str(e)\n            raise Exception(\"Unable to perform the required action on inline policy: '{}'. error: '{}'\".format(policy, errorMsg))\n"
      }
    }
  ]
}
