{
  "schemaVersion": "2.2",
  "description": "Run a single InSpec test or an InSpec profile on a group of managed instances.",
  "parameters": {
    "sourceType": {
      "description": "(Required) Specify the source type.",
      "type": "String",
      "allowedValues": [
        "GitHub",
        "S3"
      ]
    },
    "sourceInfo": {
      "description": "(Required) Specify the information required to access the resource from the source. If source type is GitHub, then you can specify any of the following: 'owner', 'repository', 'path', 'getOptions', 'tokenInfo'. If source type is S3, then you can specify 'path'. Example github parameters: {\"owner\":\"awslabs\",\"repository\":\"amazon-ssm\",\"path\":\"Compliance/InSpec/PortCheck\",\"getOptions\":\"branch:master\"}",
      "type": "StringMap",
      "displayType": "textarea",
      "default": {}
    }
  },
  "mainSteps": [
    {
      "action": "aws:downloadContent",
      "name": "downloadContent",
      "inputs": {
        "sourceType": "{{ sourceType }}",
        "sourceInfo": "{{ sourceInfo }}"
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "action": "aws:runShellScript",
      "name": "runInSpecLinux",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "if ! which curl &> /dev/null; then",
          "    echo 'curl is missing from the instance! Exiting.'",
          "    exit 1",
          "fi",
          "TOKEN=`curl -sS -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`",
          "region=`curl -sS -H \"X-aws-ec2-metadata-token: $TOKEN\" -v http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\\(.*\\)[a-z]/\\1/'`",
          "complianceFile='Report-Compliance-20200225'",
          "scriptFile='AWS-RunInspecChecks-20201211.sh'",
          "if [[ $region == cn-* ]] ; then",
          "    s3Prefix='https://s3.'",
          "    s3Suffix='.cn'",
          "elif [[ $region == us-gov* ]] ; then",
          "    s3Prefix='https://s3-fips-'",
          "    s3Suffix=''",
          "else",
          "    s3Prefix='https://s3.dualstack.'",
          "    s3Suffix=''",
          "fi",
          "curl -sS ${s3Prefix}${region}.amazonaws.com${s3Suffix}/aws-ssm-us-east-1/statemanagerdocumentspayload/AWS-RunInspecChecks/${complianceFile} -o ${complianceFile}",
          "if [ $? -ne 0 ] ; then",
          "    echo 'Failed to download inspec compliance file from S3. Exiting.'",
          "    exit 1",
          "fi",
          "curl -sS ${s3Prefix}${region}.amazonaws.com${s3Suffix}/aws-ssm-us-east-1/statemanagerdocumentspayload/AWS-RunInspecChecks/${scriptFile} -o ${scriptFile}",
          "if [ $? -ne 0 ] ; then",
          "    echo 'Failed to download inspec script file from S3. Exiting.'",
          "    exit 1",
          "fi",
          "bash ./${scriptFile}",
          "if [ $? -ne 0 ] ; then",
          "    echo 'Failed to run Inspec checks. Exiting.'",
          "    exit 1",
          "fi"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "runInSpecWindows",
      "inputs": {
        "runCommand": [
          "$s3FilePath = 'statemanagerdocumentspayload/AWS-RunInspecChecks/'",
          "$s3ComplianceFile = 'Report-Compliance-20200225'",
          "$s3ScriptFile = 'AWS-RunInspecChecks-20201211.ps1'",
          "$scriptLocalPath = $s3ScriptFile",
          "$curDirectory = Convert-Path .",
          "$env:PATH += \";$curDirectory\"",
          "",
          "function GetS3DownloadUrl ([string]$appPath, [string]$fileVersion) {",
          "    $region = $env:AWS_SSM_REGION_NAME",
          "",
          "    if ($region.StartsWith('cn-')) {",
          "        # China endpoint",
          "        $s3PrefixUrl = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-us-east-1/'",
          "    } elseif ($region.StartsWith('us-gov')) {",
          "        # GovCloud endpoint",
          "        $s3PrefixUrl = 'https://s3-fips-{0}.amazonaws.com/aws-ssm-us-east-1/'",
          "    } else {",
          "        # Public AWS endpoint",
          "        $s3PrefixUrl = 'https://s3.dualstack.{0}.amazonaws.com/aws-ssm-us-east-1/'",
          "    }",
          "",
          "    $s3Location = ($s3PrefixUrl + $appPath + $fileVersion) -f $region",
          "    $s3Location",
          "}",
          "",
          "$s3Location = GetS3DownloadUrl $s3FilePath $s3ComplianceFile",
          "Start-BitsTransfer -Source $s3Location -Destination $s3ComplianceFile",
          "$s3Location = GetS3DownloadUrl $s3FilePath $s3ScriptFile",
          "Start-BitsTransfer -Source $s3Location -Destination $scriptLocalPath",
          "",
          "iex $scriptLocalPath",
          "if ($?) {",
          "    exit $LASTEXITCODE",
          "} else {",
          "    exit 255",
          "}"
        ]
      }
    }
  ]
}
