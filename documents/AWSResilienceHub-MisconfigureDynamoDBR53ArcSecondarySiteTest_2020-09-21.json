{
  "description": "## Id\nAWSResilienceHub-MisconfigureDynamoDBR53ArcSecondarySiteTest_2020-09-21\n\n## Intent\nTo test the behavior of Amazon Route53 Application Recovery Controller (Route53 ARC) when the DynamoDB tables are deployed in two regions that do not pass the Route53 ARC readiness check.\n\n## Type\nTEST\n\n## Risk\nHIGH\n\n## Requirements\n  * A stack set of 2 stacks that are located in different Regions with the same DynamoDB tables.\n  * Route 53 Application Recovery Controller that contains all the resources (cells, resource set, readiness check, recovery group) that is required to monitor the DynamoDB tables.\n\n## Permissions required for AutomationAssumeRole\n  * 'dynamodb:DescribeTable'\n  * 'dynamodb:UpdateTable'\n  * 'route53-recovery-readiness:ListResourceSets'\n  * 'route53-recovery-readiness:GetReadinessCheckResourceStatus'\n  * 'ssm:GetAutomationExecution'\n  * 'ssm:StartAutomationExecution'\n  * 'ssm:GetParameters'\n  * 'iam:PassRole'\n\n## Supports Rollback\nYes. Restores (enable/disable) the original Amazon DynamoDb stream\n\n## Cancellation behavior\nRestores (enable/disable) the original Amazon DynamoDb stream\n\n## Inputs\n### (Required) ResourceSetArn\n  * type: String\n  * description:  Amazon Resource Name (ARN) of the Route53 Application Recovery Controller resource set.\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions.\n### (Required) ReadinessCheckName\n  * type: String\n  * description: Name of the Route53 Application Recovery Controller readiness check that should be set to NOT_READY after the failure injection and set to READY after the rollback process is complete at the end of the test.\n### (Optional) IsRollback\n  * type: String\n  * description: Run rollback step for the given previous execution (determined by `PreviousExecutionId` parameter). It can be set to either True or False.\n  * default: false\n### (Optional) PreviousExecutionId\n  * type: String\n  * description: Identifier of the previous execution for which resources need to be cleaned up.\n  * default:\n\n## Details\nThis document injects failure in one of the DynamoDB table by changing the value of the DynamoDB stream.\n\n## Steps executed in normal flow\n  * CheckIsRollback\n  * BackupCurrentExecution\n  * AssertReadinessCheckToBeReadyBeforeTest\n  * InjectFailure\n  * AssertReadinessCheckToBeNotReady\n  * WaitTableToBeActiveBeforeRollbackOnNormalExecution\n  * RollbackCurrentExecution\n  * AssertReadinessCheckToBeReady\n\n## Steps executed in rollback flow\n  * CheckIsRollback\n  * GetInputsFromPreviousExecution\n  * AssertResourceSetArn\n  * PrepareRollbackOfPreviousExecution\n  * WaitTableToBeActiveBeforeTriggeredRollback\n  * RollbackPreviousExecution\n\n## Outputs\nNone",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "ResourceSetArn": {
      "type": "String",
      "description": "(Required) Amazon Resource Name (ARN) of the Route53 Application Recovery Controller resource set."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions."
    },
    "ReadinessCheckName": {
      "type": "String",
      "description": "(Required) Name of the Route53 Application Recovery Controller readiness check that should be set to NOT_READY after the failure injection and set to READY after the rollback process is complete at the end of the test."
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run rollback step for the given previous execution (determined by `PreviousExecutionId` parameter). It can be set to either True or False.",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Identifier of the previous execution for which resources need to be cleaned up.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "description": "Check if document should be executed in rollback mode",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetInputsFromPreviousExecution",
            "Variable": "{{IsRollback}}",
            "StringEquals": "true"
          }
        ],
        "Default": "BackupCurrentExecution"
      }
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "description": "Get input from previous execution. This will be used to validate that rollback is executed with the same input",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "ResourceSetArn",
          "Selector": "$.Payload.ResourceSetArn[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertResourceSetArn",
      "description": "Validate that rollback is executed with the same input",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "PrepareRollbackOfPreviousExecution",
            "Variable": "{{ GetInputsFromPreviousExecution.ResourceSetArn }}",
            "StringEquals": "{{ ResourceSetArn }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get Table Arn for rollback",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "TableArn",
          "Selector": "$.Payload.TableArn[0]",
          "Type": "String"
        },
        {
          "Name": "DynamoDbStreamStatus",
          "Selector": "$.Payload.DynamoDbStreamStatus[0]",
          "Type": "String"
        },
        {
          "Name": "DynamoDbStreamViewType",
          "Selector": "$.Payload.DynamoDbStreamViewType[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}",
          "StepName": "BackupCurrentExecution",
          "ResponseField": "TableArn,DynamoDbStreamStatus,DynamoDbStreamViewType"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    # Sets values in string type regardless of what is the original value type. In order to set\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "WaitTableToBeActiveBeforeTriggeredRollback",
      "description": "Step to check the DynamoDB table status",
      "action": "aws:executeScript",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "check_table_status",
        "InputPayload": {
          "TableArn": "{{ PrepareRollbackOfPreviousExecution.TableArn }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef wait_for_active_table_status(dynamodb_client, table_name, timeout):\n    start_time = time.time()\n    while time.time() - start_time < timeout:\n        try:\n            table_description = dynamodb_client.describe_table(TableName=table_name)\n            table_status = table_description['Table']['TableStatus']\n            if table_status == 'ACTIVE':\n                return True\n            else:\n                time.sleep(5)\n        except ClientError as e:\n            raise Exception(f'Error: {e}')\n\n    return False\n\n\n\ndef check_table_status(events : dict, context : dict) -> dict:\n    required_params = [\n        'TableArn'\n    ]\n    check_required_params(required_params, events)\n    dynamodb_arn = events['TableArn']\n    timeout = 15000\n    table_region = dynamodb_arn.split(':')[3]\n    dynamodb_client = boto3.client('dynamodb', region_name=table_region)\n    table_name = dynamodb_arn.split('/')[-1]\n    table_active = wait_for_active_table_status(dynamodb_client, table_name, timeout)\n\n    if table_active:\n        print(\"Table is active. Proceeding to the next Step function.\")\n        return table_active\n    else:\n        raise RuntimeError(\"Table is not active or timeout reached. Automation Step function failed.\")"
      }
    },
    {
      "name": "RollbackPreviousExecution",
      "description": "Revert original DynamoDb stream value from the previous execution",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "rollback_current_execution",
        "InputPayload": {
          "TableArn": "{{PrepareRollbackOfPreviousExecution.TableArn}}",
          "DynamoDbStreamStatus": "{{PrepareRollbackOfPreviousExecution.DynamoDbStreamStatus}}",
          "DynamoDbStreamViewType": "{{PrepareRollbackOfPreviousExecution.DynamoDbStreamViewType}}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef enable_dynamodb_stream(table_name: str,\n                           dynamodb_client: boto3.client,\n                           stream_view_type: str = \"KEYS_ONLY\") -> None:\n    \"\"\"\n    Enable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param stream_view_type: value for the StreamViewType parameter if StreamEnabled = True\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': True,\n            'StreamViewType': stream_view_type\n        }\n    )\n\n\n\ndef disable_dynamodb_stream(table_name: str,\n                            dynamodb_client: boto3.client) -> None:\n    \"\"\"\n    Disable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': False\n        }\n    )\n\n\n\ndef rollback_current_execution(events: dict, context: dict) -> None:\n    \"\"\"\n    Rollback the current execution by changing DynamoDb Stream parameter\n    :param events: The dictionary that supposed to have the following keys:\n    * `TableArn` - The source table arn\n    * `DynamoDbStreamStatus` - the DynamoDb stream value (True or False/None)\n    * `DynamoDbStreamViewType` - value for the StreamViewType parameter if StreamEnabled = True\n    :param context: context\n    :return:\n    \"\"\"\n    required_params = [\n        'TableArn',\n        'DynamoDbStreamStatus',\n        'DynamoDbStreamViewType'\n    ]\n    check_required_params(required_params, events)\n    region = events['TableArn'].split(':')[3]\n    table_name = events['TableArn'].split('/')[1]\n    backup_dynamodb_stream_status = events['DynamoDbStreamStatus']\n    backup_stream_view_type = events['DynamoDbStreamViewType']\n\n    dynamodb_config = Config(\n        region_name=region,\n        retries={\n            'max_attempts': 20,\n            'mode': 'standard'\n        }\n    )\n    dynamodb_client = boto3.client('dynamodb', config=dynamodb_config)\n\n    response = dynamodb_client.describe_table(\n        TableName=table_name\n    )\n\n    current_dynamodb_stream_status = response['Table'].get('StreamSpecification', {}).get('StreamEnabled', )\n    if not current_dynamodb_stream_status or current_dynamodb_stream_status is False:\n        enable_dynamodb_stream(table_name, dynamodb_client, backup_stream_view_type)\n    else:\n        disable_dynamodb_stream(table_name, dynamodb_client)\n    logger.info(f'DynamoDb stream value for the table {table_name} was '\n                f'successfully rolled back from {current_dynamodb_stream_status} to {backup_dynamodb_stream_status}.')"
      },
      "isEnd": true
    },
    {
      "name": "BackupCurrentExecution",
      "description": "Backup DynamoDb table parameters for rollback",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "TableArn",
          "Selector": "$.Payload.TableArn",
          "Type": "String"
        },
        {
          "Name": "DynamoDbStreamStatus",
          "Selector": "$.Payload.DynamoDbStreamStatus",
          "Type": "Boolean"
        },
        {
          "Name": "DynamoDbStreamViewType",
          "Selector": "$.Payload.DynamoDbStreamViewType",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "backup_dynamodb_table_params",
        "InputPayload": {
          "ResourceSetArn": "{{ ResourceSetArn }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef get_random_resource_arn(resource_set_arn: str, resource_set_type: str) -> str:\n    \"\"\"\n    Get random Resource Arn from the Resource Set\n    :param resource_set_arn: The resource set arn\n    :param resource_set_type: The resource set type\n    :return: Arn of the Random resource\n    \"\"\"\n    # Route52-recovery-readiness api working only at us-west-2\n    r53arc_config = Config(\n        region_name='us-west-2',\n        retries={\n            'max_attempts': 20,\n            'mode': 'standard'\n        }\n    )\n    client = boto3.client('route53-recovery-readiness', config=r53arc_config)\n    response = client.list_resource_sets()\n\n    resource_sets = response['ResourceSets']\n    while 'NextToken' in response:\n        response = client.list_resource_sets(NextToken=response['NextToken'])\n        resource_sets.extend(response['ResourceSets'])\n\n    resource_set = [item for item in resource_sets if item['ResourceSetArn'] == resource_set_arn][0]\n    if resource_set['ResourceSetType'] != resource_set_type:\n        raise ValueError(f'Resource has not expected type: {resource_set[\"ResourceSetType\"]}.')\n\n    resources = [item['ResourceArn'] for item in resource_set['Resources']]\n    if not resources:\n        raise ValueError(f'Resource set {resource_set[\"ResourceSetArn\"]} does not contain resources')\n\n    random_resource = random.choice(resources)\n    logger.info(f'Random resource: {random_resource}')\n    return random_resource\n\n\n\ndef backup_dynamodb_table_params(events: dict, context: dict) -> dict:\n    \"\"\"\n    Backup DynamoDb parameters\n    :param events: The dictionary that supposed to have the following keys:\n    * `ResourceSetArn` - The resource set arn\n    :param context: context\n    :return: Parameters: 'TableArn', 'DynamoDbStreamStatus', 'DynamoDbStreamViewType'\n    \"\"\"\n    required_params = ['ResourceSetArn']\n    check_required_params(required_params, events)\n\n    resource_set_arn = events['ResourceSetArn']\n\n    dynamodb_table_arn = get_random_resource_arn(resource_set_arn, 'AWS::DynamoDB::Table')\n    table_region = dynamodb_table_arn.split(\":\")[3]\n    table_name = dynamodb_table_arn.split(\"/\")[1]\n\n    logger.info(f'DynamoDb Table with name {table_name}. '\n                f'table_region: {table_region}. '\n                f'table_arn: {dynamodb_table_arn}')\n\n    dynamodb_config = Config(\n        region_name=table_region,\n        retries={\n            'max_attempts': 20,\n            'mode': 'standard'\n        }\n    )\n    dynamodb_client = boto3.client('dynamodb', config=dynamodb_config)\n    response = dynamodb_client.describe_table(\n        TableName=table_name\n    )\n\n    dynamodb_stream_status = response['Table'].get('StreamSpecification', {}).get('StreamEnabled', )\n    stream_view_type = response['Table'].get('StreamSpecification', {}).get('StreamViewType', '')\n    billing_mode = response['Table'].get('BillingModeSummary', {}).get('BillingMode', '')\n    read_capacity = response['Table'].get('ProvisionedThroughput', {}).get('ReadCapacityUnits', 0)\n    write_capacity = response['Table'].get('ProvisionedThroughput', {}).get('WriteCapacityUnits', 0)\n    backup_params = {\n        'DynamoDbStreamStatus': dynamodb_stream_status,\n        'DynamoDbStreamViewType': stream_view_type,\n        'TableArn': dynamodb_table_arn,\n        'DynamoDbBillingMode': billing_mode,\n        'DynamoDbReadCapacityUnits': read_capacity,\n        'DynamoDbWriteCapacityUnits': write_capacity,\n    }\n    return backup_params"
      }
    },
    {
      "name": "AssertReadinessCheckToBeReadyBeforeTest",
      "description": "Ensure ReadinessCheck is READY before starting test. Fail if ReadinessCheck is not READY within expected time.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "assert_readiness_check_state",
        "Script": "import logging\nimport random\nimport time\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef assert_readiness_check_state(events, context):\n    \"\"\"\n    Assert ReadinessCheck state\n    \"\"\"\n    required_params = ['ReadinessCheckName', 'DesiredValue', 'Timeout']\n    check_required_params(required_params, events)\n    # Route52-recovery-readiness api working only at us-west-2\n    r53arc_config = Config(\n        region_name='us-west-2',\n        signature_version='v4',\n        retries={\n            'max_attempts': 10,\n            'mode': 'standard'\n        }\n    )\n    client = boto3.client('route53-recovery-readiness', config=r53arc_config)\n    passed = 0\n    iteration = 1\n    time_to_wait = events['Timeout']\n    start = time.time()\n    while passed < time_to_wait:\n        response = client.get_readiness_check_status(\n            ReadinessCheckName=events['ReadinessCheckName']\n        )\n        readiness_check_status = response['Readiness']\n        if readiness_check_status == events['DesiredValue']:\n            logging.info(f'#{iteration}; ReadinessCheck has the expected state: {readiness_check_status} '\n                         f'Elapsed: {passed} sec;')\n            return\n        logging.info(f'#{iteration}; ReadinessCheck has not changed the state: {readiness_check_status} '\n                     f'Elapsed: {passed} sec; Sleep for 10 seconds')\n        time.sleep(10)\n        end = time.time()\n        passed = end - start\n        iteration += 1\n\n    raise TimeoutError(f\"Waiting for ReadinessCheck {events['ReadinessCheckName']} \"\n                       f\"to change state to {events['DesiredValue']}\")",
        "InputPayload": {
          "ReadinessCheckName": "{{ ReadinessCheckName }}",
          "ResourceIdentifier": "{{ BackupCurrentExecution.TableArn }}",
          "DesiredValue": "READY",
          "Timeout": 2500
        }
      }
    },
    {
      "name": "InjectFailure",
      "description": "Inject failure by changing the value of the DynamoDb stream in one of the DynamoDb Tables in the stackset",
      "action": "aws:executeScript",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "inject_failure",
        "InputPayload": {
          "TableArn": "{{ BackupCurrentExecution.TableArn }}",
          "DynamoDbStreamStatus": "{{ BackupCurrentExecution.DynamoDbStreamStatus }}",
          "DynamoDbStreamViewType": "{{ BackupCurrentExecution.DynamoDbStreamViewType }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef enable_dynamodb_stream(table_name: str,\n                           dynamodb_client: boto3.client,\n                           stream_view_type: str = \"KEYS_ONLY\") -> None:\n    \"\"\"\n    Enable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param stream_view_type: value for the StreamViewType parameter if StreamEnabled = True\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': True,\n            'StreamViewType': stream_view_type\n        }\n    )\n\n\n\ndef disable_dynamodb_stream(table_name: str,\n                            dynamodb_client: boto3.client) -> None:\n    \"\"\"\n    Disable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': False\n        }\n    )\n\n\n\ndef inject_failure(events: dict, context: dict) -> None:\n    \"\"\"\n    Inject failure by updating DynamoDb stream specification\n    :param events: The dictionary that supposed to have the following keys:\n    * `TableArn` - The source table arn\n    * `DynamoDbStreamStatus` - the DynamoDb stream value (True or False/None)\n    * `DynamoDbStreamViewType` - value for the StreamViewType parameter if StreamEnabled = True\n    :param context: context\n    :return:\n    \"\"\"\n    required_params = [\n        'TableArn',\n        'DynamoDbStreamStatus',\n        'DynamoDbStreamViewType',\n    ]\n    check_required_params(required_params, events)\n    table_arn = events['TableArn']\n    region = table_arn.split(\":\")[3]\n    table_name = table_arn.split(\"/\")[1]\n    backup_dynamodb_stream_status = events['DynamoDbStreamStatus']\n\n    logger.info(f'DynamoDb stream status:  {backup_dynamodb_stream_status} ')\n\n    dynamodb_config = Config(\n        region_name=region,\n        retries={\n            'max_attempts': 20,\n            'mode': 'standard'\n        }\n    )\n    dynamodb_client = boto3.client('dynamodb', config=dynamodb_config)\n\n    if not backup_dynamodb_stream_status or backup_dynamodb_stream_status is False:\n        enable_dynamodb_stream(table_name, dynamodb_client)\n    else:\n        disable_dynamodb_stream(table_name, dynamodb_client)\n    response = dynamodb_client.describe_table(\n        TableName=table_name\n    )\n\n    new_dynamodb_stream_status = response['Table'].get('StreamSpecification', {}).get('StreamEnabled', )\n    logger.info(f'DynamoDb Stream for the table {table_name} was '\n                f'successfully updated from {backup_dynamodb_stream_status} to {new_dynamodb_stream_status}.')"
      }
    },
    {
      "name": "WaitTableToBeActiveBeforeRollbackOnNormalExecution",
      "description": "Step to check the DynamoDB table status",
      "action": "aws:executeScript",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "check_table_status",
        "InputPayload": {
          "TableArn": "{{ BackupCurrentExecution.TableArn }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef wait_for_active_table_status(dynamodb_client, table_name, timeout):\n    start_time = time.time()\n    while time.time() - start_time < timeout:\n        try:\n            table_description = dynamodb_client.describe_table(TableName=table_name)\n            table_status = table_description['Table']['TableStatus']\n            if table_status == 'ACTIVE':\n                return True\n            else:\n                time.sleep(5)\n        except ClientError as e:\n            raise Exception(f'Error: {e}')\n\n    return False\n\n\n\ndef check_table_status(events : dict, context : dict) -> dict:\n    required_params = [\n        'TableArn'\n    ]\n    check_required_params(required_params, events)\n    dynamodb_arn = events['TableArn']\n    timeout = 15000\n    table_region = dynamodb_arn.split(':')[3]\n    dynamodb_client = boto3.client('dynamodb', region_name=table_region)\n    table_name = dynamodb_arn.split('/')[-1]\n    table_active = wait_for_active_table_status(dynamodb_client, table_name, timeout)\n\n    if table_active:\n        print(\"Table is active. Proceeding to the next Step function.\")\n        return table_active\n    else:\n        raise RuntimeError(\"Table is not active or timeout reached. Automation Step function failed.\")"
      }
    },
    {
      "name": "AssertReadinessCheckToBeNotReady",
      "description": "Wait for expected ReadinessCheck to become NOT_READY after failure is injected",
      "action": "aws:executeScript",
      "onFailure": "step:RollbackCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "assert_readiness_check_state",
        "Script": "import logging\nimport random\nimport time\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef assert_readiness_check_state(events, context):\n    \"\"\"\n    Assert ReadinessCheck state\n    \"\"\"\n    required_params = ['ReadinessCheckName', 'DesiredValue', 'Timeout']\n    check_required_params(required_params, events)\n    # Route52-recovery-readiness api working only at us-west-2\n    r53arc_config = Config(\n        region_name='us-west-2',\n        signature_version='v4',\n        retries={\n            'max_attempts': 10,\n            'mode': 'standard'\n        }\n    )\n    client = boto3.client('route53-recovery-readiness', config=r53arc_config)\n    passed = 0\n    iteration = 1\n    time_to_wait = events['Timeout']\n    start = time.time()\n    while passed < time_to_wait:\n        response = client.get_readiness_check_status(\n            ReadinessCheckName=events['ReadinessCheckName']\n        )\n        readiness_check_status = response['Readiness']\n        if readiness_check_status == events['DesiredValue']:\n            logging.info(f'#{iteration}; ReadinessCheck has the expected state: {readiness_check_status} '\n                         f'Elapsed: {passed} sec;')\n            return\n        logging.info(f'#{iteration}; ReadinessCheck has not changed the state: {readiness_check_status} '\n                     f'Elapsed: {passed} sec; Sleep for 10 seconds')\n        time.sleep(10)\n        end = time.time()\n        passed = end - start\n        iteration += 1\n\n    raise TimeoutError(f\"Waiting for ReadinessCheck {events['ReadinessCheckName']} \"\n                       f\"to change state to {events['DesiredValue']}\")",
        "InputPayload": {
          "ReadinessCheckName": "{{ ReadinessCheckName }}",
          "ResourceIdentifier": "{{ BackupCurrentExecution.TableArn }}",
          "DesiredValue": "NOT_READY",
          "Timeout": 2500
        }
      }
    },
    {
      "name": "RollbackCurrentExecution",
      "description": "Revert original value of the DynamoDb stream",
      "action": "aws:executeScript",
      "maxAttempts": 5,
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "rollback_current_execution",
        "InputPayload": {
          "TableArn": "{{ BackupCurrentExecution.TableArn }}",
          "DynamoDbStreamStatus": "{{ BackupCurrentExecution.DynamoDbStreamStatus }}",
          "DynamoDbStreamViewType": "{{ BackupCurrentExecution.DynamoDbStreamViewType }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef enable_dynamodb_stream(table_name: str,\n                           dynamodb_client: boto3.client,\n                           stream_view_type: str = \"KEYS_ONLY\") -> None:\n    \"\"\"\n    Enable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param stream_view_type: value for the StreamViewType parameter if StreamEnabled = True\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': True,\n            'StreamViewType': stream_view_type\n        }\n    )\n\n\n\ndef disable_dynamodb_stream(table_name: str,\n                            dynamodb_client: boto3.client) -> None:\n    \"\"\"\n    Disable the DynamoDb Stream parameter for the Amazon DynamoDb table\n    :param table_name: the table name\n    :param dynamodb_client: the boto3 client\n    :return:\n    \"\"\"\n    dynamodb_client.update_table(\n        TableName=table_name,\n        StreamSpecification={\n            'StreamEnabled': False\n        }\n    )\n\n\n\ndef rollback_current_execution(events: dict, context: dict) -> None:\n    \"\"\"\n    Rollback the current execution by changing DynamoDb Stream parameter\n    :param events: The dictionary that supposed to have the following keys:\n    * `TableArn` - The source table arn\n    * `DynamoDbStreamStatus` - the DynamoDb stream value (True or False/None)\n    * `DynamoDbStreamViewType` - value for the StreamViewType parameter if StreamEnabled = True\n    :param context: context\n    :return:\n    \"\"\"\n    required_params = [\n        'TableArn',\n        'DynamoDbStreamStatus',\n        'DynamoDbStreamViewType'\n    ]\n    check_required_params(required_params, events)\n    region = events['TableArn'].split(':')[3]\n    table_name = events['TableArn'].split('/')[1]\n    backup_dynamodb_stream_status = events['DynamoDbStreamStatus']\n    backup_stream_view_type = events['DynamoDbStreamViewType']\n\n    dynamodb_config = Config(\n        region_name=region,\n        retries={\n            'max_attempts': 20,\n            'mode': 'standard'\n        }\n    )\n    dynamodb_client = boto3.client('dynamodb', config=dynamodb_config)\n\n    response = dynamodb_client.describe_table(\n        TableName=table_name\n    )\n\n    current_dynamodb_stream_status = response['Table'].get('StreamSpecification', {}).get('StreamEnabled', )\n    if not current_dynamodb_stream_status or current_dynamodb_stream_status is False:\n        enable_dynamodb_stream(table_name, dynamodb_client, backup_stream_view_type)\n    else:\n        disable_dynamodb_stream(table_name, dynamodb_client)\n    logger.info(f'DynamoDb stream value for the table {table_name} was '\n                f'successfully rolled back from {current_dynamodb_stream_status} to {backup_dynamodb_stream_status}.')"
      }
    },
    {
      "name": "AssertReadinessCheckToBeReady",
      "description": "Wait for the ReadinessCheck to become READY after test is complete",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "assert_readiness_check_state",
        "Script": "import logging\nimport random\nimport time\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef check_required_params(required_params, events):\n    \"\"\"\n    Check for required parameters in events.\n    \"\"\"\n    for key in required_params:\n        if not events.get(key):\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef assert_readiness_check_state(events, context):\n    \"\"\"\n    Assert ReadinessCheck state\n    \"\"\"\n    required_params = ['ReadinessCheckName', 'DesiredValue', 'Timeout']\n    check_required_params(required_params, events)\n    # Route52-recovery-readiness api working only at us-west-2\n    r53arc_config = Config(\n        region_name='us-west-2',\n        signature_version='v4',\n        retries={\n            'max_attempts': 10,\n            'mode': 'standard'\n        }\n    )\n    client = boto3.client('route53-recovery-readiness', config=r53arc_config)\n    passed = 0\n    iteration = 1\n    time_to_wait = events['Timeout']\n    start = time.time()\n    while passed < time_to_wait:\n        response = client.get_readiness_check_status(\n            ReadinessCheckName=events['ReadinessCheckName']\n        )\n        readiness_check_status = response['Readiness']\n        if readiness_check_status == events['DesiredValue']:\n            logging.info(f'#{iteration}; ReadinessCheck has the expected state: {readiness_check_status} '\n                         f'Elapsed: {passed} sec;')\n            return\n        logging.info(f'#{iteration}; ReadinessCheck has not changed the state: {readiness_check_status} '\n                     f'Elapsed: {passed} sec; Sleep for 10 seconds')\n        time.sleep(10)\n        end = time.time()\n        passed = end - start\n        iteration += 1\n\n    raise TimeoutError(f\"Waiting for ReadinessCheck {events['ReadinessCheckName']} \"\n                       f\"to change state to {events['DesiredValue']}\")",
        "InputPayload": {
          "ReadinessCheckName": "{{ ReadinessCheckName }}",
          "ResourceIdentifier": "{{ BackupCurrentExecution.TableArn }}",
          "DesiredValue": "READY",
          "Timeout": 2500
        }
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "description": "This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
