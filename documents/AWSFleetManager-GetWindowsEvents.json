{
  "schemaVersion": "2.2",
  "description": "Performs Windows Event Logs listing.",
  "parameters": {
    "Action": {
      "type": "String",
      "description": "(Optional) The action to perform",
      "default": "ListLogs",
      "allowedValues": [
        "ListLogs",
        "ListLogEntries"
      ]
    },
    "LogName": {
      "type": "String",
      "description": "(Optional) The Windows event log name.",
      "default": "Application",
      "allowedPattern": "^([^\\*\\?\\\\|\\r\\n]|[a-zA-Z0-9\\-\\/ ])+$"
    },
    "StartTime": {
      "type": "String",
      "description": "(Optional) The start time for log events to query. The value is expressed as milliseconds since epoch (January 1st,1970). For example October 1st, 2020 would be '1603892797000'.",
      "default": "0",
      "allowedPattern": "^\\d{1,19}$"
    },
    "EndTime": {
      "type": "String",
      "description": "(Optional) The end time for log events to query. The value is expressed as milliseconds since epoch (January 1st,1970). For example October 1st, 2020 would be '1603892797000'.",
      "default": "0",
      "allowedPattern": "^\\d{1,19}$"
    },
    "IncludeInformationLevel": {
      "type": "String",
      "description": "(Optional) Specifies whether to include informational logs.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "IncludeWarningLevel": {
      "type": "String",
      "description": "(Optional) Specifies whether to include warning logs.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "IncludeErrorLevel": {
      "type": "String",
      "description": "(Optional) Specifies whether to include error logs.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "IncludeCriticalLevel": {
      "type": "String",
      "description": "(Optional) Specifies whether to include critical logs.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "IncludeVerboseLevel": {
      "type": "String",
      "description": "(Optional) Specifies whether to include verbose logs.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "EventIds": {
      "type": "String",
      "description": "(Optional) Comma-seperated list of event ids and/or range of event ids separated by a hyphen e.g. 1234,1223,1000-1020,3334.",
      "default": "-",
      "allowedPattern": "^-$|^(\\d+((,\\d+)|(-\\d+))*)?$",
      "minChars": 1,
      "maxChars": 255
    },
    "ProviderName": {
      "type": "String",
      "description": "(Optional) The Windows event provider name.",
      "default": "-",
      "allowedPattern": "^([^\\*\\?\\\\|\\r\\n]|[a-zA-Z0-9\\-\\/ ])+$"
    },
    "NextToken": {
      "type": "String",
      "description": "(Optional) Used for the pagination of data. To return all results, specify a value of *. When used with the ListLogs action, set this value to the last LogName returned from the previous execution. When used with the ListLogEntries action, set this value to the last RecordId returned from the previous execution.",
      "allowedPattern": "^\\*$|^([A-Za-z0-9-_\\/+]{4})*([A-Za-z0-9-_\\/+]{4}|[A-Za-z0-9-_\\/+]{3}=|[A-Za-z0-9-_\\/+]{2}==)$",
      "default": "*",
      "maxChars": 255
    },
    "AllowTruncatedOutput": {
      "type": "String",
      "description": "(Optional) Specifies whether the standard output can be truncated or not. If set to 'No', the standard output size will be limited to stay with Systems Manager API limits. If set to 'Yes', the standard output will not be limited.",
      "default": "Yes",
      "allowedValues": [
        "No",
        "Yes"
      ]
    },
    "CompressOutput": {
      "type": "String",
      "description": "(Optional) Defines whether output is compressed. If set to \"No\", the output will be a JSON string. If set to \"Yes\", the output will be a JSON string, that is gzipped and BASE64 encoded.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "InvokeWindowsScript",
      "inputs": {
        "runCommand": [
          "$ErrorActionPreference = 'Stop'\n\nFunction ParseInputParameter {\n    param (\n        [string]$Name,\n        [string]$Value,\n        [string]$Regex\n    )\n\n    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'\n    if ($Value -notmatch $ValidParameterRegex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    }\n    $parameterValue = $Value.Substring(3)\n\n    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()\n    $trimmedParameterValue = $trimmedParameterValue.Substring(1)\n    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)\n\n    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    } else {\n        $trimmedParameterValue\n    }\n}\n\nfunction ExitWithFailureMessage {\n    param (\n        [string]$Message,\n        [string]$ExceptionMessage,\n        [Switch]$PrintJson\n    )\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\n        $errorMessage = $Message\n    } else {\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\n    }\n    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}\n    WriteStandardError -Message $errorMessage\n    [System.Environment]::Exit(1)\n}\n\nfunction ExitWithSuccessMessage {\n    param (\n        [string]$Message\n    )\n    Write-Host $Message\n    [System.Environment]::Exit(0)\n}\n\nfunction WriteStandardError {\n    param (\n        [string]$Message\n    )\n    $Host.UI.WriteErrorLine($Message)\n}\n\n$script:ResultProperty = 'results'\n$script:DataProperty = 'data'\n$script:NextTokenProperty = 'nextToken'\n\nfunction ConvertBase64ToString {\n    param (\n        [string]$Base64\n    )\n    $bytes = [System.Convert]::FromBase64String($Base64)\n    [System.Text.Encoding]::UTF8.GetString($bytes)\n}\n\nfunction ConvertStringToBase64 {\n    param (\n        [string]$String\n    )\n    $bytes = [System.Text.Encoding]::UTF8.GetBytes($String)\n    [System.Convert]::ToBase64String($bytes)\n}\n\nfunction GetCompressionBoolean {\n    param (\n        [ValidateSet('No', 'Yes')]\n        [string]$CompressOutput\n    )\n    if ($CompressOutput -eq 'Yes') {\n        $true\n    } else {\n        $false\n    }\n}\n\nfunction GetJson {\n    param ($InputObject)\n    ConvertTo-Json -InputObject $InputObject -Compress -Depth 5\n}\n\nfunction GetBase64EncodedGzipString {\n    param ($InputString)\n\n    $inputBytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)\n\n    try {\n        $memoryStream = New-Object -TypeName 'System.IO.MemoryStream'\n        $compressionMode = [System.IO.Compression.CompressionMode]::Compress\n        $gzipStream = New-Object -TypeName 'System.IO.Compression.GzipStream' -ArgumentList @($memoryStream, $compressionMode)\n\n        $gzipStream.Write($inputBytes, 0, $inputBytes.Length)\n        $gzipStream.Close()\n        $memoryStream.Close()\n\n        [System.Convert]::ToBase64String($memoryStream.ToArray())\n    } finally {\n        $gzipStream.Dispose()\n        $memoryStream.Dispose()\n    }\n}\n\nfunction GetResultAsString {\n    param (\n        [PSObject]$Object,\n        [bool]$Completed,\n        [switch]$ConvertNextTokenToBase64,\n        [bool]$EnableCompression,\n        [string]$NextToken,\n        [string]$PaginationProperty,\n        [array]$StringReplacementRegex,\n        [bool]$ForceEmptyNextToken\n    )\n\n    if ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true -and $PaginationProperty -eq '.') {\n        $json = GetJson -InputObject $Object[-1].TimeCreated\n        $json = $json -replace $StringReplacementRegex\n        $json = $json -replace '[^0-9]', ''\n        $NextToken = $json + ',' + $Object[-1].RecordId\n    } elseif ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true -and $PaginationProperty -ne '.') {\n        $NextToken = $Object[-1].$PaginationProperty\n    }\n\n    if ($ConvertNextTokenToBase64) {\n        $NextToken = ConvertStringToBase64 -String $NextToken\n    }\n\n    $data = @{\n        $script:ResultProperty    = $Object\n        $script:NextTokenProperty = $NextToken\n    }\n\n    if ($EnableCompression -eq $true) {\n        $string = GetJson -InputObject $data\n\n        if ($StringReplacementRegex.Count -eq 2) {\n            $string = $string -replace $StringReplacementRegex\n        }\n\n        $data = GetBase64EncodedGzipString -InputString $string\n    }\n\n    $output = GetJson -InputObject @{\n        $script:DataProperty = $data\n    }\n    if ($StringReplacementRegex.Count -eq 2) {\n        $output -replace $StringReplacementRegex\n    } else {\n        $output\n    }\n}\n\nfunction GetMaximumOutputBytes {\n    param (\n        $AllowTruncatedOutput,\n        [int]$MaximumOutputSize = 2500\n    )\n    if ($AllowTruncatedOutput -eq 'Yes') {\n        0\n    } else {\n        $padding = (GetResultAsString -Object @() -Completed $false -EnableCompression $false).length\n        $MaximumOutputSize - $padding\n    }\n}\n\nfunction ProcessItems {\n    param (\n        [scriptblock]$ScriptBlock,\n        [switch]$ConvertNextTokenToBase64,\n        [int]$ChunksPerLoop = 1,\n        [bool]$EnableCompression,\n        [int]$MaximumOutputBytes,\n        [string]$PaginationProperty,\n        [array]$StringReplacementRegex,\n        [string]$PropertyToTruncate = '.'\n    )\n\n    $chunkedOutputArray = New-Object -TypeName 'System.Collections.ArrayList'\n\n    $outputResult = [string]::Empty\n\n    $outputTooBig = $false\n    $counter = 0\n\n    $getResultString = @{\n        EnableCompression      = $EnableCompression\n        PaginationProperty     = $PaginationProperty\n        StringReplacementRegex = $StringReplacementRegex\n    }\n\n    foreach ($item in (& $ScriptBlock)) {\n        if ($outputTooBig -eq $true) { break }\n\n        $null = $chunkedOutputArray.Add($item)\n\n        if ($counter -lt $ChunksPerLoop) {\n            $counter++\n            continue\n        }\n\n        $counter = 0\n\n        $properties = @{\n            Object    = $chunkedOutputArray\n            Completed = $outputTooBig\n        }\n        if ($ConvertNextTokenToBase64) {\n            $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)\n        }\n        $tempResult = GetResultAsString @properties @getResultString\n\n        if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {\n            $outputResult = $tempResult\n        } else {\n            # try to remove last added item and test for size again instead of exiting.\n            if ($chunkedOutputArray.Count -gt 1) {\n                $chunkedOutputArray.RemoveAt($chunkedOutputArray.Count - 1);\n\n                $properties = @{\n                    Object    = $chunkedOutputArray\n                    Completed = $outputTooBig\n                }\n                if ($ConvertNextTokenToBase64) {\n                    $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)\n                }\n                $tempResult = GetResultAsString @properties @getResultString\n                if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {\n                    $outputResult = $tempResult\n                }\n            } elseif ($chunkedOutputArray.Count -eq 1 -or $PropertyToTruncate -ne '.') {\n                $chunkedOutputArray[0].$PropertyToTruncate = ''\n            }\n\n            $outputTooBig = $true\n            break\n        }\n    }\n\n    # Processing remaining items if the output isn't too big yet\n    if ($outputTooBig -eq $false) {\n        $properties = @{\n            Object              = $chunkedOutputArray\n            Completed           = $outputTooBig\n            ForceEmptyNextToken = $true\n        }\n\n        $tempResult = GetResultAsString @getResultString @properties\n        if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {\n            $outputResult = $tempResult\n        }\n    }\n\n    Write-Output $outputResult\n}\n\n$Action = Write-Output --%{{{ Action }}}\n$Action = ParseInputParameter -Name 'Action' -Value $Action\n\n$LogName = Write-Output --%{{{ LogName }}}\n$LogName = ParseInputParameter -Name 'LogName' -Value $LogName\n\n$NextToken = Write-Output --%{{{ NextToken }}}\n$NextToken = ParseInputParameter -Name 'NextToken' -Value $NextToken -Regex '^(?!\\s*$).+'\n\n$AllowTruncatedOutput = Write-Output --%{{{ AllowTruncatedOutput }}}\n$AllowTruncatedOutput = ParseInputParameter -Name 'AllowTruncatedOutput' -Value $AllowTruncatedOutput -Regex '(Yes|No)'\n\n$CompressOutput = Write-Output --%{{{ CompressOutput }}}\n$CompressOutput = ParseInputParameter -Name 'CompressOutput' -Value $CompressOutput -Regex '(Yes|No)'\n\n$StartTime = Write-Output --%{{{ StartTime }}}\n$StartTime = ParseInputParameter -Name 'StartTime' -Value $StartTime\n\n$EndTime = Write-Output --%{{{ EndTime }}}\n$EndTime = ParseInputParameter -Name 'EndTime' -Value $EndTime\n\n$IncludeInformationLevel = Write-Output --%{{{ IncludeInformationLevel }}}\n$IncludeInformationLevel = ParseInputParameter -Name 'IncludeInformationLevel' -Value $IncludeInformationLevel -Regex '(Yes|No)'\n\n$IncludeWarningLevel = Write-Output --%{{{ IncludeWarningLevel }}}\n$IncludeWarningLevel = ParseInputParameter -Name 'IncludeWarningLevel' -Value $IncludeWarningLevel -Regex '(Yes|No)'\n\n$IncludeErrorLevel = Write-Output --%{{{ IncludeErrorLevel }}}\n$IncludeErrorLevel = ParseInputParameter -Name 'IncludeErrorLevel' -Value $IncludeErrorLevel -Regex '(Yes|No)'\n\n$IncludeCriticalLevel = Write-Output --%{{{ IncludeCriticalLevel }}}\n$IncludeCriticalLevel = ParseInputParameter -Name 'IncludeCriticalLevel' -Value $IncludeCriticalLevel -Regex '(Yes|No)'\n\n$IncludeVerboseLevel = Write-Output --%{{{ IncludeVerboseLevel }}}\n$IncludeVerboseLevel = ParseInputParameter -Name 'IncludeVerboseLevel' -Value $IncludeVerboseLevel -Regex '(Yes|No)'\n\n$EventIds = Write-Output --%{{{ EventIds }}}\n$EventIds = ParseInputParameter -Name 'EventIds' -Value $EventIds\n\n$ProviderName = Write-Output --%{{{ ProviderName }}}\n$ProviderName = ParseInputParameter -Name 'ProviderName' -Value $ProviderName\n\nif ($NextToken -ne '*') {\n    try {\n        $NextToken = ConvertBase64ToString -Base64 $NextToken\n    } catch {\n        ExitWithFailureMessage -Message 'The specified NextToken is invalid.' -PrintJson\n    }\n}\n\n$enableCompression = GetCompressionBoolean -CompressOutput $CompressOutput\n$maximumOutputBytes = GetMaximumOutputBytes -AllowTruncatedOutput $AllowTruncatedOutput\n\nswitch ($Action) {\n    'ListLogs' {\n        [scriptblock]$scriptblock = {\n\n            $properties = @{\n                Property = @(\n                    'LogName'\n                    'OwningProviderName'\n                    'RecordCount'\n                )\n            }\n\n            $getWinEvent = @{\n                ListLog = '*'\n                ErrorAction = 'SilentlyContinue'\n            }\n            Get-WinEvent @getWinEvent | Where-Object LogName -gt $NextToken | Select-Object @properties | Sort-Object LogName\n        }\n\n        $processItems = @{\n            ScriptBlock              = $scriptblock\n            ConvertNextTokenToBase64 = $true\n            ChunksPerLoop            = 15\n            EnableCompression        = $enableCompression\n            MaximumOutputBytes       = $maximumOutputBytes\n            PaginationProperty       = 'LogName'\n        }\n    }\n\n    'ListLogEntries' {\n        [scriptblock]$scriptblock = {\n            try {\n                if ($NextToken -ne '*') {\n                    $parts = $NextToken.Split(',')\n\n                    if ([string]::IsNullOrEmpty($parts)) {\n                        Write-Output \"Invalid pagination token format\"\n                        exit 1\n                    }\n\n                    $date = [datetimeoffset]::FromUnixTimeMilliseconds($parts[0]).DateTime\n                    $recordId = $parts[1]\n                } else {\n                    $date = [datetime]::UtcNow\n                }\n\n                if ($NextToken -eq '*') {\n                    $recordId = [long]::MaxValue\n                }\n\n                $properties = @{\n                    Property = @(\n                        'RecordId'\n                        'TimeCreated'\n                        'Level'\n                        'Id'\n                        'Message'\n                        'ProviderName'\n                        'UserId'\n                    )\n                }\n\n                $filterHashTable = @{\n                        LogName = $LogName\n                }\n\n                $_endTime = [datetime]::UtcNow\n                if ($EndTime -ne 0) {\n                    $_endTime = [datetimeoffset]::FromUnixTimeMilliseconds($EndTime).DateTime\n                }\n\n                $_startTime = [datetime]::MinValue\n                if ($StartTime -ne 0) {\n                    $_startTime = [datetimeoffset]::FromUnixTimeMilliseconds($StartTime).DateTime\n                }\n\n                # If date from pagination token is less than endDate then use the date from pagination token. This will handle pagination within a filtered table.\n                if ($date -le $_endTime) {\n                    $_endTime = $date\n                }\n\n                $filterHashTable.Add('EndTime', $_endTime)\n\n                if ($_startTime -le $_endTime) {\n                    $filterHashTable.Add('StartTime', $_startTime)\n                }\n\n                # Build log level list\n                $logLevelsArray = New-Object -TypeName 'System.Collections.ArrayList'\n\n                if ($IncludeInformationLevel -eq 'Yes') {\n                    $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Informational.value__)\n                }\n\n                if ($IncludeWarningLevel -eq 'Yes') {\n                    $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Warning.value__)\n                }\n\n                if ($IncludeErrorLevel -eq 'Yes') {\n                    $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Error.value__)\n                }\n\n                if ($IncludeCriticalLevel -eq 'Yes') {\n                    $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Critical.value__)\n                }\n\n                if ($IncludeVerboseLevel -eq 'Yes') {\n                    $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Verbose.value__)\n                }\n\n                $filterHashTable.Add('Level', $logLevelsArray.ToArray())\n\n                if ($ProviderName -ne '-') {\n                    $filterHashTable.Add('ProviderName', $ProviderName)\n                }\n\n                if ($EventIds -ne '-') {\n                    $eventIdsToQuery = New-Object -TypeName 'System.Collections.ArrayList'\n\n                    $ids = $EventIds.Split(',')\n                    $null = foreach ($id in $ids) {\n                        # handle format 1000, 2000-2005, 6000\n                        if ($id -match '^(\\d+(-\\d+))?$') {\n                            $rangeIds = $id.Split('-')\n                            if ($rangeIds.Count -ne 2 -or $rangeIds[0] -gt $rangeIds[1]) {\n                                ExitWithFailureMessage 'The specified EventIds are invalid.' -PrintJson\n                            }\n\n                            $count = [int]$rangeIds[1] - [int]$rangeIds[0]\n                            For ($i=0; $i -le $count; $i++) {\n                                $eventIdsToQuery.Add([int]$rangeIds[0] + [int]$i)\n                            }\n                        } else {\n                            $eventIdsToQuery.Add($id)\n                        }\n                    }\n\n                    $whereObject = {$_.RecordId -lt $recordId -and $_.Id -in $eventIdsToQuery}\n                    Get-WinEvent -FilterHashTable $filterHashTable -ErrorAction Stop | Where-Object $whereObject | Select-Object @properties\n                } else {\n                    Get-WinEvent -FilterHashTable $filterHashTable -ErrorAction Stop | Where-Object RecordId -lt $recordId | Select-Object @properties\n                }\n            } catch [Exception] {\n                if (($_.Exception -match \"No events were found that match the specified selection criteria\") -Or ($_.Exception -match \"There is not an event provider on the localhost computer that matches*\")) {\n                    Write-Output \"0 events found.\"\n                } else {\n                    Write-Output $_.Exception\n                    exit 1\n                }\n            }\n        }\n\n        $processItems = @{\n            ScriptBlock              = $scriptblock\n            ConvertNextTokenToBase64 = $true\n            ChunksPerLoop            = 1\n            EnableCompression        = $enableCompression\n            MaximumOutputBytes       = $maximumOutputBytes\n            PaginationProperty       = '.'\n            PropertyToTruncate       = 'Message'\n            StringReplacementRegex   = @('\\\"\\\\\\/Date\\((\\d+)\\)\\\\\\/\\\"', '\"$1\"')\n        }\n    }\n}\n\nProcessItems @processItems\n"
        ]
      }
    }
  ]
}
