{
  "schemaVersion": "1.0",
  "templateBody": {
    "Parameters": {
      "QSType": {
        "Type": "String",
        "Description": "(Required) Specifies whether the Quick Setup applies to the local account or an AWS organization.",
        "AllowedValues": [
          "TA"
        ]
      },
      "QSConfigurationId": {
        "Type": "String",
        "Description": "(Required) Unique identifier of the deployed configuration."
      },
      "QSVersion": {
        "Type": "String",
        "Default": "1.0",
        "Description": "(Required) Version of the deployed configuration."
      },
      "QSPrincipalOrgId": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The ID of the principal organization your management account operates in."
      },
      "DelegatedAccountId": {
        "Type": "String",
        "AllowedPattern": "^\\d{12}$",
        "Description": "(Required) The ID of the member account in your organization you want to register as a delegated administrator."
      },
      "QSGlobalResourcesRegion": {
        "Type": "String",
        "Description": "(Required) Name of the AWS Region to deploy global resources such as IAM Roles"
      }
    },
    "Resources": {
      "OpsCenterMemberAccountLambdaTrigger": {
        "Type": "Custom::OpsCenterMemberAccountLambdaTrigger",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "OpsCenterMemberAccountLambdaFunction",
              "Arn"
            ]
          },
          "VersionAttribute": {
            "Ref": "QSVersion"
          }
        }
      },
      "OpsCenterMemberAccountLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::Sub": "AWS-QuickSetup-OpsCenterMemberAccountLambdaFunction-${QSConfigurationId}"
                },
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "Description": "Lambda Function that handles cross acount admin",
          "Code": {
            "ZipFile": "import cfnresponse\nimport boto3\nimport json\nimport os\nfrom botocore.exceptions import ClientError\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n# Events sent in by CloudFormation\nCREATE = 'Create'\nUPDATE = 'Update'\nDELETE = 'Delete'\n\nsession = boto3.session.Session()\nregion = session.region_name\npartition = session.get_partition_for_region(region)\niam_client = boto3.client('iam', region_name=region)\n\nqs_config_id = os.environ['QSConfigId']\ndelegated_admin_account = os.environ['DelegatedAdminAccount']\naccount_id = os.environ['AccountId']\norganization_id = os.environ['OrganizationId']\nqs_version = os.environ['QuickSetupVersion']\n\ntags = [{'Key': 'QuickSetupID', 'Value': qs_config_id},\n        {'Key': 'QuickSetupType', 'Value': 'OpsCenter'},\n        {'Key': 'QuickSetupVersion', 'Value': qs_version}]\n\n\n''' \nThis method creates role, attaches a managed policy and inline policy, if any.\nIf role already exists and is created by QS, we will update the policy document.\n'''\ndef setup_customer_role_with_policies(role_name, assume_role_policy_doc, role_desc, managed_policy_arn_list, role_tags=()):\n    try:\n        iam_client.create_role(AssumeRolePolicyDocument = assume_role_policy_doc, Description=role_desc, RoleName=role_name, Tags=role_tags)\n        logger.info(f'Successfully created the role {role_name} {account_id}')\n        for managed_policy_arn in managed_policy_arn_list:\n            if managed_policy_arn:\n                iam_client.attach_role_policy(RoleName=role_name, PolicyArn=managed_policy_arn)\n        logger.info(f'Successfully created the role policy {role_name} {account_id}')\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\n            logger.info(f'Role={role_name} already exists. Reusing the role and trying to update the role policy')\n            if is_role_created_by_qs(role_name):\n                try:\n                    for managed_policy_arn in managed_policy_arn_list:\n                        if managed_policy_arn:\n                            iam_client.attach_role_policy(RoleName=role_name, PolicyArn=managed_policy_arn)\n                            logger.info(f'Successfully updated the role managed-policy for {role_name}')\n                        else:\n                            logger.info(f'No action taken as managed_policy_name to update is empty for {role_name}')\n\n                    if assume_role_policy_doc:\n                        iam_client.update_assume_role_policy(RoleName=role_name, PolicyDocument=assume_role_policy_doc)\n                        logger.info(f'Successfully updated the role assume-role-policy for {role_name}')\n                    else:\n                        logger.info('No action taken as assume_role_policy_doc to update is empty for {role_name}')\n\n                except ClientError as e:\n                    logger.exception(f'Encountered error:{ str(e)}')\n                    raise e;\n        elif e.response['Error']['Code'] == 'UnmodifiableEntityException':\n            logger.info(f'Policy: {managed_policy_arn} already attached to role: {role_name} {account_id}, no action taken')\n        else:\n            logger.exception(f'Role={role_name} creation failed. Error is {str(e)}')\n            raise e;\n\n'''\nChecks if given role_name is created by QS by validating the tags\n'''\ndef is_role_created_by_qs(role_name):\n    role_tags = iam_client.list_role_tags(RoleName=role_name)['Tags']\n    return any(tag['Key'] == 'QuickSetupID' for tag in role_tags)\n\n\n'''\nCreates customer managed policy. If policy already exists, we reuse the existing policy.\n'''\ndef create_customer_managed_policy(policy_name, policy_document, description, policy_tags):\n    try:\n        customer_managed_policy = iam_client.create_policy(PolicyName=policy_name, PolicyDocument=policy_document, Description=description,Tags=policy_tags)\n        return customer_managed_policy.get('Policy').get('Arn')\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\n            logger.info(f'Policy={policy_name} already exists. Reusing the role')\n            return 'arn:%s:iam::%s:policy/%s'%(partition, account_id, policy_name)\n        else:\n            logger.exception(f'Policy={policy_name} creation failed. Error is {str(e)}')\n            raise e\n\n\n'''\nThis method creates AWS-SystemsManager-AutomationExecutionRole role\n'''\ndef setup_automation_execution_role():\n    #If current account is DA, don't create this role.\n    if account_id == delegated_admin_account:\n        return\n    principal_arns =[f'arn:{partition}:iam::{delegated_admin_account}:role/AWS-SystemsManager-AutomationAdministrationRole']\n\n    role_name = 'AWS-SystemsManager-AutomationExecutionRole'\n    desc = 'Configure the AWS-SystemsManager-AutomationAdministrationRole to enable use of AWS Systems Manager Cross Account/Region Automation execution.'\n\n    policy_doc = json.dumps({\n        'Version': '2012-10-17',\n        'Statement': [\n            {\n                'Effect': 'Allow',\n                'Principal': {\n                    'AWS': principal_arns\n                },\n                'Condition': {\n                    'StringEquals': {\n                        'aws:PrincipalOrgID': organization_id\n                    }\n                },\n                'Action': 'sts:AssumeRole'\n            },\n            {\n                'Effect': 'Allow',\n                'Principal': {\n                    'Service': 'ssm.amazonaws.com'\n                },\n                'Action': 'sts:AssumeRole'\n            }\n        ]\n    })\n\n    aws_managed_policy_arn = f'arn:{partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole'\n\n    inline_policy_resource = f'arn:{partition}:iam::{account_id}:role/AWS-SystemsManager-AutomationExecutionRole'\n    managed_policy_name = 'AWSSystemsManagerAutomationExecutionRole-ExecutionPolicy'\n    managed_policy_doc = json.dumps({\n        'Version': '2012-10-17',\n        'Statement': [\n            {\n                'Effect': 'Allow',\n                'Action': [\n                    'resource-groups:ListGroupResources',\n                    'tag:GetResources',\n                    'ec2:DescribeInstances'\n                ],\n                'Resource': '*'\n            },\n            {\n                'Effect': 'Allow',\n                'Action': [\n                    'iam:PassRole'\n                ],\n                'Resource': inline_policy_resource\n            }\n        ]\n    })\n\n    managed_policy_arn = create_customer_managed_policy(managed_policy_name, managed_policy_doc, '', tags)\n    setup_customer_role_with_policies(role_name, policy_doc, desc,[managed_policy_arn, aws_managed_policy_arn] , tags)\n\n\n'''\nThis method creates OpsItem-CrossAccountExecutionRole role\n'''\ndef setup_opsitem_crossaccount_execution_role():\n    #If current account is DA, don't create this role.\n    if account_id == delegated_admin_account:\n        return\n    admin_accounts = delegated_admin_account\n    principal_arns =[f'arn:{partition}:iam::{delegated_admin_account}:role/OpsItem-*Role*']\n\n    role_name = 'OpsItem-CrossAccountExecutionRole'\n    desc = 'Role used by the management account or delegated administrator to remediate OpsItems'\n    policy_doc = json.dumps({\n        'Version': '2012-10-17',\n        'Statement': [\n            {\n                'Effect': 'Allow',\n                'Principal': {\n                    'AWS': admin_accounts\n                },\n                'Condition': {\n                    'StringLike': {\n                        'aws:PrincipalArn': principal_arns\n                    }\n                },\n                'Action': 'sts:AssumeRole'\n            }\n        ]\n    })\n    managed_policy_arn = 'arn:%s:iam::aws:policy/ReadOnlyAccess'%(partition)\n    setup_customer_role_with_policies(role_name, policy_doc, desc, [managed_policy_arn], tags)\n\n\n'''\nCalls PutResourcePolicy API from SSM client\n'''\ndef put_resource_policy(ssm_client, sid, resource_arn, policy_doc):\n    try:\n        ssm_client.put_resource_policy(ResourceArn=resource_arn, Policy=policy_doc);\n        logger.info('Successfully created ResourceBasedPolicy');\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourcePolicyLimitExceededException':\n            resource_policies=ssm_client.get_resource_policies(ResourceArn=resource_arn)['Policies']\n            for rbp in resource_policies:\n                if sid in rbp['Policy']:\n                    policy_id=rbp['PolicyId']\n                    policy_hash=rbp['PolicyHash']\n                    ssm_client.put_resource_policy(ResourceArn=resource_arn, Policy=policy_doc, PolicyHash=policy_hash, PolicyId=policy_id);\n                    logger.info(f'Successfully updated the policy document for ResourceBasedPolicy')\n                else:\n                    logger.exception(f'ResourceBasedPolicy already exists.Error is {str(e)}')\n                    raise e\n        else:\n            logger.exception(f'ResourceBasedPolicy creation failed. Error is {str(e)}')\n            raise e\n\n\n'''\nDeploys OpsItem Resource Based Policy(RBP) in member accounts\n'''\ndef setup_opsItem_crossaccount_rbp(ssm_client):\n    #If current account is DA, don't create this role.\n    if account_id == delegated_admin_account:\n        return\n\n    resource_arn = f'arn:{partition}:ssm:{region}:{account_id}:opsitemgroup/default'\n    sid=f'AllowAdminAccountsToAccessOpsItems-QS-{qs_config_id}'\n    admin_accounts = f'\"{delegated_admin_account}\"'\n\n    resource_arns = f'[\"arn:{partition}:ssm:{region}:{account_id}:opsitem/*\",\"arn:{partition}:ssm:{region}:{account_id}:opsitemgroup/default\"]'\n\n    policy_doc='{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"'+sid+'\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":'+admin_accounts+'},\"Resource\":'+resource_arns+',\"Action\":[\"ssm:CreateOpsItem\",\"ssm:AddTagsToResource\",\"ssm:GetOpsItem\",\"ssm:UpdateOpsItem\"]}]}'\n\n    put_resource_policy(ssm_client, sid,resource_arn, policy_doc)\n\n\n'''\nCalls DeleteResourcePolicy API from SSM client\n'''\ndef delete_crossaccount_rbp(client, arn, policy_id, policy_hash):\n    client.delete_resource_policy(ResourceArn=arn,PolicyId=policy_id,PolicyHash=policy_hash)\n    logger.info('Successfully deleted ResourceBasedPolicy')\n\n'''\nDeletes OpsItem Resource Based Policy(RBP) in member accounts\n'''\ndef delete_opsItem_crossaccount_rbp(ssm_client):\n    resource_arn = f'arn:{partition}:ssm:{region}:{account_id}:opsitemgroup/default'\n    sid=f'AllowAdminAccountsToAccessOpsItems-QS-{qs_config_id}'\n    resource_policies=ssm_client.get_resource_policies(ResourceArn=resource_arn)['Policies']\n    #Currently there exist only one policy per region per account.\n    [delete_crossaccount_rbp(ssm_client, resource_arn, rbp['PolicyId'], rbp['PolicyHash']) for rbp in resource_policies if sid in rbp['Policy']]\n\n\n'''\nThis method deletes OpsItem-CrossAccountExecutionRole role\n'''\ndef delete_opsitem_crossaccount_execution_role():\n    #If current account is DA ,then OpsItemExecutionRole is not created.So Skip deletion\n    if account_id == delegated_admin_account:\n        return;\n    role_name = 'OpsItem-CrossAccountExecutionRole'\n    managed_policy_arn = 'arn:%s:iam::aws:policy/ReadOnlyAccess'%(partition)\n    try:\n        if is_role_created_by_qs(role_name):\n            logger.info(f'{role_name} Role is created by QS')\n            iam_client.detach_role_policy(RoleName=role_name, PolicyArn=managed_policy_arn)\n            iam_client.delete_role(RoleName=role_name)\n            logger.info(f'{role_name} is deleted')\n        else:\n            logger.info(f'{role_name} is not created by QS')\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'NoSuchEntity':\n            logger.info(f'Role={role_name} is already deleted.')\n        elif e.response['Error']['Code'] == 'UnmodifiableEntity':\n            logger.info(f'Role: {role_name}  cannot be deleted or policy cannot be detached becuase of {str(e)}')\n        else:\n            logger.exception(f'Role={role_name} deletion failed. Error is {str(e)}')\n            raise e\n\n\ndef lambda_handler(event, context):\n    request_type = event.get('RequestType')\n    if not delegated_admin_account:\n        error_message = 'Delegated Administrator is a required field'\n        cfnresponse.send(event, context, cfnresponse.FAILED, None, 'OpsCenterMemberCustomResources', reason = error_message)\n        raise Exception(error_message)\n\n    # We create IAM roles as part of deployment to region set in GlobalResourcesRegion parameter. Default : us-east-1\n    global_resources_region = os.environ['GlobalResourcesRegion']\n\n    try:\n        ssm_client = boto3.client('ssm', region_name = region)\n        if request_type == CREATE:\n            logger.info('Create Event is triggered')\n            if region == global_resources_region:\n                setup_opsitem_crossaccount_execution_role()\n                setup_automation_execution_role()\n            setup_opsItem_crossaccount_rbp(ssm_client)\n        elif request_type == DELETE:\n            logger.info('Delete Event is triggered')\n            if region == global_resources_region:\n                # AutomationRoles are never deleted , since these can be used by other SSM services.\n                delete_opsitem_crossaccount_execution_role()\n            else:\n                logger.info(f'Resources are cleaned up in {global_resources_region}')\n            delete_opsItem_crossaccount_rbp(ssm_client)\n        elif request_type == UPDATE:\n            #Currently the update scenarios that we anticipate any bug fixes\n            logger.info('Update Event is triggered')\n            if region == global_resources_region:\n                setup_opsitem_crossaccount_execution_role()\n                setup_automation_execution_role()\n            setup_opsItem_crossaccount_rbp(ssm_client)\n\n        else:\n            logger.info(f'Unknown operation: {request_type}')\n        #CloudFormation compares the physical resource id you return by your Lambda function to the one returned previously.\n        #If the IDs are different, CloudFormation assumes the resource has been replaced with a new resource.\n        #When the resource update logic completes successfully, a Delete request is sent with the old physical resource id.\n        #If the stack update fails and a rollback occurs, the new physical resource id is sent in the Delete event.\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, None, 'OpsCenterMemberCustomResources')\n        return cfnresponse.SUCCESS\n    except Exception as e:\n        error_reason = f'{str(e)}. See the details in CloudWatch Log Stream: {context.log_stream_name} in Log Group {context.log_group_name}'\n        cfnresponse.send(event, context, cfnresponse.FAILED, None, 'OpsCenterMemberCustomResources', reason = error_reason)\n        raise e\n"
          },
          "Runtime": "python3.11",
          "Handler": "index.lambda_handler",
          "Role": {
            "Fn::GetAtt": [
              "OpsCenterMemberAccountLambdaRole",
              "Arn"
            ]
          },
          "Environment": {
            "Variables": {
              "QSConfigId": {
                "Ref": "QSConfigurationId"
              },
              "AccountId": {
                "Ref": "AWS::AccountId"
              },
              "DelegatedAdminAccount": {
                "Ref": "DelegatedAccountId"
              },
              "QuickSetupVersion": {
                "Ref": "QSVersion"
              },
              "OrganizationId": {
                "Ref": "QSPrincipalOrgId"
              },
              "GlobalResourcesRegion": {
                "Ref": "QSGlobalResourcesRegion"
              }
            }
          },
          "Timeout": 300
        }
      },
      "OpsCenterMemberAccountLambdaLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "LogGroupName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::Sub": "/aws/lambda/AWS-QuickSetup-OpsCenterMemberAccountLambdaFunction-${QSConfigurationId}"
                },
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "RetentionInDays": 3653
        },
        "DeletionPolicy": "Retain"
      },
      "OpsCenterMemberAccountLambdaRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "AWS-QuickSetup-OpsCenterMemberRole-${QSConfigurationId}-${AWS::Region}"
          },
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "LambdaPolicy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "AllowLambdaInvoke",
                    "Effect": "Allow",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "-",
                          [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AWS-QuickSetup-OpsCenterMemberAccountLambdaFunction-${QSConfigurationId}"
                            },
                            {
                              "Fn::Select": [
                                3,
                                {
                                  "Fn::Split": [
                                    "-",
                                    {
                                      "Fn::Select": [
                                        2,
                                        {
                                          "Fn::Split": [
                                            "/",
                                            {
                                              "Ref": "AWS::StackId"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ],
                    "Action": [
                      "lambda:InvokeFunction"
                    ]
                  },
                  {
                    "Sid": "IAMRoleLimitedAccess",
                    "Effect": "Allow",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationExecutionRole"
                      },
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/OpsItem-CrossAccountExecutionRole"
                      }
                    ],
                    "Action": [
                      "iam:CreateRole",
                      "iam:DeleteRole",
                      "iam:TagRole",
                      "iam:UpdateAssumeRolePolicy",
                      "iam:ListRoleTags"
                    ]
                  },
                  {
                    "Sid": "IAMPolicyLimitedAccess",
                    "Effect": "Allow",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/AWSSystemsManagerAutomationExecutionRole-ExecutionPolicy"
                      }
                    ],
                    "Action": [
                      "iam:CreatePolicy",
                      "iam:TagPolicy",
                      "iam:DeletePolicy",
                      "iam:ListPolicyTags"
                    ]
                  },
                  {
                    "Sid": "IAMRolePolicyLimitedAccess1",
                    "Effect": "Allow",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/OpsItem-CrossAccountExecutionRole"
                      }
                    ],
                    "Condition": {
                      "ArnEquals": {
                        "iam:PolicyARN": {
                          "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess"
                        }
                      }
                    },
                    "Action": [
                      "iam:AttachRolePolicy",
                      "iam:DetachRolePolicy"
                    ]
                  },
                  {
                    "Sid": "IAMRolePolicyLimitedAccess2",
                    "Effect": "Allow",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationExecutionRole"
                      }
                    ],
                    "Condition": {
                      "ArnEquals": {
                        "iam:PolicyARN": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/AWSSystemsManagerAutomationExecutionRole-ExecutionPolicy"
                          }
                        ]
                      }
                    },
                    "Action": [
                      "iam:AttachRolePolicy",
                      "iam:DetachRolePolicy"
                    ]
                  },
                  {
                    "Sid": "AllowLogging",
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AWS-QuickSetup-OpsCenterMemberAccountLambdaFunction-${QSConfigurationId}-"
                            },
                            {
                              "Fn::Select": [
                                3,
                                {
                                  "Fn::Split": [
                                    "-",
                                    {
                                      "Fn::Select": [
                                        2,
                                        {
                                          "Fn::Split": [
                                            "/",
                                            {
                                              "Ref": "AWS::StackId"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            ":*"
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "Sid": "SSMLimitedAccess",
                    "Effect": "Allow",
                    "Resource": "*",
                    "Action": [
                      "ssm:PutResourcePolicy",
                      "ssm:GetResourcePolicies",
                      "ssm:DeleteResourcePolicy"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
