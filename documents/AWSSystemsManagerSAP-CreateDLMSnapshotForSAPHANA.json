{
  "schemaVersion": "2.2",
  "description": "AWS Dynamic Lifecycle Manager (DLM) script for SAP HANA databases",
  "parameters": {
    "executionId": {
      "type": "String",
      "description": "(Required) Specifies the unique identifier associated with a pre and/or post execution",
      "allowedPattern": "^[A-Za-z0-9]{8}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{12}"
    },
    "command": {
      "type": "String",
      "description": "(Required) Specifies whether pre-script and/or post-script should be executed.",
      "allowedValues": [
        "pre-script",
        "post-script",
        "dry-run"
      ]
    },
    "executionTimeout": {
      "type": "String",
      "default": "120",
      "description": "(Optional) value of ExecutionTimeout configured in DLM policy under script Default is 120 seconds. Maximum is 120 seconds. Minimum is 10 seconds.",
      "allowedPattern": "^(1[0-1][0-9]|120|\\d{2})$"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "description": "Run DLM SAP HANA Database commands",
      "name": "sap_hana_snapshot",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\nset -o pipefail\n\n###=================================================================###\n### Global variables\n###=================================================================###\ndeclare -a HANA_DATA_FS\nSTART=$(date +%s)\nRETRY=3\nTIMEOUT=3\nOPERATION={{ command }}\nEXECUTION_ID={{ executionId }}\nREGION=${AWS_SSM_REGION_NAME}\nFILE_TIMESTAMP=$(date +'%d%m%y%H%M%S')\nLOG_DIR=\"/var/log/amazon/dlm_snapshots\"\nLOG=${LOG_DIR}/aws_dlm_snapshot_${OPERATION}_${FILE_TIMESTAMP}.log\nHOSTNAME=$(hostname)\nSAPCONTROL_BIN=\"/usr/sap/hostctrl/exe/sapcontrol\"\nSAPHOSTCTRL_BIN=\"/usr/sap/hostctrl/exe/saphostctrl\"\nHANA_SID=\"\"\nSYSTEMNO=\"\"\nSIDADM=\"\"\n\nget_command() {\n  local command=$1\n  test -x \"$(which ${command} 2>/dev/null)\"\n}\n\ncheck_binary() {\n  command=$1\n  if  ! get_command ${command}  ; then\n    log \"ERROR: Setup problem: couldn't find command: $1\"\n    exit 1\n  else\n    log \"SUCCESS: Located \\\"${command}\\\" command\"\n  fi\n}\n\ncheck_os_reqs() {\n  check_binary ${SAPHOSTCTRL_BIN}\n  check_binary ${SAPCONTROL_BIN}\n  check_binary mpstat\n}\n\nfind_sap_instance() {\n  SAPHOSTCTRL_DISCOVERY=$(${SAPHOSTCTRL_BIN} -function GetCIMObject -enuminstances SAPInstance -format flat)\n  declare -A SAPHOSTCTRL_ENTRY=()\n\n  while IFS=' , ' read saphostctrl_column _ saphostctrl_value; do\n    if [[ ${saphostctrl_column} =~ ^\\* ]]; then\n      if [[ ${SAPHOSTCTRL_ENTRY[InstanceType]} == \"Hana Instance\" ]]; then\n        break\n      else\n        continue\n      fi\n    else\n      SAPHOSTCTRL_ENTRY[${saphostctrl_column}]=${saphostctrl_value}\n    fi\n  done  <<< \"${SAPHOSTCTRL_DISCOVERY}\"\n\n  HANA_SID=${SAPHOSTCTRL_ENTRY[SID]}\n  SYSTEMNO=${SAPHOSTCTRL_ENTRY[SystemNumber]}\n  SIDADM=$(echo ${HANA_SID,,})adm\n\n}\n\nlog() {\n  LOG_TIMESTAMP=$(date '+%b %d %H:%M:%S')\n\n  if [[ ! -d ${LOG_DIR} ]]; then\n    mkdir -p ${LOG_DIR}\n  fi\n  echo -e \"${LOG_TIMESTAMP} $*\" | tee -a ${LOG}\n}\n\ncheck_log() {\n  # Strategy for storing the LOGS\n  log \"SUCCESS: Initiating log file\"\n  if [ $? != 0 ]; then\n    log \"ERROR: Unable to write to log. retval=${rc}\"\n    exit 201\n  fi\n}\n\ncheck_db_creds() {\n    # Set the secret name. Customer will need to set this in secrets manager\n    HDBUSERSTORE_BIN=\"/usr/sap/${HANA_SID}/HDB${SYSTEMNO}/exe/hdbuserstore\"\n    HDB_USER_KEY=\"DLM_HANADB_SNAPSHOT_USER\"\n    CMD=\"sudo -u ${SIDADM} -i ${HDBUSERSTORE_BIN} List ${HDB_USER_KEY}\"\n    local RESULT\n    RESULT=$(${CMD} 2>&1)\n\n    # Get the return code\n    local retval=$?\n\n    # Check if the return code indicates success (0) or an error\n    if [ ${retval} -ne 0 ]; then\n      log \"ERROR: hdbuserstore key ${HDB_USER_KEY} not found. rc=${retval}\"\n      exit 201\n    else\n      HDBSQL_SYS=\"hdbsql -nocmdstats -j -quiet -n localhost -i ${SYSTEMNO} -U ${HDB_USER_KEY} -d SystemDB\"\n    fi\n}\n\nsidadm_test() {\n  WHOAMI=$(sudo su - ${SIDADM} -c whoami)\n  if [ ${WHOAMI} == ${SIDADM} ]; then\n    log \"SUCCESS: Can access sidadm user ${SIDADM}\"\n  else\n    log \"ERROR: unable to su to the sidadm user ${SIDADM}\"\n  \texit 201\n  fi\n}\n\nsapcontrol_check() {\n  SAPCNTRL_CHECK=$(sudo su - ${SIDADM} -c \"${SAPCONTROL_BIN} -nr ${SYSTEMNO} -function CheckHostAgent\")\n  rc=$?\n  if [ ${rc} != 0 ]; then\n    log \"ERROR: Not possible to find sapcontrol. Ensure the saphost agent is running. retval=${rc}\"\n    exit 201\n  fi\n}\n\ncheck_mem() {\n  COUNTER=0\n  RAM_THRESHOLD=2\n\n  while true; do\n    MEM_TOTAL=$(grep MemTotal: /proc/meminfo | awk '{ print $2 }')\n    MEM_AVAILABLE=$(grep MemAvailable: /proc/meminfo | awk '{ print $2 }')\n    PERCENT_FREE=$(echo \"(${MEM_AVAILABLE}*100)/${MEM_TOTAL}\" | bc)\n\n    if [[ ${PERCENT_FREE} -gt ${RAM_THRESHOLD} ]]; then\n      log \"SUCCESS: RAM is ${PERCENT_FREE}% free. Proceeding.\"\n      break\n    elif [[ ${PERCENT_FREE} -lt ${RAM_THRESHOLD} && ${COUNTER} -lt ${RETRY} ]]; then\n      log \"WARN: RAM is ${PERCENT_FREE}% free. Sleeping for ${RETRY} seconds before retrying\"\n      COUNTER=$((${COUNTER} +1))\n      sleep ${TIMEOUT}                     # The time is counts up to 6 seconds (3 seconds * 2 retries)\n      log \"WARN: Retry ${COUNTER}\"         # doubtful that a memory condition will fix itself it short period of time\n    else\n      log \"ERROR: RAM is ONLY ${PERCENT_FREE}% free. Max retries reached. Cancelling snapshot\"\n      exit 201\n    fi\n  done\n}\n\ncheck_cpu() {\n  COUNTER=0\n  CPU_THRESHOLD=2\n\n  while true; do\n    IDLE_CPU=$(mpstat 1 1 | tail -1 | awk '{ printf \"%.2d\\n\", $NF }' 2>&1)\n    rc=$?\n    if [[ ${rc} -ne 0 ]]; then\n      log \"ERROR: Unable to check CPU utilization. ${IDLE_CPU}\"\n      exit 201\n    fi\n\n    if [[ -z ${IDLE_CPU} || ${IDLE_CPU} =~ [a-z] ]]; then\n      log \"WARN: Unable to check CPU utilization. Proceeding\"\n      break\n    elif [[ ${IDLE_CPU} -gt ${CPU_THRESHOLD} ]]; then\n      log \"SUCCESS: CPU is ${IDLE_CPU}% free. Proceeding.\"\n      break\n    elif [[ ${IDLE_CPU} -lt ${CPU_THRESHOLD} && ${COUNTER} -lt ${RETRY} ]]; then\n      log \"WARN: CPU is ${IDLE_CPU}% free. Sleeping for ${RETRY} seconds before retrying\"\n      COUNTER=$((${COUNTER} +1))\n      sleep ${TIMEOUT}\n      log \"WARN: Retry ${COUNTER}\"\n    else\n      log \"ERROR: CPU is ${IDLE_CPU}% busy. Max retries reached. Cancelling snapshot\"\n      exit 201\n    fi\n  done\n}\n\ncheck_db() {\n  DB_STATUS=$(sudo su - ${SIDADM} -c \"${SAPCONTROL_BIN} -nr ${SYSTEMNO} -function GetProcessList | tail -n +6 | awk '/GRAY|YELLOW/'\")\n\n  if [[ -z ${DB_STATUS} ]]; then\n\t  log \"SUCCESS: SAP HANA is up and running and sapcontrol checks are GREEN\"\n  else\n\t  log \"ERROR: DB is not running. Unable to perform snapshot!\"\n\t  exit 201\n  fi\n}\n\nlist_hana_data_fs() {\n  while read -r each ; do\n    if [[ ${each} =~ \\/hana/\\data ]]; then\n      FS_TYPE=$(echo ${each} | awk '{ print $3 }')\n      FS_PATH=$(echo ${each} | awk '{ print $2 }')\n      if [[ ${FS_TYPE} == \"xfs\" ]]; then\n        HANA_DATA_FS+=(${FS_PATH})\n      else\n        log \"ERROR: Incorrect filesystem type for ${FS_PATH}. Unable to freeze filesystems. Aborting snapshot\"\n        exit 201\n      fi\n    fi\n  done < /proc/mounts\n}\n\nunfreeze_fs() {\n  if [[ ${#HANA_DATA_FS[@]} -ne 0 ]]; then\n    for fs in ${HANA_DATA_FS[@]}; do\n      UNFREEZE_MSG=$(xfs_freeze -u ${fs} 2>&1)\n      rc=$?\n      if [[ ${rc} -ne 0 && ${UNFREEZE_MSG} =~ \"cannot unfreeze filesystem mounted\" ]]; then\n        log \"INFO: Filesystem already unfrozen\"\n      elif [[ ${rc} -ne 0 ]]; then\n        log \"ERROR: Error while unfreezing filesystem ${fs}\"\n      elif [[ ${rc} -eq 0 ]]; then\n        log \"INFO: Filesystem has been unfrozen\"\n      fi\n    done\n  else\n    log \"INFO: No filesystems found to unfreeze.\"\n  fi\n}\n\nfreeze_fs() {\n  if [[ ${#HANA_DATA_FS[@]} -ne 0 ]]; then\n    for fs in ${HANA_DATA_FS[@]}; do\n      xfs_freeze -f ${fs}\n      rc=$?\n      if [ ${rc} -ne 0 ]; then\n        log \"ERROR: Error while freezing filesystem ${fs}. Trying to rollback\"\n        unfreeze_fs\n      else\n        log \"INFO: Freezing filesystem ${fs}\"\n      fi\n    done\n  else\n    log \"ERROR: No filesystems found to freeze. Aborting.\"\n    exit 201\n  fi\n}\n\nrun_hdbsql_query() {\n  local SQL_QUERY=\"$1\"\n\n  if [[ -z ${HDBSQL_SYS} ]]; then\n    log \"ERROR: Fatal error while trying to execute SQL Query. Missing SAP HANA credentials?\"\n    exit 206\n  fi\n  CMD=\"sudo -u ${SIDADM} -i ${HDBSQL_SYS} ${SQL_QUERY}\"\n  local RESULT\n  RESULT=$(${CMD} 2>&1)\n\n  local retval=$?\n\n  if [ ${retval} -ne 0 ]; then\n    log \"ERROR: Query execution failed with return code ${retval}\"\n    log \"ERROR: Message: ${RESULT}\"\n    exit ${retval}\n  fi\n\n  echo \"${RESULT}\"\n}\n\ncheck_tenant() {\n  log \"INFO: Checking tenant DB is running .......\"\n  local SQL_QUERY=\"SELECT ACTIVE_STATUS from M_DATABASES\"\n  local RESULT\n  local STATUS\n\n  RESULT=$(run_hdbsql_query \"SELECT ACTIVE_STATUS from M_DATABASES\")\n  STATUS=$(echo \"${RESULT}\" | awk 'FNR==2' | sed -e 's/\\\"//g')\n  if [[ ${STATUS} != \"YES\" ]]; then\n    log \"ERROR: Database is not running. Exiting script. DB must be running to take a snapshot backup.\"\n    exit 201\n  else\n    log \"SUCCESS: Database is running.\"\n  fi\n}\n\ncheck_running_backup() {\n  COUNTER=0\n  log \"INFO: Checking for running backup....\"\n  local SQL_QUERY_BKP_RUNNING=\"SELECT COUNT(*) FROM SYS.M_BACKUP_CATALOG WHERE STATE_NAME='running'\"\n  local SQL_QUERY_BKP_PREPARED=\"SELECT COUNT(*) FROM SYS.M_BACKUP_CATALOG where STATE_NAME='prepared'\"\n  local RESULT\n  local BACKUP_CHECK\n  local SNAP_CHECK\n  local RUNNING_BACKUP\n\n  while [[ ${BACKUP_CHECK} != 0 || ${SNAP_CHECK} != 0 ]]; do\n    # Check the type of backup that is running\n    RESULT=$(run_hdbsql_query \"${SQL_QUERY_BKP_RUNNING}\")\n    BACKUP_CHECK=$(echo \"${RESULT}\" | awk 'FNR==2' | awk '{print $1}')\n    RESULT=$(run_hdbsql_query \"${SQL_QUERY_BKP_PREPARED}\")\n    SNAP_CHECK=$(echo \"${RESULT}\" | awk 'FNR==2' | awk '{print $1}')\n\n    if [[ ${BACKUP_CHECK} =~ ^[a-zA-Z] || ${SNAP_CHECK} =~ ^[a-zA-Z] ]]; then\n      exit 201\n    fi\n\n\t  if [[ ${BACKUP_CHECK} != 0 ]]; then\n\t\t  RUNNING_BACKUP=\"Database\"\n\t  elif [[ ${SNAP_CHECK} != 0 ]]; then\n\t\t  RUNNING_BACKUP=\"Snapshot\"\n\t  fi\n\n    if [[ ${BACKUP_CHECK} != 0 || ${SNAP_CHECK} != 0 ]]; then\n      log \"WARN: ${RUNNING_BACKUP} backup is currently running. Sleeping for ${TIMEOUT} seconds\"\n      sleep ${TIMEOUT}\n      if [[ ${COUNTER} -eq ${RETRY} ]]; then\n        log \"WARN: The maximum number of retries has been reached\".\n        exit 201\n      else\n        COUNTER=$((${COUNTER} + 1))\n        log \"INFO: Retry ${COUNTER}\"\n      fi\n    else\n      log \"SUCCESS: No backups running\"\n      break\n    fi\n  done\n}\n\nsnap_db() {\n  local TIMESTAMP_SNAP=$(date +\\%F\\_%H\\%M)\n  local SQL_QUERY_CREATE_SNAP=\"BACKUP DATA FOR FULL SYSTEM CREATE SNAPSHOT COMMENT '${EXECUTION_ID}' TIMEOUT 30\"\n  local SQL_QUERY_SNAP_ID=\"SELECT BACKUP_ID FROM M_BACKUP_CATALOG WHERE ENTRY_TYPE_NAME = 'data snapshot' AND STATE_NAME = 'prepared' AND COMMENT = '${EXECUTION_ID}' order by SYS_START_TIME desc limit 1\"\n  local RESULT\n  local SNAPSHOTID\n  local rc\n\n  log \"INFO: Data snapshot backup started at ${TIMESTAMP_SNAP}\"\n\n  # Schedule Auto Thaw\n  # nohup bash -c execute_schedule_auto_thaw >> ${LOG} 2>&1 &\n\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_CREATE_SNAP}\")\n  rc=$?\n  if [ ${rc} != 0 ]; then\n    log \"ERROR: Savepoint creation failed. Please investigate. retval=${rc}\"\n    exit 201\n  fi\n\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_SNAP_ID}\")\n  rc=$?\n  if [ ${rc} != 0 ]; then\n    log \"ERROR: Getting SAP HANA snapshot id failed. Please investigate. retval=${rc}\"\n    exit 201\n  fi\n  SNAPSHOTID=$(echo \"${RESULT}\" | awk 'FNR==2')\n  if [[ ${SNAPSHOTID} =~ ^[0-9]+$ ]]; then\n    log \"INFO: HANA Snapshot ID: ${SNAPSHOTID}\"\n  else\n    log \"ERROR: Unable to pull the correct SAP HANA Snapshot ID. Returned ID: ${SNAPSHOTID}\"\n  fi\n}\n\nschedule_auto_thaw() {\n  nohup bash -c execute_schedule_auto_thaw >> ${LOG} 2>&1 &\n}\n\n###=================================================================###\n### Take DB out of backup mode\n###=================================================================###\n\nthaw_db() {\n  log \"INFO: Attempting to END DB snapshot at $(date)\"\n  local SNAPSHOTID\n  local RESULT\n  local SQL_QUERY_PENDING_SNAP=\"SELECT BACKUP_ID FROM M_BACKUP_CATALOG WHERE ENTRY_TYPE_NAME = 'data snapshot' AND STATE_NAME = 'prepared' AND COMMENT = '${EXECUTION_ID}' order by SYS_START_TIME desc limit 1\"\n  local SQL_QUERY_CONFIRM_SNAP=\"SELECT ENTRY_ID FROM M_BACKUP_CATALOG WHERE ENTRY_TYPE_NAME = 'data snapshot' AND COMMENT = '${EXECUTION_ID}'\"\n\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_PENDING_SNAP}\")\n  SNAPSHOTID=$(echo \"${RESULT}\" | awk 'FNR==2')\n\n  if [[ ${SNAPSHOTID} =~ ^[0-9]+$ ]]; then\n     log \"INFO: HANA Snapshot ID: ${SNAPSHOTID}\"\n     local SQL_QUERY_THAW_SUCCESS=\"BACKUP DATA FOR FULL SYSTEM CLOSE SNAPSHOT BACKUP_ID ${SNAPSHOTID} SUCCESSFUL '${EXECUTION_ID}'\"\n  else\n     log \"ERROR: Unable to pull the correct SAP HANA Snapshot ID. Returned ID: ${SNAPSHOTID}\"\n     force_thaw\n  fi\n\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_THAW_SUCCESS}\")\n  rc=$?\n  if [ ${rc} != 0 ]; then\n    log \"WARN: Confirm Savepoint failed. Possibly due to already running snapshot. retval=${rc}\"\n    force_thaw\n  fi\n\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_CONFIRM_SNAP}\")\n  SNAPSHOTID_CONFIRM=$(echo \"${RESULT}\" | awk 'FNR==2')\n  rc=$?\n\n  if [ ${rc} != 0 ]; then\n    log \"ERROR: Backup not found. Please check system to investigate. retval=${rc}\"\n    exit 201\n  fi\n\n  if [[ ${SNAPSHOTID_CONFIRM} =~ ^[0-9]+$ ]]; then\n    log \"SUCCESS: Snapshot confirmed\"\n  else\n    log \"ERROR: Unable to confirm Snapshot success\"\n    exit 201\n  fi\n}\n\nforce_thaw() {\n  local _caller=$1\n  if [[ ${_caller} == \"auto_thaw\" ]]; then\n    check_db_creds\n  fi\n  log \"WARN: Attempting to FORCE END DB snapshot\"\n\n  local SQL_QUERY_PENDING_SNAP=\"SELECT BACKUP_ID FROM M_BACKUP_CATALOG WHERE ENTRY_TYPE_NAME = 'data snapshot' AND STATE_NAME = 'prepared' AND COMMENT = '${EXECUTION_ID}' order by SYS_START_TIME desc limit 1\"\n  RESULT=$(run_hdbsql_query \"${SQL_QUERY_PENDING_SNAP}\")\n  SNAPSHOTID=$(echo \"${RESULT}\" | awk 'FNR==2')\n\n  if [[ ${SNAPSHOTID} =~ ^[0-9]+$ ]]; then\n    log \"INFO: HANA Snapshot ID: ${SNAPSHOTID}\"\n  else\n    log \"ERROR: Unable to pull the correct SAP HANA Snapshot ID. Returned ID: ${SNAPSHOTID}\"\n    exit 202\n  fi\n\n  local SQL_QUERY_FORCE_CLOSE_SNAP=\"BACKUP DATA FOR FULL SYSTEM CLOSE SNAPSHOT BACKUP_ID ${SNAPSHOTID} UNSUCCESSFUL\"\n\n  if [[ ${SNAPSHOTID} =~ ^[0-9]+$ ]]; then\n    RESULT=$(run_hdbsql_query \"${SQL_QUERY_FORCE_CLOSE_SNAP}\")\n    rc=$?\n    if [ ${rc} != 0 ]; then\n      log \"ERROR: Savepoint failed. retval=${rc}\"\n      exit 202\n    else\n      log \"INFO: Force thaw executed for SAP HANA Snapshot Id ${SNAPSHOTID}\"\n      if [[ ${_caller} == \"auto_thaw\" ]]; then\n        exit 203\n      fi\n    fi\n  else\n    log \"ERROR: Invalid SNAPSHOT_ID returned: '${SNAPSHOTID}'\"\n    exit 202\n  fi\n\n}\n\nexecute_disable_auto_thaw() {\n  log \"INFO: Attempting to disable auto thaw\"\n  auto_thaw_pgid=$(pgrep -f execute_schedule_auto_thaw | xargs -i ps -hp {} -o pgid)\n  if [[ -n ${auto_thaw_pgid} ]]; then\n    log \"INFO: execute_schedule_auto_thaw process found with pgid ${auto_thaw_pgid}\"\n    pkill -g ${auto_thaw_pgid}\n    rc=$?\n    if [ ${rc} != 0 ]; then\n      log \"ERROR: Unable to kill execute_schedule_auto_thaw process. retval=${rc}\"\n      exit 202\n    else\n      log \"INFO: execute_schedule_auto_thaw has been disabled\"\n    fi\n  fi\n}\n\nexecute_schedule_auto_thaw() {\n  sleep 122\n  find_sap_instance\n  list_hana_data_fs\n  unfreeze_fs\n  force_thaw auto_thaw\n}\n\n###=================================================================###\n### Debug function\n###=================================================================###\n\ndebug() {\n  log \"Debug function will output all of the variables and checks but perform no admin action \"\n  set -x\n}\n\nexecute_pre_script() {\n  #debug\n  check_log\n  check_os_reqs\n  find_sap_instance\n  sidadm_test\n  check_mem\n  check_cpu\n  check_db\n  check_db_creds\n  check_tenant\n  check_running_backup\n  list_hana_data_fs\n  schedule_auto_thaw\n  snap_db\n  freeze_fs\n}\n\nexecute_post_script() {\n  check_log\n  check_os_reqs\n  find_sap_instance\n  check_db_creds\n  check_tenant\n  list_hana_data_fs\n  unfreeze_fs\n  thaw_db\n}\n\n###=================================================================###\n### Main Script Execution\n###=================================================================###\n\nexport FILE_TIMESTAMP\nexport REGION\nexport EXECUTION_ID\nexport SIDADM\nexport SYSTEMNO\nexport HANA_SID\nexport HANA_DATA_FS\nexport SAPCONTROL_BIN\nexport SAPHOSTCTRL_BIN\nexport SAPHOSTCTRL_DISCOVERY\nexport LOG_DIR\nexport LOG\nexport -f debug\nexport -f find_sap_instance\nexport -f execute_schedule_auto_thaw\nexport -f execute_post_script\nexport -f run_hdbsql_query\nexport -f log\nexport -f list_hana_data_fs\nexport -f unfreeze_fs\nexport -f check_db_creds\nexport -f force_thaw\n\nlog \"INFO: DB Snapshot starting at $(date) with executionId: ${EXECUTION_ID}\"\n\ncase ${OPERATION} in\n  pre-script)\n    execute_pre_script\n    ;;\n  post-script)\n    execute_post_script\n    execute_disable_auto_thaw\n    ;;\n  dry-run)\n    log \"INFO: dry-run option invoked - taking no action\"\n    ;;\n  *)\n    log \"ERROR: Invalid operation. Please use pre-script, post-script, dry-run.\"\n    exit 1\n    ;;\nesac\n\nEND=$(date +%s)\n\nlog \"INFO: DB Snapshot completed at $(date). Total runtime: $((${END} - ${START})) seconds.\"\n"
        ]
      }
    }
  ]
}
