{
  "schemaVersion": "2.2",
  "description": "This document invokes the EC2 VSS Agent and executes the database restore process using application consistent snapshots created by AWS VSS. For optimal execution, we recommend that you invoke this document through the automation document 'AWSEC2-RestoreSqlServerDatabaseWithVss'.",
  "parameters": {
    "SourceDatabase": {
      "type": "String",
      "description": "(Required) Name of the database to restore.",
      "maxChars": 128,
      "allowedPattern": "^[a-zA-Z_@#][\\w@$#_]{0,127}$"
    },
    "TargetDatabase": {
      "type": "String",
      "default": "Db_restored",
      "description": "(Optional) Name of the new database to restore the source database to. The target database is placed side by side with the source database. If not specified and left empty, the source database's file paths are modified to point to snapshot files.",
      "maxChars": 128,
      "allowedPattern": "^([a-zA-Z_][\\w@$#_]{0,127})?$"
    },
    "SnapshotSetId": {
      "type": "String",
      "default": "",
      "description": "(Required) The VSS snapshot set id of the snapshot to use for recovery.",
      "maxChars": 36,
      "allowedPattern": "^(?:[{]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[}]?)?$"
    },
    "RestoreWithNorecovery": {
      "type": "String",
      "description": "(Required) Select True to leave the database in restoring state so that you can apply  transaction logs after the snapshot restore.",
      "allowedValues": [
        "True",
        "False"
      ],
      "default": "True"
    },
    "MetadataPath": {
      "type": "String",
      "default": "",
      "description": "(Optional) Fully qualified path to where the VSS metadata files are stored. If not specified, default path (%PROGRAMDATA%\\Amazon\\AwsVss\\VssMetadata) is used.",
      "maxChars": 255,
      "allowedPattern": "^$|^\\w:$|^\\w:\\\\[^\"'|\\r\\n]*$|^\\/[^\"'|\\r\\n]*$|^([A-Za-z0-9-_\\/+]{4})*([A-Za-z0-9-_\\/+]{4}|[A-Za-z0-9-_\\/+]{3}=|[A-Za-z0-9-_\\/+]{2}==)$"
    },
    "VolumeIdDeviceNamePairs": {
      "type": "String",
      "description": "(Required) List of pairs of the volumes id of the EBS volumes created from the snapshots and their corresponding attachment points, with each pair in the format of {volumeId}:{deviceName} and separated with ';'",
      "allowedPattern": "^(vol-[a-f0-9]{8}|vol-[a-f0-9]{17}):(\\/dev\\/sda1|xvd[b-z]|xvd[b-z][a-z])(;(vol-[a-f0-9]{8}|vol-[a-f0-9]{17}):(\\/dev\\/sda1|xvd[b-z]|xvd[b-z][a-z]))*$"
    },
    "ExecutionTimeout": {
      "type": "String",
      "default": "600",
      "description": "(Optional) The time in seconds for this command to be completed before it is considered to have failed. Default is 600 seconds. Maximum is 172800 (48 hours). Minimum is 120.",
      "allowedPattern": "^((1[2-9][0-9]{1})|([2-9][0-9]{2})|([1-9][0-9]{3,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800))$"
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "runPowerShellScript",
      "inputs": {
        "runCommand": [
          "Set-StrictMode -Version Latest",
          "$ErrorActionPreference = \"Stop\"",
          "$script:ERROR_CODES = @{",
          "\"1001\" = \"Target database name should not be the same as the source database name\";",
          "\"1002\" = \"SQL Server Writer process is not running on instance\";",
          "\"1003\" = \"Failed to validate input parameters\";",
          "\"1004\" = \"Failed to find a valid set of metadata files\";",
          "\"2001\" = \"Failed to map the serial number of a disk to its corresponding EBS Volumes ID\";",
          "\"2002\" = \"Failed to start EC2 VSS Agent process\";",
          "\"2003\" = \"Execution timed out. See log outputs for details\";",
          "}",
          "$script:AgentRestoreOutput = \"$env:ProgramData\\Amazon\\AwsVss\\Logs\\restoreout-$((Get-Date).ToString(\"yyyyMMdd-HHmmss\")).log\"",
          "$script:AgentRestoreError = \"$env:ProgramData\\Amazon\\AwsVss\\Logs\\restoreerror-$((Get-Date).ToString(\"yyyyMMdd-HHmmss\")).log\"",
          "$script:AgentPath = \"$env:ProgramFiles\\Amazon\\AwsVssComponents\\ec2-vss-agent.exe\"",
          "function Format-Error {",
          "param (",
          "[Parameter(ValueFromPipelineByPropertyName, ValueFromPipeline)]",
          "[System.Management.Automation.ErrorRecord]",
          "$ErrorRecord",
          ")",
          "process {",
          "if ($null -ne $ErrorRecord) {",
          "return $ErrorRecord.Exception.GetType().FullName + \": `n\" + (Out-String -InputObject $ErrorRecord) + \"`n\" + ($ErrorRecord.ScriptStackTrace)",
          "}",
          "}",
          "}",
          "function Write-StandardError($message) {",
          "[Console]::Error.WriteLine($message)",
          "}",
          "trap {",
          "Write-Host \"Encountered unexpected error. Please see error details below.\"",
          "Write-StandardError \"$(Format-Error -ErrorRecord $_)\"",
          "exit 4000",
          "}",
          "function Exit-WithFailure {",
          "param(",
          "[Parameter(Mandatory=$true)][int]$errorCode",
          ")",
          "if (-not ($errorCode -eq 0 -or $errorCode -ge 3000)) {",
          "Write-StandardError \"$($script:ERROR_CODES[[string]$errorCode])\"",
          "}",
          "exit $errorCode",
          "}",
          "function Get-VolumeIdFromSerialNumber {",
          "param(",
          "[Parameter(Mandatory=$true)]$serial",
          ")",
          "$regex1 = '^vol[0-9a-zA-Z]{17}.*$'",
          "$regex2 = '^[0-9]{4}$'",
          "$ebsVolumeId = $null",
          "if ($serial -match $regex1) {",
          "$ebsVolumeId = $serial.Substring(0, 20)",
          "$ebsVolumeId = $ebsVolumeId.Insert(3, \"-\")",
          "}",
          "elseif ($serial -match $regex2) {",
          "$SCSITargetId = [int]$serial",
          "if ($SCSITargetId -lt 0 -or $SCSITargetId -gt 676) {",
          "Write-Host \"$serial cannot be converted into a valid attachment point.\"",
          "Exit-WithFailure 2001",
          "}",
          "$deviceName = \"xvd\"",
          "if ($SCSITargetId -eq 0) {",
          "$deviceName = \"/dev/sda1\"",
          "}",
          "else {",
          "if ($SCSITargetId -gt 25) {",
          "$deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
          "}",
          "$deviceName += [char](0x61 + ($SCSITargetId % 26))",
          "}",
          "$ebsVolumeId = ($script:instanceBDM | Where-Object { $_.DeviceName -eq $deviceName }).VolumeID",
          "}",
          "else {",
          "Write-Host \"The format of $serial is not supported.\"",
          "Exit-WithFailure 2001",
          "}",
          "return $ebsVolumeId",
          "}",
          "function Get-DriveLettersOfSnapshotVolumes() {",
          "param (",
          "$VolumeIDs",
          ")",
          "Write-Host \"Onlining the disks to obatain drive letters for snapshot volumes ...\"",
          "$snapDiskNumberToVolIdMap = @{}",
          "$disksChecked = @()",
          "while ($snapDiskNumberToVolIdMap.Keys.Count -ne $VolumeIDs.Count -and (Get-Date) -lt $script:bufferedExecutionTimeOut) {",
          "foreach ($disk in Get-Disk) {",
          "if ($disksChecked.Contains($disk.Number)) {",
          "continue",
          "}",
          "$ebsVolId = Get-VolumeIdFromSerialNumber $disk.SerialNumber",
          "Write-Host \"The disk serial number $($disk.SerialNumber) is mapped to $ebsVolId\"",
          "if ($VolumeIDs -contains $ebsVolId) {",
          "$snapDiskNumberToVolIdMap[\"$($disk.Number)\"] = \"$ebsVolId\"",
          "}",
          "$disksChecked += $disk.Number",
          "}",
          "Start-Sleep -Seconds 5",
          "}",
          "if ($snapDiskNumberToVolIdMap.Keys.Count -ne $VolumeIDs.Count) {",
          "Exit-WithFailure 2003",
          "}",
          "foreach ($diskNumber in $snapDiskNumberToVolIdMap.Keys) {",
          "Write-Host \"Onlining disk $diskNumber ... \" -NoNewline",
          "Set-Disk -Number $diskNumber -IsOffline $false",
          "Write-Host \"Done\"",
          "}",
          "$snapVolumesDriveLetters = @()",
          "foreach ($diskNumber in $snapDiskNumberToVolIdMap.Keys) {",
          "$retryAttempted = 0",
          "while (($retryAttempted -lt 3) -and ((Get-Date) -lt $script:bufferedExecutionTimeOut)) {",
          "$retryAttempted += 1",
          "$partitions = Get-Partition -DiskNumber $diskNumber | Where-Object { $_.Type -ne 'Reserved' -and $_.Type -ne 'System' -and $_.Type -ne 'Recovery'}",
          "if (-not $partitions) {",
          "Start-Sleep -Seconds 5",
          "continue",
          "}",
          "$driveLetters = $partitions.DriveLetter | Where-Object { -not [string]::IsNullOrEmpty($_)}",
          "if (-not $driveLetters) {",
          "Start-Sleep -Seconds 5",
          "continue",
          "}",
          "Write-Host \"Drive letters found on disk $diskNumber :\"",
          "Write-Host \"- $driveLetters\"",
          "foreach ($driveLetter in $driveLetters) {",
          "$snapVolumesDriveLetters += \"$driveLetter`:$($snapDiskNumberToVolIdMap[$diskNumber])\".trim()",
          "}",
          "break",
          "}",
          "if (-not $partitions) {",
          "Write-Host \"No partitions found on disk $diskNumber\"",
          "}",
          "if (-not $driveLetters) {",
          "Write-Host \"No drive letter found for partitions on disk $diskNumber\"",
          "}",
          "}",
          "Write-Host \"Drive letters and the corresponding snapshot volume:\"",
          "Write-Host \"- $snapVolumesDriveLetters\"",
          "return $snapVolumesDriveLetters",
          "}",
          "function SqlRestore() {",
          "param (",
          "[string]$SourceDatabase,",
          "[string]$TargetDatabase,",
          "[string]$SnapshotSetId,",
          "[boolean]$RestoreWithNorecovery,",
          "[string[]]$VolumeIdDeviceNamePairs,",
          "[string]$MetadataPath,",
          "[int]$TimeOut = 600",
          ")",
          "Set-Variable -Name \"SnapshotSetIdRegex\" -Value '[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}' -Option ReadOnly",
          "Set-Variable -Name \"BcdMetadataFileNameRegex\" -Value ('^\\{' + $SnapshotSetIdRegex + '\\}-\\d{2}-\\d{2}-\\d{4}-\\d{2}-\\d{2}-BCD\\.xml$') -Option ReadOnly",
          "Set-Variable -Name \"SqlServerWriterMetadataFileNameRegex\" -Value ('^\\{' + $SnapshotSetIdRegex + '\\}-\\d{2}-\\d{2}-\\d{4}-\\d{2}-\\d{2}-SqlServerWriter\\.xml$') -Option ReadOnly",
          "$script:bufferedExecutionTimeOut = (Get-Date).AddSeconds($TimeOut-30)",
          "$script:instanceId = $env:AWS_SSM_INSTANCE_ID",
          "if ($SourceDatabase -eq $TargetDatabase) {",
          "Write-StandardError \"Source database name should not be the same as the target database\"",
          "Exit-WithFailure 1003",
          "}",
          "if ($SnapshotSetId -eq \"\" -or $null -eq $SnapshotSetId) {",
          "Write-StandardError \"A valid SnapshotSetId must be provided\"",
          "Exit-WithFailure 1003",
          "}",
          "if ($SourceDatabase -eq $TargetDatabase) {",
          "Exit-WithFailure 1001",
          "}",
          "if ($null -eq (Get-Process -Name \"SQLWriter\" -ErrorAction SilentlyContinue)) {",
          "Exit-WithFailure 1002",
          "}",
          "if ($SnapshotSetId -notmatch $SnapshotSetIdRegex) {",
          "Write-StandardError \"The provided SnapshotSetId has an invalid format\"",
          "Exit-WithFailure 1003",
          "}",
          "if ($null -eq $MetadataPath -or \"\" -eq $MetadataPath) {",
          "$MetadataPath = \"$env:ProgramData\\Amazon\\AwsVss\\VssMetadata\";",
          "}",
          "$backupCompsDoc = Get-ChildItem -Path $MetadataPath -Filter \"`{$SnapshotSetId`}-*-BCD.xml\" | Where-Object { $_.Name -match $BcdMetadataFileNameRegex }",
          "$writerXmlDoc = Get-ChildItem -Path $MetadataPath -Filter \"`{$SnapshotSetId`}-*-SqlServerWriter.xml\" | Where-Object { $_.Name -match $SqlServerWriterMetadataFileNameRegex }",
          "if ($null -eq $backupCompsDoc -or $null -eq $writerXmlDoc) {",
          "Write-StandardError \"No valid metadata files found for the SnapshotSetId\"",
          "Exit-WithFailure 1004",
          "}",
          "if (@($backupCompsDoc).Count -gt 1 -or @($writerXmlDoc).Count -gt 1) {",
          "Write-StandardError \"Multiple sets of metadata files found for the SnapshotSetId\"",
          "Exit-WithFailure 1004",
          "}",
          "Write-Host \"Path to the Backup Components Document: $($backupCompsDoc.FullName)\"",
          "Write-Host \"Path to the SQL Server Writer metadata: $($writerXmlDoc.FullName)\"",
          "$volumeIds = @()",
          "$script:instanceBDM = @()",
          "$pairs = $VolumeIdDeviceNamePairs.Split(\";\")",
          "foreach ($pair in $pairs) {",
          "$volumeId, $deviceName = $pair.Split(\":\")",
          "$script:instanceBDM += @{",
          "DeviceName = $deviceName",
          "VolumeId = $volumeId",
          "}",
          "$volumeIds += $volumeId",
          "}",
          "[array]$snapVolumesDriveLetters = Get-DriveLettersOfSnapshotVolumes -VolumeIds $volumeIds",
          "$params = \"-backupCompsDoc=`\"$($backupCompsDoc.FullName)`\" -sqlWriterXml=`\"$($writerXmlDoc.FullName)`\" -sourceDb=`\"$SourceDatabase`\" -snapVols=`\"$($snapVolumesDriveLetters -join \";\")`\"\"",
          "if ($null -ne $TargetDatabase -and \"\" -ne $TargetDatabase) {",
          "$params += \" -targetDb=`\"$TargetDatabase`\"\"",
          "}",
          "if ($RestoreWithNorecovery) {",
          "$params += \" -additionalRestore\"",
          "}",
          "Write-Host \"Invoking EC2 VSS Agent for restore with params: $params\"",
          "$process = Start-Process \"$env:ProgramFiles\\Amazon\\AwsVssComponents\\ec2-vss-agent.exe\" $params -PassThru -RedirectStandardError $script:AgentRestoreError -RedirectStandardOutput $script:AgentRestoreOutput",
          "if ($null -eq $process) {",
          "Exit-WithFailure 2002",
          "}",
          "$script:processHandleCache = $process.Handle",
          "while (-not $process.HasExited -and (Get-Date) -lt $script:bufferedExecutionTimeOut) {",
          "Start-Sleep -Seconds 15",
          "}",
          "if (-not $process.HasExited) {",
          "Exit-WithFailure 2003",
          "}",
          "Write-Host \"EC2 VSS Agent exited at $($process.ExitTime) with exit code $($process.ExitCode)\"",
          "$out = Get-Content $script:AgentRestoreOutput",
          "if ($out) {",
          "$out = [string]::join(\"`n\", $out)",
          "Write-Host \"EC2 VSS Agent log:\"",
          "Write-Host $out",
          "}",
          "$out = Get-Content $script:AgentRestoreError",
          "if ($out) {",
          "$out = [string]::join(\"`n\", $out)",
          "Write-StandardError \"EC2 VSS Agent error:\"",
          "Write-StandardError $out",
          "}",
          "Exit-WithFailure $process.ExitCode",
          "}",
          "",
          "[boolean]$RestoreWithNorecovery = [System.Convert]::ToBoolean(\"{{RestoreWithNorecovery}}\")",
          "$SourceDatabase = @'",
          "{{SourceDatabase}}",
          "'@",
          "$TargetDatabase = @'",
          "{{TargetDatabase}}",
          "'@",
          "$SnapshotSetId = @'",
          "{{SnapshotSetId}}",
          "'@",
          "$MetadataPath = @'",
          "{{MetadataPath}}",
          "'@",
          "[string[]]$VolumeIdDeviceNamePairs = @((\"{{VolumeIdDeviceNamePairs}}\").Split(\";\"))",
          "[int]$TimeOut = {{ExecutionTimeout}}",
          "",
          "SqlRestore $SourceDatabase $TargetDatabase $SnapshotSetId $RestoreWithNorecovery $VolumeIdDeviceNamePairs $MetadataPath $TimeOut",
          "exit $lastexitcode",
          ""
        ],
        "workingDirectory": "",
        "timeoutSeconds": "{{ExecutionTimeout}}"
      }
    }
  ]
}
