{
  "schemaVersion": "2.2",
  "description": "Install, repair, or uninstall an application using an .msi file.",
  "parameters": {
    "action": {
      "type": "String",
      "default": "Install",
      "description": "(Optional) The type of action to perform. Valid values: Install | Repair | Uninstall",
      "allowedValues": [
        "Install",
        "Repair",
        "Uninstall"
      ]
    },
    "parameters": {
      "type": "String",
      "default": "",
      "description": "(Optional) The parameters for the installer."
    },
    "source": {
      "type": "String",
      "description": "(Required) The URL or local path on the instance to the application .msi file."
    },
    "sourceHash": {
      "type": "String",
      "default": "",
      "description": "(Optional) The SHA256 hash of the .msi file."
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "createDownloadFolder",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "runCommand": [
          "try {",
          "  $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
          "  if ($sku -eq 143 -or $sku -eq 144) {",
          "    Write-Host \"This document is not supported on Windows 2016 Nano Server.\"",
          "    exit 40",
          "  }",
          "  $ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\\'",
          "  if ($ssmAgentService -and [System.Version]$ssmAgentService.Version -ge [System.Version]'3.0.1031.0') {",
          "     exit 0",
          "  }",
          "  $DataFolder = \"Application Data\"",
          "  if ( ![string]::IsNullOrEmpty($env:ProgramData) ) {",
          "    $DataFolder = $env:ProgramData",
          "  } elseif ( ![string]::IsNullOrEmpty($env:AllUsersProfile) ) {",
          "    $DataFolder = \"$env:AllUsersProfile\\Application Data\"",
          "  }",
          "  $TempFolder = \"/\"",
          "  if ( $env:Temp -ne $null ) {",
          "    $TempFolder = $env:Temp",
          "  }",
          "  $DataFolder = Join-Path $DataFolder 'Amazon\\SSM'",
          "  $DownloadFolder = Join-Path $TempFolder 'Amazon\\SSM'",
          "  if ( !( Test-Path -LiteralPath $DataFolder )) {",
          "    $none = New-Item -ItemType directory -Path $DataFolder",
          "  }",
          "  $DataACL = Get-Acl $DataFolder",
          "  if ( Test-Path -LiteralPath $DownloadFolder ) {",
          "    $DownloadACL = Get-Acl $DownloadFolder",
          "    $ACLDiff = Compare-Object ($DownloadACL.AccessToString) ($DataACL.AccessToString)",
          "    if ( $ACLDiff.count -eq 0 ) {",
          "      exit 0",
          "    }",
          "    Remove-Item $DownloadFolder -Recurse -Force",
          "  }",
          "  $none = New-Item -ItemType directory -Path $DownloadFolder",
          "  Set-Acl $DownloadFolder -aclobject $DataACL",
          "  $DownloadACL = Get-Acl $DownloadFolder",
          "  $ACLDiff = Compare-Object ($DownloadACL.AccessToString) ($DataACL.AccessToString)",
          "  if ( $ACLDiff.count -ne 0 ) {",
          "    Write-Error \"Failed to create download folder\" -ErrorAction Continue",
          "    exit 41",
          "  }",
          "} catch {",
          "  Write-Host  \"Failed to create download folder\"",
          "  Write-Error  $Error[0]  -ErrorAction Continue",
          "  exit 42",
          "}"
        ]
      }
    },
    {
      "action": "aws:applications",
      "name": "applications",
      "inputs": {
        "id": "0.aws:applications",
        "action": "{{ action }}",
        "parameters": "{{ parameters }}",
        "source": "{{ source }}",
        "sourceHash": "{{ sourceHash }}"
      }
    }
  ]
}
