{
  "description": "#### Document name  AWS-UpdateAmazonECSAgent\n## What does this document do?\nAutomation document to update the Amazon ECS container agent to pick up bug fixes and new features. Updating the Amazon ECS container agent does not interrupt running tasks or services on the container instance. The process for updating the agent differs depending on whether your container instance was launched with the Amazon ECS-optimized AMI or another operating system\n\n## Notes\n- Agent updates do not apply to Windows container instances. We recommend that you launch new container instances to update the agent version in your Windows clusters.\n\n- This document follows the steps described in this link [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).\n\n## Input Parameters\n* AutomationAssumeRole: (optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that runs this document.\n* ClusterARN: (Required) full Amazon Resource Name (ARN) of the cluster that your container instance is running on.\n\n## minimum permissions required\n* - Action: \n    - ecs:UpdateContainerAgent\n    - ecs:ListContainerInstances\n    - ecs:DescribeContainerInstances\n    -Resource\n    - arn:aws:ecs:*:<account-id>:cluster/*\n    - arn:aws:ecs:*:<account-id>:container-instance/    \n\n* - Action: \n    - ssm:GetCommandInvocation\n    - ecs:DescribeClusters\n    - ec2:DescribeImages\n    - ec2:DescribeInstances\n    - ec2:DescribeInstanceAttribute\n    - Resource: '*'\n\n* - Action: \n    - ssm:SendCommand\n    - Resource: \n    - \"arn:aws:ssm:*::document/*\"\n    - !Sub \"arn:aws:ssm:*:<account-id>:managed-instance/*\"\n    - !Sub \"arn:aws:ec2:*:<account-id>:instance/*\n\n## Output parameters\nUpdateAmazonECSAgent.output\n* UpdatedInstances: \n    * ECS-optimized: \n    * ContainerInstanceArn: The Amazon Resource Name (ARN) of the container instance for which the container agent was updated.\n    * InstanceId: The EC2 instance ID of the container instance.\n    * AgentUpdateStatus: Update status based on the ecs agent update output.\n    * StatusDetails: Details of the execution result.\n    * VersionInfo: The version information for the Amazon ECS container agent and Docker daemon running on the container instance\n        * agentVersion: The version number of the Amazon ECS container agent.\n        * agentHash: The Git commit hash for the Amazon ECS container agent build on the amazon-ecs-agent GitHub repository.\n        * dockerVersion: The Docker version running on the container instance.\n    * Non-ECS-optimized:\n    * ContainerInstanceArn:\n    * InstanceId: \n    * AgentUpdateStatus: \n    * StatusDetails: \n    * VersionInfo: \n        * agentVersion: \n        * agentHash: \n        * dockerVersion:\n    * RunCommandId: The Systems Manager run command ID which can be used future references to this request.\n\n* FailedInstances\n    * non- ECS-optimized:\n    * ContainerInstanceArn:\n    * InstanceId: \n    * AgentUpdateStatus: \n    * StatusDetails: \n    * VersionInfo: \n        * agentVersion: \n        * agentHash: \n        * dockerVersion: \n\n    * Non-ECS-optimized:\n    * ContainerInstanceArn:\n    * InstanceId: \n    * AgentUpdateStatus: \n    * StatusDetails: \n    * VersionInfo: \n        * agentVersion: \n        * agentHash: \n        * dockerVersion:\n    * RunCommandId:\n\n* InProgressInstances\n    * ContainerInstanceArn:\n    * InstanceId: \n    * AgentUpdateStatus: \n    * StatusDetails: \n    * VersionInfo: \n        * agentVersion: \n        * agentHash: \n        * dockerVersion: \n        \n    * Non-ECS-optimized:\n    * ContainerInstanceArn:\n    * InstanceId: \n    * AgentUpdateStatus: \n    * StatusDetails: \n    * VersionInfo: \n        * agentVersion: \n        * agentHash: \n        * dockerVersion:\n    * RunCommandId:\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "ClusterARN": {
      "type": "String",
      "description": "(Required) full Amazon Resource Name (ARN) of the cluster that your container instance is running on.",
      "minChars": 1,
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:ecs:\\S+:\\d+:\\w+\\/\\S+|\\S+|^$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:iam::\\d{12}:role/[\\w+=,.@/-]+|^$"
    }
  },
  "outputs": [
    "UpdateAmazonECSAgent.output"
  ],
  "mainSteps": [
    {
      "name": "UpdateAmazonECSAgent",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "isCritical": true,
      "timeoutSeconds": 600,
      "description": "## UpdateAmazonECSAgent\nThis script updates the Amazon ECS container agent for containers in a targeted ECS Cluster.\n## Input Parameters\n* AutomationAssumeRole: (optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that runs this document.\n* ClusterARN: (Required) full Amazon Resource Name (ARN) of the cluster that your container instance is running on.    \n## Output parameters\n* UpdatedInstances: \n* FailedInstances: \n* InProgressInstances: \n",
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "update_amazon_ecs_agent_handler",
        "InputPayload": {
          "ClusterARN": "{{ClusterARN}}"
        },
        "Script": "import json\nimport boto3\nimport time\n\nssm_client = boto3.client('ssm')\nec2_client = boto3.client('ec2')\nec2_resource = boto3.resource('ec2')\necs_client = boto3.client('ecs')\n\nECS_OPTIMIZED_INDICATOR = \"-ecs-\"\nMAX_RETRIALS_NUM = 6\ncommand_check_retries_count= 0\nupdate_check_retries_count= 0\nInvocationDoesNotExist_retries = 0\nLIST_CONTAINERS_MAX_RESULT = 100\nWAITING_STATUS = ['Pending', 'InProgress', 'Delayed']\nSUCCESS_STATUS = ['Success']\nFAILURE_STATUS = ['Failed', 'Terminated',\n                'TimedOut', 'Cancelled', 'Cancelling']\nPENDING = 'PENDING'\nSTAGING = 'STAGING'\nSTAGED = 'STAGED'\nUPDATING = 'UPDATING'\nUPDATED = 'UPDATED'\nFAILED = 'FAILED'\n\nUPDATE_WAITING_STATUS = [PENDING,STAGING,UPDATING,STAGED]\n\ndef update_ecs_agent_ecs_optimized_amis(cluster, container_instance_id):\n    \n    response = ecs_client.update_container_agent(\n        cluster=cluster,\n        containerInstance=container_instance_id\n    )\n\n    if not \"containerInstance\" in response:\n        raise Exception(\n            \"Error in calling ECS.Client.update_container_agent. Unexpected response.\")\n    return\n\ndef update_ecs_agent_non_ecs_optimized_amis(instance_id):\n    \n    response = ssm_client.send_command(\n        InstanceIds=[instance_id],\n        DocumentName=\"AWS-RunShellScript\",\n        TimeoutSeconds=500,\n        Parameters={'commands': [\"#!/bin/bash\",\"set -x\",\"\",\"timeout=60 # timeout after \",\"while ((timeout > 0)) \",\"do\",\" if [[ $(sudo docker inspect ecs-agent | grep ECS_DATADIR) ]]; then\",\" echo \\\"ecs agent is running..\\\"\",\" timeout=-1\",\" else\",\" echo \\\"waiting for ecs agent to start..\\\"\",\" sleep 5\",\" fi \",\" ((timeout -= 1))\",\"done\",\"\",\"sudo docker inspect ecs-agent | grep ECS_DATADIR\",\"\",\"if [ $? -ne 0 ]; then\",\" echo \\\"You must stop any tasks running on this container instance before updating your agent. Newer agents with the ECS_DATADIR environment variable save their state and you can update them while tasks are running without issues\\\"\",\" exit 1\",\"fi\",\"\",\"sudo docker stop ecs-agent\",\"sudo docker rm ecs-agent\",\"sleep 2\",\"sudo docker image rm -f amazon/amazon-ecs-agent:latest\",\"sleep 2\",\"sudo docker run --name ecs-agent -detach=true --restart=on-failure:10 --volume=/var/run:/var/run --volume=/var/log/ecs/:/log --volume=/var/lib/ecs/data:/data --volume=/etc/ecs:/etc/ecs --net=host --env-file=/etc/ecs/ecs.config amazon/amazon-ecs-agent:latest\",\"sleep 5\",\"curl -s http://localhost:51678/v1/metadata\",\"\",\"if [ $? -ne 0 ]; then\",\" exit 1\",\"fi\"]},)\n    command_id = response['Command']['CommandId']\n    return command_id\n\ndef is_the_instance_ecs_optimized(instance_id):\n    \n    instance = ec2_resource.Instance(instance_id)\n    # check if the instace exists\n    response = describe_images(instance.image_id)\n    success = False\n    if \"Images\" in response:\n        if response[\"Images\"]:\n            if 'Name' in response[\"Images\"][0]: \n                image_name = response[\"Images\"][0]['Name']\n                success = True\n    \n    if not success:\n        raise Exception(\"Error in calling ec2_client.describe_images. Unexpected response. can't get image name for instance_id='{}'.\".format(instance_id))\n\n    if ECS_OPTIMIZED_INDICATOR in image_name.lower():            \n        return True\n\n    return False\ndef describe_images(image_id):\n    response = ec2_client.describe_images(\n        ImageIds=[\n            image_id,\n        ]\n    )\n    return response\n\ndef is_the_platform_linux(instance_id):\n    \n    instance = ec2_resource.Instance(instance_id)\n    # check if the instace exists        \n    response = describe_images(instance.image_id)\n    success = False\n    platform_details = \"unkown\"\n    if \"Images\" in response:\n        if response[\"Images\"]:\n            if 'PlatformDetails' in response[\"Images\"][0]: \n                platform_details = response[\"Images\"][0]['PlatformDetails']\n                success = True\n\n\n    if not success:\n        raise Exception(\"Error in calling ec2_client.describe_images. Unexpected response. can't get PlatformDetails for instance_id='{}'.\".format(instance_id))\n\n\n    if \"linux\" in platform_details.lower() or \"unix\" in platform_details.lower():                \n        return True        \n    return False\n\ndef get_command_status(instance_id, command_id):\n    \n    global InvocationDoesNotExist_retries\n    status = \"unknown\"\n    details = \"unknown\"\n    try:\n        response = ssm_client.get_command_invocation(\n            CommandId=command_id,\n            InstanceId=instance_id\n        )\n        valid_response = True\n        if \"Status\" in response:\n            status = response[\"Status\"]\n        else:\n            valid_response = False\n        \n        if \"StatusDetails\" in response:\n            details = response[\"StatusDetails\"]\n        else:\n            valid_response = False\n        \n        if not valid_response:\n            raise Exception(\"Error in calling ssm_client.get_command_invocation, Invalid Response. InstanceId='{}', CommandId='{}'\".format(instance_id,command_id))\n\n    except ssm_client.exceptions.InvocationDoesNotExist as e:\n        if InvocationDoesNotExist_retries < MAX_RETRIALS_NUM:\n            InvocationDoesNotExist_retries += 1\n            time.sleep(5)\n            \n            status, details = get_command_status(instance_id, command_id)\n        else:\n            raise Exception(str(e))\n    \n    except Exception as e:\n        if InvocationDoesNotExist_retries < MAX_RETRIALS_NUM:\n            InvocationDoesNotExist_retries += 1\n            time.sleep(5)\n            \n            status, details = get_command_status(instance_id, command_id)\n        else:\n            raise Exception(str(e))\n        \n    return status, details\n\ndef get_command_status_with_wait(instance_id, command_id):\n    global command_check_retries_count\n    \n\n    response = ssm_client.get_command_invocation(\n        CommandId=command_id,\n        InstanceId=instance_id\n    )\n    status = response[\"Status\"]\n    details = response[\"StatusDetails\"]\n\n    if status in WAITING_STATUS and command_check_retries_count < MAX_RETRIALS_NUM:\n        command_check_retries_count += 1\n        time.sleep(5)\n        status, details = get_command_status_with_wait(instance_id, command_id)\n\n    return status, details\n\ndef cluster_exists(cluster):\n    \n    response = ecs_client.describe_clusters(\n        clusters=[cluster]\n    )\n\n    if \"clusters\" in response and response[\"clusters\"]:\n        return True\n    else:\n        return False\n\ndef get_cluster_containers(cluster):\n    containerInstances = []    \n    \n    list_container_instances_response = ecs_client.list_container_instances(\n        cluster=cluster,\n        maxResults=LIST_CONTAINERS_MAX_RESULT,\n        status='ACTIVE'\n    )\n\n    if \"containerInstanceArns\" in list_container_instances_response and list_container_instances_response[\"containerInstanceArns\"]:\n        describe_container_instances_response = ecs_client.describe_container_instances(\n            cluster=cluster,\n            containerInstances=list_container_instances_response[\"containerInstanceArns\"],\n        )\n        for container in describe_container_instances_response[\"containerInstances\"]:\n\n            container_info = {\"containerInstanceArn\": container[\"containerInstanceArn\"], \"ec2InstanceId\": container[\"ec2InstanceId\"],\n                            \"versionInfo\": container[\"versionInfo\"], \"agentUpdateStatus\": \"undefined\", \"statusDetails\": \"undefined\"}\n            containerInstances.append(container_info)\n\n    while \"nextToken\" in list_container_instances_response:\n        list_container_instances_response = ecs_client.list_container_instances(\n            cluster=cluster,\n            status='ACTIVE',\n            maxResults=LIST_CONTAINERS_MAX_RESULT,\n            nextToken=list_container_instances_response[\"nextToken\"]\n        )\n\n        describe_container_instances_response = ecs_client.describe_container_instances(\n            cluster=cluster,\n            containerInstances=list_container_instances_response[\"containerInstanceArns\"],\n        )\n        if \"containerInstances\" in describe_container_instances_response:\n            for container in describe_container_instances_response[\"containerInstances\"]:\n                container_info ={\"containerInstanceArn\": container[\"containerInstanceArn\"], \"ec2InstanceId\": container[\"ec2InstanceId\"],\n                                \"versionInfo\": container[\"versionInfo\"], \"agentUpdateStatus\": \"undefined\", \"statusDetails\": \"undefined\"}                              \n                containerInstances.append(container_info)\n        else:\n            raise Exception(\"Error in calling ecs_client.describe_container_instances, cluster='{}'\".format(cluster))\n\n    return containerInstances\n\ndef separate_container_instances(containerInstances):\n    \n    \n    ecs_optimized_instances = []\n    non_ecs_optimized_instances = []\n\n    for instance in containerInstances:\n        if is_the_instance_ecs_optimized(instance[\"ec2InstanceId\"]):\n            ecs_optimized_instances.append(instance)\n        else:\n            non_ecs_optimized_instances.append(instance)\n    \n    \n    return ecs_optimized_instances, non_ecs_optimized_instances\n\ndef separate_supported_instances(containerInstances):\n    \n    \n    supported = []\n    unsupported = []\n\n    for instance in containerInstances:\n        if is_the_platform_linux(instance[\"ec2InstanceId\"]):\n            supported.append(instance)\n        else:\n            unsupported.append(instance)\n    \n    return supported, unsupported\n\ndef get_ecs_optimized_instances_update_status(cluster, containerArn):\n    \n    global update_check_retries_count\n\n    describe_container_instances_response = ecs_client.describe_container_instances(\n        cluster=cluster,\n        containerInstances=[containerArn],\n    )\n\n    container = describe_container_instances_response[\"containerInstances\"][0]\n    \n    if not \"agentUpdateStatus\" in  container:\n        return \"undefined\"\n\n    status = container[\"agentUpdateStatus\"]\n    version = container[\"versionInfo\"]\n\n    if status in UPDATE_WAITING_STATUS:\n        if update_check_retries_count < MAX_RETRIALS_NUM:\n            update_check_retries_count+=1\n            time.sleep(5)\n            container = get_ecs_optimized_instances_update_status(cluster,containerArn) \n    \n\n    return container\n\ndef get_container_version(cluster,containerArn):\n\n    describe_container_instances_response = ecs_client.describe_container_instances(\n        cluster=cluster,\n        containerInstances=[containerArn],\n    )\n\n    container = describe_container_instances_response[\"containerInstances\"][0]\n    \n    if not \"versionInfo\" in  container:\n        return \"undefined\"\n\n    return container[\"versionInfo\"]\n\ndef cluster_is_active(cluster):\n    response = ecs_client.describe_clusters(\n        clusters=[cluster]\n    )\n\n    if \"clusters\" in response and response[\"clusters\"]:\n        if \"status\" in response[\"clusters\"][0]:\n            return response[\"clusters\"][0][\"status\"] == \"ACTIVE\"\n\n    return False\n\ndef update_amazon_ecs_agent_handler(event, context):\n    cluster = event[\"ClusterARN\"]\n    errorMsg = ''\n    ecs_optimized_instances = []\n    non_ecs_optimized_instances = []\n\n    failed_non_ecs_optimized_instances = []\n    successful_non_ecs_optimized_instances = []\n    waiting_non_ecs_optimized_instances = []\n\n    failed_ecs_optimized_instances = []\n    successful_ecs_optimized_instances = []\n    waiting_ecs_optimized_instances = []\n\n    failed_instances = []\n    successful_instances = []\n    waiting_instances = []\n\n    temp_waiting_instances = []\n    \n    out = {\n        'UpdatedInstances': [],\n        'FailedInstances': [],\n        'InProgressInstances': []\n    }\n    remove_containers =[]\n\n# check if cluster exist\n    if not cluster_exists(cluster):\n        raise Exception(\n            \"Cluster='{}', The specified cluster was not found\".format(cluster))\n    # check if cluster is active\n    if not cluster_is_active(cluster):\n        raise Exception(\n            \"Cluster='{}' is not ACTIVE\".format(cluster))\n\n# get all containers\n    containerInstances = get_cluster_containers(cluster)\n\n    if not containerInstances:\n        raise Exception(\n            \"Cluster='{}', Has no container Instances to be updated\".format(cluster))\n\n    supported_containerInstances, unsupported_containerInstances = separate_supported_instances(\n        containerInstances)\n\n    for instance in unsupported_containerInstances:\n        instance[\"agentUpdateStatus\"] = FAILED\n        instance[\"statusDetails\"] = \"Only Linux container instances are supported. Agent updates do not apply to Windows container instances. We recommend that you launch new container instances to update the agent version in your Windows clusters.\"\n        \n        failed_non_ecs_optimized_instances.append(instance)        \n\n    ecs_optimized_instances, non_ecs_optimized_instances = separate_container_instances(\n        supported_containerInstances)\n\n# get latest ecs agent\n    try:\n        tmp_ecs_optimized_instances =[]\n        # update ecs_optimized_instances\n        for instance in ecs_optimized_instances:\n            try:\n                response = update_ecs_agent_ecs_optimized_amis(\n                    cluster, instance[\"containerInstanceArn\"])        \n                tmp_ecs_optimized_instances.append(instance)  \n\n            except ecs_client.exceptions.NoUpdateAvailableException as e:\n                \n                \n                instance[\"agentUpdateStatus\"] = UPDATED\n                instance[\"statusDetails\"] = \"ECS agent is already running the latest version.\"\n                \n                successful_ecs_optimized_instances.append(instance)\n                remove_containers.append(instance)\n                \n\n            except Exception as e:\n                \n                errorMsg = str(e)\n                instance[\"agentUpdateStatus\"] = FAILED\n                instance[\"statusDetails\"] = errorMsg\n                failed_ecs_optimized_instances.append(instance)\n                remove_containers.append(instance)\n        \n        ecs_optimized_instances = tmp_ecs_optimized_instances\n\n        tmp_non_ecs_optimized_instances =[]\n        \n        for instance in non_ecs_optimized_instances:\n            command_id = 'N/A'\n            instance_id = instance[\"ec2InstanceId\"]\n            try:\n                command_id = update_ecs_agent_non_ecs_optimized_amis(\n                    instance_id)\n                instance[\"RunCommandId\"] = command_id\n\n                tmp_non_ecs_optimized_instances.append(instance)\n\n            except ssm_client.exceptions.InvalidInstanceId as e:\n                errorMsg = \"The following scenarios can result in this error: 1.Instance does not have the AWS SSM agent installed and running. 2.Instance does not have proper iam role attached, AmazonEC2RoleforSSM policy should be attached to instance's iam role.\"\n                instance[\"agentUpdateStatus\"] = FAILED\n                instance[\"statusDetails\"] = errorMsg\n                \n                failed_non_ecs_optimized_instances.append(instance)\n            except Exception as e:\n                errorMsg = str(e)\n                instance[\"agentUpdateStatus\"] = FAILED\n                instance[\"statusDetails\"] = errorMsg\n                \n                failed_non_ecs_optimized_instances.append(instance)\n\n        non_ecs_optimized_instances = tmp_non_ecs_optimized_instances\n        # get update status for ecs_optimized_instances\n        \n\n        for instance in ecs_optimized_instances:\n            \n            instance_id = instance[\"ec2InstanceId\"]\n            container = get_ecs_optimized_instances_update_status(cluster,instance[\"containerInstanceArn\"])\n            \n            if container == \"undefined\":\n                instance[\"agentUpdateStatus\"] = FAILED\n            else:\n                instance[\"agentUpdateStatus\"] = container[\"agentUpdateStatus\"]\n                instance[\"versionInfo\"] = container[\"versionInfo\"]\n\n            if instance[\"agentUpdateStatus\"] == UPDATED:\n                instance[\"statusDetails\"] = UPDATED\n                successful_ecs_optimized_instances.append(instance)\n\n            elif instance[\"agentUpdateStatus\"] == FAILED:\n                instance[\"statusDetails\"] = FAILED\n                failed_ecs_optimized_instances.append(instance)\n            \n            elif instance[\"agentUpdateStatus\"] == PENDING:\n                \n                instance[\"statusDetails\"] = \"An agent update is available, and the update process has started.\"\n                waiting_ecs_optimized_instances.append(instance)\n            \n            elif instance[\"agentUpdateStatus\"] == STAGED:\n                \n                instance[\"statusDetails\"] = \"The agent download has completed and the agent contents have been verified.\"\n                waiting_ecs_optimized_instances.append(instance)\n            \n            elif instance[\"agentUpdateStatus\"] == STAGING:\n                \n                instance[\"statusDetails\"] = \"The agent has begun downloading the agent update.\"\n                waiting_ecs_optimized_instances.append(instance)\n            \n            elif instance[\"agentUpdateStatus\"] == UPDATING:\n                \n                instance[\"statusDetails\"] = \"The ecs-init service is restarted and it picks up the new agent version.\"\n                waiting_ecs_optimized_instances.append(instance)\n\n            else:\n                \n                waiting_ecs_optimized_instances.append(instance)\n\n        # get_command_status for non_ecs_optimized_instances\n        for instance in non_ecs_optimized_instances:\n            instance_id = instance[\"ec2InstanceId\"]\n            command_id = instance[\"RunCommandId\"]\n            try:\n                status, status_details = get_command_status(\n                    instance_id, command_id)\n\n\n                instance[\"RunCommandId\"] = command_id\n\n                instance[\"versionInfo\"] = get_container_version(cluster,instance[\"containerInstanceArn\"])\n                \n                if status in SUCCESS_STATUS:\n                    instance[\"agentUpdateStatus\"] = UPDATED\n                    instance[\"statusDetails\"] = status_details\n                    \n                    successful_non_ecs_optimized_instances.append(instance)\n\n                elif status in FAILURE_STATUS:\n                    \n\n                    instance[\"agentUpdateStatus\"] = FAILED\n                    instance[\"statusDetails\"] = status_details                        \n                    failed_non_ecs_optimized_instances.append(instance)\n\n                else:\n                    waiting_non_ecs_optimized_instances.append(instance)\n\n            except Exception as e:\n                errorMsg = str(e)\n                \n                instance[\"agentUpdateStatus\"] = FAILED\n                instance[\"statusDetails\"] = errorMsg\n                                    \n                instance[\"versionInfo\"] = get_container_version(cluster,instance[\"containerInstanceArn\"])\n                failed_non_ecs_optimized_instances.append(instance)\n\n        # retry on the waiting instances\n        for instance in waiting_non_ecs_optimized_instances:\n            try:\n                instance_id = instance['ec2InstanceId']\n                command_id = instance['RunCommandId']\n\n                status, status_details = get_command_status_with_wait(\n                    instance_id, command_id)\n                \n                instance[\"versionInfo\"] = get_container_version(cluster,instance[\"containerInstanceArn\"])\n                if status in SUCCESS_STATUS:\n                    instance[\"agentUpdateStatus\"] = UPDATED\n                    instance[\"statusDetails\"] = status_details\n                    successful_non_ecs_optimized_instances.append(instance)\n\n                elif status in FAILURE_STATUS:\n                    instance[\"agentUpdateStatus\"] = FAILED\n                    instance[\"statusDetails\"] = status_details\n                    failed_non_ecs_optimized_instances.append(instance)\n\n                else:\n                    instance[\"agentUpdateStatus\"] = status\n                    instance[\"statusDetails\"] = status_details\n                    temp_waiting_instances.append(instance)\n\n            except Exception as e:\n                errorMsg = str(e)\n                instance[\"agentUpdateStatus\"] = FAILED\n                instance[\"statusDetails\"] = errorMsg\n                failed_non_ecs_optimized_instances.append(instance)\n\n        waiting_non_ecs_optimized_instances = temp_waiting_instances\n\n        for i in range(len(successful_ecs_optimized_instances)):        \n            successful_ecs_optimized_instances[i][\"versionInfo\"] = get_container_version(cluster,successful_ecs_optimized_instances[i][\"containerInstanceArn\"])\n        \n    except Exception as e:\n\n        failed_instances = {\n        \"ECS-optimized\": failed_ecs_optimized_instances,\n        \"Non-ECS-optimized\": failed_non_ecs_optimized_instances\n        }\n\n        successful_instances ={\n            \"ECS-optimized\": successful_ecs_optimized_instances,\n            \"Non-ECS-optimized\": successful_non_ecs_optimized_instances\n        }\n\n        waiting_instances ={\n            \"ECS-optimized\": waiting_ecs_optimized_instances,\n            \"Non-ECS-optimized\": waiting_non_ecs_optimized_instances\n        }\n\n        out = {\n            'UpdatedInstances': successful_instances,\n            'FailedInstances': failed_instances,\n            'InProgressInstances': waiting_instances\n        }\n\n        errorMsg = str(e)\n        errorMsg = errorMsg + \", output: \" + json.dumps(out)\n        raise Exception(\n            \"Unable to install ECS Agent, errorMsg ='{}'\".format(errorMsg))\n\n    failed_instances = {\n            \"ECS-optimized\": failed_ecs_optimized_instances,\n            \"non-ECS-optimized\": failed_non_ecs_optimized_instances\n        }\n\n    successful_instances ={\n        \"ECS-optimized\": successful_ecs_optimized_instances,\n        \"non-ECS-optimized\": successful_non_ecs_optimized_instances\n    }\n\n    waiting_instances ={\n        \"ECS-optimized\": waiting_ecs_optimized_instances,\n        \"non-ECS-optimized\": waiting_non_ecs_optimized_instances\n    }\n    \n    out = {\n        'UpdatedInstances': successful_instances,\n        'FailedInstances': failed_instances,\n        'InProgressInstances': waiting_instances\n    }        \n\n    return {\n        'output': json.dumps(out)\n    }"
      }
    }
  ]
}
