{
  "schemaVersion": "0.3",
  "description": "Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-awsdocs-linux.html",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "SourceAmiId": {
      "type": "String",
      "description": "(Required) The source Amazon Machine Image ID."
    },
    "IamInstanceProfileName": {
      "type": "String",
      "description": "(Required) The instance profile that enables Systems Manager (SSM) to manage the instance.",
      "default": "ManagedInstanceProfile"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole"
    },
    "TargetAmiName": {
      "type": "String",
      "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.",
      "default": "UpdateLinuxAmi_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}"
    },
    "InstanceType": {
      "type": "String",
      "description": "(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t3.micro.",
      "default": "t3.micro"
    },
    "SecurityGroupIds": {
      "type": "StringList",
      "description": "(Optional) A comma separated list of security group IDs with the required Inbound and Outbound connectivity rules.",
      "allowedPattern": "^sg-[a-z0-9]{8,17}$",
      "default": []
    },
    "SubnetId": {
      "type": "String",
      "description": "(Optional) Specify the SubnetId if you want to launch EC2 instance in a specific subnet.",
      "default": ""
    },
    "PreUpdateScript": {
      "type": "String",
      "description": "(Optional) URL of a script to run before updates are applied. Default (\"none\") is to not run a script.",
      "default": "none"
    },
    "PostUpdateScript": {
      "type": "String",
      "description": "(Optional) URL of a script to run after package updates are applied. Default (\"none\") is to not run a script.",
      "default": "none"
    },
    "IncludePackages": {
      "type": "String",
      "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
      "default": "all"
    },
    "ExcludePackages": {
      "type": "String",
      "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
      "default": "none"
    },
    "MetadataOptions": {
      "type": "StringMap",
      "description": "(Optional) The metadata options for the instance.",
      "default": {
        "HttpEndpoint": "enabled",
        "HttpTokens": "optional"
      }
    }
  },
  "mainSteps": [
    {
      "name": "launchInstance",
      "action": "aws:runInstances",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "ImageId": "{{SourceAmiId}}",
        "InstanceType": "{{InstanceType}}",
        "UserData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGdldF9jb250ZW50cygpIHsKICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4KICAgICAgICBjdXJsIC1zIC1mICIkMSIKICAgIGVsaWYgWyAteCAiJCh3aGljaCB3Z2V0KSIgXTsgdGhlbgogICAgICAgIHdnZXQgIiQxIiAtTyAtCiAgICBlbHNlCiAgICAgICAgZGllICJObyBkb3dubG9hZCB1dGlsaXR5IChjdXJsLCB3Z2V0KSIKICAgIGZpCn0KCnJlYWRvbmx5IFRPS0VOX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvYXBpL3Rva2VuIgpmdW5jdGlvbiBnZXRfY29udGVudHNfSU1EU3YyKCkgewogICAgaWYgWyAteCAiJCh3aGljaCBjdXJsKSIgXTsgdGhlbgogICAgICAgIHJlYWRvbmx5IFRPS0VOPSQoY3VybCAtcyAtZiAtWCBQVVQgLUggIlgtYXdzLWVjMi1tZXRhZGF0YS10b2tlbi10dGwtc2Vjb25kczogMjE2MDAiICIkVE9LRU5fVVJMIikKICAgICAgICBjdXJsIC1zIC1mIC1IICJYLWF3cy1lYzItbWV0YWRhdGEtdG9rZW46ICRUT0tFTiIgIiQxIgogICAgZWxpZiBbIC14ICIkKHdoaWNoIHdnZXQpIiBdOyB0aGVuCiAgICAgICAgIyB3Z2V0IGRvZXNuJ3Qgc3VwcG9ydCAtLW1ldGhvZCBmbGFnIGluIG1hbnkgY2FzZXMsIHNvIGZhbGwgYmFjayBvbiBJTURTdjEKICAgICAgICB3Z2V0ICIkMSIgLU8gLQogICAgZWxzZQogICAgICAgIGRpZSAiTm8gZG93bmxvYWQgdXRpbGl0eSAoY3VybCwgd2dldCkiCiAgICBmaQp9CgpyZWFkb25seSBJREVOVElUWV9VUkw9Imh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvMjAxNi0wNi0zMC9keW5hbWljL2luc3RhbmNlLWlkZW50aXR5L2RvY3VtZW50LyIKcmVhZG9ubHkgVFJVRV9SRUdJT049JChnZXRfY29udGVudHNfSU1EU3YyICIkSURFTlRJVFlfVVJMIiB8IGF3ayAtRlwiICcvcmVnaW9uLyB7IHByaW50ICQ0IH0nKQpyZWFkb25seSBERUZBVUxUX1JFR0lPTj0idXMtZWFzdC0xIgpyZWFkb25seSBSRUdJT049IiR7VFJVRV9SRUdJT046LSRERUZBVUxUX1JFR0lPTn0iCgpmdW5jdGlvbiBkaWUoKSB7CiAgICBlY2hvICIkQCwgZXhpdGluZy4iID4mMgogICAgZXhpdCAxCn0KCmZ1bmN0aW9uIGlzc3VlX21hdGNoKCkgewogICAgZ3JlcCAtRSAtaSAtYyAiJDEiIC9ldGMvaXNzdWUgMj4mMSAmPi9kZXYvbnVsbAogICAgWyAkPyAtZXEgMCBdICYmIGVjaG8gInRydWUiIHx8IGVjaG8gImZhbHNlIgp9CgpmdW5jdGlvbiBpc19kZWJ1bnR1KCkgewogICAgZWNobyAiJChpc3N1ZV9tYXRjaCAnRGViaWFufFVidW50dScpIgp9CgpmdW5jdGlvbiBpc19yZWRoYXQoKSB7CiAgICBpZiBbIC1mICIvZXRjL3N5c3RlbS1yZWxlYXNlIiBdIHx8CiAgICAgICAgWyAtZiAiL2V0Yy9yZWRoYXQtcmVsZWFzZSIgXTsgdGhlbgogICAgICAgIGVjaG8gInRydWUiCiAgICBlbHNlCiAgICAgICAgZWNobyAiZmFsc2UiCiAgICBmaQp9CgpmdW5jdGlvbiBpc19zdXNlKCkgewogICAgaWYgWyAtZiAiL2V0Yy9vcy1yZWxlYXNlIiBdOyB0aGVuCiAgICAgICAgeD0kKGdyZXAgLUUgLWkgLWMgInN1c2UiIC9ldGMvb3MtcmVsZWFzZSAyPi9kZXYvbnVsbCkKICAgICAgICBpZiBbICR4IC1ndCAwIF07IHRoZW4KICAgICAgICAgICAgZWNobyAidHJ1ZSIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gImZhbHNlIgogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgZWNobyAiZmFsc2UiCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfYXJjaCgpIHsKICAgIGlmIFsgIiQodW5hbWUgLW0pIiA9PSAieDg2XzY0IiBdOyB0aGVuCiAgICAgICAgZWNobyAiYW1kNjQiCiAgICBlbGlmIFtbICIkKHVuYW1lIC1tKSIgPX4gaVszLTZdODYgXV07IHRoZW4KICAgICAgICBlY2hvICIzODYiCiAgICBlbHNlCiAgICAgICAgZGllICJVbnN1cHBvcnRlZCBhcmNoaXRlY3R1cmUgJCh1bmFtZSAtbSkiCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfcGFja2FnZV90eXBlKCkgewogICAgaWYgWyAiJChpc19kZWJ1bnR1KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJkZWIiCiAgICBlbGlmIFsgIiQoaXNfcmVkaGF0KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJycG0iCiAgICBlbGlmIFsgIiQoaXNfc3VzZSkiID09ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgZWNobyAicnBtIgogICAgZmkKfQoKCmZ1bmN0aW9uIGdldF9kaXN0KCkgewogICAgaWYgWyAiJChpc19kZWJ1bnR1KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJkZWJpYW4iCiAgICBlbGlmIFsgIiQoaXNfcmVkaGF0KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJsaW51eCIKICAgIGVsaWYgW1sgIiQoaXNfc3VzZSkiID09ICJ0cnVlIiBdXTsgdGhlbgogICAgICAgIGVjaG8gImxpbnV4IgogICAgZWxzZQogICAgICAgIGRpZSAiVW5rbm93biBkaXN0cmlidXRpb24iCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfc3NtX2FnZW50KCkgewogICAgZWNobyAiRmV0Y2hpbmcgU1NNIEFnZW50Li4uIgogICAgZXh0ZW5zaW9uPSIkKGdldF9wYWNrYWdlX3R5cGUpIgogICAgZGlzdD0iJChnZXRfZGlzdCkiCiAgICBhcmNoPSIkKGdldF9hcmNoKSIKCiAgICBwYWNrYWdlPSJhbWF6b24tc3NtLWFnZW50LiRleHRlbnNpb24iCiAgICB1cmxfYmFzZT0iaHR0cHM6Ly9hbWF6b24tc3NtLSRSRUdJT04uczMuYW1hem9uYXdzLmNvbSIKICAgIHVybD0iJHt1cmxfYmFzZX0vbGF0ZXN0LyR7ZGlzdH1fJHthcmNofS8ke3BhY2thZ2V9IgogICAgRklMRV9TSVpFPTAKCiAgICB3aGlsZSBbICRSRVRSWV9DT1VOVCAtbHQgJE1BWF9SRVRSWV9DT1VOVCBdIDsgZG8KICAgICAgZ2V0X2NvbnRlbnRzICIkdXJsIiA+ICIkcGFja2FnZSIKCiAgICAgIGlmIFsgLWYgIiRwYWNrYWdlIiBdOyB0aGVuCiAgICAgICAgRklMRV9TSVpFPSQoZHUgLWsgJHBhY2thZ2UgfCBjdXQgLWYxKQogICAgICAgIGlmIFsgJEZJTEVfU0laRSAtZ3QgMCBdOyB0aGVuCiAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgIGZpCiAgICAgIFJFVFJZX0NPVU5UPSQoKFJFVFJZX0NPVU5UKzEpKTsKICAgICAgZWNobyBBd3MtSW5zdGFsbC1Tc20tQWdlbnQ6IFJldHJ5aW5nIGRvd25sb2FkIHJldHJ5Q291bnQ6ICRSRVRSWV9DT1VOVCwgZmlsZVNpemU6ICRGSUxFX1NJWkUgdXJsOiR1cmwgcGFja2FnZTokcGFja2FnZQogICAgZG9uZQoKICAgIGlmIFsgISAtZiAiJHBhY2thZ2UiIF0gfHwgWyAkRklMRV9TSVpFIC1lcSAwIF07IHRoZW4KICAgICAgICBkaWUgIkNvdWxkIG5vdCBkb3dubG9hZCB0aGUgcGFja2FnZSBmcm9tICR1cmwgYWZ0ZXIgJFJFVFJZX0NPVU5UIHJldHJpZXMiCiAgICBmaQp9CgpmdW5jdGlvbiBzdGFydF9zc21fYWdlbnQoKSB7CiAgICBlY2hvICJTdGFydGluZyBTU00gQWdlbnQuLi4iCiAgICBpZiBbIC14ICIkKHdoaWNoIHN5c3RlbWN0bCkiIF07IHRoZW4KICAgICAgICAgIHN5c3RlbWN0bCBzdGFydCBhbWF6b24tc3NtLWFnZW50CiAgICBlbGlmIFsgLXggIiQod2hpY2ggc3RhcnQpIiBdOyB0aGVuCiAgICAgICAgICBzdGFydCBhbWF6b24tc3NtLWFnZW50CiAgICBlbHNlCiAgICAgICAgICBlY2hvICJDb3VsZCBub3QgZmluZCBjb21tYW5kIHRvIHN0YXJ0IFNTTSBBZ2VudC4gU2tpcHBpbmcgQWdlbnQgc3RhcnQuIgogICAgZmkKfQoKZnVuY3Rpb24gaW5zdGFsbF9zc21fYWdlbnQoKSB7CiAgICBlY2hvICJJbnN0YWxsaW5nIFNTTSBBZ2VudC4uLiIKICAgIHdoaWxlIFsgJFJFVFJZX0NPVU5UIC1sdCAkTUFYX1JFVFJZX0NPVU5UIF0gOyBkbwogICAgICBpZiBbICIkKGlzX2RlYnVudHUpIiA9PSAidHJ1ZSIgXTsgdGhlbgogICAgICAgICMgSWYgYW4gZXhpc3RpbmcgdmVyc2lvbiBpcyBpbnN0YWxsZWQgd2l0aCBzbmFwLCBpdCB3aWxsIGJsb2NrIHVwZ3JhZGUuCiAgICAgICAgc25hcCByZW1vdmUgYW1hem9uLXNzbS1hZ2VudAogICAgICAgIGRwa2cgLWkgYW1hem9uLXNzbS1hZ2VudC5kZWIKICAgICAgZWxpZiBbICIkKGlzX3JlZGhhdCkiID09ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgeXVtIGluc3RhbGwgLS1ub2dwZ2NoZWNrIC15IGFtYXpvbi1zc20tYWdlbnQucnBtCiAgICAgIGVsaWYgWyAiJChpc19zdXNlKSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBycG0gLS1pbnN0YWxsIGFtYXpvbi1zc20tYWdlbnQucnBtCiAgICAgIGVsc2UKICAgICAgICBkaWUgIlVua25vd24gZGlzdHJpYnV0aW9uIgogICAgICBmaQoKICAgICAgaWYgWyAteCAiJCh3aGljaCBhbWF6b24tc3NtLWFnZW50KSIgXTsgdGhlbgogICAgICAgIGJyZWFrCiAgICAgIGZpCiAgICAgIFJFVFJZX0NPVU5UPSQoKFJFVFJZX0NPVU5UKzEpKTsKICAgICAgZWNobyBBd3MtSW5zdGFsbC1Tc20tQWdlbnQ6IFJldHJ5aW5nIGluc3RhbGxhdGlvbiByZXRyeUNvdW50OiAkUkVUUllfQ09VTlQKICAgIGRvbmUKCiAgICBpZiBbICEgLXggIiQod2hpY2ggYW1hem9uLXNzbS1hZ2VudCkiIF07IHRoZW4KICAgICAgZGllICJObyBTU00gYWdlbnQgd2FzIGluc3RhbGxlZCIKICAgIGZpCn0KCmZ1bmN0aW9uIG1haW4oKSB7CiAgICBNQVhfUkVUUllfQ09VTlQ9MwogICAgUkVUUllfQ09VTlQ9MAoKICAgIGNkIC90bXAKCiAgICB3aGlsZSBbICRSRVRSWV9DT1VOVCAtbHQgJE1BWF9SRVRSWV9DT1VOVCBdIDsgZG8KICAgICAgZ2V0X3NzbV9hZ2VudAogICAgICBpbnN0YWxsX3NzbV9hZ2VudAoKICAgICAgaWYgWyAhIC14ICIkKHdoaWNoIGFtYXpvbi1zc20tYWdlbnQpIiBdOyB0aGVuCiAgICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOwogICAgICAgIGVjaG8gU1NNQWdlbnQgSW5zdGFsbGF0aW9uIGZhaWxlZCAkUkVUUllfQ09VTlQgdGltZXMsIHJldHJ5aW5nLi4uCiAgICAgICAgY29udGludWUKICAgICAgZWxzZQogICAgICAgIHN0YXJ0X3NzbV9hZ2VudAogICAgICAgIGV4aXQgMAogICAgICBmaQoKICAgIGRvbmUKfQoKbWFpbiAkQCAyPiYxIHwgdGVlIC90bXAvYXdzLWluc3RhbGwtc3NtLWFnZW50LmxvZwo=",
        "MinInstanceCount": 1,
        "MaxInstanceCount": 1,
        "IamInstanceProfileName": "{{IamInstanceProfileName}}",
        "SubnetId": "{{ SubnetId }}",
        "SecurityGroupIds": "{{SecurityGroupIds}}",
        "MetadataOptions": "{{MetadataOptions}}"
      }
    },
    {
      "name": "verifySsmInstall",
      "action": "aws:runCommand",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "Parameters": {
          "commands": [
            "hostname"
          ]
        }
      }
    },
    {
      "name": "updateOSSoftware",
      "action": "aws:runCommand",
      "maxAttempts": 3,
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "set -e",
            "",
            "function unhold_deb_packages() {",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        apt-mark unhold $package",
            "    done",
            "}",
            "function removelock_zypper_packages() {",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        zypper removelock $package",
            "    done",
            "}",
            "",
            "function die() {",
            "    if [ \"$(get_dist)\" == \"debian\" ]; then",
            "        unhold_deb_packages",
            "    elif [ \"$(get_dist)\" == \"suse\" ]; then",
            "        removelock_zypper_packages",
            "    fi",
            "",
            "    echo \"$@\" >&2",
            "    exit 1",
            "}",
            "",
            "function get_contents() {",
            "    if [ -x \"$(which curl)\" ]; then",
            "        curl -s -f \"$1\"",
            "    elif [ -x \"$(which wget)\" ]; then",
            "        wget \"$1\" -O -",
            "    else",
            "        die \"No download utility (curl, wget)\"",
            "    fi",
            "}",
            "",
            "function sanitize_inputs() {",
            "    value=\"$(echo $@ | sed 's/,/ /g' | xargs | xargs)\"",
            "",
            "    if [ ! -z \"$value\" ] &&",
            "        [ \"$value\" != \"none\" ] &&",
            "        [ \"$value\" != \"all\" ]; then",
            "        echo \"$value\"",
            "    fi",
            "}",
            "",
            "function echo_options() {",
            "    echo \\\"\\$PRE_UPDATE_SCRIPT_URL\\\" == \\\"$PRE_UPDATE_SCRIPT_URL\\\"",
            "    echo \\\"\\$POST_UPDATE_SCRIPT_URL\\\" == \\\"$POST_UPDATE_SCRIPT_URL\\\"",
            "    echo \\\"\\$INCLUDE_PACKAGES\\\" == \\\"$INCLUDE_PACKAGES\\\"",
            "    echo \\\"\\$EXCLUDE_PACKAGES\\\" == \\\"$EXCLUDE_PACKAGES\\\"",
            "}",
            "",
            "function exec_cmd() {",
            "    echo \"Invoking $@...\"",
            "    eval \"$@\"",
            "",
            "    if [ $? -ne 0 ]; then",
            "        die \"\"",
            "    fi",
            "}",
            "",
            "function is_debuntu() {",
            "    grep -E -i -c 'Debian|Ubuntu' /etc/issue 2>&1 &>/dev/null",
            "    [ $? -eq 0 ] && echo \"true\" || echo \"false\"",
            "}",
            "",
            "function is_redhat() {",
            "    if [ -f \"/etc/system-release\" ] ||",
            "        [ -f \"/etc/redhat-release\" ]; then",
            "        echo \"true\"",
            "    else",
            "        echo \"false\"",
            "    fi",
            "}",
            "",
            "function is_suse() {",
            "    if type zypper > /dev/null; then",
            "        echo \"true\"",
            "    else",
            "        echo \"false\"",
            "    fi",
            "}",
            "",
            "function get_dist() {",
            "    if [ \"$(is_debuntu)\" == \"true\" ]; then",
            "        echo \"debian\"",
            "    elif [ \"$(is_redhat)\" == \"true\" ]; then",
            "        echo \"redhat\"",
            "    elif [ \"$(is_suse)\" == \"true\" ]; then",
            "        echo \"suse\"",
            "    else",
            "        die \"Unknown distribution\"",
            "    fi",
            "}",
            "",
            "function run_hook_script() {",
            "    script_url=\"$1\"",
            "    tmp_file=\"$(mktemp)\"",
            "",
            "    echo \"Downloading hook script from $script_url\"",
            "",
            "    get_contents \"$script_url\" > \"$tmp_file\"",
            "    chmod +x \"$tmp_file\"",
            "",
            "    exec_cmd \"$tmp_file\"",
            "}",
            "",
            "function update_cli() {",
            "    if [ -x \"$(which pip 2>/dev/null)\" ]; then",
            "        exec_cmd \"pip install --upgrade awscli\"",
            "    fi",
            "}",
            "",
            "function apt_get_update() {",
            "",
            "    dpkg_flags=\"-o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold\"",
            "    apt_noninteractive_cmd=\"DEBIAN_FRONTEND=noninteractive apt-get $dpkg_flags\"",
            "",
            "    exec_cmd \"apt-get clean\"",
            "    exec_cmd \"apt-get update\"",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        exec_cmd \"apt-mark hold $package\"",
            "    done",
            "",
            "    if [ -z \"$INCLUDE_PACKAGES\" ]; then",
            "        exec_cmd \"$apt_noninteractive_cmd -y dist-upgrade\"",
            "    else",
            "        for package in $INCLUDE_PACKAGES; do",
            "            exec_cmd \"$apt_noninteractive_cmd -y install --only-upgrade $package\"",
            "        done",
            "    fi",
            "",
            "    unhold_deb_packages",
            "}",
            "",
            "function yum_upgrade() {",
            "    exec_cmd 'yum clean all'",
            "",
            "    yum_cmd='yum -y upgrade'",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        yum_cmd=\"$yum_cmd -x $package\"",
            "    done",
            "",
            "    if [ ! -z \"$INCLUDE_PACKAGES\" ]; then",
            "        yum_cmd=\"$yum_cmd $INCLUDE_PACKAGES\"",
            "    fi",
            "",
            "    exec_cmd \"$yum_cmd\"",
            "}",
            "function zypper_upgrade() {",
            "    exec_cmd 'zypper clean'",
            "    zypper_cmd='zypper update -y'",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        exec_cmd \"zypper addlock $package\"",
            "    done",
            "",
            "    if [ ! -z \"$INCLUDE_PACKAGES\" ]; then",
            "        zypper_cmd=\"$zypper_cmd $INCLUDE_PACKAGES\"",
            "    fi",
            "",
            "    exec_cmd \"$zypper_cmd\"",
            "",
            "    removelock_zypper_packages",
            "}",
            "",
            "function remove_excludes_from_includes() {",
            "    if [ -z \"$EXCLUDE_PACKAGES\" ] || [ -z \"$INCLUDE_PACKAGES\" ]; then",
            "        return",
            "    fi",
            "",
            "    declare -A includes",
            "    declare -A excludes",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        excludes[$package]=\"true\"",
            "    done",
            "",
            "    for package in $INCLUDE_PACKAGES; do",
            "        if [ \"${excludes[$package]}\" != \"true\" ]; then",
            "            includes[$package]=\"true\"",
            "        fi",
            "    done",
            "",
            "    INCLUDE_PACKAGES=\"${!includes[@]}\"",
            "}",
            "",
            "function update_packages() {",
            "    remove_excludes_from_includes",
            "",
            "    if [ \"$(get_dist)\" == \"debian\" ]; then",
            "        apt_get_update",
            "    elif [ \"$(get_dist)\" == \"redhat\" ]; then",
            "        yum_upgrade",
            "    else ",
            "        zypper_upgrade",
            "    fi",
            "}",
            "",
            "function main() {",
            "    PRE_UPDATE_SCRIPT_URL=\"$(sanitize_inputs {{PreUpdateScript}})\"",
            "    POST_UPDATE_SCRIPT_URL=\"$(sanitize_inputs {{PostUpdateScript}})\"",
            "    INCLUDE_PACKAGES=\"$(sanitize_inputs {{IncludePackages}})\"",
            "    EXCLUDE_PACKAGES=\"$(sanitize_inputs {{ExcludePackages}})\"",
            "    echo_options",
            "",
            "    if [ ! -z \"$PRE_UPDATE_SCRIPT_URL\" ]; then",
            "        run_hook_script \"$PRE_UPDATE_SCRIPT_URL\"",
            "    fi",
            "",
            "    update_cli",
            "    update_packages",
            "",
            "    if [ ! -z \"$POST_UPDATE_SCRIPT_URL\" ]; then",
            "        run_hook_script \"$POST_UPDATE_SCRIPT_URL\"",
            "    fi",
            "",
            "    exit 0",
            "}",
            "",
            "main \"$@\""
          ]
        }
      }
    },
    {
      "name": "stopInstance",
      "action": "aws:changeInstanceState",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "DesiredState": "stopped"
      }
    },
    {
      "name": "createImage",
      "action": "aws:createImage",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "InstanceId": "{{launchInstance.InstanceIds}}",
        "ImageName": "{{TargetAmiName}}",
        "NoReboot": true,
        "ImageDescription": "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"
      }
    },
    {
      "name": "terminateInstance",
      "action": "aws:changeInstanceState",
      "maxAttempts": 3,
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "DesiredState": "terminated"
      }
    }
  ],
  "outputs": [
    "createImage.ImageId"
  ]
}
