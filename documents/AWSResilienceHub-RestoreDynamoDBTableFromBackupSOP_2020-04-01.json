{
  "description": "## Id\nAWSResilienceHub-RestoreDynamoDBTableFromBackupSOP_2020-04-01\n\n## Intent\nTo recover the DynamoDB table into a last known good state using an existing backup of a DynamoDB table.\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * DynamoDB table\n  * DynamoDB table backup or AWS recovery point for DynamoDbTable\n  * IAM role with [AWSBackupServiceRolePolicyForRestores](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html) policy when restoring AWS recovery point\n\n## Permissions required for AutomationAssumeRole\n  * dynamodb:RestoreTableFromBackup\n  * dynamodb:DescribeTable\n  * dynamodb:Scan\n  * dynamodb:Query\n  * dynamodb:UpdateItem\n  * dynamodb:PutItem\n  * dynamodb:GetItem\n  * dynamodb:DeleteItem\n  * dynamodb:BatchWriteItem\n\n##### Permissions required in case Kinesis Streaming destination is enabled\n  * kinesis:DescribeStream\n  * kinesis:PutRecord\n  * kinesis:PutRecords\n\n##### Permissions required to copy properties from source to restored table if `CopyAllProperties` option is enabled\n  * dynamodb:UpdateTable\n  * ssm:GetAutomationExecution\n  * ssm:StartAutomationExecution\n  * dynamodb:CreateTableReplica\n  * dynamodb:CreateTable\n  * dynamodb:DescribeKinesisStreamingDestination\n  * dynamodb:EnableKinesisStreamingDestination\n  * dynamodb:DescribeTimeToLive\n  * dynamodb:UpdateTimeToLive\n  * dynamodb:ListTagsOfResource\n  * dynamodb:TagResource\n  * dynamodb:DescribeContributorInsights\n  * dynamodb:UpdateContributorInsights\n  * dynamodb:DescribeContinuousBackups\n  * dynamodb:UpdateContinuousBackups\n  * application-autoscaling:DescribeScalableTargets\n  * application-autoscaling:RegisterScalableTarget\n  * iam:PassRole (passed to application-autoscaling.amazonaws.com)\n  * cloudwatch:DescribeAlarms\n  * cloudwatch:PutMetricAlarm\n\n## Depends on\nAWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions.\n\n### (Required) DynamoDBTableSourceName\n  * type: String\n  * description: Name of the source DynamoDB table.\n\n### (Required) DynamoDBSourceTableBackupArn\n  * type: String\n  * description: The backup Amazon Resource Name (ARN) of the source DynamoDB table.\n\n### (Required) DynamoDBTableTargetName\n  * type: String\n  * description: Name of the target DynamoDB table.\n\n### (Optional)RestoreJobIAMRoleArn:\n  * type: String\n  * description: (Optional) IAM role ARN with AWSBackupServiceRolePolicyForRestores policy used to start the restore job.\n  * default: ''\n\n### (Optional) CopyAllProperties\n  * type: Boolean\n  * description: True or False. If set to true, all the settings are copied from the source DynamoDB table to the restored DynamoDB table.\n  * default: True\n\n### (Optional) DynamoDBSourceTableAlarmNames\n  * type: StringList\n  * description: Alarm names of the DynamoDB table to be recovered. Note: Only metric alarms that are on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.\n  * max items: 10\n  * default: []\n\n## Details\nThis document creates a DynamoDB table using DynamoDB backup. After the creation is\ncomplete, the document waits for the DynamoDB table to become active, and if\n`CopyAllProperties` is set to True, it copies all the possible properties from the source\nDynamoDB table to the restored DynamoDB table. If `DynamoDBSourceTableAlarmNames` is\nprovided, the document copies the specified alarms (up to 10 alarms) from the source\nDynamoDB table.\nNote: Triggers and IAM policy cannot be copied from the source DynamoDB table. Item count\ndoes not appear immediately because DynamoDB updates this value once in every 6 hours.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * GetBackupType\n  * BranchOnBackupType\n  * RestoreDynamoDBTableFromBackup\n  * WaitTableToBeActive\n  * CheckIfNeedToCopyAllProperties\n  * CopyAllTableProperties\n  * OutputRecoveryTime\n\n## Outputs\n### RestoreDynamoDBTableFromBackup.TargetTableArn\n  * type: String\n  * description: Amazon Resource Name (ARN) of the restored table.\n\n### RestoreDynamoDBTableFromBackup.RecoveryPoint\n  * type: String\n  * description: Timestamp of the backup that is used to restore DynamoDB table.\n\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: Time taken to recover DynamoDB table in seconds.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "DynamoDBTableSourceName": {
      "type": "String",
      "description": "(Required) Name of the source DynamoDB table."
    },
    "DynamoDBSourceTableBackupArn": {
      "type": "String",
      "description": "(Required) The backup Amazon Resource Name (ARN) of the source DynamoDB table."
    },
    "DynamoDBTableTargetName": {
      "type": "String",
      "description": "(Required) Name of the target DynamoDB table."
    },
    "CopyAllProperties": {
      "type": "Boolean",
      "description": "(Optional) True or False. If set to true, all the settings are copied from the source DynamoDB table to the restored DynamoDB table.",
      "default": true
    },
    "DynamoDBSourceTableAlarmNames": {
      "type": "StringList",
      "description": "(Optional) Alarm names of the DynamoDB table to be recovered. Note:Only metric alarms that are on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.",
      "maxItems": 10,
      "default": []
    },
    "RestoreJobIAMRoleArn": {
      "type": "String",
      "description": "(Optional) IAM role ARN with AWSBackupServiceRolePolicyForRestores policy used to start the restore job.",
      "default": ""
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions."
    }
  },
  "outputs": [
    "RestoreDynamoDBTableFromBackup.TargetTableArn",
    "RestoreDynamoDBTableFromBackup.RecoveryPoint",
    "WaitForRestoreJobCompletion.RestoredDynamoDbTableArn",
    "OutputRecoveryTime.RecoveryTime",
    "RestoreDynamoDBTableFromRecoveryPoint.RestoreJobId"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "GetBackupType",
      "description": "Get type of backup for different restore techniques",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "BackupType",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "identify_backup_type",
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef check_required_params(required_params: List[str], events: dict) -> None:\n    \"\"\"\n    Check for required parameters in events. Allow empty, None or 0 values.\n    :param required_params: List of required parameters\n    :param events: input parameters in event\n    :return:\n    \"\"\"\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef identify_backup_type(events: dict, context: dict) -> dict:\n\n    required_params = [\n        'BackupArn',\n    ]\n    check_required_params(required_params, events)\n    arn = events['BackupArn']\n\n    dynamodb_backup_pattern = r\"^arn:aws:dynamodb:[^:]*:[^:]*:table/[^/]*/backup/[^/]*$\"\n    aws_recovery_point_pattern = r\"^arn:aws:backup:[^:]*:[^:]*:recovery-point:[^/]*$\"\n\n    is_dynamodb_backup = re.match(dynamodb_backup_pattern, arn)\n    is_aws_recovery_point = re.match(aws_recovery_point_pattern, arn)\n\n    if is_dynamodb_backup:\n        return \"DynamoDB Backup\"\n    elif is_aws_recovery_point:\n        return \"AWS Backup Recovery Point\"\n    else:\n        return \"Invalid or Unsupported ARN\"",
        "InputPayload": {
          "BackupArn": "{{ DynamoDBSourceTableBackupArn }}"
        }
      }
    },
    {
      "name": "BranchOnBackupType",
      "description": "Check which backup recovery method to execute",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "StringEquals": "DynamoDB Backup",
            "Variable": "{{ GetBackupType.BackupType }}",
            "NextStep": "RestoreDynamoDBTableFromBackup"
          },
          {
            "StringEquals": "AWS Backup Recovery Point",
            "Variable": "{{ GetBackupType.BackupType }}",
            "NextStep": "ValidateRoleArn"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "ValidateRoleArn",
      "description": "Validate ARN Role that allows recovery point recovery",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "validate_role_arn",
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\nimport re\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef validate_role_arn(events: dict, context: dict) -> dict:\n    arnToValidate = events['arnToValidate']\n\n    iam_role_arn_pattern = r\"arn:aws:iam::\\d+:\\S+\"\n\n    is_iam_role_arn = re.match(iam_role_arn_pattern, arnToValidate)\n\n    if not is_iam_role_arn:\n        raise Exception('Arn is not valid with pattern')",
        "InputPayload": {
          "arnToValidate": "{{ RestoreJobIAMRoleArn }}"
        }
      }
    },
    {
      "name": "RestoreDynamoDBTableFromRecoveryPoint",
      "description": "Restore DynamoDb Table from the copied recovery point in the target region",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "restore_backup_in_region_dynamodb",
        "Script": "import logging\nimport time\n\nimport boto3\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef restore_backup_in_region_dynamodb(events, context):\n    \"\"\"\n    Restore the backup from the DynamoDb recovery point in some region\n    \"\"\"\n    required_params = [\n        'IamRoleArn',\n        'RecoveryPointArn',\n        'IdempotencyToken',\n        'Region',\n        'Metadata',\n        'ResourceType'\n    ]\n    required_metadata = [\n        'targetTableName'\n    ]\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n    for key in required_metadata:\n        if key not in events['Metadata']:\n            raise KeyError(f'Requires {key} in events[\\'Metadata\\']')\n\n    backup_client = boto3.client('backup', region_name=events['Region'])\n\n    metadata = {\n        'targetTableName': events['Metadata']['targetTableName'],\n    }\n\n    logger.info(f\"Calling backup_client.start_restore_job:\"\n                f\"RecoveryPointArn={events['RecoveryPointArn']}\"\n                f\"Metadata={metadata}\"\n                f\"IamRoleArn={events['IamRoleArn']}\"\n                f\"IdempotencyToken={events['IdempotencyToken']}\"\n                f\"ResourceType={events['ResourceType']}\")\n    response = backup_client.start_restore_job(\n        RecoveryPointArn=events['RecoveryPointArn'],\n        Metadata=metadata,\n        IamRoleArn=events['IamRoleArn'],\n        IdempotencyToken=events['IdempotencyToken'],\n        ResourceType=events['ResourceType'],\n    )\n    return {\n        'RestoreJobId': response.get('RestoreJobId')\n    }",
        "InputPayload": {
          "IamRoleArn": "{{ RestoreJobIAMRoleArn }}",
          "RecoveryPointArn": "{{ DynamoDBSourceTableBackupArn }}",
          "IdempotencyToken": "{{ global:DATE_TIME }}",
          "Region": "{{ global:REGION }}",
          "ResourceType": "DynamoDB",
          "Metadata": {
            "targetTableName": "{{ DynamoDBTableTargetName }}"
          }
        }
      },
      "outputs": [
        {
          "Name": "RestoreJobId",
          "Selector": "$.Payload.RestoreJobId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "WaitForRestoreJobCompletion",
      "description": "Wait for restore job completion",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "wait_restore_job_in_region",
        "Script": "import logging\nimport time\n\nimport boto3\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef wait_restore_job_in_region(events, context):\n    required_params = [\n        'RestoreJobId',\n        'Region',\n    ]\n    wait_timeout = 3600\n    result = {}\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n    if 'WaitTimeout' in events:\n        wait_timeout = events['WaitTimeout']\n    backup_client = boto3.client('backup', region_name=events['Region'])\n    logger.info(f\"Waiting for restore job id {events['RestoreJobId']} in region: {events['Region']}\")\n\n    timeout_timestamp = time.time() + int(wait_timeout)\n    while time.time() < timeout_timestamp:\n        response = backup_client.describe_restore_job(\n            RestoreJobId=events['RestoreJobId']\n        )\n        if response.get('Status') == 'COMPLETED':\n            result = {\n                'RestoreJobId': response.get('RestoreJobId'),\n                'CreatedResourceArn': response.get('CreatedResourceArn')\n            }\n            break\n        elif response.get('Status') in ['ABORTED', 'FAILED']:\n            raise AssertionError(f\"Restore job resulted with {response.get('Status')} status\")\n        time.sleep(20)\n    if not result:\n        raise TimeoutError(f\"Restore job couldn't be completed within {wait_timeout} seconds\")\n    return result",
        "InputPayload": {
          "RestoreJobId": "{{ RestoreDynamoDBTableFromRecoveryPoint.RestoreJobId }}",
          "Region": "{{ global:REGION }}"
        }
      },
      "outputs": [
        {
          "Name": "RestoredDynamoDbTableArn",
          "Selector": "$.Payload.CreatedResourceArn",
          "Type": "String"
        }
      ],
      "nextStep": "WaitTableToBeActive"
    },
    {
      "name": "RestoreDynamoDBTableFromBackup",
      "description": "Restore table from backup",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "RestoreTableFromBackup",
        "BackupArn": "{{ DynamoDBSourceTableBackupArn }}",
        "TargetTableName": "{{ DynamoDBTableTargetName }}"
      },
      "outputs": [
        {
          "Name": "TargetTableArn",
          "Selector": "$.TableDescription.TableArn",
          "Type": "String"
        },
        {
          "Name": "RecoveryPoint",
          "Selector": "$.TableDescription.RestoreSummary.RestoreDateTime",
          "Type": "String"
        }
      ]
    },
    {
      "name": "WaitTableToBeActive",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableTargetName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    },
    {
      "name": "CheckIfNeedToCopyAllProperties",
      "description": "Check that CopyAllProperties is enabled",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "CopyAllTableProperties",
            "Variable": "{{CopyAllProperties}}",
            "BooleanEquals": true
          }
        ],
        "Default": "OutputRecoveryTime"
      }
    },
    {
      "name": "CopyAllTableProperties",
      "description": "Execute script to copy properties and alarms from the source table to the restored one",
      "action": "aws:executeAutomation",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01",
        "RuntimeParameters": {
          "AutomationAssumeRole": "{{AutomationAssumeRole}}",
          "DynamoDBTableSourceName": "{{DynamoDBTableSourceName}}",
          "DynamoDBTableTargetName": "{{DynamoDBTableTargetName}}",
          "DynamoDBSourceTableAlarmNames": "{{DynamoDBSourceTableAlarmNames}}"
        }
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      },
      "isEnd": true
    }
  ]
}
