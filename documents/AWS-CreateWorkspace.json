{
  "description": "Create Amazon Workspace. By default, only one WorkSpace per user per directory is allowed.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "DirectoryId": {
      "type": "String",
      "description": "(Required) The identifier of the Directory Service directory for the WorkSpace.",
      "allowedPattern": "^d-[0-9a-f]{8,63}$"
    },
    "UserName": {
      "type": "String",
      "description": "(Required) The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.",
      "allowedPattern": "[\\w\\-+.]+(@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]+)?"
    },
    "BundleId": {
      "type": "String",
      "description": "(Required) The identifier of the bundle for the WorkSpace.",
      "allowedPattern": "^wsb-[0-9a-z]{8,63}$"
    },
    "VolumeEncryptionKey": {
      "type": "String",
      "description": "(Optional) The symmetric KMS key used to encrypt data stored on your WorkSpace.",
      "default": "",
      "allowedPattern": "[a-f0-9-]+$|^$|^arn:aws:kms:([a-zA-Z0-9-]*):\\d{12}:key\\/[0-9a-z\\+\\-]{1,64}$|^(.*)alias\\/[a-zA-Z0-9\\/_-]+$|^alias\\/[a-zA-Z0-9\\/_-]+$"
    },
    "UserVolumeEncryptionEnabled": {
      "type": "Boolean",
      "description": "(Optional) Indicates whether the data stored on the user volume is encrypted.",
      "allowedValues": [
        true,
        false
      ],
      "default": false
    },
    "RootVolumeEncryptionEnabled": {
      "type": "Boolean",
      "description": "(Optional) Indicates whether the data stored on the root volume is encrypted.",
      "allowedValues": [
        true,
        false
      ],
      "default": false
    },
    "RunningMode": {
      "type": "String",
      "description": "(Optional) (WorkspaceProperties) The running mode of the WorkSpace.",
      "allowedValues": [
        "ALWAYS_ON",
        "AUTO_STOP",
        ""
      ],
      "default": ""
    },
    "RunningModeAutoStopTimeoutInMinutes": {
      "type": "Integer",
      "description": "(Optional) (WorkspaceProperties) The time after a user logs off when WorkSpaces are automatically stopped - Configured in 60-minute intervals.",
      "default": 0,
      "allowedPattern": "^$|[0-9]+$"
    },
    "RootVolumeSizeGib": {
      "type": "Integer",
      "description": "(Optional) (WorkspaceProperties) The size of the root volume for the WorkSpace.",
      "default": 0,
      "allowedPattern": "^$|^\\d{1,4}$"
    },
    "UserVolumeSizeGib": {
      "type": "Integer",
      "description": "(Optional) (WorkspaceProperties) The size of the user storage for the WorkSpace.",
      "default": 0,
      "allowedPattern": "^$|^\\d{1,4}$"
    },
    "ComputeTypeName": {
      "type": "String",
      "description": "(Optional) (WorkspaceProperties) The compute type for the WorkSpace.",
      "allowedValues": [
        "VALUE",
        "STANDARD",
        "PERFORMANCE",
        "POWER",
        "GRAPHICS",
        "POWERPRO",
        "GRAPHICSPRO",
        ""
      ],
      "default": ""
    },
    "Tags": {
      "type": "String",
      "description": "(Optional) The tags for the WorkSpace. (Example- [{\"Key\":\"string\", \"Value\":\"string\"},....])",
      "default": "[]",
      "allowedPattern": "^$|(.+?):(.+?)(?=(?:[^\\s]+:)|(?:$))|\\[]"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the role that allows the document to perform the actions on your behalf",
      "default": null,
      "allowedPattern": "^$|arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role\\/?[a-zA-Z_0-9+=,.@\\-_\\/]+"
    }
  },
  "mainSteps": [
    {
      "name": "CreateWorkspace",
      "timeoutSeconds": 600,
      "action": "aws:executeScript",
      "description": "Creates the Workspace",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "createWorkspace",
        "InputPayload": {
          "DirectoryId": "{{ DirectoryId }}",
          "UserName": "{{ UserName }}",
          "BundleId": "{{ BundleId }}",
          "VolumeEncryptionKey": "{{ VolumeEncryptionKey }}",
          "UserVolumeEncryptionEnabled": "{{ UserVolumeEncryptionEnabled }}",
          "RootVolumeEncryptionEnabled": "{{ RootVolumeEncryptionEnabled }}",
          "RunningMode": "{{ RunningMode }}",
          "RunningModeAutoStopTimeoutInMinutes": "{{ RunningModeAutoStopTimeoutInMinutes }}",
          "RootVolumeSizeGib": "{{ RootVolumeSizeGib }}",
          "UserVolumeSizeGib": "{{ UserVolumeSizeGib }}",
          "ComputeTypeName": "{{ ComputeTypeName }}",
          "Tags": "{{ Tags }}"
        },
        "Script": "import json\nimport boto3\nclient_ws = boto3.client(\"workspaces\")\ndef defineWorkspacePropField(workspaceJson):\n  if \"WorkspaceProperties\" in workspaceJson:\n    return workspaceJson\n  else:\n    workspaceJson[\"WorkspaceProperties\"] = {}\n  return workspaceJson\ndef createWorkspace(events, context):\n  successful = True\n  msg = \"Success\"\n  errorCode = \"\"\n  workspaceId = \"\"\n\n  # Building the request\n\n  print(f\"Events: {events}\")\n  workspaceJson = {\n      \"DirectoryId\": events[\"DirectoryId\"],\n      \"UserName\": events[\"UserName\"],\n      \"BundleId\": events[\"BundleId\"]\n  }\n\n  if events[\"VolumeEncryptionKey\"]:\n    workspaceJson[\"VolumeEncryptionKey\"] = events[\"VolumeEncryptionKey\"]\n\n  if events[\"UserVolumeEncryptionEnabled\"]:\n    workspaceJson[\"UserVolumeEncryptionEnabled\"] = events[\n    \"UserVolumeEncryptionEnabled\"\n    ]\n\n  if events[\"RootVolumeEncryptionEnabled\"]:\n    workspaceJson[\"RootVolumeEncryptionEnabled\"] = events[\n    \"RootVolumeEncryptionEnabled\"\n    ]\n\n  if events[\"RunningMode\"]:\n    workspaceJson = defineWorkspacePropField(workspaceJson)\n    workspaceJson[\"WorkspaceProperties\"][\"RunningMode\"] = events[\n    \"RunningMode\"\n    ]\n\n  if events[\"RunningModeAutoStopTimeoutInMinutes\"] > 0:\n    workspaceJson = defineWorkspacePropField(workspaceJson)\n    workspaceJson[\"WorkspaceProperties\"][\n    \"RunningModeAutoStopTimeoutInMinutes\"\n    ] = events[\"RunningModeAutoStopTimeoutInMinutes\"]\n\n  if events[\"RootVolumeSizeGib\"] > 0:\n    workspaceJson = defineWorkspacePropField(workspaceJson)\n    workspaceJson[\"WorkspaceProperties\"][\"RootVolumeSizeGib\"] = events[\n    \"RootVolumeSizeGib\"\n    ]\n\n  if events[\"UserVolumeSizeGib\"] > 0:\n    workspaceJson = defineWorkspacePropField(workspaceJson)\n    workspaceJson[\"WorkspaceProperties\"][\"UserVolumeSizeGib\"] = events[\n    \"UserVolumeSizeGib\"\n    ]\n\n  if events[\"ComputeTypeName\"]:\n    workspaceJson = defineWorkspacePropField(workspaceJson)\n    workspaceJson[\"WorkspaceProperties\"][\"ComputeTypeName\"] = events[\n    \"ComputeTypeName\"\n    ]\n\n  tags = json.loads(events[\"Tags\"])\n  if tags:\n    workspaceJson[\"Tags\"] = tags\n\n  try:\n    response = client_ws.create_workspaces(Workspaces=[workspaceJson])\n\n    if response[\"PendingRequests\"]:\n      workspaceId = response[\"PendingRequests\"][0][\"WorkspaceId\"]\n\n    elif response[\"FailedRequests\"]:\n      msg = str(response[\"FailedRequests\"][0][\"ErrorMessage\"])\n      errorCode = str(response[\"FailedRequests\"][0][\"ErrorCode\"])\n      successful = False\n\n\n  except Exception as e:\n    msg = str(e)\n    successful = False\n\n  if not successful:\n    raise Exception(\n      \"Unable to create the workspace errorCode: '{}', \"\n      \"error message: '{}'\".format(errorCode, msg)\n    )\n  return {\"workspace_id\": workspaceId}"
      },
      "outputs": [
        {
          "Name": "WorkspaceId",
          "Selector": "$.Payload.workspace_id",
          "Type": "String"
        }
      ]
    },
    {
      "name": "verifyWorkspace",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Verifies availability of the Workspace",
      "onFailure": "Abort",
      "timeoutSeconds": 1500,
      "inputs": {
        "Service": "workspaces",
        "Api": "DescribeWorkspaces",
        "WorkspaceIds": [
          "{{CreateWorkspace.WorkspaceId}}"
        ],
        "PropertySelector": "$.Workspaces[0].State",
        "DesiredValues": [
          "AVAILABLE"
        ]
      }
    }
  ],
  "outputs": [
    "CreateWorkspace.WorkspaceId"
  ]
}
