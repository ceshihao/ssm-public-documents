{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-ManageRDPSettings** automation runbook helps to manage common Remote Desktop Protocol (RDP) settings, such as the RDP port and Network Layer Authentication (NLA). By default, the document reads and outputs the values of the settings.\n\n#### Important:\nChanges to the RDP settings should be carefully reviewed before running this runbook. It is recommended to take a backup or snapshot of your EBS volumes if you are modifying the RDP configuration.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the managed instance you want to manage the RDP settings."
    },
    "RDPPortAction": {
      "type": "String",
      "description": "(Optional) An action to apply to the RDP port: Check, Modify.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Modify"
      ]
    },
    "RDPPort": {
      "type": "String",
      "description": "(Conditional) Specify the new RDP port. Used only when the action is set to `Modify`. The port number must be between `1025-65535`. **Note:** After the port is changed, the RDP service is restarted.",
      "default": "3389",
      "allowedPattern": "^(102[5-9]|1[0-9][3-9][0-9]|[2-9][0-9]{3}|[1-5][0-9]{4}|6[0-5][0-5][0-3][0-5])$"
    },
    "NLASettingAction": {
      "type": "String",
      "description": "(Optional) The action to perform on the NLA setting (enables or disables the requirement that users must be authenticated at connection time by setting the value of the terminal services `UserAuthenticationRequired` property): `Check`, `Enable`, `Disable`.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Enable",
        "Disable"
      ]
    },
    "RemoteConnections": {
      "type": "String",
      "description": "(Optional) An action to perform on the *Terminal Server* `fDenyTSConnections` registry setting: `Check`, `Enable`, `Disable`.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Enable",
        "Disable"
      ]
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "description": "Checks if the operating system of the provided managed instance is Windows.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      },
      "isCritical": true,
      "nextStep": "assertInstanceIsManagedInstance"
    },
    {
      "name": "assertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "description": "Ensures the EC2 instance is managed by AWS Systems Manager (SSM), otherwise the automation ends.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": true,
      "nextStep": "manageRDPSettings"
    },
    {
      "name": "manageRDPSettings",
      "action": "aws:runCommand",
      "description": "Runs the PowerShell script to change or check the RDP settings on the target instance.",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to get the RDP port number from the registry",
            "function Get-RDPPort {",
            "    $registryKey = \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Termin*Server\\WinStations\\RDP*CP\\\"",
            "    $checkRdpPath = (Test-Path -Path $registryKey)",
            "",
            "    if ($checkRdpPath) {",
            "        $checkRdpPort = (Get-ItemProperty -Path $registryKey -Name PortNumber -ErrorAction SilentlyContinue).portnumber",
            "",
            "        if ($null -ne $checkRdpPort) {",
            "            return $checkRdpPort",
            "        }",
            "        else {",
            "            throw \"PortNumber property does not exist.\"",
            "        }",
            "    }",
            "    else {",
            "        throw \"Registry subkey path does not exist.\"",
            "    }",
            "}",
            "",
            "# Function to set the RDP port number in the registry",
            "function Set-RDPPort {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateRange(1025, 65535)]",
            "        [String]$Port",
            "    )",
            "",
            "    try {",
            "        if ((Get-RDPPort) -eq $Port) {",
            "            Write-Output \"RDP Port is already set to $Port.\"",
            "        }",
            "        else {",
            "            $checkListeningPort = & \"${env:SYSTEMROOT}\\system32\\netstat.exe\" -nab | Select-String -Pattern \":$Port \" -Context 1",
            "",
            "            if (-not $checkListeningPort) {",
            "                $registryKey = \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Termin*Server\\WinStations\\RDP*CP\\\"",
            "                Set-ItemProperty -Path $registryKey -Name PortNumber -Value $Port -ErrorAction Stop",
            "                Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue",
            "                Write-Output \"RDP port set to $(Get-RDPPort). Make sure your AWS Security Group and Windows firewall allow traffic on the new port. To learn about Amazon EC2 Security Group, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html.\"",
            "            }",
            "            else {",
            "                throw \"Unable to change RDP port to $Port. Port is already in use.\"",
            "            }",
            "        }",
            "    }",
            "    catch {",
            "        throw \"$($_.Exception.Message)\"",
            "    }",
            "}",
            "",
            "# Function to get the Network Level Authentication (NLA) setting",
            "function Get-NLASetting {",
            "    $nlaStatus = (Get-WmiObject -class Win32_TSGeneralSetting -Namespace root\\cimv2\\terminalservices -Filter \"TerminalName='RDP-tcp'\").UserAuthenticationRequired",
            "",
            "    if ($nlaStatus -eq \"0\") {",
            "        return \"Network Level Authentication is disabled on this machine.\"",
            "    }",
            "    else {",
            "        return \"Network Level Authentication is enabled on this machine.\"",
            "    }",
            "}",
            "",
            "# Function to set the Network Level Authentication (NLA) setting",
            "function Set-NLASetting {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Enable\", \"Disable\")]",
            "        [String]$Action",
            "    )",
            "",
            "    if ($Action -eq \"Enable\") {",
            "        (Get-WmiObject -class Win32_TSGeneralSetting -Namespace root\\cimv2\\terminalservices -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(1) | Out-Null",
            "        Write-Output \"Network Level Authentication enabled.\"",
            "    }",
            "    else {",
            "        (Get-WmiObject -class Win32_TSGeneralSetting -Namespace root\\cimv2\\terminalservices -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(0) | Out-Null",
            "        Write-Output \"Network Level Authentication disabled.\"",
            "    }",
            "}",
            "",
            "# Function to get the Remote Desktop Connections setting",
            "function Get-RemoteConnectionsSetting {",
            "    $registryKey = \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Termin*Server\\\"",
            "    $checkRemoteConnectionsPath = (Test-Path -Path $registryKey)",
            "",
            "    if ($checkRemoteConnectionsPath) {",
            "        $checkRemoteConnections = (Get-ItemProperty -Path $registryKey -Name fDenyTSConnections -ErrorAction SilentlyContinue).fDenyTSConnections",
            "",
            "        if ($null -ne $checkRemoteConnections) {",
            "            if ($checkRemoteConnections -eq \"0\") {",
            "                return \"Remote Desktop connections are enabled on this machine.\"",
            "            }",
            "            else {",
            "                return \"Remote Desktop connections are disabled on this machine.\"",
            "            }",
            "        }",
            "        else {",
            "            throw \"fDenyTSConnections property does not exist.\"",
            "        }",
            "    }",
            "    else {",
            "        throw \"Registry subkey path does not exist.\"",
            "    }",
            "}",
            "",
            "# Function to set the Remote Desktop Connections setting",
            "function Set-RemoteConnectionsSetting {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Enable\", \"Disable\")]",
            "        [String]$Value",
            "    )",
            "",
            "    try {",
            "        $registryKey = \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Termin*Server\\\"",
            "",
            "        if ($Value -eq \"Enable\") {",
            "            Set-ItemProperty -Path $registryKey -Name fDenyTSConnections -Value 0 -ErrorAction Stop",
            "            Write-Output \"Remote Desktop connections enabled.\"",
            "        }",
            "        else {",
            "            Set-ItemProperty -Path $registryKey -Name fDenyTSConnections -Value 1 -ErrorAction Stop",
            "            Write-Output \"Remote Desktop connections disabled.\"",
            "        }",
            "    }",
            "    catch {",
            "        throw \"Error accessing $registryKey : $($_.Exception.Message)\"",
            "    }",
            "}",
            "",
            "try {",
            "    # Placeholder values for RDP settings",
            "    $rdpPortSettingAction = \"{{ RDPPortAction }}\"",
            "    $rdpPort = \"{{ RDPPort }}\"",
            "    $nlaSettingAction = \"{{ NLASettingAction }}\"",
            "    $remoteConnectionsAction = \"{{ RemoteConnections }}\"",
            "",
            "    # Check or set RDP port based on the action",
            "    if ($rdpPortSettingAction -eq \"Check\") {",
            "        Write-Output \"Current RDP Port: $(Get-RDPPort).\"",
            "    }",
            "    else {",
            "        Set-RDPPort -Port $rdpPort",
            "    }",
            "",
            "    # Check or set NLA setting based on the action",
            "    if ($nlaSettingAction -eq \"Check\") {",
            "        Get-NLASetting",
            "    }",
            "    else {",
            "        Set-NLASetting -Action $nlaSettingAction",
            "    }",
            "",
            "    # Check or set Remote Desktop Connections setting based on the action",
            "    if ($remoteConnectionsAction -eq \"Check\") {",
            "        Get-RemoteConnectionsSetting",
            "    }",
            "    else {",
            "        Set-RemoteConnectionsSetting -Value $remoteConnectionsAction",
            "    }",
            "}",
            "catch {",
            "    # Handle exceptions and display error message",
            "    Write-Output $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "isEnd": true
    }
  ],
  "outputs": [
    "manageRDPSettings.Output"
  ]
}
