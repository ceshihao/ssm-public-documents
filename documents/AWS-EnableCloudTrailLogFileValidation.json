{
  "description": "### Document Name - AWS-EnableCloudTrailLogFileValidation\n\n## What does this document do?\nThis document updates the configuration of one or more CloudTrail trails to enable log file integrity validation.\n\n## Input Parameters\n* TrailNames: (Required) A comma separated list of CloudTrail trail names.\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\nThis document has no outputs.\n\n## Minimum Permissions Required\n* `cloudtrail:GetTrail`\n* `cloudtrail:UpdateTrail`\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "TrailNames": {
      "type": "StringList",
      "description": "(Required) The name(s) of the targeted CloudTrail trail(s) separated by commas.",
      "allowedPattern": "^[\\w][\\w\\.,\\-_/]+[\\w]$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "",
      "allowedPattern": "^arn:aws(-cn|-us-gov)?:iam::\\d{12}:role\\/[\\w+=,.@_\\/-]+|^$"
    }
  },
  "mainSteps": [
    {
      "name": "EnableLogFileValidation",
      "action": "aws:executeScript",
      "timeoutSeconds": 300,
      "onFailure": "Abort",
      "isCritical": true,
      "isEnd": true,
      "description": "## EnableLogFileValidation\nEnables log file validation on the target trails.\n## Inputs\n* trailNames: The list of trail names.\n## Outputs\nThis step has no outputs.\n",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "enable_log_file_validation_handler",
        "InputPayload": {
          "trailNames": "{{TrailNames}}"
        },
        "Script": "import boto3\n\ndef enable_log_file_validation_handler(event, bucket):\n  client = boto3.client('cloudtrail')\n\n  trail_names = event[\"trailNames\"]\n  for trail_name in trail_names:\n    response = client.get_trail(Name = trail_name)\n    if response['Trail']['LogFileValidationEnabled']:\n      print(f'Log file validation is already enabled for trail {trail_name}.')\n    else:\n      try:\n        client.update_trail(Name = trail_name, EnableLogFileValidation = True)\n        print(f'Log file validation is now enabled for trail {trail_name}.')\n      except Exception as e:\n        errorMsg = str(e)\n        raise Exception(\"Unable to perform the required action on trail '{}'. error = '{}'.\".format(trail_name, errorMsg))\n"
      }
    }
  ]
}
