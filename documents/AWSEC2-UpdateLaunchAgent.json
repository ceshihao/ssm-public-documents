{
  "schemaVersion": "2.2",
  "description": "Update launch agents that apply to the operating system platform as follows: Windows (EC2Config, EC2Launch v1, and EC2Launch v2), Linux (Cloud-init), and Mac (MacOS-init).",
  "parameters": {},
  "mainSteps": [
    {
      "maxAttempts": 3,
      "inputs": {
        "timeoutSeconds": "36000",
        "runCommand": [
          "$Region = '{{aws:region}'",
          "# We want all errors to be fatal",
          "$ErrorActionPreference = 'Stop'",
          "$ModuleName = 'AWSUpdateWindowsInstance'",
          "$ProgressPreference = 'SilentlyContinue'",
          "",
          "# Product types",
          "$DesktopProductType = 1",
          "$DomainControllerProductType = 2",
          "$ServerProductType = 3",
          "$OperatingSystem = Get-WmiObject -class Win32_OperatingSystem",
          "$WindowsProductType = $OperatingSystem.ProductType",
          "$IsWindowsServer = ($WindowsProductType -eq $ServerProductType) -Or ($WindowsProductType -eq $DomainControllerProductType)",
          "$IsWindowsDesktop = $WindowsProductType -eq $DesktopProductType",
          "",
          "# Windows version build numbers",
          "$WindowsBuildNumber = [Environment]::OSVersion.Version.Build",
          "$WindowsCaption =  $OperatingSystem.Caption",
          "",
          "$IsWindowsServer2003 = $IsWindowsServer -And $WindowsBuildNumber -ge 3790 -And $WindowsBuildNumber -lt 6002",
          "$IsWindowsServer2008 = $IsWindowsServer -And $WindowsBuildNumber -ge 6002 -And $WindowsBuildNumber -lt 7601",
          "$IsWindowsServer2008R2 = $IsWindowsServer -And $WindowsBuildNumber -ge 7601 -And $WindowsBuildNumber -lt 9200",
          "$IsWindowsServer2012 = $IsWindowsServer -And $WindowsBuildNumber -ge 9200 -And $WindowsBuildNumber -lt 9600",
          "$IsWindowsServer2012R2 = $IsWindowsServer -And $WindowsBuildNumber -ge 9600 -And $WindowsBuildNumber -lt 14393",
          "$IsWindowsServer2016 = $IsWindowsServer -And $WindowsBuildNumber -ge 14393 -And $WindowsBuildNumber -lt 16299",
          "$IsWindowsServer1709 = $IsWindowsServer -And $WindowsBuildNumber -ge 16299 -And $WindowsBuildNumber -lt 17677",
          "$IsWindowsServer1803 = $IsWindowsServer -And $WindowsBuildNumber -ge 17677 -And $WindowsBuildNumber -lt 17763",
          "$IsWindowsServer2019 = $IsWindowsServer -And $WindowsBuildNumber -ge 17763 -And $WindowsBuildNumber -lt 20348",
          "$IsWindowsServer2022 = $IsWindowsServer -And $WindowsBuildNumber -ge 20348",
          "",
          "$IsWindows7 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 7601 -And $WindowsBuildNumber -lt 9200",
          "$IsWindows8 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 9200 -And $WindowsBuildNumber -lt 9600",
          "$IsWindows81 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 9600 -And $WindowsBuildNumber -lt 10240",
          "$IsWindows10 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 10240 -And $WindowsBuildNumber -lt 22000",
          "$IsWindows11 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 22000",
          "",
          "$EC2LaunchV1RootPath = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\"",
          "$EC2LaunchV1ModulePath = \"$EC2LaunchV1RootPath\\Module\"",
          "$RebootExitCode = 3010",
          "$VersionRegex = '^[0-9]+.[0-9]+.[0-9]+$'",
          "",
          "# Amazon certificate public keys",
          "$EC2ConfigCertificateThumbprint = \"B0ADCEEF6292D4AAD1B03E32FBC342F4A2C0D179\"",
          "$EC2LaunchV1V2CertificateThumbprint = \"ECE8DC86E2AEF2E0A892E6390FDDB860CED75D7F\"",
          "",
          "Add-Type -WarningAction SilentlyContinue -TypeDefinition @'",
          "using System;",
          "",
          "namespace AWSUpdateWindowsInstanceException",
          "{",
          "",
          "    public class LaunchAgentNotDetectedException : Exception",
          "    {",
          "        public LaunchAgentNotDetectedException(){}",
          "",
          "        public LaunchAgentNotDetectedException(string message)",
          "            : base(message)",
          "        {",
          "        }",
          "",
          "        public LaunchAgentNotDetectedException(string message, Exception inner)",
          "            : base(message, inner)",
          "        {",
          "        }",
          "    }",
          "",
          "    public class LaunchAgentDetectionException : Exception",
          "    {",
          "        public LaunchAgentDetectionException(){}",
          "",
          "        public LaunchAgentDetectionException(string message)",
          "            : base(message)",
          "        {",
          "        }",
          "",
          "        public LaunchAgentDetectionException(string message, Exception inner)",
          "            : base(message, inner)",
          "        {",
          "        }",
          "    }",
          "}",
          "'@",
          "",
          "function Get-InstalledSoftware {",
          "    $Apps = @(",
          "        Get-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\*\" # 32 Bit",
          "        Get-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\*\\\"             # 64 Bit",
          "    )",
          "    return $Apps",
          "}",
          "",
          "function Get-EC2LaunchVersion {",
          "    <#",
          "        .SYNOPSIS",
          "        Returns the version of EC2Launch installed on the instance.",
          "",
          "        .DESCRIPTION",
          "        Returns the version of EC2Launch installed on the instance.",
          "",
          "        .PARAMETER ModuleDirectory",
          "        The root directory for the EC2Launch module.",
          "",
          "        .PARAMETER ModuleFile",
          "        The file for the EC2Launch module.",
          "",
          "        .EXAMPLE",
          "        PS> Get-EC2LaunchVersion",
          "    #>",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateScript({ Test-Path -Path $_ -PathType Container })]",
          "        [string]$ModuleDirectory = $EC2LaunchV1ModulePath,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidatePattern('^[A-Za-z0-9]+.psd1$')]",
          "        [string]$ModuleManifestName = 'Ec2Launch.psd1'",
          "    )",
          "",
          "    Process {",
          "        if (-not (Test-Path -Path $ModuleDirectory -Type Container)) {",
          "            throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'EC2Launch not found.'",
          "        }",
          "",
          "        Import-LocalizedData -BaseDirectory $ModuleDirectory -FileName $ModuleManifestName -BindingVariable moduleManifest",
          "        return New-Object System.Version($($moduleManifest.Get_Item('ModuleVersion')))",
          "    }",
          "}",
          "",
          "function Install-AwsUwiEC2Launch {",
          "    <#",
          "        .SYNOPSIS",
          "        Installs EC2Launch. If already installed, it upgrades EC2Launch to the latest version.",
          "",
          "        .DESCRIPTION",
          "        Installs EC2Launch. If already installed, it upgrades EC2Launch to the latest version.",
          "",
          "        .PARAMETER Id",
          "        Identifies a running cmdlet. The ID defaults to a random GUID.",
          "        If you want to run the script idempotent, you must pass in the same ID each time you run it.",
          "",
          "        .PARAMETER WorkingDirectory",
          "        The path to the working directory on the instance.",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Launch",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Launch -WorkingDirectory 'C:\\Temp'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Launch",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Launch -WorkingDirectory 'C:\\Temp'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Launch -Id 'abc123' -WorkingDirectory 'C:\\Temp'",
          "    #>",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid().Guid,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [string]$WorkingDirectory",
          "    )",
          "",
          "    Begin {",
          "        # Dynamic Paramaters",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue' }",
          "",
          "        $functionName = $MyInvocation.MyCommand.Name",
          "        if (-not ($WorkingDirectory)) {",
          "            $WorkingDirectory = Join-Path ${env:ProgramData} (\"Amazon\\$($ModuleName)\\$($Id)\\$($functionName)\")",
          "        } else {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "",
          "        if (-not (Test-Path $WorkingDirectory)) {",
          "            New-Item $WorkingDirectory -Type Directory -Force | Out-Null",
          "        }",
          "    }",
          "",
          "    Process {",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 1: Ensure correct Windows Server version",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        if (-Not (Test-EC2LaunchV1Support)) {",
          "            exit -1",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 2: Download current version of EC2Launch",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        if ($Region.StartsWith('us-iso-*')) {",
          "            $ec2LaunchUrl = 'https://s3.us-iso-east-1.c2s.ic.gov/ec2-downloads-windows/EC2Launch/latest/EC2-Windows-Launch.zip'",
          "            $ec2LaunchInstallUrl = 'https://s3.us-iso-east-1.c2s.ic.gov/ec2-downloads-windows/EC2Launch/latest/install.ps1'",
          "        } elseif ($Region -eq 'us-isob-east-1') {",
          "            $ec2LaunchUrl = 'https://s3.us-isob-east-1.sc2s.sgov.gov/ec2-downloads-windows/EC2Launch/latest/EC2-Windows-Launch.zip'",
          "            $ec2LaunchInstallUrl = \"https://s3.us-isob-east-1.sc2s.sgov.gov/ec2-downloads-windows/EC2Config/EC2Install.zip\"",
          "        } else {",
          "            $ec2LaunchUrl = 'https://s3.amazonaws.com/ec2-downloads-windows/EC2Launch/latest/EC2-Windows-Launch.zip'",
          "            $ec2LaunchInstallUrl = 'https://s3.amazonaws.com/ec2-downloads-windows/EC2Launch/latest/install.ps1'",
          "        }",
          "        $ec2LaunchZipFile = Join-Path $WorkingDirectory 'EC2-Windows-Launch.zip'",
          "        $ec2LaunchInstallScript = Join-Path $WorkingDirectory 'install.ps1'",
          "",
          "        try {",
          "            (New-Object System.Net.WebClient).DownloadFile($ec2LaunchUrl, $ec2LaunchZipFile)",
          "            (New-Object System.Net.WebClient).DownloadFile($ec2LaunchInstallUrl, $ec2LaunchInstallScript)",
          "        } catch {",
          "            Write-Host \"EC2Launch v1 download failed with error: '$_'.\"",
          "            exit -1",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 3: Check to see if EC2Launch needs to be installed/upgraded",
          "        #-------------------------------------------------------------------------------------------------",
          "        $tempDir = Join-Path $WorkingDirectory 'temp'",
          "        if (!(Test-Path -PathType container $tempDir)) {",
          "            New-Item -ItemType Directory -Path $tempDir",
          "        }",
          "        Expand-ZipFile -File $ec2LaunchZipFile -Destination $tempDir",
          "",
          "        $downloadedVersion = Get-EC2LaunchVersion -ModuleDirectory (Join-Path $tempDir 'module')",
          "",
          "        if (Test-Path $EC2LaunchV1RootPath) {",
          "            $isInstalled = $true",
          "            $installedVersion = Get-EC2LaunchVersion",
          "            if ($installedVersion.CompareTo($downloadedVersion) -ge 0) {",
          "                Write-Host \"Update not required. EC2Launch v1 is already up-to-date with version '$downloadedVersion'.\"",
          "                exit 0",
          "            }",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 4: Backup EC2Launch Config",
          "        #-------------------------------------------------------------------------------------------------",
          "        if ($isInstalled) {",
          "            $backupDir = Join-Path $WorkingDirectory 'Backup'",
          "            $ec2LaunchConfigPath = Join-Path $EC2LaunchV1RootPath 'Config'",
          "            try {",
          "                if (-not (Test-Path $backupDir)) {",
          "                    New-Item $backupDir -Type Directory -Force | Out-Null",
          "                }",
          "",
          "                Copy-Item -Path \"$($ec2LaunchConfigPath)\\*\" -Destination $backupDir -Force",
          "            } catch {",
          "                Write-Host \"EC2Launch v1 backup failed with error: '$_'.\"",
          "                exit -1",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 5: Uninstall EC2Launch",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Remove-Item -Path $EC2LaunchV1RootPath -Recurse -Force",
          "            } catch {",
          "                Write-Host \"EC2Launch v1 uninstall failed with error: '$_'.\"",
          "                exit -1",
          "            }",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 6: Install EC2Launch",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Invoke-Expression $ec2LaunchInstallScript *>$null",
          "            Write-Host \"Successfully updated to EC2Launch v1 version '$downloadedVersion'.\"",
          "        } catch {",
          "            Write-Host \"EC2Launch v1 install failed with error: '$_'.\"",
          "            exit -1",
          "        }",
          "    }",
          "",
          "    End {",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 7: Cleanup",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Remove-Item $WorkingDirectory -Exclude '*.log' -Recurse -Force",
          "        } catch {",
          "            Write-Host \"Cleanup failed with error: '$_'.\"",
          "            exit -1",
          "        }",
          "    }",
          "}",
          "",
          "function Get-EC2ConfigVersion {",
          "    <#",
          "        .SYNOPSIS",
          "        Returns the version of EC2Config installed on the instance.",
          "",
          "        .DESCRIPTION",
          "        Returns the version of EC2Config installed on the instance.",
          "",
          "        .EXAMPLE",
          "        PS> Get-EC2ConfigVersion",
          "    #>",
          "",
          "    Param ()",
          "",
          "    Process {",
          "        $ec2Config = \"$($env:ProgramFiles)\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "        if (-not (Test-Path $ec2Config)) {",
          "            throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'EC2Config not found.'",
          "        }",
          "",
          "        return New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)",
          "    }",
          "}",
          "",
          "function Expand-ZipFile {",
          "    <#",
          "        .SYNOPSIS",
          "        Extracts all contents from a zip file and overwrites if the files exist.",
          "",
          "        .DESCRIPTION",
          "        Extracts all contents from a zip file and overwrites if the files exist.",
          "",
          "        .PARAMETER File",
          "        The file that you want to extract.",
          "",
          "        .PARAMETER Destination",
          "        The path where we want to save the extract files.",
          "",
          "        .EXAMPLE",
          "        PS> Expand-ZipFile -File 'c:\\temp\\myzipfile.zip' -Destination 'c:\\temp'",
          "    #>",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $true)]",
          "        [ValidateScript({ ((Test-Path -Path $_ -PathType Leaf) -and ($_ -like '*.zip')) })]",
          "        [string]$File,",
          "",
          "        [Parameter(Mandatory = $true)]",
          "        [string]$Destination",
          "    )",
          "",
          "    Process {",
          "        # Determine installed .NET versions",
          "        [System.Version]$dNetFull = (Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full' -ErrorAction SilentlyContinue).Version",
          "        [System.Version]$dNetClient = (Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Client' -ErrorAction SilentlyContinue).Version",
          "        [System.Version]$45 = New-Object System.Version('4.5')",
          "        [string]$psVerMajor = $PSVersionTable.PSVersion.Major",
          "",
          "        if ($psVerMajor -ge 5) {",
          "            Expand-Archive -Path $File -DestinationPath $Destination | Out-Null",
          "        } elseif (($psVerMajor -ge 3) -and (($dNetFull.CompareTo($45) -ge 0) -or ($dNetClient.CompareTo($45) -ge 0))) {",
          "            [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null",
          "            $archive = [System.IO.Compression.ZipFile]::OpenRead($File)",
          "",
          "            [string[]]$filesInArchive = @()",
          "            foreach ($entry in $archive.Entries) {",
          "                $filesInArchive += (Join-Path $Destination $entry.FullName)",
          "            }",
          "            $archive.Dispose()",
          "            [string[]]$filesInDirectory = (Get-ChildItem -Path $Destination -Recurse).FullName",
          "",
          "            foreach ($fa in $filesInArchive) {",
          "                if ($filesInDirectory -contains $fa) {",
          "                    Remove-Item -Path $fa -Force | Out-Null",
          "                }",
          "            }",
          "",
          "            [System.IO.Compression.ZipFile]::ExtractToDirectory($File, $Destination)",
          "        } else {",
          "            $shell = New-Object -ComObject Shell.Application",
          "            $shell.Namespace($destination).copyhere(($shell.NameSpace($File)).items(), 16)",
          "        }",
          "    }",
          "}",
          "",
          "function Test-WindowsReboot {",
          "    <#",
          "        .SYNOPSIS",
          "        Checks the Windows system to see if a reboot is pending.",
          "",
          "        .DESCRIPTION",
          "        Checks the Windows system to see if a reboot is pending. Returns true if there is a pending reboot; otherwise returns false.",
          "",
          "        .EXAMPLE",
          "        PS> Test-WindowsReboot",
          "    #>",
          "",
          "    Param ()",
          "",
          "    Process {",
          "        [System.Version]$osVersion = $OperatingSystem.Version",
          "",
          "        # Server 2008+",
          "        if ($osVersion.Major -ge 6) {",
          "            if (Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending' -EA Ignore) {",
          "                return $true",
          "            }",
          "        }",
          "",
          "        if (Get-Item 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired' -EA Ignore) {",
          "            return $true",
          "        }",
          "",
          "        if (Get-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager' -Name PendingFileRenameOperations -EA Ignore) {",
          "            return $true",
          "        }",
          "",
          "        return $false",
          "    }",
          "}",
          "",
          "function Test-EC2ConfigSupport {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host \"To receive automatic updates, please upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        Write-Host \"To continue using EC2Config with automatic updates, you must upgrade to Windows Server 2012 or Windows Server 2012 R2.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2016 -Or $IsWindowsServer2019) {",
          "        Write-Host \"EC2Config is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 or EC2Launch v1 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2022) {",
          "        Write-Host \"EC2Config is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2012 -Or $IsWindowsServer2012R2",
          "}",
          "",
          "function Test-EC2LaunchV1Support {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host \"To receive automatic updates, please upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        Write-Host \"To continue using EC2Launch v1 with automatic updates, you must upgrade to Windows Server 2016 or Windows Server 2019.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2012 -Or $IsWindowsServer2012R2) {",
          "        Write-Host \"EC2Launch v1 is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host \"To receive automatic updates, please upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2022) {",
          "        Write-Host \"EC2Launch v1 is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 to receive automatic updates.'",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2016 -Or $IsWindowsServer2019",
          "}",
          "",
          "function Test-EC2LaunchV2Support {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host 'You must upgrade to Windows Server 2012, Windows Server 2012 R2, Windows Server 2016",
          "        Windows Server 2019, or Windows Server 2022 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on client operating systems '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2012 -Or $IsWindowsServer2012R2 -Or $IsWindowsServer2016 -Or `",
          "            $IsWindowsServer2019 -Or $IsWindowsServer2022",
          "}",
          "",
          "function Install-AwsUwiEC2Config {",
          "    <#",
          "        .SYNOPSIS",
          "        Installs EC2Config. If already installed, it upgrades EC2Config to the latest version.",
          "",
          "        .DESCRIPTION",
          "        Installs EC2Config. If already installed, it upgrades EC2Config to the latest version.",
          "",
          "        .PARAMETER Id",
          "        Identifies a running cmdlet. The ID defaults to a random GUID.",
          "        If you want to run the script idempotent, you must pass in the same ID each time you run it.",
          "",
          "        .PARAMETER WorkingDirectory",
          "        The path to the working directory on the instance.",
          "",
          "        .PARAMETER Region",
          "        The AWS Region where the instance that runs this script is located. For example, 'us-east-1'.",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Config -Region 'us-east-1'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Config -Region 'us-east-1' -WorkingDirectory 'C:\\Temp'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Config -Region 'us-east-1'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Config -Region 'us-east-1' -WorkingDirectory 'C:\\Temp'",
          "",
          "        .EXAMPLE",
          "        Install-AwsUwiEC2Config -Region 'us-east-1' -Id 'abc123' -WorkingDirectory 'C:\\Temp'",
          "    #>",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid().Guid,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [string]$WorkingDirectory",
          "    )",
          "",
          "    Begin {",
          "        # Dynamic Paramaters",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue' }",
          "",
          "        $functionName = $MyInvocation.MyCommand.Name",
          "        if (-not ($WorkingDirectory)) {",
          "            $WorkingDirectory = Join-Path ${env:ProgramData} (\"Amazon\\$($ModuleName)\\$($Id)\\$($functionName)\")",
          "        } else {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "",
          "        if (-not (Test-Path $WorkingDirectory)) {",
          "            New-Item $WorkingDirectory -Type Directory -Force | Out-Null",
          "        }",
          "    }",
          "",
          "    Process {",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 1: Ensure correct Windows Server version",
          "        #-------------------------------------------------------------------------------------------------",
          "        if (-not (Test-EC2ConfigSupport)) {",
          "            exit -1",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 2: Create the state file",
          "        #-------------------------------------------------------------------------------------------------",
          "        $stateFile = Join-Path $WorkingDirectory \"state_$($functionName).txt\"",
          "        if (-not (Test-Path $stateFile)) {",
          "            # Create and initialize the state object",
          "            New-Item $stateFile -type File -Force | Out-Null",
          "            $stateObj = New-Object psobject -Property @{InstallEC2Config = 0; }",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "        }",
          "",
          "        $stateObj = Get-Content $stateFile -Raw | ConvertFrom-Json",
          "        if ($stateObj.InstallEC2Config -eq '0') {",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 3: Test for pending reboot prior to install/upgrade",
          "            #-------------------------------------------------------------------------------------------------",
          "            if (Test-WindowsReboot) {",
          "                Write-Host 'Windows requires a reboot. Sending reboot request to SSM Agent.'",
          "                exit $RebootExitCode",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 4: Update the state",
          "            #-------------------------------------------------------------------------------------------------",
          "            $stateObj.InstallEC2Config = 1",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 5: Download current version of EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            $zipfile = Join-Path $WorkingDirectory 'EC2ConfigSetup.zip'",
          "            if ($Region.StartsWith('us-iso-*')) {",
          "                $url = 'https://s3.us-iso-east-1.c2s.ic.gov/ec2-downloads-windows/EC2Config/EC2Install.zip'",
          "            } elseif ($Region -eq 'us-isob-east-1') {",
          "                $url = 'https://s3.us-isob-east-1.sc2s.sgov.gov/ec2-downloads-windows/EC2Config/EC2Install.zip'",
          "            } else {",
          "                $url = 'https://s3.amazonaws.com/ec2-downloads-windows/EC2Config/EC2Install.zip'",
          "            }",
          "",
          "            try {",
          "                (New-Object System.Net.WebClient).DownloadFile($url, $zipfile)",
          "            } catch {",
          "                Write-Host \"EC2Config download failed with error: '$_'.\"",
          "                exit -1",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 6: Unblock EC2Config zip file",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Unblock-File -Path $zipfile",
          "            } catch {",
          "                Write-Host \"Unable to unblock the EC2Config zip file. The command failed with error: '$_'.\"",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 7: Unzip EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Expand-ZipFile -File $zipfile -Destination $WorkingDirectory | Out-Null",
          "            } catch {",
          "                Write-Host \"Unable to unzip the EC2Config file. The command failed with error: '$_'.\"",
          "                exit -1",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 8: Check if EC2Config needs to be installed",
          "            #-------------------------------------------------------------------------------------------------",
          "            $ec2install = Join-Path $WorkingDirectory 'EC2Install.exe'",
          "            $signature = (Get-AuthenticodeSignature $ec2install).SignerCertificate.Thumbprint",
          "            if ($signature -ne $EC2ConfigCertificateThumbprint) {",
          "                Write-Host \"The downloaded installer was not signed with a trusted certificate.\"",
          "                exit -1",
          "            }",
          "",
          "            if (Test-Path $ec2install) {",
          "                $downloadedVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2install).FileVersion)",
          "",
          "                try {",
          "                    $installedVersion = Get-EC2ConfigVersion",
          "                    Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "",
          "                    if ($installedVersion.Revision -eq -1) {",
          "                        $installedVersion = New-Object System.Version(\"$($installedVersion.Major).$($installedVersion.Minor).$($installedVersion.Build).0\")",
          "                    }",
          "                } catch {",
          "                    Write-Host \"Unable to determine EC2Config version. The command failed with the error: '$_'.\"",
          "                    exit -1",
          "                }",
          "",
          "                if ($installedVersion.CompareTo($downloadedVersion) -ge 0) {",
          "                    Write-Host \"EC2Config is up-to-date with version '$downloadedVersion'.\"",
          "                    exit 0",
          "                }",
          "            } else {",
          "                Write-Host \"EC2Install.exe not found at '$ec2install'.\"",
          "                exit -1",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 9: Install EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                $startInfo = New-Object System.Diagnostics.ProcessStartInfo",
          "                $startInfo.Filename = $ec2install",
          "                $startInfo.Arguments = \"/install /quiet /norestart /log $(Join-Path $WorkingDirectory 'Install.log')\"",
          "                $startInfo.UseShellExecute = $false",
          "                $startInfo.Verb = 'runAs'",
          "                $startInfo.RedirectStandardError = $true",
          "                $startInfo.RedirectStandardOutput = $true",
          "                $proc = [System.Diagnostics.Process]::Start($startInfo)",
          "                $proc.WaitForExit()",
          "                $afterInstallVersion = Get-EC2ConfigVersion",
          "                Write-Host \"Successfully updated to EC2Config version '$afterInstallVersion'.\"",
          "            } catch {",
          "                Write-Host \"EC2Config install failed with error: '$_'.\"",
          "                exit -1",
          "            }",
          "",
          "            # Test for pending reboot after install/upgrade",
          "            if (Test-WindowsReboot) {",
          "                Write-Host 'Windows requires a reboot. Sending reboot request to SSM Agent.'",
          "                exit $RebootExitCode",
          "            }",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 10: Cleanup",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Remove-Item -Path \"$($WorkingDirectory)\\*\" -Exclude '*.log', '*.txt' -Force",
          "        } catch {",
          "            Write-Host \"Cleanup failed with error: '$_'.\"",
          "        }",
          "    }",
          "}",
          "",
          "function Invoke-UpdateEC2Config {",
          "    $command = \"Install-AwsUwiEC2Config\"",
          "    if ($id) { $command += \" -Id '$id'\" }",
          "    Invoke-Expression $command",
          "}",
          "",
          "function Invoke-UpdateEC2Launch {",
          "    $command = 'Install-AwsUwiEC2Launch'",
          "    if ($id) { $command += \" -Id '$id'\" }",
          "    Invoke-Expression $command",
          "}",
          "",
          "function Get-LocalParam {",
          "    $AddlocalParam = 'Basic'",
          "    if ([string]::IsNullOrWhitespace($env:EC2LAUNCH_TELEMETRY)) {",
          "        Write-Host 'Enabling telemetry.'",
          "        return $AddlocalParam + ',Telemetry'",
          "    }",
          "    Switch ($env:EC2LAUNCH_TELEMETRY) {",
          "        '0' { Write-Host 'Telemetry is not enabled.' }",
          "        '1' {",
          "            Write-Host 'Telemetry is enabled.'",
          "            $AddlocalParam += ',Telemetry'",
          "        }",
          "        default { Write-Host 'EC2LAUNCH_TELEMETRY is not enabled. Removing telemetry.' }",
          "    }",
          "    return $AddlocalParam",
          "}",
          "",
          "# Detect EC2Launch v2",
          "$ec2launchV2 = \"$env:ProgramFiles\\Amazon\\EC2Launch\\EC2Launch.exe\"",
          "if (Test-Path $ec2launchV2) {",
          "    $launchv2 = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "    $version = $launchv2.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    if (-Not (Test-EC2LaunchV2Support)) {",
          "        Write-Host 'EC2 Launch v2 does not support this Windows version.'",
          "        exit -1",
          "    }",
          "",
          "    if ($Region.StartsWith('us-iso-*')) {",
          "        $ec2LaunchUrl = 'https://s3.us-iso-east-1.c2s.ic.gov/amazon-ec2launch-v2/windows/amd64/latest/AmazonEC2Launch.msi'",
          "    } elseif ($Region -eq 'us-isob-east-1') {",
          "        $ec2LaunchUrl = 'https://s3.us-isob-east-1.sc2s.sgov.gov/amazon-ec2launch-v2/windows/amd64/latest/AmazonEC2Launch.msi'",
          "    } elseif ($Region.StartsWith('cn-')) {",
          "        $ec2LaunchUrl = 'https://s3.cn-north-1.amazonaws.com.cn/amazon-ec2launch-v2/windows/amd64/latest/AmazonEC2Launch.msi'",
          "    } else {",
          "        $ec2LaunchUrl = 'https://s3.amazonaws.com/amazon-ec2launch-v2/windows/amd64/latest/AmazonEC2Launch.msi'",
          "    }",
          "",
          "    $Id = [guid]::NewGuid().Guid",
          "    $WorkingDirectory = Join-Path ${env:ProgramData} (\"Amazon\\AWSUpdateWindowsInstance\\$($Id)\\\")",
          "    if (-not (Test-Path $WorkingDirectory)) {",
          "        New-Item $WorkingDirectory -Type Directory -Force | Out-Null",
          "    }",
          "    $ec2LaunchV2Msi = Join-Path $WorkingDirectory 'AmazonEC2Launch.msi'",
          "    (New-Object System.Net.WebClient).DownloadFile($ec2LaunchUrl, $ec2LaunchV2Msi)",
          "    if ((Get-AuthenticodeSignature $ec2LaunchV2Msi).SignerCertificate.Thumbprint -ne $EC2LaunchV1V2CertificateThumbprint) {",
          "        Write-Host \"The downloaded installer was not signed with a trusted certificate.\"",
          "        Exit -1",
          "    }",
          "    $latestBinaryVersion = (Get-AppLockerFileInformation -Path $ec2LaunchV2Msi | Select-Object -ExpandProperty Publisher | Select-Object BinaryVersion).BinaryVersion.toString()",
          "",
          "    if ($latestBinaryVersion -eq $launchv2.DisplayVersion) {",
          "        Write-Host \"Update not required. EC2Launch v2 is already up-to-date with version '$latestBinaryVersion'.\"",
          "        Write-Host \"The latest EC2Launch v2 version is '$latestBinaryVersion'.\"",
          "        exit -1",
          "    }",
          "",
          "    try {",
          "        $localParam = Get-LocalParam",
          "        $startProcess = @{",
          "            FilePath     = \"$env:SystemRoot\\System32\\msiexec.exe\"",
          "            ArgumentList = @(\"ADDLOCAL=$localParam\", '/quiet', '/i', $ec2LaunchV2Msi)",
          "            Wait         = $true",
          "            PassThru     = $true",
          "        }",
          "        Start-Process @startProcess",
          "    } catch {",
          "        Write-Host 'The msiexec process failed with the following error: '$_'.'",
          "        Exit -1",
          "    }",
          "    $launchv2 = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "    $version = $launchv2.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    Write-Host \"EC2Launch v2 was updated to version '$latestBinaryVersion'.\"",
          "    Write-Host \"The latest EC2Launch v2 version is '$latestBinaryVersion'.\"",
          "    Exit 0",
          "}",
          "",
          "# Detect EC2Launch v1",
          "if (Test-Path $EC2LaunchV1ModulePath) {",
          "    Import-LocalizedData -BaseDirectory $EC2LaunchV1ModulePath -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "    $version = $moduleManifest.Get_Item('ModuleVersion')",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    Invoke-UpdateEC2Launch",
          "    Import-LocalizedData -BaseDirectory $EC2LaunchV1ModulePath -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "    $version = $moduleManifest.Get_Item('ModuleVersion')",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    Write-Host \"The latest EC2Launch v1 version is '$version'.\"",
          "    Exit 0",
          "}",
          "# Detect EC2Config",
          "$ec2config = \"$env:ProgramFiles\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "if (Test-Path $ec2config) {",
          "    $configProgram = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'EC2ConfigService' }",
          "    $version = $configProgram.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    Invoke-UpdateEC2Config",
          "    $configProgram = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'EC2ConfigService' }",
          "    $version = $configProgram.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit -1",
          "    }",
          "    Exit 0",
          "}",
          "Write-Host 'No launch agent was found.'",
          "exit -1"
        ]
      },
      "name": "UpdateEC2WindowsLaunchAgents",
      "action": "aws:runPowerShellScript",
      "onFailure": "Abort",
      "timeoutSeconds": 36000,
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      }
    },
    {
      "maxAttempts": 3,
      "inputs": {
        "timeoutSeconds": "36000",
        "runCommand": [
          "VERSION_LINE=`cat /etc/*-release | grep \"^VERSION=\\\"\"`",
          "NAME_LINE=`cat /etc/*-release | grep \"^NAME=\\\"\"`",
          "if [[ $VERSION_LINE == \"VERSION=\\\"2022\\\"\" ]] && \\",
          "  [[ $NAME_LINE == \"NAME=\\\"Amazon Linux\\\"\" ]]",
          "then",
          "  echo 'Automatic updates are not yet supported on Amazon Linux 2022.'",
          "  exit -1",
          "fi",
          "if command -v yum > /dev/null; then",
          "  echo 'Running yum update.'",
          "  sudo yum update cloud-init -y",
          "  exit",
          "fi",
          "if command -v zypper > /dev/null; then",
          "  echo 'Running zypper update.'",
          "  sudo zypper update cloud-init",
          "  exit",
          "fi",
          "if command -v apt-get > /dev/null; then",
          "  echo 'Running apt-get.'",
          "  sudo apt-get upgrade cloud-init -y",
          "  exit",
          "fi",
          "echo 'No package manager.'"
        ]
      },
      "name": "UpdateEC2CloudInit",
      "action": "aws:runShellScript",
      "onFailure": "Abort",
      "timeoutSeconds": 36000,
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      }
    },
    {
      "maxAttempts": 3,
      "inputs": {
        "timeoutSeconds": "36000",
        "runCommand": [
          "echo 'Running brew update info and upgrade.'",
          "sudo -i -u ec2-user /usr/bin/env brew update",
          "if [ $? -eq 0 ]; then",
          "  echo 'Success.'",
          "else",
          "  echo 'Failure.'",
          "  exit",
          "fi",
          "sudo -i -u ec2-user /usr/bin/env brew info ec2-macos-init",
          "if [ $? -eq 0 ]; then",
          "  echo 'Success.'",
          "else",
          "  echo 'Failure.'",
          "  exit",
          "fi",
          "sudo -i -u ec2-user /usr/bin/env brew upgrade ec2-macos-init",
          "if [ $? -eq 0 ]; then",
          "  echo 'Success.'",
          "else",
          "  echo 'Failure.'",
          "  exit",
          "fi"
        ]
      },
      "name": "UpdateEC2MacOSInit",
      "action": "aws:runShellScript",
      "onFailure": "Abort",
      "timeoutSeconds": 36000,
      "precondition": {
        "StringEquals": [
          "platformType",
          "MacOS"
        ]
      }
    }
  ]
}
