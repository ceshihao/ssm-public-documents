{
  "schemaVersion": "2.2",
  "description": "Update launch agents that apply to the operating system platform as follows: Windows (EC2Config, EC2Launch v1, and EC2Launch v2), Linux (Cloud-init), and Mac (MacOS-init).",
  "parameters": {},
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "name": "CheckSupportForEC2WindowsLaunchAgentsUpdate",
      "action": "aws:runPowerShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "# We want all errors to be fatal",
          "$ErrorActionPreference = 'Stop'",
          "$ModuleName = 'AWSUpdateWindowsInstance'",
          "$ProgressPreference = 'SilentlyContinue'",
          "",
          "# Product types",
          "$DesktopProductType = 1",
          "$DomainControllerProductType = 2",
          "$ServerProductType = 3",
          "$OperatingSystem = Get-WmiObject -class Win32_OperatingSystem",
          "$WindowsProductType = $OperatingSystem.ProductType",
          "$IsWindowsServer = ($WindowsProductType -eq $ServerProductType) -Or ($WindowsProductType -eq $DomainControllerProductType)",
          "$IsWindowsDesktop = $WindowsProductType -eq $DesktopProductType",
          "",
          "# Windows version build numbers",
          "$WindowsBuildNumber = [Environment]::OSVersion.Version.Build",
          "$WindowsCaption =  $OperatingSystem.Caption",
          "",
          "$IsWindowsServer2003 = $IsWindowsServer -And $WindowsBuildNumber -ge 3790 -And $WindowsBuildNumber -lt 6002",
          "$IsWindowsServer2008 = $IsWindowsServer -And $WindowsBuildNumber -ge 6002 -And $WindowsBuildNumber -lt 7601",
          "$IsWindowsServer2008R2 = $IsWindowsServer -And $WindowsBuildNumber -ge 7601 -And $WindowsBuildNumber -lt 9200",
          "$IsWindowsServer2012 = $IsWindowsServer -And $WindowsBuildNumber -ge 9200 -And $WindowsBuildNumber -lt 9600",
          "$IsWindowsServer2012R2 = $IsWindowsServer -And $WindowsBuildNumber -ge 9600 -And $WindowsBuildNumber -lt 14393",
          "$IsWindowsServer2016 = $IsWindowsServer -And $WindowsBuildNumber -ge 14393 -And $WindowsBuildNumber -lt 16299",
          "$IsWindowsServer1709 = $IsWindowsServer -And $WindowsBuildNumber -ge 16299 -And $WindowsBuildNumber -lt 17677",
          "$IsWindowsServer1803 = $IsWindowsServer -And $WindowsBuildNumber -ge 17677 -And $WindowsBuildNumber -lt 17763",
          "$IsWindowsServer2019 = $IsWindowsServer -And $WindowsBuildNumber -ge 17763 -And $WindowsBuildNumber -lt 20348",
          "$IsWindowsServer2022 = $IsWindowsServer -And $WindowsBuildNumber -ge 20348",
          "",
          "$IsWindows7 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 7601 -And $WindowsBuildNumber -lt 9200",
          "$IsWindows8 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 9200 -And $WindowsBuildNumber -lt 9600",
          "$IsWindows81 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 9600 -And $WindowsBuildNumber -lt 10240",
          "$IsWindows10 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 10240 -And $WindowsBuildNumber -lt 22000",
          "$IsWindows11 = $IsWindowsDesktop -And $WindowsBuildNumber -ge 22000",
          "",
          "$EC2LaunchV1RootPath = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\"",
          "$EC2LaunchV1ModulePath = \"$EC2LaunchV1RootPath\\Module\"",
          "$VersionRegex = '^[0-9]+.[0-9]+.[0-9]+$'",
          "",
          "function Get-InstalledSoftware {",
          "    $Apps = @(",
          "        Get-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\"  # 32 Bit",
          "        Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\\\"             # 64 Bit",
          "    )",
          "    return $Apps",
          "}",
          "",
          "function Test-EC2ConfigSupport {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host \"To receive automatic updates, upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        Write-Host \"To continue using EC2Config with automatic updates, you must upgrade to Windows Server 2012 or Windows Server 2012 R2.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2016 -Or $IsWindowsServer2019) {",
          "        Write-Host \"EC2Config is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 or EC2Launch v1 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2022) {",
          "        Write-Host \"EC2Config is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2012 -Or $IsWindowsServer2012R2",
          "}",
          "",
          "function Test-EC2LaunchV1Support {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host \"To receive automatic updates, upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        Write-Host \"To continue using EC2Launch v1 with automatic updates, you must upgrade to Windows Server 2016 or Windows Server 2019.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2012 -Or $IsWindowsServer2012R2) {",
          "        Write-Host \"EC2Launch v1 is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host \"To receive automatic updates, upgrade to a newer Windows Server version with a supported launch agent listed here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-overview.html.\"",
          "        return $false",
          "    }",
          "    if ($IsWindowsServer2022) {",
          "        Write-Host \"EC2Launch v1 is not officially supported on '$WindowsCaption'.\"",
          "        Write-Host 'You must upgrade to EC2Launch v2 to receive automatic updates.'",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2016 -Or $IsWindowsServer2019",
          "}",
          "",
          "function Test-EC2LaunchV2Support {",
          "    if ( `",
          "        $IsWindowsServer2003 -Or $IsWindowsServer2008 -Or $IsWindowsServer2008R2 -Or `",
          "        $IsWindowsServer1709 -Or $IsWindowsServer1803 `",
          "    ) {",
          "        Write-Host \"'$WindowsCaption' has reached its end-of-life.\"",
          "        Write-Host 'You must upgrade to Windows Server 2012, Windows Server 2012 R2, Windows Server 2016",
          "        Windows Server 2019, or Windows Server 2022 to receive automatic updates.'",
          "        return $false",
          "    }",
          "    if ($IsWindows7 -Or $IsWindows8 -Or $IsWindows81 -Or $IsWindows10 -Or $IsWindows11) {",
          "        Write-Host \"Automatic updates are not supported on client operating systems '$WindowsCaption'.\"",
          "        return $false",
          "    }",
          "    return $IsWindowsServer2012 -Or $IsWindowsServer2012R2 -Or $IsWindowsServer2016 -Or `",
          "            $IsWindowsServer2019 -Or $IsWindowsServer2022",
          "}",
          "",
          "# Detect EC2Launch v2",
          "$ec2launchV2 = \"$env:ProgramFiles\\Amazon\\EC2Launch\\EC2Launch.exe\"",
          "if (Test-Path $ec2launchV2) {",
          "    $launchv2 = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "    $version = $launchv2.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit 2001",
          "    }",
          "    if (-Not (Test-EC2LaunchV2Support)) {",
          "        Write-Host 'EC2 Launch v2 does not support this Windows version.'",
          "        exit 2002",
          "    }",
          "    exit 0",
          "}",
          "",
          "# Detect EC2Launch v1",
          "if (Test-Path $EC2LaunchV1ModulePath) {",
          "    Import-LocalizedData -BaseDirectory $EC2LaunchV1ModulePath -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "    $version = $moduleManifest.Get_Item('ModuleVersion')",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit 1001",
          "    }",
          "    if (-Not (Test-EC2LaunchV1Support)) {",
          "        exit 1002",
          "    }",
          "    exit 0",
          "}",
          "",
          "# Detect EC2Config",
          "$ec2config = \"$env:ProgramFiles\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "if (Test-Path $ec2config) {",
          "    $configProgram = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'EC2ConfigService' }",
          "    $version = $configProgram.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        Write-Host 'Version is not valid.'",
          "        exit 3001",
          "    }",
          "    if (-Not (Test-EC2ConfigSupport)) {",
          "        exit 3002",
          "    }",
          "    exit 0",
          "}",
          "Write-Host 'No launch agent was found.'",
          "exit 2"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "name": "UpdateEC2WindowsLaunchAgents",
      "action": "aws:runPowerShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "$Region = \"us-east-1\"",
          "# We want all errors to be fatal",
          "$ErrorActionPreference = 'Stop'",
          "$ModuleName = 'AWSUpdateWindowsInstance'",
          "$ProgressPreference = 'SilentlyContinue'",
          "",
          "$EC2LaunchV1RootPath = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\"",
          "$EC2LaunchV1ModulePath = \"$EC2LaunchV1RootPath\\Module\"",
          "$ec2config = \"$env:ProgramFiles\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "$VersionRegex = '^[0-9]+.[0-9]+.[0-9]+$'",
          "",
          "# Amazon certificate information",
          "$AmazonCertificateIssuer = 'CN=DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1, O=\"DigiCert, Inc.\", C=US'",
          "$AmazonCertificateSubject = 'CN=\"Amazon Web Services, Inc.\", OU=Amazon EC2, O=\"Amazon Web Services, Inc.\", L=Seattle, S=Washington, C=US, SERIALNUMBER=4152954, OID.2.5.4.15=Private Organization, OID.1.3.6.1.4.1.311.60.2.1.2=Delaware, OID.1.3.6.1.4.1.311.60.2.1.3=US'",
          "",
          "Add-Type -WarningAction SilentlyContinue -TypeDefinition @'",
          "using System;",
          "",
          "'@",
          "function Get-InstalledSoftware {",
          "    $Apps = @(",
          "        Get-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\"  # 32 Bit",
          "        Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\\\"             # 64 Bit",
          "    )",
          "    return $Apps",
          "}",
          "",
          "function Test-CertificateValidity {",
          "    Param (",
          "        [Parameter(Mandatory = $true)]",
          "        [string]$filePath",
          "    )",
          "",
          "    Process {",
          "        $installedArtifactCertificate = Get-AuthenticodeSignature $filePath",
          "        return (`",
          "            $installedArtifactCertificate.Status -eq 'Valid' -and `",
          "            $installedArtifactCertificate.SignerCertificate.Issuer -eq $AmazonCertificateIssuer -and `",
          "            $installedArtifactCertificate.SignerCertificate.Subject -eq $AmazonCertificateSubject `",
          "        )",
          "    }",
          "}",
          "",
          "function Set-WorkingDirectory {",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $true)]",
          "        [ValidateScript({Test-Path -LiteralPath $_ -IsValid})]",
          "        [string]$WorkingDirectory",
          "    )",
          "    Process {",
          "        if (Test-Path -Path $WorkingDirectory -PathType Leaf) {",
          "            throw \"The $WorkingDirectory cannot point to a leaf object.\"",
          "        }",
          "        if ((Get-Item -Path \"C:\\ProgramData\\Amazon\\AWSUpdateWindowsInstance\" -Force).LinkType -eq \"Junction\") {",
          "            throw \"The $WorkingDirectory cannot point to a junction.\"",
          "        }",
          "        ",
          "        if (-not (Test-Path $WorkingDirectory)) {",
          "            New-Item -Path $WorkingDirectory -Type Directory -Force > $null",
          "        }",
          "        $administratorAndSystemOnlyAcl = New-Object System.Security.AccessControl.DirectorySecurity",
          "        $administratorAndSystemOnlyAcl.SetAccessRuleProtection($true <# isProtected #>, $false <# preserveInheritance #>)",
          "        $BuiltinAdminSID = New-Object System.Security.Principal.SecurityIdentifier 'S-1-5-32-544'",
          "        $AdminFullControlRule = New-Object System.Security.AccessControl.FileSystemAccessRule (",
          "            $BuiltinAdminSID,",
          "            [System.Security.AccessControl.FileSystemRights]::FullControl,",
          "            ([System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit),",
          "            [System.Security.AccessControl.PropagationFlags]::None,",
          "            [System.Security.AccessControl.AccessControlType]::Allow",
          "        )",
          "        $administratorAndSystemOnlyAcl.AddAccessRule($AdminFullControlRule)",
          "        $LocalSystemSID = New-Object System.Security.Principal.SecurityIdentifier 'S-1-5-18'",
          "        $SystemFullControlRule = New-Object System.Security.AccessControl.FileSystemAccessRule (",
          "            $LocalSystemSID,",
          "            [System.Security.AccessControl.FileSystemRights]::FullControl,",
          "            ([System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit),",
          "            [System.Security.AccessControl.PropagationFlags]::None,",
          "            [System.Security.AccessControl.AccessControlType]::Allow",
          "        )",
          "        $administratorAndSystemOnlyAcl.AddAccessRule($SystemFullControlRule)",
          "        $administratorAndSystemOnlyAcl.SetOwner($BuiltinAdminSID)",
          "        $administratorAndSystemOnlyAcl | Set-Acl -Path $WorkingDirectory",
          "    }",
          "}",
          "",
          "$LaunchAgentMajorVersions = @{",
          "    1 = 'EC2Launch v1'",
          "    2 = 'EC2Launch v2'",
          "    3 = 'EC2Config'",
          "}",
          "$ErrorCodeToMessage = @{",
          "    00 = 'Unexpected error occurred.'",
          "    01 = 'Installed agent version is not valid.'",
          "    02 = 'The installed agent is not supported on this OS.'",
          "    03 = 'Failed to retrieve the latest version number.'",
          "    04 = 'Failed to download agent installer.'",
          "    05 = 'The downloaded installer was not signed with a trusted certificate.'",
          "    06 = 'Installer files are missing or not valid.'",
          "    07 = 'Failed to unblock agent installer zip.'",
          "    08 = 'Failed to unzip agent installer zip.'",
          "    09 = 'Failed to uninstall existing agent.'",
          "    10 = 'Reserved for exit code 3010'",
          "    11 = 'Failure occurred while running the agent installer.'",
          "    12 = 'Agent install ran successfully, but the installed agent version is not valid.'",
          "    13 = 'Failed to backup the existing agent configuration.'",
          "    14 = 'Failed to restore the previous agent configuration.'",
          "    15 = 'Failed to create temporary installation folder.'",
          "}",
          "function Get-ErrorCodeAndMessage {",
          "    Param (",
          "        [Parameter(Mandatory = $true)]",
          "        [int]$LaunchAgentMajorVersion,",
          "        [Parameter(Mandatory = $true)]",
          "        [int]$ErrorCode",
          "    )",
          "",
          "    Process {",
          "        if (-not ($LaunchAgentMajorVersions.ContainsKey($LaunchAgentMajorVersion) -and $ErrorCodeToMessage.ContainsKey($ErrorCode))) {",
          "            Write-Host \"Unexpected error code $($LaunchAgentMajorVersion * 1000 + $ErrorCode) received.\"",
          "            return $LaunchAgentMajorVersion * 1000",
          "        }",
          "        Write-Host \"Error occurred updating $($LaunchAgentMajorVersions[$LaunchAgentMajorVersion]): $($ErrorCodeToMessage[$ErrorCode])\"",
          "        return $LaunchAgentMajorVersion * 1000 + $ErrorCode",
          "    }",
          "}",
          "",
          "function Install-AwsUwiEC2Launch {",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid().Guid,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [string]$WorkingDirectory",
          "    )",
          "",
          "    Begin {",
          "        # Dynamic Parameters",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue' }",
          "",
          "        $functionName = $MyInvocation.MyCommand.Name",
          "        if (-not ($WorkingDirectory)) {",
          "            $WorkingDirectory = Join-Path $env:ProgramData (\"Amazon\\$($ModuleName)\\$($Id)\\$($functionName)\")",
          "        } else {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "    }",
          "",
          "    Process {",
          "        $exitCode = $null",
          "        try {",
          "            Set-WorkingDirectory $WorkingDirectory",
          "        } catch {",
          "            Write-Host $_",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 15",
          "            return",
          "        }",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 1: Check to see if EC2Launch needs to be installed/upgraded",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType] 'Tls12'",
          "        $ec2LaunchUrl = 'https://s3.amazonaws.com/ec2-downloads-windows/EC2Launch/latest/'",
          "        try {",
          "            $latestVersion = New-Object -TypeName System.Version -ArgumentList (New-Object System.Net.WebClient).DownloadString($ec2LaunchUrl + 'VERSION')",
          "        } catch {",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 3",
          "            return",
          "        }",
          "        Write-Host \"The latest available EC2Launch v1 version is '$latestVersion'.\"",
          "",
          "        if (Test-Path $EC2LaunchV1RootPath) {",
          "            $isInstalled = $true",
          "            Import-LocalizedData -BaseDirectory $EC2LaunchV1ModulePath -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "            $installedVersion = New-Object System.Version($($moduleManifest.Get_Item('ModuleVersion')))",
          "            if ($installedVersion.CompareTo($latestVersion) -ge 0) {",
          "                Write-Host \"Update not required. EC2Launch v1 is already up-to-date with version '$latestVersion'.\"",
          "                $exitCode = 0",
          "                return",
          "            }",
          "            Write-Host \"The current installed EC2Launch v1 version is '$installedVersion'.\"",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 2: Download current version of EC2Launch",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        $ec2LaunchZipUrl = $ec2LaunchUrl + 'EC2-Windows-Launch.zip'",
          "        $ec2LaunchInstallUrl = $ec2LaunchUrl + 'install.ps1'",
          "        $ec2LaunchZipFile = Join-Path $WorkingDirectory 'EC2-Windows-Launch.zip'",
          "        $ec2LaunchInstallScript = Join-Path $WorkingDirectory 'install.ps1'",
          "        try {",
          "            (New-Object System.Net.WebClient).DownloadFile($ec2LaunchZipUrl, $ec2LaunchZipFile)",
          "            (New-Object System.Net.WebClient).DownloadFile($ec2LaunchInstallUrl, $ec2LaunchInstallScript)",
          "        } catch {",
          "            Write-Host \"EC2Launch v1 download failed with error: '$_'.\"",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 4",
          "            return",
          "        }",
          "",
          "        if (-not (Test-CertificateValidity $ec2LaunchInstallScript)) {",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 5",
          "            return",
          "        }",
          "        $tempDir = Join-Path $WorkingDirectory 'temp'",
          "        if (!(Test-Path -PathType container $tempDir)) {",
          "            New-Item -ItemType Directory -Path $tempDir > $null",
          "        }",
          "        Expand-ZipFile -File $ec2LaunchZipFile -Destination $tempDir",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 3: Backup EC2Launch Config",
          "        #-------------------------------------------------------------------------------------------------",
          "        $backupDir = Join-Path $WorkingDirectory 'Backup'",
          "        if ($isInstalled) {",
          "            $ec2LaunchConfigPath = Join-Path $EC2LaunchV1RootPath 'Config'",
          "            try {",
          "                if (Test-Path $ec2LaunchConfigPath) {",
          "                    if (-not (Test-Path $backupDir)) {",
          "                        New-Item $backupDir -Type Directory -Force > $null",
          "                    }",
          "                    Copy-Item -Path \"$($ec2LaunchConfigPath)\\*\" -Destination $backupDir -Force",
          "                    Write-Host \"Copied agent configuration to backup directory: '$backupDir'.\"",
          "                }",
          "            } catch {",
          "                Write-Host \"EC2Launch v1 backup failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 13",
          "                return",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 4: Uninstall EC2Launch",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Remove-Item -Path $EC2LaunchV1RootPath -Recurse -Force",
          "                Write-Host \"Successfully uninstalled EC2 Launch v1 version '$installedVersion'.\"",
          "            } catch {",
          "                Write-Host \"EC2Launch v1 uninstall failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 9",
          "                return",
          "            }",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 5: Install EC2Launch",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Invoke-Expression $ec2LaunchInstallScript *>$null",
          "            Write-Host \"Successfully installed EC2Launch v1 version '$latestVersion'.\"",
          "        } catch {",
          "            Write-Host \"EC2Launch v1 install failed with error: '$_'.\"",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 11",
          "            return",
          "        }",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 6: Restore EC2Launch config",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            if (Test-Path $backupDir) {",
          "                Copy-Item -Path \"$($backupDir)\\*\" -Destination $ec2LaunchConfigPath -Force",
          "                Write-Host \"Successfully restored previous EC2 Launch configuration.\"",
          "            }",
          "        } catch {",
          "            Write-Host \"EC2Launch v1 restore configuration failed with error: '$_'.\"",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 14",
          "            return",
          "        }",
          "    }",
          "",
          "    End {",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 7: Cleanup",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Remove-Item $WorkingDirectory -Exclude '*.log' -Recurse -Force",
          "        } catch {",
          "            Write-Warning \"Clean up of temporary files failed with error: '$_'.\"",
          "        }",
          "        if ($null -ne $exitCode) {",
          "            exit $exitCode",
          "        }",
          "    }",
          "}",
          "",
          "function WriteStandardError {",
          "    param (",
          "        [string]$Message",
          "    )",
          "    $Host.UI.WriteErrorLine($Message)",
          "}",
          "",
          "function Install-AwsUwiEC2LaunchV2 {",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid().Guid,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [string]$WorkingDirectory",
          "    )",
          "",
          "    Begin {",
          "        # Dynamic Parameters",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue' }",
          "",
          "        $functionName = $MyInvocation.MyCommand.Name",
          "        if (-not ($WorkingDirectory)) {",
          "            $WorkingDirectory = Join-Path $env:ProgramData (\"Amazon\\$($ModuleName)\\$($Id)\\$($functionName)\")",
          "        } else {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "    }",
          "",
          "    Process {",
          "        $exitCode = $null",
          "        try {",
          "            Set-WorkingDirectory $WorkingDirectory",
          "        } catch {",
          "            Write-Host $_",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 15",
          "            return",
          "        }",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 1: Check to see if EC2Launch V2 needs to be installed/upgraded",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType] 'Tls12'",
          "        $ec2LaunchUrl = \"https://s3.us-east-1.amazonaws.com/amazon-ec2launch-v2-us-east-1/windows/amd64/latest/\"",
          "        $launchv2 = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "        $installedVersion =  New-Object -TypeName System.Version -ArgumentList $launchv2.DisplayVersion",
          "        try {",
          "            $latestVersion = New-Object -TypeName System.Version -ArgumentList (New-Object System.Net.WebClient).DownloadString($ec2LaunchUrl + 'Version')",
          "        } catch {",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 3",
          "            return",
          "        }",
          "        Write-Host \"The latest available EC2Launch v2 version is '$latestVersion'.\"",
          "        if ($installedVersion.CompareTo($latestVersion) -ge 0) {",
          "            Write-Host \"Update not required. EC2Launch v2 is already up-to-date with version '$latestVersion'.\"",
          "            $exitCode = 0",
          "            return",
          "        }",
          "        Write-Host \"The current installed EC2Launch v2 version is '$($launchv2.DisplayVersion)'.\"",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 2: Download current version of EC2Launch v2",
          "        #-------------------------------------------------------------------------------------------------",
          "",
          "        try {",
          "            $ec2LaunchV2Msi = Join-Path $WorkingDirectory 'AmazonEC2Launch.msi'",
          "            $ec2LaunchMsiUrl =  $ec2LaunchUrl + 'AmazonEC2Launch.msi'",
          "            (New-Object System.Net.WebClient).DownloadFile($ec2LaunchMsiUrl, $ec2LaunchV2Msi)",
          "        } catch {",
          "            Write-Host \"EC2Launch v2 download failed with error: '$_'.\"",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 4",
          "            return",
          "        }",
          "        if (-not (Test-CertificateValidity $ec2LaunchV2Msi)) {",
          "            Write-Host \"The downloaded installer was not signed with a trusted certificate.\"",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 5",
          "            return",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 3: Install EC2Launch v2",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Constant exit code values",
          "        $exitWithReboot = 3010",
          "",
          "        # Exit codes for msiexec that indicate the installation can be retried",
          "        $retryableCodes = @{",
          "            1618 = 'ERROR_INSTALL_ALREADY_RUNNING: Another installation is already in progress. Retrying installation in \"{0}\" seconds.'",
          "        }",
          "",
          "        # Exit codes for msiexec that require a system reboot",
          "        $rebootCodes = @{",
          "            1641 = 'SUCCESS_REBOOT_INITIATED: The installer has started a reboot.'",
          "            3010 = 'SUCCESS_REBOOT_REQUIRED: A restart is required to complete the installation.'",
          "        }",
          "",
          "        $successCodes = @{",
          "            0 = 'SUCCESS: Action completed successfully.'",
          "        }",
          "",
          "        # Exit codes for msiexec that are relevant for this installation",
          "        $knownCodes = @{",
          "            1602 = 'ERROR_INSTALL_USEREXIT: User canceled installation.'",
          "            1603 = 'ERROR_INSTALL_FAILURE: Fatal error during installation.'",
          "            1618 = 'ERROR_INSTALL_ALREADY_RUNNING: Another installation is already in progress. Complete that installation before proceeding with this install.'",
          "            1619 = 'ERROR_INSTALL_PACKAGE_OPEN_FAILED: Error opening the installation package. Verify that the package exists and that you can access it, or contact the application vendor to verify that this is a valid Windows Installer package.'",
          "            1620 = 'ERROR_INSTALL_PACKAGE_INVALID: Error opening the installation package. Contact the application vendor to verify that this is a valid Windows Installer package.'",
          "            1622 = 'ERROR_INSTALL_LOG_FAILURE: Error opening installation log file. Verify that the specified log file location exists and is writable.'",
          "        }",
          "",
          "        Function InstallWithRetry {",
          "            param(",
          "                [Parameter(Mandatory = $false)]",
          "                [int]$MaximumRetry = 5,",
          "",
          "                [Parameter(Mandatory = $false)]",
          "                [int]$WaitSeconds = 60",
          "            )",
          "",
          "            $count = 0",
          "            do {",
          "                $count++",
          "                $localParam = Get-LocalParam",
          "                $startProcess = @{",
          "                    FilePath     = \"$env:SystemRoot\\System32\\msiexec.exe\"",
          "                    ArgumentList = @(\"ADDLOCAL=$localParam\", '/quiet', '/i', $ec2LaunchV2Msi)",
          "                    Wait         = $true",
          "                    PassThru     = $true",
          "                }",
          "                $cmd = Start-Process @startProcess",
          "",
          "                if (($cmd.ExitCode -in $retryableCodes.Keys) -and ($count -lt $maximumRetry)) {",
          "                    Write-Host $($retryableCodes[$cmd.ExitCode] -f $WaitSeconds)",
          "                    Start-Sleep -Seconds $WaitSeconds",
          "                    continue",
          "                }",
          "                if ($cmd.ExitCode -in $rebootCodes.Keys) {",
          "                    Write-Host $rebootCodes[$cmd.ExitCode]",
          "                    [System.Environment]::Exit($exitWithReboot)",
          "                }",
          "                if ($cmd.ExitCode -in $successCodes.Keys) {",
          "                    Write-Host $successCodes[$cmd.ExitCode]",
          "                    return",
          "                }",
          "                elseif ($cmd.ExitCode -in $knownCodes.Keys) {",
          "                    WriteStandardError -Message $knownCodes[$cmd.ExitCode]",
          "                }",
          "                else {",
          "                    WriteStandardError -Message  \"UNKNOWN: Unknown exit code '$($cmd.ExitCode)'\"",
          "                }",
          "                return",
          "            } while ($count -lt $MaximumRetry)",
          "        }",
          "",
          "        Write-Host 'Starting installation of EC2Launch v2'",
          "        try {",
          "            InstallWithRetry",
          "        } catch {",
          "            Write-Host 'EC2Launch v2 install failed with error: '$_''",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 11",
          "            return",
          "        }",
          "    }",
          "",
          "    End {",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 4: Cleanup",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Remove-Item $WorkingDirectory -Exclude '*.log' -Recurse -Force",
          "        } catch {",
          "            Write-Warning \"Clean up of temporary files failed with error: '$_'.\"",
          "        }",
          "        if ($null -ne $exitCode -and $exitCode -ne 0) {",
          "            exit $exitCode",
          "        }",
          "    }",
          "}",
          "",
          "function Expand-ZipFile {",
          "    <#",
          "        .SYNOPSIS",
          "        Extracts all contents from a zip file and overwrites if the files exist.",
          "",
          "        .DESCRIPTION",
          "        Extracts all contents from a zip file and overwrites if the files exist.",
          "",
          "        .PARAMETER File",
          "        The file that you want to extract.",
          "",
          "        .PARAMETER Destination",
          "        The path where we want to save the extract files.",
          "",
          "        .EXAMPLE",
          "        PS> Expand-ZipFile -File 'c:\\temp\\myzipfile.zip' -Destination 'c:\\temp'",
          "    #>",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $true)]",
          "        [ValidateScript({ ((Test-Path -Path $_ -PathType Leaf) -and ($_ -like '*.zip')) })]",
          "        [string]$File,",
          "",
          "        [Parameter(Mandatory = $true)]",
          "        [string]$Destination",
          "    )",
          "",
          "    Process {",
          "        # Determine installed .NET versions",
          "        [System.Version]$dNetFull = (Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full' -ErrorAction SilentlyContinue).Version",
          "        [System.Version]$dNetClient = (Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Client' -ErrorAction SilentlyContinue).Version",
          "        [System.Version]$45 = New-Object System.Version('4.5')",
          "        [string]$psVerMajor = $PSVersionTable.PSVersion.Major",
          "",
          "        if ($psVerMajor -ge 5) {",
          "            Expand-Archive -Path $File -DestinationPath $Destination > $null",
          "        } elseif (($psVerMajor -ge 3) -and (($dNetFull.CompareTo($45) -ge 0) -or ($dNetClient.CompareTo($45) -ge 0))) {",
          "            [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') > $null",
          "            $archive = [System.IO.Compression.ZipFile]::OpenRead($File)",
          "",
          "            [string[]]$filesInArchive = @()",
          "            foreach ($entry in $archive.Entries) {",
          "                $filesInArchive += (Join-Path $Destination $entry.FullName)",
          "            }",
          "            $archive.Dispose()",
          "            [string[]]$filesInDirectory = (Get-ChildItem -Path $Destination -Recurse).FullName",
          "",
          "            foreach ($fa in $filesInArchive) {",
          "                if ($filesInDirectory -contains $fa) {",
          "                    Remove-Item -Path $fa -Force > $null",
          "                }",
          "            }",
          "",
          "            [System.IO.Compression.ZipFile]::ExtractToDirectory($File, $Destination)",
          "        } else {",
          "            $shell = New-Object -ComObject Shell.Application",
          "            $shell.Namespace($destination).copyhere(($shell.NameSpace($File)).items(), 16)",
          "        }",
          "    }",
          "}",
          "",
          "function Test-WindowsReboot {",
          "    <#",
          "        .SYNOPSIS",
          "        Checks the Windows system to see if a reboot is pending.",
          "",
          "        .DESCRIPTION",
          "        Checks the Windows system to see if a reboot is pending. Returns true if there is a pending reboot; otherwise returns false.",
          "",
          "        .EXAMPLE",
          "        PS> Test-WindowsReboot",
          "    #>",
          "",
          "    Param ()",
          "",
          "    Process {",
          "        [System.Version]$osVersion = $OperatingSystem.Version",
          "",
          "        # Server 2008+",
          "        if ($osVersion.Major -ge 6) {",
          "            if (Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending' -EA Ignore) {",
          "                return $true",
          "            }",
          "        }",
          "",
          "        if (Get-Item 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired' -EA Ignore) {",
          "            return $true",
          "        }",
          "",
          "        if (Get-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager' -Name PendingFileRenameOperations -EA Ignore) {",
          "            return $true",
          "        }",
          "",
          "        return $false",
          "    }",
          "}",
          "",
          "function Install-AwsUwiEC2Config {",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory = $false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid().Guid,",
          "",
          "        [Parameter(Mandatory = $false)]",
          "        [string]$WorkingDirectory",
          "    )",
          "",
          "    Begin {",
          "        # Dynamic Parameters",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ErrorAction 'SilentlyContinue' }",
          "",
          "        $functionName = $MyInvocation.MyCommand.Name",
          "        if (-not ($WorkingDirectory)) {",
          "            $WorkingDirectory = Join-Path $env:ProgramData (\"Amazon\\$($ModuleName)\\$($Id)\\$($functionName)\")",
          "        } else {",
          "            $WorkingDirectory = Join-Path $WorkingDirectory $functionName",
          "        }",
          "    }",
          "",
          "    Process {",
          "        $exitCode = $null",
          "        try {",
          "            Set-WorkingDirectory $WorkingDirectory",
          "        } catch {",
          "            Write-Host $_",
          "            $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 15",
          "            return",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 1: Create the state file",
          "        #-------------------------------------------------------------------------------------------------",
          "        $stateFile = Join-Path $WorkingDirectory \"state_$($functionName).txt\"",
          "        if (-not (Test-Path $stateFile)) {",
          "            # Create and initialize the state object",
          "            New-Item $stateFile -type File -Force > $null",
          "            $stateObj = New-Object psobject -Property @{InstallEC2Config = 0; }",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "        }",
          "",
          "        $stateObj = Get-Content $stateFile -Raw | ConvertFrom-Json",
          "        if ($stateObj.InstallEC2Config -eq '0') {",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 2: Update the state",
          "            #-------------------------------------------------------------------------------------------------",
          "            $stateObj.InstallEC2Config = 1",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 3: Download current version of EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            $zipfile = Join-Path $WorkingDirectory 'EC2ConfigSetup.zip'",
          "            $url = 'https://s3.amazonaws.com/ec2-downloads-windows/EC2Config/EC2Install.zip'",
          "",
          "            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType] 'Tls12'",
          "            try {",
          "                (New-Object System.Net.WebClient).DownloadFile($url, $zipfile)",
          "            } catch {",
          "                Write-Host \"EC2Config download failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 4",
          "                return",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 4: Unblock EC2Config zip file",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Unblock-File -Path $zipfile",
          "            } catch {",
          "                Write-Host \"Unable to unblock the EC2Config zip file. The command failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 7",
          "                return",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 5: Unzip EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                Expand-ZipFile -File $zipfile -Destination $WorkingDirectory > $null",
          "            } catch {",
          "                Write-Host \"Unable to unzip the EC2Config file. The command failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 8",
          "                return",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 6: Check if EC2Config needs to be installed",
          "            #-------------------------------------------------------------------------------------------------",
          "            $ec2install = Join-Path $WorkingDirectory 'EC2Install.exe'",
          "            if (-not (Test-CertificateValidity $ec2Install)) {",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 5",
          "                return",
          "            }",
          "",
          "            if (Test-Path $ec2install) {",
          "                $downloadedVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2install).FileVersion)",
          "",
          "                try {",
          "                    $installedVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)",
          "                    Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "",
          "                    if ($installedVersion.Revision -eq -1) {",
          "                        $installedVersion = New-Object System.Version(\"$($installedVersion.Major).$($installedVersion.Minor).$($installedVersion.Build).0\")",
          "                    }",
          "                } catch {",
          "                    Write-Host \"Unable to determine EC2Config version. The command failed with the error: '$_'.\"",
          "                    $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 1",
          "                    return",
          "                }",
          "",
          "                if ($installedVersion.CompareTo($downloadedVersion) -ge 0) {",
          "                    Write-Host \"EC2Config is up-to-date with version '$downloadedVersion'.\"",
          "                    $exitCode = 0",
          "                    return",
          "                }",
          "            } else {",
          "                Write-Host \"EC2Install.exe not found at '$ec2install'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 6",
          "                return",
          "            }",
          "",
          "            #-------------------------------------------------------------------------------------------------",
          "            # Step 7: Install EC2Config",
          "            #-------------------------------------------------------------------------------------------------",
          "            try {",
          "                $startInfo = New-Object System.Diagnostics.ProcessStartInfo",
          "                $startInfo.Filename = $ec2install",
          "                $startInfo.Arguments = \"/install /quiet /norestart /log $(Join-Path $WorkingDirectory 'Install.log')\"",
          "                $startInfo.UseShellExecute = $false",
          "                $startInfo.Verb = 'runAs'",
          "                $startInfo.RedirectStandardError = $true",
          "                $startInfo.RedirectStandardOutput = $true",
          "                $proc = [System.Diagnostics.Process]::Start($startInfo)",
          "                $proc.WaitForExit()",
          "                $afterInstallVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)",
          "                Write-Host \"Successfully updated to EC2Config version '$afterInstallVersion'.\"",
          "            } catch {",
          "                Write-Host \"EC2Config install failed with error: '$_'.\"",
          "                $exitCode = Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 11",
          "                return",
          "            }",
          "",
          "            # Test for pending reboot after install/upgrade",
          "            if (Test-WindowsReboot) {",
          "                Write-Host 'Your system has a pending reboot. Reboot to apply updated configuration changes.'",
          "            }",
          "        }",
          "",
          "        #-------------------------------------------------------------------------------------------------",
          "        # Step 8: Cleanup",
          "        #-------------------------------------------------------------------------------------------------",
          "        try {",
          "            Remove-Item -Path \"$($WorkingDirectory)\\*\" -Exclude '*.log', '*.txt' -Recurse -Force",
          "        } catch {",
          "            Write-Warning \"Clean up of temporary files failed with error: '$_'.\"",
          "        }",
          "        if ($null -ne $exitCode -and $exitCode -ne 0) {",
          "            exit $exitCode",
          "        }",
          "    }",
          "}",
          "",
          "function Get-LocalParam {",
          "    $AddlocalParam = 'Basic'",
          "    if ([string]::IsNullOrWhitespace($env:EC2LAUNCH_TELEMETRY)) {",
          "        Write-Host 'Enabling telemetry.'",
          "        return $AddlocalParam + ',Telemetry'",
          "    }",
          "    Switch ($env:EC2LAUNCH_TELEMETRY) {",
          "        '0' { Write-Host 'Telemetry is not enabled.' }",
          "        '1' {",
          "            Write-Host 'Telemetry is enabled.'",
          "            $AddlocalParam += ',Telemetry'",
          "        }",
          "        default { Write-Host 'EC2LAUNCH_TELEMETRY is not enabled. Removing telemetry.' }",
          "    }",
          "    return $AddlocalParam",
          "}",
          "",
          "# Setup and clean up AWSUpdateWindowsInstance folder",
          "$tempDir = \"$env:ProgramData\\Amazon\\AWSUpdateWindowsInstance\"",
          "try {",
          "    Set-WorkingDirectory $tempDir",
          "} catch {",
          "    Write-Host \"Failed to create temporary installation directory: '$_'\"",
          "    exit -1",
          "}",
          "if (Test-Path $tempDir) {",
          "    $children = Get-ChildItem -Path $tempDir -Directory",
          "    foreach ($folder in  Get-ChildItem -Path $tempDir -Directory) {",
          "        if (Get-ChildItem \"$($tempDir)\\$($folder)\\*\" -Include \"EC2Install.zip\",\"Ec2Install.exe\",\"AmazonEC2Launch.msi\",\"install.ps1\", \"EC2-Windows-Launch.zip\" -Recurse) {",
          "            try {",
          "                Remove-Item -Path \"$($tempDir)\\$($folder)\\*\" -Exclude '*.log', '*.txt' -Recurse -Force",
          "            } catch {",
          "                Write-Host \"Failed to remove old installer files in '$($tempDir)\\$($folder)'\"",
          "            }",
          "        }",
          "    }",
          "}",
          "",
          "# Detect EC2Launch v2",
          "$ec2launchV2 = \"$env:ProgramFiles\\Amazon\\EC2Launch\\EC2Launch.exe\"",
          "if (Test-Path $ec2launchV2) {",
          "    Install-AwsUwiEC2LaunchV2",
          "    $launchv2 = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'Amazon EC2Launch' }",
          "    $version = $launchv2.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        exit Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 2 -ErrorCode 12",
          "    }",
          "    Write-Host \"EC2Launch v2 was updated to version '$($launchv2.DisplayVersion)'.\"",
          "    exit 0",
          "}",
          "",
          "# Detect EC2Launch v1",
          "if (Test-Path $EC2LaunchV1ModulePath) {",
          "    Install-AwsUwiEC2Launch",
          "    Import-LocalizedData -BaseDirectory $EC2LaunchV1ModulePath -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "    $version = $moduleManifest.Get_Item('ModuleVersion')",
          "    if (-not ($version -match $VersionRegex)) {",
          "        exit Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 1 -ErrorCode 12",
          "    }",
          "    Write-Host \"EC2Launch v1 was updated to version '$version'.\"",
          "    exit 0",
          "}",
          "# Detect EC2Config",
          "$ec2config = \"$env:ProgramFiles\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "if (Test-Path $ec2config) {",
          "    Install-AwsUwiEC2Config",
          "    $configProgram = Get-InstalledSoftware | where-object { $_.DisplayName -eq 'EC2ConfigService' }",
          "    $version = $configProgram.version",
          "    if (-not ($version -match $VersionRegex)) {",
          "        exit Get-ErrorCodeAndMessage -LaunchAgentMajorVersion 3 -ErrorCode 12",
          "    }",
          "    Write-Host \"EC2Config was updated to version '$version'.\"",
          "    exit 0",
          "}",
          "Write-Host 'No launch agent was found.'",
          "exit -1"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "name": "CheckSupportForEC2CloudInitUpdate",
      "action": "aws:runShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "eval $(grep -E '^(ID|VERSION_ID|NAME)=' /etc/os-release)",
          "case $ID in",
          "  amzn)",
          "    case $VERSION_ID in",
          "      2)",
          "        exit 0",
          "      ;;",
          "      2022)",
          "        echo 'Automatic updates are not supported on Amazon Linux 2022.'",
          "        exit 1",
          "      ;;",
          "      2023)",
          "        echo 'Automatic updates are not supported on Amazon Linux 2023.'",
          "        exit 1",
          "      ;;",
          "    esac",
          "  ;;",
          "  rhel|centos|rocky|ol|ubuntu|debian|sles)",
          "    exit 0",
          "  ;;",
          "  *)",
          "    echo 'Automatic updates are not supported on $NAME.'",
          "    exit 1",
          "  ;;",
          "esac",
          ""
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "name": "UpdateEC2CloudInit",
      "action": "aws:runShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "eval $(grep -E '^(ID|VERSION_ID|NAME)=' /etc/os-release)",
          "case $ID in",
          "  amzn)",
          "    case $VERSION_ID in",
          "      2)",
          "        echo 'Running yum update.'",
          "        sudo yum update cloud-init -y",
          "        if [ $? -ne 0 ]; then",
          "          echo 'Failure.'",
          "          exit 2",
          "        fi",
          "        exit 0",
          "      ;;",
          "    esac",
          "  ;;",
          "  rhel|centos|rocky|ol)",
          "    echo 'Running yum update.'",
          "    sudo yum update cloud-init -y",
          "    if [ $? -ne 0 ]; then",
          "      echo 'Failure.'",
          "      exit 2",
          "    fi",
          "    exit 0",
          "  ;;",
          "  ubuntu|debian)",
          "    echo 'Running apt-get update.'",
          "    sudo apt-get update",
          "    if [ $? -ne 0 ]; then",
          "      echo 'Failure.'",
          "      exit 3",
          "    fi",
          "    echo 'Running apt-get upgrade.'",
          "    sudo apt-get install --only-upgrade cloud-init -y",
          "    if [ $? -ne 0 ]; then",
          "      echo 'Failure.'",
          "      exit 4",
          "    fi",
          "    exit 0",
          "  ;;",
          "  sles)",
          "    echo 'Running zypper update.'",
          "    sudo zypper update cloud-init -y",
          "    if [ $? -ne 0 ]; then",
          "      echo 'Failure.'",
          "      exit 5",
          "    fi",
          "    exit 0",
          "  ;;",
          "esac",
          "echo 'Automatic updates could not be run on $NAME.'",
          "exit 1"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "MacOS"
        ]
      },
      "name": "CheckSupportForEC2MacOSInitUpgrade",
      "action": "aws:runShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "echo 'Running brew update.'",
          "sudo -i -u ec2-user /usr/bin/env brew update",
          "if [ $? -ne 0 ]; then",
          "  echo 'Failure.'",
          "  exit 1",
          "fi",
          "echo 'Running brew info ec2-macos-init.'",
          "sudo -i -u ec2-user /usr/bin/env brew info ec2-macos-init",
          "if [ $? -ne 0 ]; then",
          "  echo 'Failure.'",
          "  exit 2",
          "fi"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "MacOS"
        ]
      },
      "name": "UpdateEC2MacOSInit",
      "action": "aws:runShellScript",
      "maxAttempts": 3,
      "timeoutSeconds": 36000,
      "inputs": {
        "timeoutSeconds": "36000",
        "onFailure": "exit",
        "runCommand": [
          "echo 'Running brew upgrade ec2-macos-init.'",
          "sudo -i -u ec2-user /usr/bin/env brew upgrade ec2-macos-init",
          "if [ $? -ne 0 ]; then",
          "  echo 'Failure.'",
          "  exit 3",
          "fi"
        ]
      }
    }
  ]
}
