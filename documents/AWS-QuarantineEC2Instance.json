{
  "description": "## Name\n  Quarantine EC2 instance which are suspected of being compromised.\n\n## What does this document do?\n  Automation document to isolate EC2 instance which are suspected of being compromised.\n## Minimum Permissions Required\n  * `ec2:DescribeInstances`\n  * `ec2:DescribeSecurityGroups`\n  * `ec2:CreateSecurityGroup`\n  * `ec2:RevokeSecurityGroupIngress`\n  * `ec2:RevokeSecurityGroupEgress`\n  * `ec2:CreateSnapshot`\n  * `ec2:DescribeSnapshots`\n  * `ec2:ModifyInstanceAttribute`\n  * `autoscaling:DescribeAutoScalingInstances`\n  * `autoscaling:DetachInstances`",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the Amazon EC2 instance.",
      "allowedPattern": "i-[a-z0-9]{8,17}$"
    },
    "IsolationSecurityGroup": {
      "type": "String",
      "description": "(Optional) The name of isolation security group",
      "default": "isolated-security-group",
      "allowedPattern": "[-_a-zA-Z0-9]*"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the role that allows the document to perform the actions on your behalf",
      "default": "",
      "allowedPattern": "^$|arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role\\/?[a-zA-Z_0-9+=,.@\\-_\\/]+"
    }
  },
  "mainSteps": [
    {
      "name": "GetEC2InstanceResources",
      "description": "## GetEC2InstanceResources.\nGet EC2 Instance Resources\n",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{InstanceId}}"
        ]
      },
      "outputs": [
        {
          "Name": "RevokedSecurityGroupsIds",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups..GroupId",
          "Type": "StringList"
        },
        {
          "Name": "RevokedSecurityGroupsNames",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups..GroupName",
          "Type": "StringList"
        },
        {
          "Name": "VpcId",
          "Selector": "$.Reservations[0].Instances[0].VpcId",
          "Type": "String"
        },
        {
          "Name": "VolumeId",
          "Selector": "$.Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId"
        }
      ]
    },
    {
      "name": "PrepareQuarantineEC2Instance",
      "description": "## PrepareQuarantineEC2Instance.\nPrepare Quarantine EC2 Instance\n",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "prepareQuarantine",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "VpcId": "{{ GetEC2InstanceResources.VpcId }}",
          "IsolationSecurityGroup": "{{ IsolationSecurityGroup }}"
        },
        "Script": "import time\n\nimport boto3\n\nclient = boto3.client(\"ec2\")\nclient_asg = boto3.client(\"autoscaling\")\n\n\ndef deAttachEC2FromAutoScalingGroup(data):\n    asgNames = []\n    instanceId = data\n    args = {\"InstanceIds\": [instanceId]}\n    while True:\n        resp = client_asg.describe_auto_scaling_instances(**args)\n        for asg in resp[\"AutoScalingInstances\"]:\n            asgNames.append(asg[\"AutoScalingGroupName\"])\n        if \"NextToken\" in resp:\n            args[\"NextToken\"] = resp[\"NextToken\"]\n        else:\n            break\n\n    for asgName in asgNames:\n        client_asg.detach_instances(\n            AutoScalingGroupName=asgName,\n            InstanceIds=[\n                instanceId,\n            ],\n            ShouldDecrementDesiredCapacity=False,\n        )\n\ndef find_security_groups(vpc_id, group_name):\n    security_groups = client.describe_security_groups(\n        Filters=[\n            {\"Name\": \"group-name\", \"Values\": [group_name]},\n            {\"Name\": \"vpc-id\", \"Values\": [vpc_id]},\n        ]\n    )[\"SecurityGroups\"]\n    for security_group in security_groups:\n        if (\n            security_group[\"GroupName\"] == group_name\n            and security_group[\"VpcId\"] == vpc_id\n        ):\n            return security_group\n    return None\n\ndef prepareQuarantine(events, context):\n    successful = True\n    msg = \"Success\"\n    security_group_id = \"\"\n    # quarantinedEC2 = []\n    # failedQuarantineEC2 = []\n    quarantineSG = events[\"IsolationSecurityGroup\"]\n\n    # Check if any EC2 attached to auto-scaling-group\n    deAttachEC2FromAutoScalingGroup(events[\"InstanceId\"])\n\n    # Prepare Quarantine....\n\n    vpcId = events[\"VpcId\"]\n    try:\n        security_group = find_security_groups(vpcId, quarantineSG)\n        security_group_IPPermissions = \"\"\n        security_group_IPPermissions_Egress = \"\"\n        if security_group is None:\n            response = client.create_security_group(\n                GroupName=quarantineSG,\n                Description=\"Isolated security group used to Quarantine EC2\",\n                VpcId=vpcId,\n            )\n            security_group_id = response[\"GroupId\"]\n            time.sleep(5)\n            sg = find_security_groups(vpcId, quarantineSG)\n            security_group_IPPermissions = sg[\"IpPermissions\"]\n            security_group_IPPermissions_Egress = sg[\"IpPermissionsEgress\"]\n\n        else:\n            security_group_id = security_group[\"GroupId\"]\n            security_group_IPPermissions = security_group[\"IpPermissions\"]\n            security_group_IPPermissions_Egress = security_group[\n                \"IpPermissionsEgress\"\n            ]\n\n        if security_group_IPPermissions:\n            client.revoke_security_group_ingress(\n                GroupId=security_group_id,\n                IpPermissions=security_group_IPPermissions,\n                DryRun=False,\n            )\n        if security_group_IPPermissions_Egress:\n            client.revoke_security_group_egress(\n                GroupId=security_group_id,\n                IpPermissions=security_group_IPPermissions_Egress,\n                DryRun=False,\n            )\n    except Exception as e:\n        msg = str(e)\n        successful = False\n\n    if not successful:\n        raise Exception(msg)\n\n    return security_group_id"
      },
      "outputs": [
        {
          "Name": "SecurityGroupId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ]
    },
    {
      "name": "createSnapshot",
      "description": "## createSnapshot.\ncreate Snapshot\n",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "ec2",
        "Api": "CreateSnapshot",
        "VolumeId": "{{ GetEC2InstanceResources.VolumeId }}",
        "Description": "Snapshot for Quarantine EC2 with # {{ InstanceId }}"
      },
      "outputs": [
        {
          "Name": "SnapId",
          "Selector": "SnapshotId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "verifySnapshot",
      "description": "## verifySnapshot.\nverify Snapshot\n",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Abort",
      "timeoutSeconds": 600,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSnapshots",
        "SnapshotIds": [
          "{{createSnapshot.SnapId}}"
        ],
        "PropertySelector": "Snapshots[0].State",
        "DesiredValues": [
          "completed"
        ]
      }
    },
    {
      "name": "ModifyInstanceAttribute",
      "description": "## ModifyInstanceAttribute.\nModify Instance Attribute\n",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "ec2",
        "Api": "ModifyInstanceAttribute",
        "InstanceId": "{{InstanceId}}",
        "Groups": [
          "{{PrepareQuarantineEC2Instance.SecurityGroupId}}"
        ]
      }
    }
  ],
  "outputs": [
    "GetEC2InstanceResources.RevokedSecurityGroupsIds",
    "GetEC2InstanceResources.RevokedSecurityGroupsNames",
    "createSnapshot.SnapId"
  ]
}
