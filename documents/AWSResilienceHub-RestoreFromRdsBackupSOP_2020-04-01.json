{
  "description": "# Id\n  rds:sop:restore_from_backup:2020-04-01\n\n## Intent\n  SOP to restore a single AZ RDS DB from backup.\n\n## Type\n  SOFTWARE\n\n## Risk\n  MEDIUM\n\n## Requirements\n  * a single AZ RDS DB with backup\n\n## Permission required for AutomationAssumeRole\n  * rds:DeleteDBInstance\n  * rds:DescribeDBInstances\n  * rds:DescribeDBSnapshots\n  * rds:ModifyDBInstance\n  * rds:RestoreDBInstanceFromDBSnapshot\n  * kms:DescribeKey\n  * kms:CreateGrant\n\n## Supports Rollback\n  No.\n\n## Inputs\n### DbInstanceIdentifier\n  * Description: (Required) The identifier of the source DB instance with at least one read replica\n  * Type: String\n### Dryrun\n  * Description: (Optional) Dryrun indicates a testing run, changes will be rolled back.\n  * Type: String\n  * Default: False\n### AutomationAssumeRole:\n  * Description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * Type: String\n### SnapshotId:\n  * Description: (Optional) The identifier of the snapshot to restore\n  * Type: String\n  * Default: '$LATEST'\n\n## Details of SSM Document steps:\n### On Dryrun mode (Dryrun=True):\n  * Dryrun_TrafficRedirectionBranch\n  * RecordStartTime\n  * ResolveSnapshotId\n  * RestoreSnapshot\n  * WaitForNewDatabaseToBeAvailable\n  * RenameParameters\n  * RenamePreviousDatabaseToOld\n  * WaitForMasterToBeRenamedToOld\n  * RenameNewDatabaseToNoSuffix\n  * WaitForNewToBeRenamedToMaster\n  * OutputRecoveryTime\n  * Dryrun_EndBranch\n  * DeleteRestoredInstance\n\n### On Wetrun mode (Dryrun=False):\n  * Dryrun_TrafficRedirectionBranch\n  * TrafficRedirectionPause\n  * RecordStartTime\n  * ResolveSnapshotId\n  * RestoreSnapshot\n  * WaitForNewDatabaseToBeAvailable\n  * RenameParameters\n  * RenamePreviousDatabaseToOld\n  * WaitForMasterToBeRenamedToOld\n  * RenameNewDatabaseToNoSuffix\n  * WaitForNewToBeRenamedToMaster\n  * OutputRecoveryTime\n  * Dryrun_EndBranch\n  * EmptyStepForWetrunEnd\n\n## Outputs\n  * OutputRecoveryTime.RecoveryTime: recovery time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "Dryrun": {
      "type": "Boolean",
      "default": false,
      "description": "(Optional) Dryrun indicates a testing run, changes will be rolled back."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf"
    },
    "DbInstanceIdentifier": {
      "type": "String",
      "description": "(Required) The identifier of the DB instance to be replaced, or base name if dry run"
    },
    "SnapshotId": {
      "type": "String",
      "description": "(Optional) The identifier of the snapshot to restore",
      "default": "$LATEST"
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "Dryrun_TrafficRedirectionBranch",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "TrafficRedirectionPause",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": false
          },
          {
            "NextStep": "RecordStartTime",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": true
          }
        ]
      },
      "description": ""
    },
    {
      "name": "TrafficRedirectionPause",
      "action": "aws:pause",
      "inputs": {
        "Message": "Resume execution once traffic has been redirected from the resource"
      }
    },
    {
      "name": "RecordStartTime",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "ResolveSnapshotId",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "SnapshotId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  if events['SnapshotId'] != '$LATEST':\n    return events['SnapshotId']\n\n  #return latest snapshot\n  import boto3\n  rds = boto3.client('rds')\n  db_snapshots = rds.describe_db_snapshots(DBInstanceIdentifier = events['DbInstanceIdentifier'])['DBSnapshots']\n  if not db_snapshots:\n    raise Exception(\"No DB snapshots found for RDS instance \" + events['DbInstanceIdentifier'])\n  sorted_snapshots = sorted(db_snapshots, key=lambda snapshot:snapshot['SnapshotCreateTime'], reverse=True)\n  return sorted_snapshots[0]['DBSnapshotIdentifier']",
        "InputPayload": {
          "Dryrun": "{{Dryrun}}",
          "SnapshotId": "{{SnapshotId}}",
          "DbInstanceIdentifier": "{{DbInstanceIdentifier}}"
        }
      }
    },
    {
      "name": "RestoreSnapshot",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestoredInstanceId",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "\nimport logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\n\ndef get_execution_instance_id(rds_instance_id, middle, execution_id):\n    \"\"\"\n    Valid RDS Instance identifier from string\n    \"\"\"\n    # identifier must be less than 63 characters, but we allow 2 chars for extra suffix\n    # https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html\n    max_length = 61\n    prefix_length = max_length - len(execution_id) - len(middle) - 2  # hyphens\n    prefix = rds_instance_id[0:prefix_length].rstrip('-')  # two consecutive hyphens is not allowed.\n    rds_instance_id = f\"{prefix}-{middle}-{execution_id}\"\n    return rds_instance_id\n\n\n\n\ndef script_handler(events, context):\n  import boto3\n  rds = boto3.client('rds')\n  db_instance_response = rds.describe_db_instances(DBInstanceIdentifier = events['SourceDBInstanceIdentifier'])['DBInstances'][0]\n  restored_db_instance_id = get_execution_instance_id(events['SourceDBInstanceIdentifier'], 'new', events['AutomationId'])\n  if db_instance_response['MultiAZ']:\n    rds.restore_db_instance_from_db_snapshot(\n      Engine = db_instance_response['Engine'],\n      StorageType = db_instance_response['StorageType'],\n      DBSnapshotIdentifier = events['DBSnapshotIdentifier'],\n      DBInstanceIdentifier = restored_db_instance_id,\n      DBInstanceClass = db_instance_response['DBInstanceClass'],\n      DBSubnetGroupName = db_instance_response['DBSubnetGroup']['DBSubnetGroupName'],\n      Port = db_instance_response[\"Endpoint\"]['Port'],\n      MultiAZ = db_instance_response['MultiAZ'],\n      CopyTagsToSnapshot = db_instance_response['CopyTagsToSnapshot'],\n      VpcSecurityGroupIds = [db_instance_response['VpcSecurityGroups'][0]['VpcSecurityGroupId']]\n    )\n  else:\n    rds.restore_db_instance_from_db_snapshot(\n      Engine = db_instance_response['Engine'],\n      StorageType = db_instance_response['StorageType'],\n      DBSnapshotIdentifier = events['DBSnapshotIdentifier'],\n      DBInstanceIdentifier = restored_db_instance_id,\n      DBInstanceClass = db_instance_response['DBInstanceClass'],\n      DBSubnetGroupName = db_instance_response['DBSubnetGroup']['DBSubnetGroupName'],\n      AvailabilityZone = db_instance_response['AvailabilityZone'],\n      Port = db_instance_response[\"Endpoint\"]['Port'],\n      MultiAZ = db_instance_response['MultiAZ'],\n      CopyTagsToSnapshot = db_instance_response['CopyTagsToSnapshot'],\n      VpcSecurityGroupIds = [db_instance_response['VpcSecurityGroups'][0]['VpcSecurityGroupId']]\n    )\n  return restored_db_instance_id",
        "InputPayload": {
          "SourceDBInstanceIdentifier": "{{DbInstanceIdentifier}}",
          "DBSnapshotIdentifier": "{{ResolveSnapshotId.SnapshotId}}",
          "AutomationId": "{{automation:EXECUTION_ID}}"
        }
      }
    },
    {
      "name": "WaitForNewDatabaseToBeAvailable",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1800,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{RestoreSnapshot.RestoredInstanceId}}",
        "PropertySelector": "$.DBInstances[0].DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "RenameParameters",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "MasterSourceId",
          "Selector": "$.Payload.MasterSourceId",
          "Type": "String"
        },
        {
          "Name": "MasterTargetId",
          "Selector": "$.Payload.MasterTargetId",
          "Type": "String"
        },
        {
          "Name": "ReplicaSourceId",
          "Selector": "$.Payload.ReplicaSourceId",
          "Type": "String"
        },
        {
          "Name": "ReplicaTargetId",
          "Selector": "$.Payload.ReplicaTargetId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "\nimport logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\n\ndef get_execution_instance_id(rds_instance_id, middle, execution_id):\n    \"\"\"\n    Valid RDS Instance identifier from string\n    \"\"\"\n    # identifier must be less than 63 characters, but we allow 2 chars for extra suffix\n    # https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html\n    max_length = 61\n    prefix_length = max_length - len(execution_id) - len(middle) - 2  # hyphens\n    prefix = rds_instance_id[0:prefix_length].rstrip('-')  # two consecutive hyphens is not allowed.\n    rds_instance_id = f\"{prefix}-{middle}-{execution_id}\"\n    return rds_instance_id\n\n\n\n\ndef script_handler(events, context):\n  masterId = events['DbInstanceIdentifier']\n  dryrun = events['Dryrun']\n  automation_id = events['AutomationId']\n  target_db_instance_id = get_execution_instance_id(masterId, 'new', automation_id)\n  old_db_instance_id = get_execution_instance_id(masterId, 'old', automation_id)\n  return {\n    'MasterSourceId' : target_db_instance_id if dryrun else masterId,\n    'MasterTargetId' : target_db_instance_id + '-1' if dryrun else old_db_instance_id,\n    'ReplicaSourceId' : target_db_instance_id + '-1' if dryrun else target_db_instance_id,\n    'ReplicaTargetId' : target_db_instance_id + '-2' if dryrun else masterId\n  }",
        "InputPayload": {
          "Dryrun": "{{Dryrun}}",
          "DbInstanceIdentifier": "{{DbInstanceIdentifier}}",
          "AutomationId": "{{automation:EXECUTION_ID}}"
        }
      }
    },
    {
      "name": "RenamePreviousDatabaseToOld",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBInstance",
        "DBInstanceIdentifier": "{{RenameParameters.MasterSourceId}}",
        "NewDBInstanceIdentifier": "{{RenameParameters.MasterTargetId}}",
        "ApplyImmediately": true
      }
    },
    {
      "name": "WaitForMasterToBeRenamedToOld",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  import boto3, time\n  rds = boto3.client('rds')\n  while True:\n    try:\n      if rds.describe_db_instances(DBInstanceIdentifier=events[\"DBInstanceIdentifier\"])[\"DBInstances\"][0][\"DBInstanceStatus\"] == \"available\":\n        return \"Instance successfully renamed to %s\" % (events[\"DBInstanceIdentifier\"])\n    except rds.exceptions.DBInstanceNotFoundFault:\n      pass\n    finally:\n      time.sleep(30)",
        "InputPayload": {
          "DBInstanceIdentifier": "{{RenameParameters.MasterTargetId}}"
        }
      }
    },
    {
      "name": "RenameNewDatabaseToNoSuffix",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBInstance",
        "DBInstanceIdentifier": "{{RenameParameters.ReplicaSourceId}}",
        "NewDBInstanceIdentifier": "{{RenameParameters.ReplicaTargetId}}",
        "ApplyImmediately": true
      }
    },
    {
      "name": "WaitForNewToBeRenamedToMaster",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  import boto3, time\n  rds = boto3.client('rds')\n  while True:\n    try:\n      if rds.describe_db_instances(DBInstanceIdentifier=events[\"DBInstanceIdentifier\"])[\"DBInstances\"][0][\"DBInstanceStatus\"] == \"available\":\n        return \"Instance successfully renamed to %s\" % (events[\"DBInstanceIdentifier\"])\n    except rds.exceptions.DBInstanceNotFoundFault:\n      pass\n    finally:\n      time.sleep(30)",
        "InputPayload": {
          "DBInstanceIdentifier": "{{RenameParameters.ReplicaTargetId}}"
        }
      }
    },
    {
      "name": "OutputRecoveryTime",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n  from datetime import datetime, timezone\n  from dateutil import parser\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{RecordStartTime.StartTime}}"
        }
      },
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "Dryrun_EndBranch",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "EmptyStepForWetrunEnd",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": false
          },
          {
            "NextStep": "DeleteRestoredInstance",
            "Variable": "{{Dryrun}}",
            "BooleanEquals": true
          }
        ]
      }
    },
    {
      "name": "EmptyStepForWetrunEnd",
      "action": "aws:sleep",
      "isEnd": true,
      "inputs": {
        "Duration": "PT1S"
      }
    },
    {
      "name": "DeleteRestoredInstance",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "inputs": {
        "Service": "rds",
        "Api": "DeleteDBInstance",
        "DBInstanceIdentifier": "{{RenameParameters.ReplicaTargetId}}",
        "SkipFinalSnapshot": true,
        "DeleteAutomatedBackups": true
      }
    }
  ]
}
