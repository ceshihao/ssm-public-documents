{
  "schemaVersion": "2.2",
  "description": "This action will convert a SUSE Linux subscription to an AWS provided SUSE subscription.",
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "action": "aws:runShellScript",
      "name": "InvokeLinuxScript",
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "#!/bin/bash\nset -e\n\nif [ -f /etc/os-release ]; then\n    . /etc/os-release\n    OS_RELEASE=\"$ID${VERSION_ID:+.${VERSION_ID}}\"\nelif [ -f /etc/centos-release ]; then\n    OS_RELEASE=\"centos.$(awk '{print $3}' /etc/centos-release)\"\nelif [ -f /etc/redhat-release ]; then\n    OS_RELEASE=\"rhel.$(lsb_release -r | awk '{print $2}')\"\nfi\n\ncase \"$OS_RELEASE\" in\n    amzn.2|centos.7*|centos.8*|fedora.*|rhel.7*|rhel.8*|sles*)\n        command_path='/usr/bin/'\n        ;;\n    amzn.2018.03|centos.6*|debian.*|rhel.6*|ubuntu.16*|ubuntu.18*|ubuntu.20*)\n        command_path='/bin/'\n        ;;\n    *)\n        # Catch all without the full path for untested platforms\n        command_path=''\nesac\n\nExitWithFailureMessage() {\n    MESSAGE=\"$1\"\n    JSON=\"$2\"\n    if [[ \"$JSON\" == \"PRINT_JSON\" ]]; then\n        \"${command_path}echo\" \"{\\\"error\\\":\\\"$MESSAGE\\\"}\"\n    fi\n    WriteStandardError \"$MESSAGE\"\n    exit 1\n}\n\n# exit codes. 0-100 are reserved exit codes. 101-150 codes are for linux, 151-200 are for macos and 200 onwards codes are for windows.\nExitWithFailureMessageAndExitCode() {\n    MESSAGE=\"$1\"\n    EXITCODE=\"$2\"\n    JSON=\"$3\"\n    if [[ \"$JSON\" == \"PRINT_JSON\" ]]; then\n        \"${command_path}echo\" \"{\\\"error\\\":\\\"$MESSAGE\\\",\\\"exitCode\\\":\\\"$EXITCODE\\\"}\"\n    fi\n    WriteStandardError \"$MESSAGE\"\n    exit \"$EXITCODE\"\n}\n\nExitWithSuccessMessage() {\n    \"${command_path}echo\" \"$1\"\n    exit 0\n}\n\nWriteStandardError() {\n    MESSAGE=\"$1\"\n    (>&2 \"${command_path}echo\" \"$MESSAGE\")\n}\n\nTestPerformAction() {\n    if [[ \"$1\" != \"Yes\" ]]; then\n        ExitWithFailureMessage \"No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes.\"\n    fi\n}\n\nSUPPORTED_ID=\"sles\"\n\nos-release () (\n    . /etc/os-release\n    if ! [[ ${!1} ]]; then\n        return 1\n    fi\n    printf '%s\\n' \"${!1}\"\n)\n\nif [[ $(os-release ID) != \"$SUPPORTED_ID\" ]]; then\n    printf 'This script must be run on a SLES distribution. Other distributions are not supported.' >&2\n    exit 1\nfi\n\necho \"Starting migration of SUSE subscription to AWS.\"\n\nSUSEConnect --cleanup\nsed -i '/^# Added by SMT reg/,+1d' /etc/hosts\n\nif [ -d \"/var/lib/aws-replication-agent/\" ]; then\n    sudo zypper addrepo /var/lib/aws-replication-agent/ mgn-repo\n    ZYPPER_INSTALL_CMD=\"sudo zypper -n install --repo mgn-repo\"\nelse\n    ZYPPER_INSTALL_CMD=\"sudo zypper -n install\"\nfi\n\n$ZYPPER_INSTALL_CMD cloud-regionsrv-client\n$ZYPPER_INSTALL_CMD cloud-regionsrv-client-plugin-ec2\n$ZYPPER_INSTALL_CMD --force-resolution regionServiceClientConfigEC2\n\nsudo zypper removerepo mgn-repo || true\n\nsystemctl disable guestregister.service\nregistercloudguest --clean\n\nSUSEConnect --cleanup\n\n# Files contain registration information\nrm -f /etc/SUSEConnect\nrm -rf /etc/zypp/credentials.d/*\nrm -rf /etc/zypp/repos.d/*\nrm -f /etc/zypp/services.d/*\n\n# Register the instance with the update infrastructure\nsystemctl enable guestregister.service\nsystemctl start guestregister.service\nregistercloudguest --force-new\necho \"registercloudguest exit code: $?\"\n\n# Check status of registration\nSUSEConnect --status\n\n# Update the 3 guest registration packages to latest:\nzypper -n install cloud-regionsrv-client\nzypper -n install cloud-regionsrv-client-plugin-ec2\nzypper -n install --force-resolution regionServiceClientConfigEC2\n\necho \"Finished migration of SUSE subscription to AWS.\"\n"
        ]
      }
    }
  ]
}
