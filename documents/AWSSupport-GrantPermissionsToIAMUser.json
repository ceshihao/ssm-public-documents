{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-GrantPermissionsToIAMUser** automation runbook grants the specified permissions to a new or exisitng AWS Identity and Access Management (IAM) group and adds the existing AWS IAM user to it. Policies you can choose from are: [BillingFullAccess](https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/job-function/Billing$serviceLevelSummary), [SupportFullAccess](https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/AWSSupportAccess$serviceLevelSummary) or both. To enable billing access for AWS IAM users and roles, you must activate AWS IAM access to billing information on your AWS account. For more information, see [AWS IAM tutorial: Grant access to the billing console](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_billing.html?icmpid=docs_iam_console#tutorial-billing-step1) in *AWS Identity and Access Management user guide*.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "IAMGroupName": {
      "type": "String",
      "description": "(Required) The name for the AWS IAM group that you want to add the user to. If the given group name does not already exist, a new AWS IAM group will be created with that name.",
      "allowedPattern": "^[a-zA-Z0-9+=,.@_-]{1,128}$"
    },
    "IAMUserName": {
      "type": "String",
      "description": "(Required) The name of the existing AWS IAM user that you want to grant permissions to. The user must already exist in your AWS account.",
      "allowedPattern": "^[a-zA-Z0-9+=,.@_-]{1,64}"
    },
    "Permissions": {
      "type": "String",
      "description": "(Optional) The AWS IAM permission you want to grant to the AWS IAM user. To grant full access to the AWS Support Center, choose `SupportFullAccess`. Choose `BillingFullAccess` to grant full access to the AWS Billing Console. `SupportAndBillingFullAccess` grants full access to both Support Center and the Billing Console.",
      "default": "SupportAndBillingFullAccess",
      "allowedValues": [
        "SupportFullAccess",
        "BillingFullAccess",
        "SupportAndBillingFullAccess"
      ]
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "configureIAM",
      "description": "Executes python script to set AWS IAM permissions.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "configure_iam_handler",
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport sys\nfrom operator import itemgetter\nfrom typing import Dict, List, Optional, Union\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\nsys.tracebacklimit = 0\niam_client = boto3.client(\"iam\")\n\n\ndef check_if_iam_group_exists(iam_group_name: str, account_summary_map: dict) -> bool:\n    \"\"\"\n    Creates an IAM group if it doesn't exist, or returns if it already exists.\n    \"\"\"\n    try:\n        iam_client.get_group(GroupName=iam_group_name)\n        print(f\"PASSED - IAM group {iam_group_name} exists.\")\n        return True\n    except ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"NoSuchEntity\":\n            print(f\"FAILED - IAM group {iam_group_name} does not exist.\")\n            print(\"Checking Groups Quota before creating a new IAM Group\")\n            if account_summary_map[\"Groups\"] == account_summary_map[\"GroupsQuota\"]:\n                sys.exit(\n                    \"You have reached the limit of IAM groups you can create. \"\n                    \"Please request a limit increase, or delete an IAM group you don't need anymore.\"\n                )\n            else:\n                return False\n        else:\n            raise RuntimeError(f\"ERROR - Cannot check IAM group {iam_group_name} - {error}\") from None\n\n\ndef create_iam_group(iam_group_name: str) -> None:\n    \"\"\"\n    Creates an IAM group.\n    \"\"\"\n    try:\n        print(f\"Creating IAM group {iam_group_name}.\")\n\n        iam_client.create_group(GroupName=iam_group_name)\n\n        print(f\"Created IAM group {iam_group_name} successfully.\")\n\n    except ClientError as error:\n        raise RuntimeError(f\"FAILED - Cannot create IAM group {iam_group_name} - {error}\") from None\n\n\ndef check_iam_user_exists(iam_user_name: str) -> None:\n    \"\"\"\n    Checks if an IAM user exists.\n    \"\"\"\n    try:\n        print(f\"Checking if IAM user {iam_user_name} exists.\")\n        iam_client.get_user(UserName=iam_user_name)\n        print(f\"PASSED - IAM user {iam_user_name} exists.\")\n    except ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"NoSuchEntity\":\n            raise RuntimeError(f\"FAILED - IAM user {iam_user_name} does not exist.\") from None\n        else:\n            raise RuntimeError(f\"ERROR - Cannot check IAM user {iam_user_name} - {error}\") from None\n\n\ndef get_account_summary() -> dict:\n    \"\"\"\n    Gets the account summary map.\n    \"\"\"\n    try:\n        return iam_client.get_account_summary()[\"SummaryMap\"]\n    except ClientError as error:\n        raise RuntimeError(f\"ERROR - Cannot get account summary - {error}\") from None\n\n\ndef get_account_alias() -> list:\n    \"\"\"\n    Gets the account alias.\n    \"\"\"\n    try:\n        paginator = iam_client.get_paginator(\"list_account_aliases\")\n        page_iterator = paginator.paginate()\n        account_aliases = []\n        for page in page_iterator:\n            account_aliases.extend(page[\"AccountAliases\"])\n        return account_aliases\n    except ClientError as error:\n        raise RuntimeError(f\"ERROR - Cannot get account alias - {error}\") from None\n\n\ndef list_attached_group_policies(iam_group_name: str) -> List[str]:\n    \"\"\"\n    Lists attached group policies.\n    \"\"\"\n    try:\n        print(f\"Listing attached group policies for IAM group {iam_group_name}.\")\n        attached_policies = []\n        paginator = iam_client.get_paginator(\"list_attached_group_policies\")\n        page_iterator = paginator.paginate(GroupName=iam_group_name)\n        for page in page_iterator:\n            attached_policies.extend(page[\"AttachedPolicies\"])\n        return [policy[\"PolicyName\"] for policy in attached_policies]\n    except ClientError as error:\n        raise RuntimeError(f\"ERROR - Cannot list attached group policies - {error}\") from None\n\n\ndef get_managed_policies_to_attach(\n    required_iam_permissions: str, managed_policies_map: Dict[str, str]\n) -> List[Optional[str]]:\n    \"\"\"\n    Returns the list of the managed policies to attach.\n    \"\"\"\n    print(f\"Getting managed policies to attach {required_iam_permissions}.\")\n    if required_iam_permissions == \"SupportAndBillingFullAccess\":\n        if \"SupportFullAccess\" in managed_policies_map and \"BillingFullAccess\" in managed_policies_map:\n            return [managed_policies_map.get(\"SupportFullAccess\"), managed_policies_map.get(\"BillingFullAccess\")]\n    return [managed_policies_map.get(required_iam_permissions)]\n\n\ndef assert_policy_limit_reached(\n    num_attached_policies: int, num_policies_to_attach: int, account_summary_map: dict\n) -> bool:\n    \"\"\"\n    Asserts that the policy limit has not been reached.\n    \"\"\"\n    if (num_attached_policies + num_policies_to_attach) > account_summary_map[\"AttachedPoliciesPerGroupQuota\"]:\n        return False\n    return True\n\n\ndef attach_policies_to_group(iam_group_name: str, policies_to_attach: list) -> None:\n    \"\"\"\n    Attaches the policies to the IAM group.\n    \"\"\"\n    try:\n        print(f\"Attaching policies to IAM group {iam_group_name}.\")\n\n        for policy in policies_to_attach:\n            print(f\"Attaching policy {policy} to IAM group {iam_group_name}.\")\n            iam_client.attach_group_policy(GroupName=iam_group_name, PolicyArn=policy)\n            print(f\"Successfully attached {policy} policy to IAM group {iam_group_name}.\")\n    except ClientError as error:\n        raise RuntimeError(f\"ERROR - Cannot attach policies to IAM group {iam_group_name} - {error}\") from None\n\n\ndef add_user_to_group(iam_group_name: str, iam_user_name: str) -> None:\n    \"\"\"\n    Adds the user to the IAM group.\n    \"\"\"\n    try:\n        print(f\"Adding user {iam_user_name} to IAM group {iam_group_name}.\")\n        iam_client.add_user_to_group(GroupName=iam_group_name, UserName=iam_user_name)\n        print(f\"Successfully added user {iam_user_name} to IAM group {iam_group_name}.\")\n    except ClientError as error:\n        raise RuntimeError(f\"ERROR - Cannot add user {iam_user_name} to IAM group {iam_group_name} - {error}\") from None\n\n\ndef configure_iam_handler(event: dict, context: dict) -> Dict[str, Union[str, List[Optional[str]]]]:\n    \"\"\"\n    Entry point function to manage the permissions\n    \"\"\"\n    try:\n        print(f\"REQUEST RECEIVED: {event}\")\n\n        iam_group_name, required_iam_permissions, iam_user_name, account_id, aws_partition = itemgetter(\n            \"IAMGroupName\", \"Permissions\", \"IAMUserName\", \"AccountId\", \"AWS_Partition\"\n        )(event)\n\n        managed_policies_map = {\n            \"SupportFullAccess\": f\"arn:{aws_partition}:iam::aws:policy/AWSSupportAccess\",\n            \"BillingFullAccess\": f\"arn:{aws_partition}:iam::aws:policy/job-function/Billing\",\n        }\n        console_domain_map = {\"aws\": \"aws.amazon.com\", \"aws-cn\": \"amazonaws.cn\", \"aws-us-gov\": \"amazonaws-us-gov.com\"}\n\n        account_summary_map = get_account_summary()\n        account_alias = get_account_alias()\n\n        if account_alias:\n            account_alias = account_alias[0]\n        else:\n            account_alias = account_id\n\n        print(f\"Account alias is {account_alias}\")\n\n        check_iam_user_exists(iam_user_name)\n        if not check_if_iam_group_exists(iam_group_name, account_summary_map):\n            create_iam_group(iam_group_name)\n        attached_group_policies = list_attached_group_policies(iam_group_name)\n        policies_to_attach = get_managed_policies_to_attach(required_iam_permissions, managed_policies_map)\n\n        if not assert_policy_limit_reached(len(attached_group_policies), len(policies_to_attach), account_summary_map):\n            raise RuntimeError(\n                \"You cannot attach more IAM managed policies to the IAM group. \"\n                \"Please review the existing IAM group, or create new one.\"\n            ) from None\n        attach_policies_to_group(iam_group_name, policies_to_attach)\n        add_user_to_group(iam_group_name, iam_user_name)\n\n        return {\n            \"IAMGroup\": iam_group_name,\n            \"IAMUser\": iam_user_name,\n            \"AddedPermissions\": policies_to_attach,\n            \"LoginUrl\": f\"https://{account_alias}.signin.{console_domain_map.get(aws_partition, 'aws')}/console\",\n        }\n\n    except ClientError as error:\n        code = error.response[\"Error\"][\"Code\"]\n        message = error.response[\"Error\"][\"Message\"]\n        raise RuntimeError(f\"An error occurred during script execution - {code}:{message}\") from None\n    except Exception as error:\n        raise RuntimeError(f\"An error occurred during script execution - {error}\") from None\n",
        "InputPayload": {
          "IAMGroupName": "{{ IAMGroupName }}",
          "Permissions": "{{ Permissions }}",
          "IAMUserName": "{{ IAMUserName }}",
          "AccountId": "{{ global:ACCOUNT_ID }}",
          "AWS_Partition": "{{ global:AWS_PARTITION }}"
        }
      },
      "outputs": [
        {
          "Name": "AddedPermissions",
          "Selector": "$.Payload.AddedPermissions",
          "Type": "StringList"
        },
        {
          "Name": "LoginUrl",
          "Selector": "$.Payload.LoginUrl",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ],
  "outputs": [
    "configureIAM.AddedPermissions",
    "configureIAM.LoginUrl"
  ]
}
