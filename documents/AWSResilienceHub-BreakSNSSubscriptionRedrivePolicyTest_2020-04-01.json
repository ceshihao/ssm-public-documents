{
  "description": "# Id\nsns:test:break_redrive_policy_target_sqs:2020-04-01\n\n## Intent\nTest for breaking the Amazon SNS subscription re-drive policy and injecting a failure.\n\n## Type\nSoftware Outage Test\n\n## Risk\nHigh\n\n## Requirements\n* An existing SNS topic with a subscription, which has the SQS protocol and a dead-letter queue enabled.\n* An alarm, which tracks the number of topic's notifications that failed to be re-driven to a dead-letter queue (NumberOfNotificationsFailedToRedriveToDlqAlarm).\n\n## Permissions required for AutomationAssumeRole\n* ssm:GetAutomationExecution\n* ssm:StartAutomationExecution\n* ssm:GetParameters\n* sqs:ReceiveMessage\n* sns:GetSubscriptionAttributes\n* sqs:GetQueueUrl\n* sqs:GetQueueAttributes\n* sqs:SetQueueAttributes\n* sqs:AddPermission\n* sqs:RemovePermission\n* iam:PassRole\n* cloudwatch:DescribeAlarms\n* cloudwatch:PutMetricAlarm\n\n## Supports Rollback\nYes. Users can run the script with `IsRollback` and `PreviousExecutionId` to rollback changes from the previous run.\n\n## Inputs\n### `SubscriptionArn`:\n    type: String\n    description: (Required) An Amazon SNS Subscription ARN.\n### `NumberOfNotificationsFailedToRedriveToDlqAlarmName`:\n    type: String\n    description: (Required) An Alarm, which should be red after a failure injection and green after the rollback process at the end of the test.\n### `IsRollback`:\n    type: String\n    description: (Optional) Run rollback step of the given previous execution parameter (`PreviousExecutionId`). Can be set to either true or false.\n    default: \"false\"\n### `PreviousExecutionId`:\n    type: String\n    description: (Optional) Previous execution ID for which resources need to be cleaned up.\n    default: \"\"\n### `AutomationAssumeRole`:\n    type: String\n    description: (Required) The ARN of the role that allows automation to perform the actions on your behalf.\n\n## Details\nThe document updates the policy of an SNS subscription's target SQS queue and dead-letter SQS queue. It then tests if an alarm is triggered for `NumberOfNotificationsFailedToRedriveToDlq` metric. If there are no messages published to the SNS topic, the alarm will not be triggered and the document will time out. However, you must rollback the injected failure.\n\n## Steps executed in normal flow\n* CheckIsRollback\n* AssertAlarmToBeGreenBeforeTest\n* BackupCurrentExecution\n* GenerateBadQueuePolicyForEndpoint\n* GenerateBadQueuePolicyForDlq\n* InjectFailureForEndpointQueue\n* InjectFailureForDlq\n* AssertAlarmToBeRed\n* RollbackEndpointCurrentExecution\n* RollbackDlqCurrentExecution\n* AssertAlarmToBeGreen\n\n## Steps executed in rollback flow\n* CheckIsRollback\n* GetInputsFromPreviousExecution\n* AssertSubscriptionArn\n* PrepareRollbackOfPreviousExecution\n* RollbackEndpointPreviousExecution\n* RollbackDlqPreviousExecution",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "SubscriptionArn": {
      "type": "String",
      "description": "(Required) An Amazon SNS subscription ARN."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows automation to perform the actions on your behalf."
    },
    "NumberOfNotificationsFailedToRedriveToDlqAlarmName": {
      "type": "String",
      "description": "(Required) An alarm, which should be red after a failure injection and green after the rollback process at the end of the test."
    },
    "IsRollback": {
      "type": "String",
      "description": "(Optional) Run rollback step of the given previous execution parameter (`PreviousExecutionId`). Can be set to either true or false.",
      "default": "false"
    },
    "PreviousExecutionId": {
      "type": "String",
      "description": "(Optional) Previous execution ID for which resources need to be cleaned up.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckIsRollback",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "GetInputsFromPreviousExecution",
            "Variable": "{{IsRollback}}",
            "StringEquals": "true"
          }
        ],
        "Default": "AssertAlarmToBeGreenBeforeTest"
      }
    },
    {
      "name": "GetInputsFromPreviousExecution",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "SubscriptionArn",
          "Selector": "$.Payload.SubscriptionArn[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_inputs_from_ssm_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef get_inputs_from_ssm_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events:\n        raise KeyError('Requires ExecutionId')\n\n    if not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    response_parameters = response['AutomationExecution']['Parameters']\n    # TODO DIG-853\n    for parameter in response_parameters:\n        output[parameter] = response_parameters[parameter]\n\n    return output"
      }
    },
    {
      "name": "AssertSubscriptionArn",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "PrepareRollbackOfPreviousExecution",
            "Variable": "{{ GetInputsFromPreviousExecution.SubscriptionArn }}",
            "StringEquals": "{{ SubscriptionArn }}"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "PrepareRollbackOfPreviousExecution",
      "description": "Get the original SqsEndpointQueueUrl, SqsEndpointPolicy, SqsDlqUrl and SqsDlqPolicy",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "SqsEndpointQueueUrl",
          "Selector": "$.Payload.SqsEndpointQueueUrl[0]",
          "Type": "String"
        },
        {
          "Name": "SqsEndpointPolicy",
          "Selector": "$.Payload.SqsEndpointPolicy[0]",
          "Type": "String"
        },
        {
          "Name": "SqsDlqUrl",
          "Selector": "$.Payload.SqsDlqUrl[0]",
          "Type": "String"
        },
        {
          "Name": "SqsDlqPolicy",
          "Selector": "$.Payload.SqsDlqPolicy[0]",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_output_from_ssm_step_execution",
        "InputPayload": {
          "ExecutionId": "{{ PreviousExecutionId }}",
          "StepName": "BackupCurrentExecution",
          "ResponseField": "SqsEndpointQueueUrl,SqsEndpointPolicy,SqsDlqUrl,SqsDlqPolicy"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\ndef get_output_from_ssm_step_execution(events, context):\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\n\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\n        if step['StepName'] == events['StepName']:\n            response_fields = events['ResponseField'].split(',')\n            output = {}\n            for response_field in response_fields:\n                if response_field in step['Outputs']:\n                    # Sets values in string type regardless of what is the original value type. In order to set\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\n                    output[response_field] = step['Outputs'][response_field]\n                else:\n                    \"\"\"\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\n                    a situation when an empty value is a valid value but step output completely misses it.\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\n                    represents a default sqs policy\n                    \"\"\"\n                    output[response_field] = ['']\n            return output\n\n    # Could not find step name\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])"
      }
    },
    {
      "name": "RollbackEndpointPreviousExecution",
      "description": "Apply the original policy to the subscription target SQS queue from the previous execution.",
      "maxAttempts": 5,
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ PrepareRollbackOfPreviousExecution.SqsEndpointQueueUrl }}",
        "Attributes": {
          "Policy": "{{ PrepareRollbackOfPreviousExecution.SqsEndpointPolicy }}"
        }
      }
    },
    {
      "name": "RollbackDlqPreviousExecution",
      "description": "Apply the original policy to the DLQ from the previous execution.",
      "maxAttempts": 5,
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ PrepareRollbackOfPreviousExecution.SqsDlqUrl }}",
        "Attributes": {
          "Policy": "{{ PrepareRollbackOfPreviousExecution.SqsDlqPolicy }}"
        }
      },
      "isEnd": true
    },
    {
      "name": "AssertAlarmToBeGreenBeforeTest",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 300,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{NumberOfNotificationsFailedToRedriveToDlqAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      }
    },
    {
      "name": "BackupCurrentExecution",
      "description": "Backup current execution",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "TopicArn",
          "Selector": "$.Payload.TopicArn",
          "Type": "String"
        },
        {
          "Name": "SqsEndpointQueueUrl",
          "Selector": "$.Payload.SqsEndpointQueueUrl",
          "Type": "String"
        },
        {
          "Name": "SqsEndpointQueueArn",
          "Selector": "$.Payload.SqsEndpointQueueArn",
          "Type": "String"
        },
        {
          "Name": "SqsDlqUrl",
          "Selector": "$.Payload.SqsDlqUrl",
          "Type": "String"
        },
        {
          "Name": "SqsDlqArn",
          "Selector": "$.Payload.SqsDlqArn",
          "Type": "String"
        },
        {
          "Name": "SqsEndpointPolicy",
          "Selector": "$.Payload.SqsEndpointPolicy",
          "Type": "String"
        },
        {
          "Name": "SqsDlqPolicy",
          "Selector": "$.Payload.SqsDlqPolicy",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "broken_redrive_policy_target_backup_current_execution",
        "InputPayload": {
          "SubscriptionArn": "{{ SubscriptionArn }}"
        },
        "Script": "\"\"\"SNS util.\"\"\"\n\nimport json\nimport logging\nimport random\nimport time\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom uuid import uuid4\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nINITIAL_COUNT_OF_SUBSCRIPTIONS = 1\n\n\n\ndef get_queue_url_from_arn(sqs_client, queue_arn: str) -> dict:\n    queue_name = queue_arn.split(':')[-1]\n    queue_account_id = queue_arn.split(':')[-2]\n\n    if (not queue_name or not queue_account_id):\n        raise ValueError(\n            f'{\"Subscription target sqs queue is invalid\"}')\n\n    get_queue_url_response = sqs_client.get_queue_url(\n        QueueName=queue_name,\n        QueueOwnerAWSAccountId=queue_account_id\n    )\n\n    return get_queue_url_response['QueueUrl']\n\n\n\ndef get_queue_policy(sqs_client, queue_url: str) -> dict:\n    get_queue_attributes_response = sqs_client.get_queue_attributes(\n        QueueUrl=queue_url,\n        AttributeNames=['All'],\n    )\n\n    sqs_endpoint_policy = get_queue_attributes_response['Attributes']['Policy']\n\n    return sqs_endpoint_policy\n\n\n\ndef backup_sns_sub_with_sqs_target(sub_arn: str, should_backup_dlq: bool) -> dict:\n    config = Config(\n        signature_version='v4',\n        retries={\n            'max_attempts': 10,\n            'mode': 'standard'\n        }\n    )\n    sns_client = boto3.client('sns', config=config)\n    sqs_client = boto3.client(\"sqs\", config=config)\n\n    sub_attributes = sns_client.get_subscription_attributes(SubscriptionArn=sub_arn)['Attributes']\n\n    if (not sub_attributes.get('RedrivePolicy')):\n        raise ValueError(\n            f'{\"Redrive policy (dlq) must be present on the subscription\"}')\n\n    sub_sqs_endpoint_arn = sub_attributes['Endpoint']\n\n    sub_endpoint_queue_url = get_queue_url_from_arn(sqs_client, sub_sqs_endpoint_arn)\n    sub_endpoint_queue_policy = get_queue_policy(sqs_client, sub_endpoint_queue_url)\n\n    if not should_backup_dlq:\n        return {'TopicArn': sub_attributes['TopicArn'],\n                'SqsEndpointQueueUrl': sub_endpoint_queue_url,\n                'SqsEndpointQueueArn': sub_sqs_endpoint_arn,\n                'SqsEndpointPolicy': sub_endpoint_queue_policy}\n\n    redrive_policy_parsed = json.loads(sub_attributes['RedrivePolicy'])\n    dlq_arn = redrive_policy_parsed['deadLetterTargetArn']\n\n    dlq_url = get_queue_url_from_arn(sqs_client, dlq_arn)\n    sub_dlq_policy = get_queue_policy(sqs_client, dlq_url)\n\n    return {'TopicArn': sub_attributes['TopicArn'],\n            'SqsEndpointQueueUrl': sub_endpoint_queue_url,\n            'SqsEndpointQueueArn': sub_sqs_endpoint_arn,\n            'SqsDlqUrl': dlq_url,\n            'SqsDlqArn': dlq_arn,\n            'SqsEndpointPolicy': sub_endpoint_queue_policy,\n            'SqsDlqPolicy': sub_dlq_policy}\n\n\n\ndef broken_redrive_policy_target_backup_current_execution(events: dict, context: dict) -> dict:\n    sub_arn: str = events['SubscriptionArn']\n    backup = backup_sns_sub_with_sqs_target(sub_arn, should_backup_dlq=True)\n\n    return backup"
      }
    },
    {
      "name": "GenerateBadQueuePolicyForEndpoint",
      "description": "Generate a queue policy that denies sending a message to the endpoint queue.",
      "onFailure": "step:RollbackEndpointCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "add_deny_in_sqs_policy",
        "InputPayload": {
          "SourcePolicy": "{{ BackupCurrentExecution.SqsEndpointPolicy }}",
          "ActionsToDeny": [
            "sqs:SendMessage"
          ],
          "Resource": "{{ BackupCurrentExecution.SqsEndpointQueueArn }}"
        },
        "Script": "import json\nimport logging\nimport random\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Callable, List, Optional\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef add_deny_in_sqs_policy(events: dict, context: dict) -> dict:\n    \"\"\"\n    Add deny policy statement(-s) to the SQS policy whether it is empty or not\n    :return: updated SQS policy with deny\n    \"\"\"\n    if \"ActionsToDeny\" not in events or \"Resource\" not in events or \"SourcePolicy\" not in events:\n        raise KeyError(\"Requires ActionsToDeny and Resource and SourcePolicy in events\")\n\n    actions_to_deny: List = events.get(\"ActionsToDeny\")\n    resource: str = events.get(\"Resource\")\n    source_policy: str = events.get(\"SourcePolicy\")\n    source_policy = None if source_policy.startswith(\"{{\") else source_policy\n\n    deny_policy_statement_id: str = f\"DenyPolicyStatement-{uuid.uuid4()}\"\n    deny_policy_statement: dict = {\n        \"Effect\": \"Deny\",\n        \"Sid\": deny_policy_statement_id,\n        \"Principal\": \"*\",\n        \"Action\": actions_to_deny,\n        \"Resource\": resource,\n    }\n\n    if source_policy is None:\n        policy_id: str = f\"DenyPolicy-{uuid.uuid4()}\"\n        sqs_policy: dict = {\n            \"Version\": \"2012-10-17\",\n            \"Id\": policy_id,\n            \"Statement\": [deny_policy_statement]\n        }\n        return {\"Policy\": json.dumps(sqs_policy),\n                \"PolicySid\": policy_id,\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}\n    else:\n        source_policy: dict = json.loads(source_policy)\n        statement: List = source_policy.get(\"Statement\")\n        if statement is None or len(statement) == 0:\n            raise KeyError(\"Requires not empty Statement in SQS Policy\")\n        statement.append(deny_policy_statement)\n        return {\"Policy\": json.dumps(source_policy),\n                \"PolicySid\": source_policy.get(\"Id\"),\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}"
      },
      "outputs": [
        {
          "Name": "Policy",
          "Selector": "$.Payload.Policy",
          "Type": "String"
        },
        {
          "Name": "PolicySid",
          "Selector": "$.Payload.PolicySid",
          "Type": "String"
        },
        {
          "Name": "DenyPolicyStatementSid",
          "Selector": "$.Payload.DenyPolicyStatementSid",
          "Type": "String"
        }
      ]
    },
    {
      "name": "GenerateBadQueuePolicyForDlq",
      "description": "Generate a queue policy that denies sending a message to the DLQ.",
      "onFailure": "step:RollbackEndpointCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "add_deny_in_sqs_policy",
        "InputPayload": {
          "SourcePolicy": "{{ BackupCurrentExecution.SqsDlqPolicy }}",
          "ActionsToDeny": [
            "sqs:SendMessage"
          ],
          "Resource": "{{ BackupCurrentExecution.SqsDlqArn }}"
        },
        "Script": "import json\nimport logging\nimport random\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Callable, List, Optional\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef add_deny_in_sqs_policy(events: dict, context: dict) -> dict:\n    \"\"\"\n    Add deny policy statement(-s) to the SQS policy whether it is empty or not\n    :return: updated SQS policy with deny\n    \"\"\"\n    if \"ActionsToDeny\" not in events or \"Resource\" not in events or \"SourcePolicy\" not in events:\n        raise KeyError(\"Requires ActionsToDeny and Resource and SourcePolicy in events\")\n\n    actions_to_deny: List = events.get(\"ActionsToDeny\")\n    resource: str = events.get(\"Resource\")\n    source_policy: str = events.get(\"SourcePolicy\")\n    source_policy = None if source_policy.startswith(\"{{\") else source_policy\n\n    deny_policy_statement_id: str = f\"DenyPolicyStatement-{uuid.uuid4()}\"\n    deny_policy_statement: dict = {\n        \"Effect\": \"Deny\",\n        \"Sid\": deny_policy_statement_id,\n        \"Principal\": \"*\",\n        \"Action\": actions_to_deny,\n        \"Resource\": resource,\n    }\n\n    if source_policy is None:\n        policy_id: str = f\"DenyPolicy-{uuid.uuid4()}\"\n        sqs_policy: dict = {\n            \"Version\": \"2012-10-17\",\n            \"Id\": policy_id,\n            \"Statement\": [deny_policy_statement]\n        }\n        return {\"Policy\": json.dumps(sqs_policy),\n                \"PolicySid\": policy_id,\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}\n    else:\n        source_policy: dict = json.loads(source_policy)\n        statement: List = source_policy.get(\"Statement\")\n        if statement is None or len(statement) == 0:\n            raise KeyError(\"Requires not empty Statement in SQS Policy\")\n        statement.append(deny_policy_statement)\n        return {\"Policy\": json.dumps(source_policy),\n                \"PolicySid\": source_policy.get(\"Id\"),\n                \"DenyPolicyStatementSid\": deny_policy_statement_id}"
      },
      "outputs": [
        {
          "Name": "Policy",
          "Selector": "$.Payload.Policy",
          "Type": "String"
        },
        {
          "Name": "PolicySid",
          "Selector": "$.Payload.PolicySid",
          "Type": "String"
        },
        {
          "Name": "DenyPolicyStatementSid",
          "Selector": "$.Payload.DenyPolicyStatementSid",
          "Type": "String"
        }
      ]
    },
    {
      "name": "InjectFailureForEndpointQueue",
      "description": "Inject a failure by setting the queue policy of the endpoint queue to the generated one, which has deny-send-message permissions.",
      "action": "aws:executeAwsApi",
      "onFailure": "step:RollbackEndpointCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ BackupCurrentExecution.SqsEndpointQueueUrl }}",
        "Attributes": {
          "Policy": "{{ GenerateBadQueuePolicyForEndpoint.Policy }}"
        }
      }
    },
    {
      "name": "InjectFailureForDlq",
      "description": "Inject a failure by setting the queue policy of the DLQ to the generated one, which has deny-send-message permissions.",
      "action": "aws:executeAwsApi",
      "onFailure": "step:RollbackEndpointCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ BackupCurrentExecution.SqsDlqUrl }}",
        "Attributes": {
          "Policy": "{{ GenerateBadQueuePolicyForDlq.Policy }}"
        }
      }
    },
    {
      "name": "AssertAlarmToBeRed",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 600,
      "onFailure": "step:RollbackEndpointCurrentExecution",
      "onCancel": "step:TriggerRollback",
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{NumberOfNotificationsFailedToRedriveToDlqAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "ALARM"
        ]
      }
    },
    {
      "name": "RollbackEndpointCurrentExecution",
      "description": "Apply the original policy to the subscription target SQS queue.",
      "maxAttempts": 5,
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ BackupCurrentExecution.SqsEndpointQueueUrl }}",
        "Attributes": {
          "Policy": "{{ BackupCurrentExecution.SqsEndpointPolicy }}"
        }
      }
    },
    {
      "name": "RollbackDlqCurrentExecution",
      "description": "Apply the original policy to the DLQ.",
      "maxAttempts": 5,
      "onCancel": "step:TriggerRollback",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "sqs",
        "Api": "SetQueueAttributes",
        "QueueUrl": "{{ BackupCurrentExecution.SqsDlqUrl }}",
        "Attributes": {
          "Policy": "{{ BackupCurrentExecution.SqsDlqPolicy }}"
        }
      }
    },
    {
      "name": "AssertAlarmToBeGreen",
      "action": "aws:waitForAwsResourceProperty",
      "maxAttempts": 1,
      "timeoutSeconds": 900,
      "inputs": {
        "Service": "cloudwatch",
        "Api": "DescribeAlarms",
        "AlarmNames": [
          "{{NumberOfNotificationsFailedToRedriveToDlqAlarmName}}"
        ],
        "PropertySelector": "$.MetricAlarms[0].StateValue",
        "DesiredValues": [
          "OK"
        ]
      },
      "isEnd": true
    },
    {
      "name": "TriggerRollback",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RollbackExecutionId",
          "Selector": "$.Payload.RollbackExecutionId",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_rollback_execution",
        "InputPayload": {
          "ExecutionId": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import json\n\nimport boto3\nfrom botocore.config import Config\n\n\n\n\ndef start_rollback_execution(events, context):\n    output = {}\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ssm = boto3.client('ssm', config=config)\n\n    if 'ExecutionId' not in events or not events['ExecutionId']:\n        raise KeyError('Requires not empty ExecutionId')\n\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\n\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\n    response_parameters = response['AutomationExecution']['Parameters']\n    response_parameters['IsRollback'] = ['true']\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\n\n    rollback_execution_response = ssm.start_automation_execution(\n        DocumentName=response['AutomationExecution']['DocumentName'],\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\n        Parameters=response_parameters\n    )\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\n    return output"
      },
      "isEnd": true
    }
  ]
}
