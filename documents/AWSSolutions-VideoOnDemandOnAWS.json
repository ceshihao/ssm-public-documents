{
  "schemaVersion": "1.0",
  "description": "(SO0021) - Video On Demand workflow with AWS Step Functions, MediaConvert, MediaPackage, S3, CloudFront and DynamoDB. Version v5.2.0",
  "templateBody": {
    "Description": "(SO0021) - Video On Demand workflow with AWS Step Functions, MediaConvert, MediaPackage, S3, CloudFront and DynamoDB. Version v5.2.0",
    "Parameters": {
      "AdminEmail": {
        "Description": "Email address for SNS notifications (subscribed users will receive ingest, publishing, and error notifications)",
        "Type": "String",
        "AllowedPattern": "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"
      },
      "WorkflowTrigger": {
        "Description": "How the workflow will be triggered (source video upload to S3 or source metadata file upload)",
        "Type": "String",
        "Default": "VideoFile",
        "AllowedValues": [
          "VideoFile",
          "MetadataFile"
        ]
      },
      "Glacier": {
        "Description": "If enabled, source assets will be tagged for archiving to Glacier or Glacier Deep Archive once the workflow is complete",
        "Type": "String",
        "Default": "DISABLED",
        "AllowedValues": [
          "DISABLED",
          "GLACIER",
          "DEEP_ARCHIVE"
        ]
      },
      "FrameCapture": {
        "Description": "If enabled, frame capture is added to the job submitted to MediaConvert",
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ]
      },
      "EnableMediaPackage": {
        "Description": "If enabled, MediaPackage VOD will be included in the workflow",
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ]
      },
      "EnableSns": {
        "Description": "Enable Ingest and Publish email notifications, error messages are not afeected by this parameter.",
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ]
      },
      "EnableSqs": {
        "Description": "Publish the workflow results to an SQS queue to injest upstream",
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ]
      },
      "AcceleratedTranscoding": {
        "Description": "Enable accelerated transcoding in AWS Elemental MediaConvert. PREFERRED will only use acceleration if the input files is supported. ENABLED accleration is applied to all files (this will fail for unsupported file types) see MediaConvert Documentation for more detail https://docs.aws.amazon.com/mediaconvert/latest/ug/accelerated-transcoding.html",
        "Type": "String",
        "Default": "PREFERRED",
        "AllowedValues": [
          "ENABLED",
          "DISABLED",
          "PREFERRED"
        ]
      }
    },
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Workflow"
            },
            "Parameters": [
              "AdminEmail",
              "WorkflowTrigger",
              "Glacier",
              "EnableSns",
              "EnableSqs"
            ]
          },
          {
            "Label": {
              "default": "AWS Elemental MediaConvert"
            },
            "Parameters": [
              "FrameCapture",
              "AcceleratedTranscoding"
            ]
          },
          {
            "Label": {
              "default": "AWS Elemental MediaPackage"
            },
            "Parameters": [
              "EnableMediaPackage"
            ]
          }
        ],
        "ParameterLabels": {
          "AdminEmail": {
            "default": "Notification email address"
          },
          "Glacier": {
            "default": "Archive source content"
          },
          "WorkflowTrigger": {
            "default": "Workflow trigger"
          },
          "FrameCapture": {
            "default": "Enable Frame Capture"
          },
          "EnableMediaPackage": {
            "default": "Enable MediaPackage"
          },
          "AcceleratedTranscoding": {
            "default": "Accelerated Transcoding"
          },
          "EnableSns": {
            "default": "Enable SNS Notifications"
          },
          "EnableSqs": {
            "default": "Enable SQS Messaging"
          }
        }
      }
    },
    "Mappings": {
      "SourceCode": {
        "General": {
          "S3Bucket": "solutions",
          "KeyPrefix": "video-on-demand-on-aws/v5.2.0"
        }
      },
      "AnonymousData": {
        "SendAnonymousData": {
          "Data": true
        }
      }
    },
    "Conditions": {
      "Metrics": [
        [
          "AnonymousData",
          "SendAnonymousData",
          "Data"
        ],
        true
      ],
      "IsMediaPackageEnabled": [
        "EnableMediaPackage",
        true
      ]
    },
    "Resources": {
      "CustomResourceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-custom-resource",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:PutBucketNotification",
                      "s3:PutObject",
                      "s3:PutObjectAcl"
                    ],
                    "Resource": [
                      "Source.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediaconvert:CreatePreset",
                      "mediaconvert:CreateJobTemplate",
                      "mediaconvert:DeletePreset",
                      "mediaconvert:DeleteJobTemplate",
                      "mediaconvert:DescribeEndpoints",
                      "mediaconvert:ListJobTemplates"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediapackage-vod:DeleteAsset",
                      "mediapackage-vod:DeletePackagingConfiguration"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:assets/*",
                      "arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:packaging-configurations/packaging-config-*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediapackage-vod:DescribePackagingGroup",
                      "mediapackage-vod:DeletePackagingGroup"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:packaging-groups/${AWS::StackName}-packaging-group"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediapackage-vod:CreatePackagingConfiguration",
                      "mediapackage-vod:CreatePackagingGroup",
                      "mediapackage-vod:ListAssets",
                      "mediapackage-vod:ListPackagingConfigurations",
                      "mediapackage-vod:ListPackagingGroups"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cloudfront:GetDistributionConfig",
                      "cloudfront:UpdateDistribution"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is required to create CloudWatch logs and interact with MediaConvert / MediaPackage actions that do not support resource level permissions"
              },
              {
                "id": "W76",
                "reason": "All policies are required by the custom resource."
              }
            ]
          }
        }
      },
      "StepFunctionsServiceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "states.${AWS::Region}.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-stepfunctions-service-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "The * resource is required since the functions need to be created before the state machine"
              }
            ]
          }
        }
      },
      "MediaConvertRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "mediaconvert.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-mediatranscode-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "${Source.Arn}/*",
                      "${Destination.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "execute-api:Invoke"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "/* required to get/put objects to S3"
              }
            ]
          }
        }
      },
      "MediaPackageVodRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "mediapackage.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-mediapackagevod-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:GetBucketLocation",
                      "s3:GetBucketRequestPayment"
                    ],
                    "Resource": [
                      "${Destination.Arn}",
                      "${Destination.Arn}/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is required to get objects from S3"
              }
            ]
          }
        }
      },
      "S3LambdaInvokeVideo": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": "StepFunctions.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "s3.amazonaws.com",
          "SourceAccount": "AWS::AccountId"
        }
      },
      "CloudWatchLambdaInvokeErrors": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": "ErrorHandler.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "EncodeErrorRule.Arn"
        }
      },
      "CloudWatchLambdaInvokeCompletes": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": "StepFunctions.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": "EncodeCompleteRule.Arn"
        }
      },
      "DestBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": "Destination",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": "arn:${AWS::Partition}:s3:::${Destination}/*",
                "Principal": {
                  "CanonicalUser": "DestinationOriginAccessIdentity.S3CanonicalUserId"
                }
              }
            ]
          }
        }
      },
      "EncodeCompleteRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "${AWS::StackName}-EncodeComplete",
          "Description": "MediaConvert Completed event rule",
          "EventPattern": {
            "source": [
              "aws.mediaconvert"
            ],
            "detail": {
              "status": [
                "COMPLETE"
              ],
              "userMetadata": {
                "workflow": [
                  "AWS::StackName"
                ]
              }
            }
          },
          "Targets": [
            {
              "Arn": "StepFunctions.Arn",
              "Id": "${AWS::StackName}-StepFunctions"
            }
          ]
        }
      },
      "EncodeErrorRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "${AWS::StackName}-EncodeError",
          "Description": "MediaConvert Error event rule",
          "EventPattern": {
            "source": [
              "aws.mediaconvert"
            ],
            "detail": {
              "status": [
                "ERROR"
              ],
              "userMetadata": {
                "workflow": [
                  "AWS::StackName"
                ]
              }
            }
          },
          "Targets": [
            {
              "Arn": "ErrorHandler.Arn",
              "Id": "${AWS::StackName}-EncodeError"
            }
          ]
        }
      },
      "DynamoDBTable": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "BillingMode": "PAY_PER_REQUEST",
          "PointInTimeRecoverySpecification": {
            "PointInTimeRecoveryEnabled": true
          },
          "AttributeDefinitions": [
            {
              "AttributeName": "guid",
              "AttributeType": "S"
            },
            {
              "AttributeName": "srcBucket",
              "AttributeType": "S"
            },
            {
              "AttributeName": "startTime",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "guid",
              "KeyType": "HASH"
            }
          ],
          "GlobalSecondaryIndexes": [
            {
              "IndexName": "srcBucket-startTime-index",
              "KeySchema": [
                {
                  "AttributeName": "srcBucket",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "startTime",
                  "KeyType": "RANGE"
                }
              ],
              "Projection": {
                "ProjectionType": "ALL"
              }
            }
          ],
          "TableName": "AWS::StackName"
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W28",
                "reason": "Table name is set to the stack name"
              },
              {
                "id": "W74",
                "reason": " The DynamoDB table is configured to use the default encryption"
              }
            ]
          }
        }
      },
      "Source": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "LoggingConfiguration": {
            "DestinationBucketName": "Logs",
            "LogFilePrefix": "s3-access/"
          },
          "LifecycleConfiguration": {
            "Rules": [
              {
                "Id": "${AWS::StackName}-source-archive",
                "TagFilters": [
                  {
                    "Key": "AWS::StackName",
                    "Value": "GLACIER"
                  }
                ],
                "Status": "Enabled",
                "Transitions": [
                  {
                    "TransitionInDays": 1,
                    "StorageClass": "GLACIER"
                  }
                ]
              },
              {
                "Id": "${AWS::StackName}-source-deep-archive",
                "TagFilters": [
                  {
                    "Key": "AWS::StackName",
                    "Value": "DEEP_ARCHIVE"
                  }
                ],
                "Status": "Enabled",
                "Transitions": [
                  {
                    "TransitionInDays": 1,
                    "StorageClass": "DEEP_ARCHIVE"
                  }
                ]
              }
            ]
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W51",
                "reason": "Bucket does not need a bucket policy"
              }
            ]
          }
        }
      },
      "Destination": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "LoggingConfiguration": {
            "DestinationBucketName": "Logs",
            "LogFilePrefix": "s3-access/"
          },
          "CorsConfiguration": {
            "CorsRules": [
              {
                "AllowedMethods": [
                  "GET"
                ],
                "AllowedOrigins": [
                  "*"
                ],
                "AllowedHeaders": [
                  "*"
                ],
                "MaxAge": 3000
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }
        }
      },
      "Logs": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "LogDeliveryWrite",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W35",
                "reason": "Used to store access logs for other buckets"
              },
              {
                "id": "W51",
                "reason": "Bucket does not need a bucket policy"
              }
            ]
          }
        }
      },
      "SnsTopic": {
        "Type": "AWS::SNS::Topic",
        "Properties": {
          "DisplayName": "${AWS::StackName}-Notifications",
          "KmsMasterKeyId": "alias/aws/sns",
          "Subscription": [
            {
              "Endpoint": "AdminEmail",
              "Protocol": "email"
            }
          ]
        }
      },
      "SqsQueue": {
        "Type": "AWS::SQS::Queue",
        "Properties": {
          "VisibilityTimeout": 120,
          "QueueName": "${AWS::StackName}",
          "RedrivePolicy": {
            "deadLetterTargetArn": "${SqsQueueDlq.Arn}",
            "maxReceiveCount": 1
          },
          "KmsDataKeyReusePeriodSeconds": 300,
          "KmsMasterKeyId": "alias/aws/sqs"
        }
      },
      "SqsQueueDlq": {
        "Type": "AWS::SQS::Queue",
        "Properties": {
          "VisibilityTimeout": 120,
          "QueueName": "${AWS::StackName}-dlq",
          "KmsDataKeyReusePeriodSeconds": 300,
          "KmsMasterKeyId": "alias/aws/sqs"
        }
      },
      "DestinationOriginAccessIdentity": {
        "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
        "Properties": {
          "CloudFrontOriginAccessIdentityConfig": {
            "Comment": "access-identity-${Destination}"
          }
        }
      },
      "CloudFront": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "Origins": [
              {
                "DomainName": "${Destination}.s3.${AWS::Region}.amazonaws.com",
                "Id": "vodS3Origin",
                "S3OriginConfig": {
                  "OriginAccessIdentity": "origin-access-identity/cloudfront/${DestinationOriginAccessIdentity}"
                }
              }
            ],
            "Enabled": true,
            "Logging": {
              "IncludeCookies": false,
              "Bucket": "Logs.DomainName",
              "Prefix": "cloudfront-logs/"
            },
            "DefaultCacheBehavior": {
              "AllowedMethods": [
                "GET",
                "HEAD"
              ],
              "Compress": true,
              "MaxTTL": 0,
              "MinTTL": 0,
              "ViewerProtocolPolicy": "redirect-to-https",
              "DefaultTTL": 0,
              "TargetOriginId": "vodS3Origin",
              "ForwardedValues": {
                "QueryString": false,
                "Cookies": {
                  "Forward": "none"
                },
                "Headers": [
                  "Origin",
                  "Access-Control-Request-Method",
                  "Access-Control-Request-Headers"
                ]
              }
            },
            "PriceClass": "PriceClass_100",
            "ViewerCertificate": {
              "CloudFrontDefaultCertificate": true
            }
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W70",
                "reason": "CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)"
              }
            ]
          }
        }
      },
      "S3Config": {
        "DependsOn": "CloudFront",
        "Type": "Custom::S3",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Source": "Source",
          "IngestArn": "StepFunctions.Arn",
          "Resource": "S3Notification",
          "WorkflowTrigger": "WorkflowTrigger"
        }
      },
      "MediaConvertEndPoint": {
        "Type": "Custom::LoadLambda",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "EndPoint"
        }
      },
      "MediaConvertTemplates": {
        "Type": "Custom::LoadLambda",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "MediaConvertTemplates",
          "StackName": "AWS::StackName",
          "EndPoint": "MediaConvertEndPoint.EndpointUrl",
          "EnableMediaPackage": "EnableMediaPackage",
          "EnableNewTemplates": true
        }
      },
      "MediaPackageVod": {
        "Type": "Custom::LoadLambda",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "MediaPackageVod",
          "StackName": "AWS::StackName",
          "GroupId": "${AWS::StackName}-packaging-group",
          "PackagingConfigurations": "HLS,DASH,MSS,CMAF",
          "DistributionId": "CloudFront",
          "EnableMediaPackage": "EnableMediaPackage"
        }
      },
      "CustomResource": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-custom-resource",
          "Description": "Used to deploy resources not supported by CloudFormation",
          "Handler": "index.handler",
          "Role": "CustomResourceRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "custom-resource.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 180,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
            }
          }
        }
      },
      "StepFunctionsRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-step-functions-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "states:StartExecution"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-ingest",
                      "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-process",
                      "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-publish"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "StepFunctions": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-step-functions",
          "Description": "Creates a unique identifer (GUID) and executes the Ingest StateMachine",
          "Handler": "index.handler",
          "Role": "StepFunctionsRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "step-functions.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "IngestWorkflow": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-ingest",
              "ProcessWorkflow": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-process",
              "PublishWorkflow": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-publish",
              "ErrorHandler": "ErrorHandler.Arn"
            }
          }
        }
      },
      "InputValidateRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-input-validate-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": [
                      "${Source.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups; S3 action is limited to one bucket"
              }
            ]
          }
        }
      },
      "InputValidate": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-input-validate",
          "Description": "Validates the input given to the workflow",
          "Handler": "index.handler",
          "Role": "InputValidateRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "input-validate.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn",
              "WorkflowName": "AWS::StackName",
              "Source": "Source",
              "Destination": "Destination",
              "FrameCapture": "FrameCapture",
              "ArchiveSource": "Glacier",
              "MediaConvert_Template_2160p": [
                "IsMediaPackageEnabled",
                "${AWS::StackName}_Ott_2160p_Avc_Aac_16x9_mvod_no_preset",
                "${AWS::StackName}_Ott_2160p_Avc_Aac_16x9_qvbr_no_preset"
              ],
              "MediaConvert_Template_1080p": [
                "IsMediaPackageEnabled",
                "${AWS::StackName}_Ott_1080p_Avc_Aac_16x9_mvod_no_preset",
                "${AWS::StackName}_Ott_1080p_Avc_Aac_16x9_qvbr_no_preset"
              ],
              "MediaConvert_Template_720p": [
                "IsMediaPackageEnabled",
                "${AWS::StackName}_Ott_720p_Avc_Aac_16x9_mvod_no_preset",
                "${AWS::StackName}_Ott_720p_Avc_Aac_16x9_qvbr_no_preset"
              ],
              "CloudFront": "CloudFront.DomainName",
              "EnableMediaPackage": "EnableMediaPackage",
              "InputRotate": "DEGREE_0",
              "EnableSns": "EnableSns",
              "EnableSqs": "EnableSqs",
              "AcceleratedTranscoding": "AcceleratedTranscoding"
            }
          }
        }
      },
      "MediainfoRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-mediainfo-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": [
                      "${Source.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is limited to one S3 bucket"
              }
            ]
          }
        }
      },
      "Mediainfo": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-mediainfo",
          "Description": "Runs mediainfo on a pre-signed S3 URL",
          "Handler": "lambda_function.lambda_handler",
          "Role": "MediainfoRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "mediainfo.zip"
              ]
            ]
          },
          "Runtime": "python3.7",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "ErrorHandler": "ErrorHandler.Arn"
            }
          }
        }
      },
      "DynamoUpdateRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-dynamo-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "DynamodbUpdate": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-dynamo",
          "Description": "Updates DynamoDB with event data",
          "Handler": "index.handler",
          "Role": "DynamoUpdateRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "dynamo.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "DynamoDBTable": "DynamoDBTable",
              "ErrorHandler": "ErrorHandler.Arn"
            }
          }
        }
      },
      "ProfilerRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-profiler-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "Profiler": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-profiler",
          "Description": "Sets an EncodeProfile based on mediainfo output",
          "Handler": "index.handler",
          "Role": "ProfilerRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "profiler.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "DynamoDBTable": "DynamoDBTable",
              "ErrorHandler": "ErrorHandler.Arn"
            }
          }
        }
      },
      "EncodeRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-encode-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediaconvert:CreateJob",
                      "mediaconvert:GetJobTemplate"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": [
                      "MediaConvertRole.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups; MediaConvert job ids are randomly generated"
              }
            ]
          }
        }
      },
      "Encode": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-encode",
          "Description": "Creates a MediaConvert encode job",
          "Handler": "index.handler",
          "Role": "EncodeRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "encode.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn",
              "MediaConvertRole": "MediaConvertRole.Arn",
              "EndPoint": "MediaConvertEndPoint.EndpointUrl"
            }
          }
        }
      },
      "OutputValidateRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-output-validate-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "Destination.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "OutputValidate": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-output-validate",
          "Description": "Parses MediaConvert job output",
          "Handler": "index.handler",
          "Role": "OutputValidateRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "output-validate.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "DynamoDBTable": "DynamoDBTable",
              "ErrorHandler": "ErrorHandler.Arn",
              "EndPoint": "MediaConvertEndPoint.EndpointUrl"
            }
          }
        }
      },
      "ArchiveSourceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-archive-source-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:PutObjectTagging"
                    ],
                    "Resource": [
                      "${Source.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups; S3 action is limited to one bucket"
              }
            ]
          }
        }
      },
      "ArchiveSource": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-archive-source",
          "Description": "Updates tags on source files to enable Glacier",
          "Handler": "index.handler",
          "Role": "ArchiveSourceRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "archive-source.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn"
            }
          }
        }
      },
      "SqsSendMessageRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-sqs-publish-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": [
                      "SqsQueue.Arn"
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": "true"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "SqsSendMessage": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-sqs-publish",
          "Description": "Publish the workflow results to an SQS queue",
          "Handler": "index.handler",
          "Role": "SqsSendMessageRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "sqs-publish.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn",
              "SqsQueue": "SqsQueue"
            }
          }
        }
      },
      "SnsNotificationRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-sns-notification-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sns:Publish"
                    ],
                    "Resource": [
                      "SnsTopic"
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": "true"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "SnsNotification": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-sns-notification",
          "Description": "Sends a notification when the encode job is completed",
          "Handler": "index.handler",
          "Role": "SnsNotificationRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "sns-notification.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn",
              "SnsTopic": "SnsTopic"
            }
          }
        }
      },
      "MediaPackageAssetsRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-media-package-assets-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:InvokeFunction"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": [
                      "MediaPackageVodRole.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "mediapackage-vod:CreateAsset"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups; MediaPackage action that does not support resource level permissions"
              }
            ]
          }
        }
      },
      "MediaPackageAssets": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-media-package-assets",
          "Description": "Ingests an asset into MediaPackage-VOD",
          "Handler": "index.handler",
          "Role": "MediaPackageAssetsRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "media-package-assets.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 300,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "ErrorHandler": "ErrorHandler.Arn",
              "GroupId": "MediaPackageVod.GroupId",
              "GroupDomainName": "MediaPackageVod.GroupDomainName",
              "MediaPackageVodRole": "MediaPackageVodRole.Arn"
            }
          }
        }
      },
      "ErrorHandlerRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-error-handler-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sns:Publish"
                    ],
                    "Resource": [
                      "SnsTopic"
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": "true"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "* is used so that the Lambda function can create log groups"
              }
            ]
          }
        }
      },
      "ErrorHandler": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "${AWS::StackName}-error-handler",
          "Description": "Captures and processes workflow errors",
          "Handler": "index.handler",
          "Role": "ErrorHandlerRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "SourceCode",
                  "General",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "SourceCode",
                  "General",
                  "KeyPrefix"
                ],
                "error-handler.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
              "DynamoDBTable": "DynamoDBTable",
              "SnsTopic": "SnsTopic"
            }
          }
        }
      },
      "IngestWorkflow": {
        "Type": "AWS::StepFunctions::StateMachine",
        "Properties": {
          "StateMachineName": "${AWS::StackName}-ingest",
          "DefinitionString": "{\n  \"StartAt\": \"Input Validate\",\n  \"States\": {\n    \"Input Validate\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${InputValidate.Arn}\",\n      \"Next\": \"Mediainfo\"\n    },\n    \"Mediainfo\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${Mediainfo.Arn}\",\n      \"Next\": \"DynamoDB Update\"\n    },\n    \"DynamoDB Update\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DynamodbUpdate.Arn}\",\n      \"Next\": \"SNS Choice\"\n    },\n    \"SNS Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.enableSns\",\n          \"BooleanEquals\": true,\n          \"Next\": \"SNS Notification\"\n        }\n      ],\n      \"Default\": \"Process Execute\"\n    },\n    \"SNS Notification\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${SnsNotification.Arn}\",\n      \"Next\": \"Process Execute\"\n    },\n    \"Process Execute\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StepFunctions.Arn}\",\n      \"End\": true\n    }\n  }\n}\n",
          "RoleArn": "StepFunctionsServiceRole.Arn"
        }
      },
      "ProcessWorkflow": {
        "Type": "AWS::StepFunctions::StateMachine",
        "Properties": {
          "StateMachineName": "${AWS::StackName}-process",
          "DefinitionString": "{\n  \"Comment\": \"Process StateMachine to create MediaConvert Encoding Jobs\",\n  \"StartAt\": \"Profiler\",\n  \"States\": {\n    \"Profiler\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${Profiler.Arn}\",\n      \"Next\": \"Encoding Profile Check\"\n    },\n    \"Encoding Profile Check\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.isCustomTemplate\",\n          \"BooleanEquals\": true,\n          \"Next\": \"Custom jobTemplate\"\n        },\n                {\n          \"Variable\": \"$.encodingProfile \",\n          \"NumericEquals\": 2160,\n          \"Next\": \"jobTemplate 2160p\"\n        },\n        {\n          \"Variable\": \"$.encodingProfile \",\n          \"NumericEquals\": 1080,\n          \"Next\": \"jobTemplate 1080p\"\n        },\n        {\n          \"Variable\": \"$.encodingProfile \",\n          \"NumericEquals\": 720,\n          \"Next\": \"jobTemplate 720p\"\n        }\n      ]\n    },\n    \"jobTemplate 2160p\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Accelerated Transcoding Check\"\n    },\n    \"jobTemplate 1080p\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Accelerated Transcoding Check\"\n    },\n    \"jobTemplate 720p\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Accelerated Transcoding Check\"\n    },\n    \"Custom jobTemplate\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Accelerated Transcoding Check\"\n    },\n    \"Accelerated Transcoding Check\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.acceleratedTranscoding\",\n          \"StringEquals\": \"ENABLED\",\n          \"Next\": \"Enabled\"\n        },\n        {\n          \"Variable\": \"$.acceleratedTranscoding\",\n          \"StringEquals\": \"PREFERRED\",\n          \"Next\": \"Preferred\"\n        },\n        {\n          \"Variable\": \"$.acceleratedTranscoding\",\n          \"StringEquals\": \"DISABLED\",\n          \"Next\": \"Disabled\"\n        }\n      ]\n    },\n    \"Enabled\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Frame Capture Check\"\n    },\n    \"Preferred\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Frame Capture Check\"\n    },\n    \"Disabled\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Frame Capture Check\"\n    },\n    \"Frame Capture Check\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.frameCapture\",\n          \"BooleanEquals\": true,\n          \"Next\": \"Frame Capture\"\n        },\n        {\n          \"Variable\": \"$.frameCapture\",\n          \"BooleanEquals\": false,\n          \"Next\": \"No Frame Capture\"\n        }\n      ]\n    },\n    \"Frame Capture\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Encode Job Submit\"\n    },\n    \"No Frame Capture\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Encode Job Submit\"\n    },\n    \"Encode Job Submit\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${Encode.Arn}\",\n      \"Next\": \"DynamoDB Update\"\n    },\n    \"DynamoDB Update\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DynamodbUpdate.Arn}\",\n      \"End\": true\n    }\n  }\n}\n",
          "RoleArn": "StepFunctionsServiceRole.Arn"
        }
      },
      "PublishWorkflow": {
        "Type": "AWS::StepFunctions::StateMachine",
        "Properties": {
          "StateMachineName": "${AWS::StackName}-publish",
          "DefinitionString": "{\n  \"StartAt\": \"Validate Encoding Outputs\",\n  \"States\": {\n    \"Validate Encoding Outputs\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${OutputValidate.Arn}\",\n      \"Next\": \"Archive Source Choice\"\n    },\n    \"Archive Source Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.archiveSource\",\n          \"StringEquals\": \"GLACIER\",\n          \"Next\": \"Archive\"\n        },\n        {\n          \"Variable\": \"$.archiveSource\",\n          \"StringEquals\": \"DEEP_ARCHIVE\",\n          \"Next\": \"Deep Archive\"\n        }\n      ],\n      \"Default\": \"MediaPackage Choice\"\n    },\n    \"Archive\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ArchiveSource.Arn}\",\n      \"Next\": \"MediaPackage Choice\"\n    },\n    \"Deep Archive\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ArchiveSource.Arn}\",\n      \"Next\": \"MediaPackage Choice\"\n    },\n    \"MediaPackage Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.enableMediaPackage\",\n          \"BooleanEquals\": true,\n          \"Next\": \"MediaPackage Assets\"\n        }\n      ],\n      \"Default\": \"DynamoDB Update\"\n    },\n    \"MediaPackage Assets\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${MediaPackageAssets.Arn}\",\n      \"Next\": \"DynamoDB Update\"\n    },\n    \"DynamoDB Update\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DynamodbUpdate.Arn}\",\n      \"Next\": \"SQS Choice\"\n    },\n    \"SQS Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.enableSqs\",\n          \"BooleanEquals\": true,\n          \"Next\": \"SQS Send Message\"\n        }\n      ],\n      \"Default\": \"SNS Choice\"\n    },\n    \"SQS Send Message\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${SqsSendMessage.Arn}\",\n      \"Next\": \"SNS Choice\"\n    },\n    \"SNS Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.enableSns\",\n          \"BooleanEquals\": true,\n          \"Next\": \"SNS Notification\"\n        }\n      ],\n      \"Default\": \"Complete\"\n    },\n    \"SNS Notification\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${SnsNotification.Arn}\",\n      \"Next\": \"Complete\"\n    },\n    \"Complete\": {\n      \"Type\": \"Pass\",\n      \"End\": true\n    }\n  }\n}\n",
          "RoleArn": "StepFunctionsServiceRole.Arn"
        }
      },
      "Uuid": {
        "Condition": "Metrics",
        "Type": "Custom::UUID",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "UUID"
        }
      },
      "AnonymousMetric": {
        "Condition": "Metrics",
        "Type": "Custom::LoadLambda",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "SolutionId": "SO0021",
          "UUID": "Uuid.UUID",
          "Version": "v5.2.0",
          "Transcoder": "MediaConvert",
          "WorkflowTrigger": "WorkflowTrigger",
          "Glacier": "Glacier",
          "FrameCapture": "FrameCapture",
          "Resource": "AnonymousMetric",
          "EnableMediaPackage": "EnableMediaPackage"
        }
      }
    },
    "Outputs": {
      "DynamoDBTable": {
        "Description": "DynamoDB Table",
        "Value": "DynamoDBTable",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "DynamoDBTable"
            ]
          ]
        }
      },
      "Source": {
        "Description": "Source Bucket",
        "Value": "Source",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "Source"
            ]
          ]
        }
      },
      "Destination": {
        "Description": "Destination Bucket",
        "Value": "Destination",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "Destination"
            ]
          ]
        }
      },
      "CloudFront": {
        "Description": "CloudFront Domain Name",
        "Value": "CloudFront.DomainName",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "CloudFront"
            ]
          ]
        }
      },
      "UUID": {
        "Condition": "Metrics",
        "Description": "AnonymousMetric UUID",
        "Value": "Uuid.UUID",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "UUID"
            ]
          ]
        }
      },
      "SnsTopic": {
        "Description": "SNS Notification Topic",
        "Value": "SnsTopic",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "SnsTopic"
            ]
          ]
        }
      },
      "SqsURL": {
        "Description": "AmazonSQS Queue URL",
        "Value": "SqsQueue",
        "Export": {
          "Name": [
            ":",
            [
              "AWS::StackName",
              "SqsQueue"
            ]
          ]
        }
      },
      "SqsARN": {
        "Description": "AmazonSQS Queue ARN",
        "Value": "${SqsQueue.Arn}"
      }
    }
  }
}
