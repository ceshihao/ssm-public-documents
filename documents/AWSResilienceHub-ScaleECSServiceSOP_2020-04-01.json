{
  "description": "## Id\nAWSResilienceHub-ScaleECSServiceSOP_2020-04-01\n\n## Intent\nScales services horizontally and vertically, up and down (compatible on EC2 and Fargate)\n\n## Type\nSOP\n\n## Risk\nMÐµdium\n\n## Requirements:\n  * Launch Amazon ECS cluster [Get setup for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html)\n\n## Permissions required for AutomationAssumeRole:\n  * ecs:DescribeTaskDefinition\n  * ecs:DescribeServices\n  * ecs:UpdateService\n  * ecs:RegisterTaskDefinition\n\n## Cancellation behavior\nFail\n\n## Inputs:\n### (Required) ServiceName\n* type: String\n* description: The name of ECS Service\n\n### (Required) ClusterName\n  * type: String\n  * description: The name of the ECS Cluster\n\n### (Optional) TaskDefinitionCPU\n     * type: Integer\n     * description: The CPU(units) of the task definition. If not set, copied from the current version.\n\n### (Optional) TaskDefinitionRAM\n* type: Integer\n* description: The RAM(MiB) of the task definition.\n               If not set, copied from the current version. Can take values from 0.5GB to 30 GB\n\n### (Optional) NewTaskDefinitionArn\n  * type: String\n  * description: The ARN of the new task definition.\n                 All other CPU/RAM parameters are ignored if this parameter is set\n\n### (Optional) NumberOfTasks\n* type: Integer\n* description: The desired number of tasks in the service\n\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Details\nThe document creates a new task definition and applies it to service.\n\nPlease, use the following AWS documentation guidelines if something was left in a bad state.\n  * [Runtime Troubleshooting](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/troubleshooting.html)\n\n## Steps executed in normal flow:\n  * RecordStartTime\n  * GetNewTaskDefinition\n  * ChangeTaskDefinition\n  * OutputRecoveryTime\n\n## Outputs:\n### OutputRecoveryTime.RecoveryTime\n  * type: String\n  * description: overall recovery time for ECS application to recover.\n\n### GetNewTaskDefinition.NewTaskDefinitionArn\n* type: String\n* description: The ARN of the new task definition.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "OutputRecoveryTime.RecoveryTime",
    "GetNewTaskDefinition.NewTaskDefinitionArn"
  ],
  "parameters": {
    "ServiceName": {
      "type": "String",
      "description": "(Required) The name of the service"
    },
    "ClusterName": {
      "type": "String",
      "description": "(Required) The name of the cluster"
    },
    "TaskDefinitionCPU": {
      "type": "Integer",
      "description": "(Optional) The CPU(units) of the task definition. If not set, copied from the current version.",
      "default": -1
    },
    "TaskDefinitionRAM": {
      "type": "Integer",
      "description": "(Optional) The RAM(MiB) of the task definition . If not set, copied from the current version. Can take values from 0.5GB to 30 GB",
      "default": -1
    },
    "NewTaskDefinitionArn": {
      "type": "String",
      "description": "(Optional) The ARN of the new task definition. All other CPU/RAM parameters are ignored if this parameter is set",
      "default": ""
    },
    "NumberOfTasks": {
      "type": "Integer",
      "description": "(Optional) The desired number of tasks in the service",
      "default": -1
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "action": "aws:executeScript",
      "description": "Start recording execution time.",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "GetNewTaskDefinition",
      "action": "aws:executeScript",
      "description": "Execute script that creates a new task definition if TaskDefinitionCPU or TaskDefinitionRAM aren't None or get new task definition from parameter.",
      "outputs": [
        {
          "Name": "NewTaskDefinitionArn",
          "Selector": "$.Payload.TaskDefinitionArn",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "create_new_task_definition",
        "Script": "import boto3\nfrom botocore.config import Config\nimport logging\n\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef check_required_params(required_params, events):\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef create_new_task_definition(events, context):\n    \"\"\"\n    Returns a new task definition. If  `NewTaskDefinitionArn` is provided, it simply returns it.\n    If no `NewTaskDefinitionArn` provided, creates a new task definition, from a one in specified service\\cluster\n    with new cpu and memory, if specified\n    :param events: The object which contains passed parameters from SSM document\n     * `NewTaskDefinitionArn` - Optional. The predefined task definition arn\n     * `ServiceName` - Optional. Must be specified if `NewTaskDefinitionArn` not set. Name of ECS Service\n     * `ClusterName` - Optional. Must be specified if `NewTaskDefinitionArn` not set. Name of ECS Cluster\n     * `TaskDefinitionCPU` - Optional. New CPU for TaskDefinition\n     * `TaskDefinitionRAM` - Optional. New RAM for TaskDefinition\n    :param context: context\n    :return: The arn of newly created task definition, or the NewTaskDefinitionArn if specified\n    \"\"\"\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ecs_client = boto3.client('ecs', config=config)\n\n    if 'NewTaskDefinitionArn' in events and events['NewTaskDefinitionArn']:\n        # describe_task_definition will raise ClientError if not such task definition exists\n        ecs_client.describe_task_definition(\n            taskDefinition=events['NewTaskDefinitionArn']\n        )\n        return {\"TaskDefinitionArn\": events['NewTaskDefinitionArn']}\n    else:\n        required_params = [\n            'ServiceName',\n            'ClusterName'\n        ]\n        check_required_params(required_params, events)\n    services = ecs_client.describe_services(\n        services=[events['ServiceName']],\n        cluster=events['ClusterName']\n    )\n    if not services['services']:\n        raise ClientError(error_response={\n            \"Error\":\n                {\n                    \"Code\": \"ServiceNotFound\",\n                    \"Message\": f\"Could not find service: {events['ServiceName']}\"\n                }\n        },\n            operation_name='DescribeServices'\n        )\n    task_definition_arn = services['services'][0]['taskDefinition']\n    task_definition = ecs_client.describe_task_definition(\n        taskDefinition=task_definition_arn\n    )['taskDefinition']\n    for key in [\n        'taskDefinitionArn',\n        'revision',\n        'status',\n        'registeredAt',\n        'registeredBy',\n        'compatibilities',\n        'requiresAttributes'\n    ]:\n        task_definition.pop(key)\n    if 'TaskDefinitionCPU' in events and events['TaskDefinitionCPU'] > 0:\n        task_definition['cpu'] = str(events['TaskDefinitionCPU'])\n    if 'TaskDefinitionRAM' in events and events['TaskDefinitionRAM'] > 0:\n        task_definition['memory'] = str(events['TaskDefinitionRAM'])\n    response = ecs_client.register_task_definition(**task_definition)\n\n    return {\"TaskDefinitionArn\": response['taskDefinition']['taskDefinitionArn']}",
        "InputPayload": {
          "ServiceName": "{{ServiceName}}",
          "ClusterName": "{{ClusterName}}",
          "NewTaskDefinitionArn": "{{NewTaskDefinitionArn}}",
          "TaskDefinitionCPU": "{{TaskDefinitionCPU}}",
          "TaskDefinitionRAM": "{{TaskDefinitionRAM}}"
        }
      }
    },
    {
      "name": "ChangeTaskDefinition",
      "action": "aws:executeScript",
      "description": "Change task definition from parameter.",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "update_service",
        "Script": "import boto3\nfrom botocore.config import Config\nimport logging\n\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef update_service(events, context):\n    \"\"\"\n    Update service with `NewTaskDefinitionArn`.\n    :param events: The object which contains passed parameters from SSM document\n     * `ServiceName` - Required. Name of ECS Service\n     * `ClusterName` - Required. Name of ECS Cluster\n     * `TaskDefinitionArn` - Optional. Name of TaskDefinition\n     * `NumberOfTasks` - Optional. Number of task. If NumberOfTasks < 1 or not set, used old\n     value in the service\n    :param context: context\n    :return: True or error\n    \"\"\"\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ecs_client = boto3.client('ecs', config=config)\n\n    service_definition = {\n        \"service\": events['ServiceName'],\n        \"cluster\": events['ClusterName'],\n        \"taskDefinition\": events['TaskDefinitionArn']\n    }\n\n    number_of_task = events.get('NumberOfTasks', None)\n    if number_of_task and number_of_task > 0:\n        service_definition.update({\n            \"desiredCount\": number_of_task\n        })\n\n    ecs_client.update_service(**service_definition)",
        "InputPayload": {
          "ServiceName": "{{ServiceName}}",
          "ClusterName": "{{ClusterName}}",
          "NumberOfTasks": "{{NumberOfTasks}}",
          "TaskDefinitionArn": "{{GetNewTaskDefinition.NewTaskDefinitionArn}}"
        }
      }
    },
    {
      "name": "WaitForScaleUpToComplete",
      "action": "aws:executeScript",
      "description": "Wait for all status tasks in ECS application to be in \"RUNNING\" state",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "wait_services_stable",
        "Script": "import boto3\nfrom botocore.config import Config\nimport logging\n\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\n\ndef check_required_params(required_params, events):\n    for key in required_params:\n        if key not in events:\n            raise KeyError(f'Requires {key} in events')\n\n\n\ndef wait_services_stable(events, context):\n    \"\"\"\n    Wait while service will be stable.\n    :param events: The object which contains passed parameters from SSM document\n     * `ServiceName` - Required. Name of ECS Service\n     * `ClusterName` - Required. Name of ECS Cluster\n    :param context: context\n    :return: True or error\n    \"\"\"\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    ecs_client = boto3.client('ecs', config=config)\n\n    cluster_name = events['ClusterName']\n    service = events.get('ServiceName')\n\n    if service:\n        services = [service]\n    else:\n        services = []\n        paginator = ecs_client.get_paginator('list_services')\n        pages = paginator.paginate(cluster=cluster_name)\n\n        for page in pages:\n            service_arns = page.get('serviceArns')\n            services.extend(service_arns)\n\n    waiter = ecs_client.get_waiter('services_stable')\n    waiter.wait(\n        cluster=cluster_name,\n        services=services,\n        WaiterConfig={\n            'Delay': 15,\n            'MaxAttempts': 20\n        }\n    )\n    return True",
        "InputPayload": {
          "ServiceName": "{{ServiceName}}",
          "ClusterName": "{{ClusterName}}"
        }
      }
    },
    {
      "name": "OutputRecoveryTime",
      "action": "aws:executeScript",
      "description": "Calculate execution time.",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
