{
  "description": "## Id\nAWSResilienceHub-ChangeRestApiGwThrottlingSettingsSOP_2020-10-26\n\n## Intent\nChange throttling settings of the REST API Gateway\n\n## Type\nSOP\n\n## Risk\nMedium\n\n## Requirements\n  * REST API Gateway\n\n## Permissions required for AutomationAssumeRole\n  * apigateway:GET\n  * apigateway:PATCH\n  * servicequotas:GetServiceQuota\n\n## Supports Rollback\nNo\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) RestApiGwUsagePlanId\n  * type: String\n  * description: The ID of REST API Gateway usage plan to be modified\n\n### (Required) RestApiGwThrottlingRate\n  * type: String\n  * description: New throttling rate value in requests per second\n\n### (Required) RestApiGwThrottlingBurst\n  * type: String\n  * description: New throttling burst value in requests per second\n\n### (Optional) RestApiGwStageName\n  * type: String\n  * description: The name of the Stage for which throttling settings should be updated. If not set, settings will be updated on the Usage Plan level\n  * default: ''\n\n### (Optional) RestApiGwId\n  * type: String\n  * description: The ID of the REST API Gateway. Required if Stage name is provided. Otherwise, it will be ignored\n  * default: ''\n\n### (Optional) RestApiGwResourcePath\n  * type: String\n  * description: The Resource Path for which throttling settings should be updated (e.g. /Customers/Accounts/). Can be set to \"*\" (all resources). If `RestApiGwStageName` is not provided, this parameter is ignored\n  * default: '*'\n\n### (Optional) RestApiGwHttpMethod\n  * type: String\n  * description: The HTTP method for which throttling settings should be updated (e.g. GET, POST, PUT, and etc.). Can be set to \"*\" (all http methods). If `RestApiGwStageName` is not provided, this parameter is ignored\n  * default: '*'\n\n### (Required) ForceExecution\n  * type: Boolean\n  * description: By default the document raises error if the throttling settings are changed by more than 50%. If this option is True, skips this check. True of false\n\n## Details\nThe document changes throttling settings of the REST API Gateway. It also validates the requested values\nand raises error if throttling settings are going to be increased/decreased by more than 50%. Users have\nan option to skip this validation using `ForceExecution` parameter or execute the current SOP several times\nwith smaller increments.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * CheckIfForceExecutionIsSet\n  * ValidateInputs\n  * SetThrottlingConfiguration\n  * OutputRecoveryTime\n\n## Outputs\n### SetThrottlingConfiguration.RestApiGwThrottlingRateNewValue\n  * type: String\n  * description: Throttling rate after update\n\n### SetThrottlingConfiguration.RestApiGwThrottlingBurstNewValue\n  * type: String\n  * description: Throttling burst after update\n\n### ValidateInputs.RestApiGwThrottlingRateOriginalValue\n  * type: String\n  * description: Throttling rate before update\n\n### ValidateInputs.RestApiGwThrottlingBurstOriginalValue\n  * type: String\n  * description: Throttling burst before update\n\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: SOP execution time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "RestApiGwUsagePlanId": {
      "type": "String",
      "description": "(Required) The ID of REST API Gateway usage plan to be modified"
    },
    "RestApiGwThrottlingRate": {
      "type": "String",
      "description": "(Required) New throttling rate value in requests per second"
    },
    "RestApiGwThrottlingBurst": {
      "type": "String",
      "description": "(Required) New throttling burst value in requests per second"
    },
    "RestApiGwStageName": {
      "type": "String",
      "description": "(Optional) The name of the Stage for which throttling settings should be updated. If not set, settings will be updated on the Usage Plan level",
      "default": ""
    },
    "RestApiGwId": {
      "type": "String",
      "description": "(Optional) The ID of REST API Gateway. Required if Stage name is provided. Otherwise, it will be ignored",
      "default": ""
    },
    "RestApiGwResourcePath": {
      "type": "String",
      "description": "(Optional) The Resource Path for which throttling settings should be updated (e.g. /Customers/Accounts/). Can be set to \"*\" (all resources). If `RestApiGwStageName` is not provided, this parameter is ignored",
      "default": "*"
    },
    "RestApiGwHttpMethod": {
      "type": "String",
      "description": "(Optional) The HTTP method for which throttling settings should be updated (e.g. GET, POST, PUT, and etc.). Can be set to \"*\" (all http methods). If `RestApiGwStageName` is not provided, this parameter is ignored",
      "default": "*"
    },
    "ForceExecution": {
      "type": "Boolean",
      "description": "(Optional) By default the document raises error if the throttling settings are changed by more than 50%. If this option is True, skips this check. True of false",
      "default": false
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "outputs": [
    "SetThrottlingConfiguration.RestApiGwThrottlingRateNewValue",
    "SetThrottlingConfiguration.RestApiGwThrottlingBurstNewValue",
    "ValidateInputs.RestApiGwThrottlingRateOriginalValue",
    "ValidateInputs.RestApiGwThrottlingBurstOriginalValue",
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "start_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "CheckIfForceExecutionIsSet",
      "description": "Check if `ForceExecution` option is true and changes by more than 50% are allowed",
      "action": "aws:branch",
      "inputs": {
        "Choices": [
          {
            "NextStep": "SetThrottlingConfiguration",
            "Variable": "{{ ForceExecution }}",
            "BooleanEquals": true
          },
          {
            "NextStep": "ValidateInputs",
            "Variable": "{{ ForceExecution }}",
            "BooleanEquals": false
          }
        ],
        "Default": "ValidateInputs"
      }
    },
    {
      "name": "ValidateInputs",
      "description": "Get current throttling settings for the specified REST API Gateway Usage Plan, Stage or path/method and raise\nerror if requested increase/decrease is by more than 50% of original values",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwThrottlingRateOriginalValue",
          "Selector": "$.Payload.OriginalRateLimit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwThrottlingBurstOriginalValue",
          "Selector": "$.Payload.OriginalBurstLimit",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "validate_throttling_config",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ RestApiGwUsagePlanId }}",
          "RestApiGwId": "{{ RestApiGwId }}",
          "RestApiGwStageName": "{{ RestApiGwStageName }}",
          "RestApiGwResourcePath": "{{ RestApiGwResourcePath }}",
          "RestApiGwHttpMethod": "{{ RestApiGwHttpMethod }}",
          "RestApiGwThrottlingRate": "{{ RestApiGwThrottlingRate }}",
          "RestApiGwThrottlingBurst": "{{ RestApiGwThrottlingBurst }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}\n\n\n\ndef validate_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwThrottlingRate' not in events:\n        raise KeyError('Requires RestApiGwThrottlingRate in events')\n\n    if 'RestApiGwThrottlingBurst' not in events:\n        raise KeyError('Requires RestApiGwThrottlingBurst in events')\n\n    new_rate_limit: int = int(events['RestApiGwThrottlingRate'])\n    new_burst_limit: int = int(events['RestApiGwThrottlingBurst'])\n\n    usage_plan: dict = get_throttling_config(events, None)\n    original_rate_limit: int = usage_plan['RateLimit']\n    original_burst_limit: int = usage_plan['BurstLimit']\n\n    if original_burst_limit and abs(new_burst_limit - original_burst_limit) > original_burst_limit * 0.5:\n        raise ValueError('Burst rate limit is going to be changed more than 50%, please use smaller increments or use '\n                         'ForceExecution parameter to disable validation')\n\n    if original_rate_limit and abs(new_rate_limit - original_rate_limit) > original_rate_limit * 0.5:\n        raise ValueError('Rate limit is going to be changed more than 50%, please use smaller increments or use '\n                         'ForceExecution parameter to disable validation')\n\n    return {'OriginalRateLimit': original_rate_limit,\n            'OriginalBurstLimit': original_burst_limit}"
      }
    },
    {
      "name": "SetThrottlingConfiguration",
      "description": "Update throttling settings for the REST API Gateway, raise error if values exceed service quota",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RestApiGwThrottlingRateNewValue",
          "Selector": "$.Payload.RateLimit",
          "Type": "Integer"
        },
        {
          "Name": "RestApiGwThrottlingBurstNewValue",
          "Selector": "$.Payload.BurstLimit",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "set_throttling_config",
        "InputPayload": {
          "RestApiGwUsagePlanId": "{{ RestApiGwUsagePlanId }}",
          "RestApiGwId": "{{ RestApiGwId }}",
          "RestApiGwStageName": "{{ RestApiGwStageName }}",
          "RestApiGwResourcePath": "{{ RestApiGwResourcePath }}",
          "RestApiGwHttpMethod": "{{ RestApiGwHttpMethod }}",
          "RestApiGwThrottlingRate": "{{ RestApiGwThrottlingRate }}",
          "RestApiGwThrottlingBurst": "{{ RestApiGwThrottlingBurst }}"
        },
        "Script": "import json\nimport logging\nimport time\nfrom random import uniform\nfrom typing import Any, Callable\n\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\n\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\n        raise ValueError(f'{error_message} Response is: {response}')\n\n\n\ndef execute_boto3_with_backoff(delegate: Callable[[Any], dict], **kwargs) -> dict:\n    \"\"\"\n    Executes the given delegate with apigateway client parameter, handles TooManyRequestsException using\n    exponential backoff algorithm with random jitter\n    :param delegate: The delegate to execute (with boto3 function)\n    :keyword args:\n        retries: Number of maximum backoff retries\n        max_interval: Maximum backoff interval in seconds\n        base_time: Backoff base time\n    :return: The output of the given function\n    \"\"\"\n    backoff_retries: int = kwargs.get('retries', 15)\n    backoff_max_interval: int = kwargs.get('max_interval', 64)\n    backoff_base_time: int = kwargs.get('base_time', 2)\n    apigw_client = boto3.client('apigateway')\n\n    count = 1\n    while count <= backoff_retries:\n        try:\n            log.debug(f'Making an API call, attempt: {count} ...')\n            response = delegate(apigw_client)\n            assert_https_status_code_200(response, 'Failed to perform API call')\n            log.debug('API call performed successfully.')\n            return response\n        except ClientError as error:\n            if error.response['Error']['Code'] == 'TooManyRequestsException':\n                interval: float = min(backoff_base_time * 2 ** count + round(uniform(-2, 2), 2), backoff_max_interval)\n                log.warning(f'TooManyRequestsException, slow it down with delay {interval} seconds ...')\n                time.sleep(interval)\n                count += 1\n            else:\n                log.error(error)\n                raise error\n\n    raise Exception(f'Failed to perform API call successfully for {count - 1} times.')\n\n\n\ndef get_service_quota(config: object, service_code: str, quota_code: str) -> dict:\n    client = boto3.client('service-quotas', config=config)\n    response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)\n    assert_https_status_code_200(response, f'Failed to perform get_service_quota with '\n                                           f'ServiceCode: {service_code} and QuotaCode: {quota_code}')\n    return response\n\n\n\ndef update_usage_plan(usage_plan_id: str, patch_operations: list, retries: int = 15) -> dict:\n    return execute_boto3_with_backoff(\n        delegate=lambda x: x.update_usage_plan(\n            usagePlanId=usage_plan_id,\n            patchOperations=patch_operations\n        ),\n        retries=retries\n    )\n\n\n\ndef wait_throttling_config_updated(events: dict, context: dict) -> None:\n    expected_rate_limit: int = int(events['RestApiGwThrottlingRate'])\n    expected_burst_limit: int = int(events['RestApiGwThrottlingBurst'])\n    max_retries: int = events.get('MaxRetries', 40)\n    timeout: int = events.get('Timeout', 15)\n    while max_retries > 0:\n        actual_throttling_config = get_throttling_config(events, None)\n        actual_rate_limit = actual_throttling_config['RateLimit']\n        actual_burst_limit = actual_throttling_config['BurstLimit']\n        if actual_rate_limit == expected_rate_limit and actual_burst_limit == expected_burst_limit:\n            return\n        log.info(f'Waiting for expected values: [RateLimit: {expected_rate_limit}, BurstLimit: {expected_burst_limit}],'\n                 f' actual values: [RateLimit: {actual_rate_limit}, BurstLimit: {actual_burst_limit}]')\n        max_retries -= 1\n        time.sleep(timeout)\n\n    raise TimeoutError('Error to wait for throttling config update. Maximum timeout exceeded!')\n\n\n\ndef get_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n    client = boto3.client('apigateway', config=config)\n    usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)\n    assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')\n\n    if stage_name:\n        stage_found = False\n        for stage in usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                stage_found = True\n                if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:\n                    rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                    burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n                else:\n                    rate_limit: float = usage_plan['throttle']['rateLimit']\n                    burst_limit: int = usage_plan['throttle']['burstLimit']\n        if not stage_found:\n            raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')\n    else:\n        rate_limit: float = usage_plan['throttle']['rateLimit']\n        burst_limit: int = usage_plan['throttle']['burstLimit']\n\n    return {'RateLimit': int(rate_limit),\n            'BurstLimit': burst_limit,\n            'QuotaLimit': usage_plan['quota']['limit'],\n            'QuotaPeriod': usage_plan['quota']['period']}\n\n\n\ndef set_throttling_config(events: dict, context: dict) -> dict:\n    if 'RestApiGwUsagePlanId' not in events:\n        raise KeyError('Requires RestApiGwUsagePlanId in events')\n\n    if 'RestApiGwThrottlingRate' not in events:\n        raise KeyError('Requires RestApiGwThrottlingRate in events')\n\n    if 'RestApiGwThrottlingBurst' not in events:\n        raise KeyError('Requires RestApiGwThrottlingBurst in events')\n\n    if 'RestApiGwStageName' in events and events['RestApiGwStageName']:\n        if 'RestApiGwId' not in events:\n            raise KeyError('Requires RestApiGwId in events')\n        if not events['RestApiGwId']:\n            raise KeyError('RestApiGwId should not be empty')\n\n    usage_plan_id: str = events['RestApiGwUsagePlanId']\n    new_rate_limit: float = float(events['RestApiGwThrottlingRate'])\n    new_burst_limit: int = int(events['RestApiGwThrottlingBurst'])\n    gateway_id: str = events.get('RestApiGwId')\n    stage_name: str = events.get('RestApiGwStageName')\n    resource_path: str = events.get('RestApiGwResourcePath', '*')\n    http_method: str = events.get('RestApiGwHttpMethod', '*')\n    validate_quota_limits: bool = events.get('ValidateQuotaLimits', True)\n\n    output: dict = {}\n    quota_rate_limit_code: str = 'L-8A5B8E43'\n    quota_burst_limit_code: str = 'L-CDF5615A'\n    patch_operations: list = [\n        {\n            'op': 'replace',\n            'path': '/throttle/rateLimit',\n            'value': str(new_rate_limit)\n        },\n        {\n            'op': 'replace',\n            'path': '/throttle/burstLimit',\n            'value': str(new_burst_limit)\n        }\n    ]\n\n    # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution\n    if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):\n        gateway_id = stage_name = None\n    resource_path = '*' if resource_path.startswith('{{') else resource_path\n    http_method = '*' if http_method.startswith('{{') else http_method\n\n    boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n\n    if validate_quota_limits:\n        quota_rate_limit: float = get_service_quota(\n            boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']\n        quota_burst_limit: float = get_service_quota(\n            boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']\n\n        if new_rate_limit > quota_rate_limit:\n            raise ValueError(f'Given value of RestApiGwThrottlingRate: {new_rate_limit}, can not be more than '\n                             f'service quota Throttle rate: {quota_rate_limit}')\n\n        if new_burst_limit > quota_burst_limit:\n            raise ValueError(f'Given value of RestApiGwThrottlingBurst: {new_burst_limit}, can not be more than '\n                             f'service quota Throttle burst rate: {quota_burst_limit}')\n    if stage_name:\n        path: str = f'/apiStages/{gateway_id}:{stage_name}/throttle/{resource_path}/{http_method}'\n        patch_operations[0]['path'], patch_operations[1]['path'] = f'{path}/rateLimit', f'{path}/burstLimit'\n        updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)\n\n        for stage in updated_usage_plan['apiStages']:\n            if stage['apiId'] == gateway_id and stage['stage'] == stage_name:\n                output['RateLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']\n                output['BurstLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']\n    else:\n        updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)\n        output['RateLimit'] = updated_usage_plan['throttle']['rateLimit']\n        output['BurstLimit'] = updated_usage_plan['throttle']['burstLimit']\n\n    output['RateLimit'] = int(output['RateLimit'])\n    wait_throttling_config_updated(events, None)\n\n    return output"
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "recovery_time",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        },
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds"
      }
    }
  ]
}
