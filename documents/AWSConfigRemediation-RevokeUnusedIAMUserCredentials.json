{
  "schemaVersion": "0.3",
  "description": "### Document Name - AWSConfigRemediation-RevokeUnusedIAMUserCredentials\n\n## What does this document do?\nThis document revokes unused IAM passwords and active access keys. This document will deactivate expired access keys by using the [UpdateAccessKey API](https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAccessKey.html) and delete expired login profiles by using the [DeleteLoginProfile API](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteLoginProfile.html). Please note, this automation document requires AWS Config to be enabled.\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* IAMResourceId: (Required) IAM resource unique identifier.\n* MaxCredentialUsageAge: (Required) Maximum number of days within which a credential must be used. The default value is 90 days.\n\n## Output Parameters\n* RevokeUnusedIAMUserCredentialsAndVerify.Output - Success message or failure Exception.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "IAMResourceId": {
      "type": "String",
      "description": "(Required) IAM resource unique identifier.",
      "allowedPattern": "^[\\w+=,.@_-]{1,128}$"
    },
    "MaxCredentialUsageAge": {
      "type": "String",
      "description": "(Required) Maximum number of days within which a credential must be used. The default value is 90 days.",
      "allowedPattern": "^(\\d|[1-9]\\d{1,3}|10000)$",
      "default": "90"
    }
  },
  "outputs": [
    "RevokeUnusedIAMUserCredentialsAndVerify.Output"
  ],
  "mainSteps": [
    {
      "name": "RevokeUnusedIAMUserCredentialsAndVerify",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "isEnd": true,
      "description": "## RevokeUnusedIAMUserCredentialsAndVerify\nThis step deactivates expired IAM User access keys, deletes expired login profiles and verifies credentials were revoked\n## Outputs\n* Output: Success message or failure Exception.\n",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "unused_iam_credentials_handler",
        "InputPayload": {
          "IAMResourceId": "{{ IAMResourceId }}",
          "MaxCredentialUsageAge": "{{ MaxCredentialUsageAge }}"
        },
        "Script": "import boto3\nfrom datetime import datetime\nfrom datetime import timedelta\n\niam_client = boto3.client(\"iam\")\nconfig_client = boto3.client(\"config\")\n\nresponses = {}\nresponses[\"DeactivateUnusedKeysResponse\"] = []\n\ndef list_access_keys(user_name):\n  return iam_client.list_access_keys(UserName=user_name).get(\"AccessKeyMetadata\")\n\ndef deactivate_key(user_name, access_key):\n  responses[\"DeactivateUnusedKeysResponse\"].append({\"AccessKeyId\": access_key, \"Response\": iam_client.update_access_key(UserName=user_name, AccessKeyId=access_key, Status=\"Inactive\")})\n\ndef deactivate_unused_keys(access_keys, max_credential_usage_age, user_name):\n  for key in access_keys:\n    last_used = iam_client.get_access_key_last_used(AccessKeyId=key.get(\"AccessKeyId\")).get(\"AccessKeyLastUsed\")\n    if last_used.get(\"LastUsedDate\"):\n      last_used_date = last_used.get(\"LastUsedDate\").replace(tzinfo=None)\n      last_used_days = (datetime.now() - last_used_date).days\n      if last_used_days >= max_credential_usage_age:\n        deactivate_key(user_name, key.get(\"AccessKeyId\"))\n    else:\n      create_date = key.get(\"CreateDate\").replace(tzinfo=None)\n      days_since_creation = (datetime.now() - create_date).days\n      if days_since_creation >= max_credential_usage_age:\n        deactivate_key(user_name, key.get(\"AccessKeyId\"))\n\ndef get_login_profile(user_name):\n  try:\n    return iam_client.get_login_profile(UserName=user_name)[\"LoginProfile\"]\n  except iam_client.exceptions.NoSuchEntityException:\n    return False\n\ndef delete_unused_password(user_name, max_credential_usage_age):\n  user = iam_client.get_user(UserName=user_name).get(\"User\")\n  password_last_used_days = 0\n  login_profile = get_login_profile(user_name)\n  if login_profile and user.get(\"PasswordLastUsed\"):\n    password_last_used = user.get(\"PasswordLastUsed\").replace(tzinfo=None)\n    password_last_used_days = (datetime.now() - password_last_used).days\n  elif login_profile and not user.get(\"PasswordLastUsed\"):\n    password_creation_date = login_profile.get(\"CreateDate\").replace(tzinfo=None)\n    password_last_used_days = (datetime.now() - password_creation_date).days\n  if password_last_used_days >= max_credential_usage_age:\n    responses[\"DeleteUnusedPasswordResponse\"] = iam_client.delete_login_profile(UserName=user_name)\n\ndef verify_expired_credentials_revoked(responses, user_name):\n  if responses.get(\"DeactivateUnusedKeysResponse\"):\n    for key in responses.get(\"DeactivateUnusedKeysResponse\"):\n      key_data = next(filter(lambda x: x.get(\"AccessKeyId\") == key.get(\"AccessKeyId\"), list_access_keys(user_name)))\n      if key_data.get(\"Status\") != \"Inactive\":\n        error_message = \"VERIFICATION FAILED. ACCESS KEY {} NOT DEACTIVATED\".format(key_data.get(\"AccessKeyId\"))\n        raise Exception(error_message)\n  if responses.get(\"DeleteUnusedPasswordResponse\"):\n    try:\n      iam_client.get_login_profile(UserName=user_name)\n      error_message = \"VERIFICATION FAILED. IAM USER {} LOGIN PROFILE NOT DELETED\".format(user_name)\n      raise Exception(error_message)\n    except iam_client.exceptions.NoSuchEntityException:\n      pass\n  return {\n      \"output\": \"Verification of unused IAM User credentials is successful.\",\n      \"http_responses\": responses\n  }\n\ndef get_user_name(resource_id):\n  list_discovered_resources_response = config_client.list_discovered_resources(\n      resourceType='AWS::IAM::User',\n      resourceIds=[resource_id]\n  )\n  resource_name = list_discovered_resources_response.get(\"resourceIdentifiers\")[0].get(\"resourceName\")\n  return resource_name\n\ndef unused_iam_credentials_handler(event, context):\n  iam_resource_id = event.get(\"IAMResourceId\")\n  user_name = get_user_name(iam_resource_id)\n  \n  max_credential_usage_age = int(event.get(\"MaxCredentialUsageAge\"))\n  \n  access_keys = list_access_keys(user_name)\n  unused_keys = deactivate_unused_keys(access_keys, max_credential_usage_age, user_name)\n\n  delete_unused_password(user_name, max_credential_usage_age)\n\n  return verify_expired_credentials_revoked(responses, user_name)"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
