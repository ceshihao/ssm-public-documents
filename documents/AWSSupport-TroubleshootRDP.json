{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootRDP** automation helps you check or modify common settings on the target instance which may impact Remote Desktop Protocol (RDP) connections, such as the RDP port, Network Layer Authentication (NLA) and Windows Firewall profiles. Optionally, changes can be applied offline by stopping and starting the instance, if the user explicitly allows for offline remediation. By default, the document reads and outputs the values of the settings.\n\n#### Important:\n> * Changes to the RDP settings, RDP service, and Windows Firewall profiles should be carefully reviewed before running this document. It is recommended to take a backup or snapshot of your EBS volumes if you are modifying the instance configuration.\n> * To change the Windows service settings, this runbook uses the [AWSSupport-ManageWindowsService](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-managewindowsservice.html) runbook.\n> * To change the RDP settings, this runbook uses the [AWSSupport-ManageRDPSettings](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-managerdpsettings.html) runbook.\n> * If the target instance is not managed by AWS Systems Manager and the parameters `AllowOffline` is set to `True` and `Action` is set to `FixAll`, the runbook runs the [AWSSupport-ExecuteEC2Rescue](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-executeec2rescue.html) runbook to try to fix the RDP settings. **Important:** The `AWSSupport-ExecuteEC2Rescue` automation stops the instance, and creates an AMI before attempting any operations. Data stored in instance store volumes will be lost. The public IP address will change if you are not using an Elastic IP address.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "InstanceId": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the instance to troubleshoot the RDP settings of."
    },
    "Action": {
      "description": "(Optional) The troubleshoot action: `Custom`: Use the values from the input parameters `Firewall`, `RDPServiceStartupType`, `RDPServiceAction`, `RDPPortAction`, `NLASettingAction`, and `RemoteConnections` to manage the settings. `CheckAll`: Read the values of the settings without changing them. `FixAll`: Restore the RDP default settings, and disable the Windows Firewall.",
      "type": "String",
      "allowedValues": [
        "CheckAll",
        "FixAll",
        "Custom"
      ],
      "default": "Custom"
    },
    "Firewall": {
      "type": "String",
      "description": "(Optional) Check or disables the Windows firewall (all profiles).",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Disable"
      ]
    },
    "RDPServiceStartupType": {
      "type": "String",
      "description": "(Optional) Check or set the RDP service to automatically start when Windows boots (`Auto`).",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Auto"
      ]
    },
    "RDPServiceAction": {
      "type": "String",
      "description": "(Optional) Check, start, restart, or force-restart the RDP service (TermService).",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Start",
        "Restart",
        "Force-Restart"
      ]
    },
    "RDPPortAction": {
      "type": "String",
      "description": "(Optional) Check the current port used for RDP connections, or modify the RDP port back to the default `3389` and restart the service.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Modify"
      ]
    },
    "NLASettingAction": {
      "type": "String",
      "description": "(Optional) Check or disable Network Layer Authentication (NLA).",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Disable"
      ]
    },
    "RemoteConnections": {
      "type": "String",
      "description": "(Optional) The action to perform on the *Terminal Server* `fDenyTSConnections` registry setting: `Check`, `Enable`.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Enable"
      ]
    },
    "AllowOffline": {
      "type": "String",
      "description": "(Optional) Set it to `True` if you allow an offline RDP remediation in case the target instance is not managed by AWS Systems Manager (it only works if you set the input parameter `Action` to `FixAll`). **Note:** For the offline remediation, the automation stops the instance, and creates an Amazon Machine Image (AMI) backup before attempting any operations.",
      "default": "False",
      "allowedValues": [
        "True",
        "False"
      ]
    },
    "EC2RescueInstanceType": {
      "type": "String",
      "description": "(Conditional) Offline only - The EC2 instance type for the EC2Rescue instance.",
      "default": "t3.medium",
      "allowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t3.small",
        "t3.medium",
        "t3.large",
        "i3.large"
      ]
    },
    "SubnetId": {
      "type": "String",
      "description": "(Conditional) Offline only - The subnet ID for the EC2Rescue instance used to perform the offline troubleshooting. If no subnet ID is specified, AWS Systems Manager Automation will create a new VPC. **Important:** The subnet must be in the same Availability Zone as InstanceId, and it must allow access to the AWS Systems Manager endpoints.",
      "default": "SelectedInstanceSubnet",
      "allowedPattern": "^$|^subnet-[a-z0-9]{8,17}$|SelectedInstanceSubnet"
    },
    "S3BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Conditional) Offline only - Amazon S3 bucket name in your account where you want to upload the troubleshooting logs. Make sure the bucket policy does not grant unnecessary read/write permissions to parties that do not need access to the collected logs.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "description": "Checks if the instance is a Windows instance.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      },
      "isCritical": true,
      "nextStep": "assertInstanceIsManagedInstance"
    },
    {
      "name": "assertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "description": "Checks if the instance is managed by AWS Systems Manager.",
      "onFailure": "step:branchOnAllowOffline",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": false,
      "nextStep": "branchOnAction"
    },
    {
      "name": "branchOnAction",
      "action": "aws:branch",
      "description": "Branches the automation based on the value of the `Action` input parameter.",
      "inputs": {
        "Choices": [
          {
            "NextStep": "manageFirewallProfiles",
            "Variable": "{{ Action }}",
            "StringEquals": "Custom"
          },
          {
            "NextStep": "checkFirewallProfiles",
            "Variable": "{{ Action }}",
            "StringEquals": "CheckAll"
          },
          {
            "NextStep": "disableFirewallProfiles",
            "Variable": "{{ Action }}",
            "StringEquals": "FixAll"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "manageFirewallProfiles",
      "action": "aws:runCommand",
      "description": "Runs the PowerShell script to manage the Windows Firewall profiles.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to invoke firewall actions",
            "function Invoke-FirewallAction {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Check\", \"Disable\")]",
            "        [string]$FirewallAction",
            "    )",
            "",
            "    try {",
            "        # Check if the firewall action is 'Check'",
            "        if ($FirewallAction -eq \"Check\") {",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall show allprofiles",
            "        }",
            "        else {",
            "            # Turn off firewall (Domain, Private, Public profile)",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall set allprofiles state off > $null",
            "            Write-Output \"All Windows firewall profiles have been disabled (Domain, Private, Public).\"",
            "        }",
            "    }",
            "    catch {",
            "        # Handle exceptions and provide a meaningful error message",
            "        throw \"Unable to apply action $FirewallAction to firewall. Reason: \" + $_.Exception.Message",
            "    }",
            "}",
            "",
            "try {",
            "    # Input variables",
            "    $documentActionInput = \"{{ Action }}\"",
            "    $firewallInput = \"{{ Firewall }}\"",
            "    # Use a switch statement to determine the firewall action based on the document action",
            "    switch ($documentActionInput) {",
            "        \"Custom\" { $firewallAction = $firewallInput }",
            "        \"CheckAll\" { $firewallAction = \"Check\" }",
            "        \"FixAll\" { $firewallAction = \"Disable\" }",
            "        default { throw \"Unexpected input.\" }",
            "    }",
            "    # Invoke the firewall action function",
            "    Invoke-FirewallAction -FirewallAction $firewallAction",
            "}",
            "catch {",
            "    # Catch any exceptions and output an error message",
            "    Write-Output $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "manageRDPServiceSettings"
    },
    {
      "name": "manageRDPServiceSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to manage the RDP service.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWSSupport-ManageWindowsService",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "WindowsServiceName": [
            "TermService"
          ],
          "StartupType": [
            "{{ RDPServiceStartupType }}"
          ],
          "ServiceAction": [
            "{{ RDPServiceAction }}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "manageRDPSettings"
    },
    {
      "name": "manageRDPSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to manage the RDP settings.",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSSupport-ManageRDPSettings",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "RDPPortAction": [
            "{{ RDPPortAction }}"
          ],
          "RDPPort": [
            "3389"
          ],
          "NLASettingAction": [
            "{{ NLASettingAction }}"
          ],
          "RemoteConnections": [
            "{{ RemoteConnections }}"
          ]
        }
      },
      "isEnd": true
    },
    {
      "name": "checkFirewallProfiles",
      "action": "aws:runCommand",
      "description": "Runs the PowerShell script to manage the Windows Firewall profiles.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to invoke firewall actions",
            "function Invoke-FirewallAction {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Check\", \"Disable\")]",
            "        [string]$FirewallAction",
            "    )",
            "",
            "    try {",
            "        # Check if the firewall action is 'Check'",
            "        if ($FirewallAction -eq \"Check\") {",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall show allprofiles",
            "        }",
            "        else {",
            "            # Turn off firewall (Domain, Private, Public profile)",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall set allprofiles state off > $null",
            "            Write-Output \"All Windows firewall profiles have been disabled (Domain, Private, Public).\"",
            "        }",
            "    }",
            "    catch {",
            "        # Handle exceptions and provide a meaningful error message",
            "        throw \"Unable to apply action $FirewallAction to firewall. Reason: \" + $_.Exception.Message",
            "    }",
            "}",
            "",
            "try {",
            "    # Input variables",
            "    $documentActionInput = \"{{ Action }}\"",
            "    $firewallInput = \"{{ Firewall }}\"",
            "    # Use a switch statement to determine the firewall action based on the document action",
            "    switch ($documentActionInput) {",
            "        \"Custom\" { $firewallAction = $firewallInput }",
            "        \"CheckAll\" { $firewallAction = \"Check\" }",
            "        \"FixAll\" { $firewallAction = \"Disable\" }",
            "        default { throw \"Unexpected input.\" }",
            "    }",
            "    # Invoke the firewall action function",
            "    Invoke-FirewallAction -FirewallAction $firewallAction",
            "}",
            "catch {",
            "    # Catch any exceptions and output an error message",
            "    Write-Output $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "checkRDPServiceSettings"
    },
    {
      "name": "checkRDPServiceSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to manage the RDP service.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWSSupport-ManageWindowsService",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "WindowsServiceName": [
            "TermService"
          ],
          "StartupType": [
            "Check"
          ],
          "ServiceAction": [
            "Check"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "checkRDPSettings"
    },
    {
      "name": "checkRDPSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to manage the RDP settings.",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSSupport-ManageRDPSettings",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "RDPPortAction": [
            "Check"
          ],
          "NLASettingAction": [
            "Check"
          ],
          "RemoteConnections": [
            "Check"
          ]
        }
      },
      "isEnd": true
    },
    {
      "name": "disableFirewallProfiles",
      "action": "aws:runCommand",
      "description": "Runs the PowerShell script to disable all Windows Firewall profiles.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to invoke firewall actions",
            "function Invoke-FirewallAction {",
            "    param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Check\", \"Disable\")]",
            "        [string]$FirewallAction",
            "    )",
            "",
            "    try {",
            "        # Check if the firewall action is 'Check'",
            "        if ($FirewallAction -eq \"Check\") {",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall show allprofiles",
            "        }",
            "        else {",
            "            # Turn off firewall (Domain, Private, Public profile)",
            "            & \"${env:SYSTEMROOT}\\system32\\netsh.exe\" advfirewall set allprofiles state off > $null",
            "            Write-Output \"All Windows firewall profiles have been disabled (Domain, Private, Public).\"",
            "        }",
            "    }",
            "    catch {",
            "        # Handle exceptions and provide a meaningful error message",
            "        throw \"Unable to apply action $FirewallAction to firewall. Reason: \" + $_.Exception.Message",
            "    }",
            "}",
            "",
            "try {",
            "    # Input variables",
            "    $documentActionInput = \"{{ Action }}\"",
            "    $firewallInput = \"{{ Firewall }}\"",
            "    # Use a switch statement to determine the firewall action based on the document action",
            "    switch ($documentActionInput) {",
            "        \"Custom\" { $firewallAction = $firewallInput }",
            "        \"CheckAll\" { $firewallAction = \"Check\" }",
            "        \"FixAll\" { $firewallAction = \"Disable\" }",
            "        default { throw \"Unexpected input.\" }",
            "    }",
            "    # Invoke the firewall action function",
            "    Invoke-FirewallAction -FirewallAction $firewallAction",
            "}",
            "catch {",
            "    # Catch any exceptions and output an error message",
            "    Write-Output $_.Exception.Message",
            "    Exit 1",
            "}"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "restoreDefaultRDPServiceSettings"
    },
    {
      "name": "restoreDefaultRDPServiceSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to start the RDP service.",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWSSupport-ManageWindowsService",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "WindowsServiceName": [
            "TermService"
          ],
          "StartupType": [
            "Auto"
          ],
          "ServiceAction": [
            "Start"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "restoreDefaultRDPSettings"
    },
    {
      "name": "restoreDefaultRDPSettings",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ManageRDPSettings` runbook to enable remote connections and disable NLA.",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWSSupport-ManageRDPSettings",
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "RDPPortAction": [
            "Modify"
          ],
          "RDPPort": [
            "3389"
          ],
          "NLASettingAction": [
            "Disable"
          ],
          "RemoteConnections": [
            "Enable"
          ]
        }
      },
      "isEnd": true
    },
    {
      "name": "branchOnAllowOffline",
      "action": "aws:branch",
      "description": "Branches the automation based on the value of the `AllowOffline` input parameter.",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ AllowOffline }}",
                "StringEquals": "True"
              },
              {
                "Variable": "{{ Action }}",
                "StringEquals": "FixAll"
              }
            ],
            "NextStep": "branchOnSubnetId"
          }
        ]
      },
      "isEnd": true
    },
    {
      "name": "branchOnSubnetId",
      "action": "aws:branch",
      "description": "Branches the automation based on if the provided 'SubnetId' value.",
      "inputs": {
        "Choices": [
          {
            "NextStep": "describeSourceInstance",
            "Variable": "{{ SubnetId }}",
            "StringEquals": "SelectedInstanceSubnet"
          }
        ],
        "Default": "troubleshootRDPOffline"
      },
      "isEnd": true
    },
    {
      "name": "describeSourceInstance",
      "action": "aws:executeAwsApi",
      "description": "Retrieves the current instance's subnet.",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "SubnetId",
          "Selector": "$.Reservations[0].Instances[0].NetworkInterfaces[0].SubnetId",
          "Type": "String"
        }
      ],
      "nextStep": "troubleshootRDPOfflineWithSubnetId"
    },
    {
      "name": "troubleshootRDPOffline",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ExecuteEC2Rescue` runbook with the provided `SubnetId` value.",
      "onFailure": "Abort",
      "inputs": {
        "RuntimeParameters": {
          "UnreachableInstanceId": [
            "{{ InstanceId }}"
          ],
          "SubnetId": [
            "{{ SubnetId }}"
          ],
          "LogDestination": [
            "{{ S3BucketName }}"
          ],
          "AssumeRole": [
            "{{ AutomationAssumeRole }}"
          ],
          "EC2RescueInstanceType": [
            "{{ EC2RescueInstanceType }}"
          ]
        },
        "DocumentName": "AWSSupport-ExecuteEC2Rescue"
      },
      "isEnd": true
    },
    {
      "name": "troubleshootRDPOfflineWithSubnetId",
      "action": "aws:executeAutomation",
      "description": "Runs the `AWSSupport-ExecuteEC2Rescue` runbook with the provided instance's subnet.",
      "onFailure": "Abort",
      "inputs": {
        "RuntimeParameters": {
          "UnreachableInstanceId": [
            "{{ InstanceId }}"
          ],
          "SubnetId": [
            "{{ describeSourceInstance.SubnetId }}"
          ],
          "LogDestination": [
            "{{ S3BucketName }}"
          ],
          "AssumeRole": [
            "{{ AutomationAssumeRole }}"
          ],
          "EC2RescueInstanceType": [
            "{{ EC2RescueInstanceType }}"
          ]
        },
        "DocumentName": "AWSSupport-ExecuteEC2Rescue"
      },
      "isEnd": true
    }
  ],
  "outputs": [
    "manageFirewallProfiles.Output",
    "manageRDPServiceSettings.Output",
    "manageRDPSettings.Output",
    "checkFirewallProfiles.Output",
    "checkRDPServiceSettings.Output",
    "checkRDPSettings.Output",
    "disableFirewallProfiles.Output",
    "restoreDefaultRDPServiceSettings.Output",
    "restoreDefaultRDPSettings.Output",
    "troubleshootRDPOffline.Output",
    "troubleshootRDPOfflineWithSubnetId.Output"
  ]
}
