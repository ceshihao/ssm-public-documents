{
  "schemaVersion": "0.3",
  "description": "# Document name - AWS-EnableDynamoDbAutoscaling\n\n## What does this document do?\nThe AWS-EnableDynamoDbAutoscaling runbook will enable Application Autoscaling for an existing DynamoDB Table which is \nconfigured for provisioned capacity in order to maintain availability using the [RegisterScalableTarget](https://docs\\\n.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html) and [PutScalingPolicy](https://\\\ndocs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html) APIs. Amazon DynamoDB auto scaling \nuses the AWS Application Auto Scaling service to dynamically adjust provisioned throughput capacity on your behalf, in \nresponse to actual traffic patterns. For more information, see Managing throughput capacity \nautomatically with DynamoDB auto scaling in the [Amazon DynamoDB User Guide](https://docs.aws.amazon.com/amazondynamo\\\ndb/latest/developerguide/AutoScaling.html).\n\n## Input Parameters\n* AutomationAssumeRole: (Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n  that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified,\n  Systems Manager Automation uses the permissions of the user that starts this runbook.\n  * Default: \"\"\n* TableName: (Required) The name of the DynamoDB Table on which to enable Application Autoscaling.\n* MinReadCapacity: (Required) The minimum number of provisioned-throughput read units for the DynamoDB Table.\n* MaxReadCapacity: (Required) The maximum number of provisioned-throughput read units for the DynamoDB Table.\n* TargetReadCapacityUtilization: (Required) The desired target read capacity utilization, expressed as a percentage, \nbetween 20-90%. \n* ReadScaleOutCooldown: (Required) The amount of time, in seconds, to wait for a previous read capacity scale-out \nactivity to take effect.\n* ReadScaleInCooldown: (Required) The amount of time, in seconds, after a read capacity scale-in activity completes \nbefore another scale-in activity can start.\n* MinWriteCapacity: (Required) The minimum number of provisioned-throughput write units for the DynamoDB Table.\n* MaxWriteCapacity: (Required) The maximum number of provisioned-throughput write units for the DynamoDB Table.\n* TargetWriteCapacityUtilization: (Required) The desired target write capacity utilization, expressed as a percentage, \nbetween 20-90%. \nApplication Autoscaling ensures the ratio of consumed capacity to provisioned capacity stays at or near this value.\n* WriteScaleOutCooldown: (Required) The amount of time, in seconds, to wait for a previous write capacity scale-out \nactivity to take effect.\n* WriteScaleInCooldown: (Required) (Required) The amount of time, in seconds, after a write capacity scale-in activity \ncompletes before another scale-in activity can start.\n\n## Output Parameters\n* RegisterAppAutoscalingTargetWrite.Response\n* PutScalingPolicyWrite.Response\n* RegisterAppAutoscalingTargetRead.Response\n* PutScalingPolicyRead.Response\n* VerifyDynamoDbAutoscalingEnabled.DynamoDbAutoscalingEnabledResponse\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\nallows Systems Manager Automation to perform the actions on your behalf. If no role is specified,\nSystems Manager Automation uses the permissions of the user that starts this runbook.\n",
      "default": ""
    },
    "TableName": {
      "type": "String",
      "description": "(Required) The name of the DynamoDB Table on which to enable Application Autoscaling.",
      "allowedPattern": "^([a-zA-Z0-9._-]{3,1024})$"
    },
    "MinReadCapacity": {
      "type": "Integer",
      "description": "(Required) The minimum number of provisioned-throughput read units for the DynamoDB Table.",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "MaxReadCapacity": {
      "type": "Integer",
      "description": "(Required) The maximum number of provisioned-throughput read units for the DynamoDB Table.",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "TargetReadCapacityUtilization": {
      "type": "Integer",
      "description": "(Required) The desired target read capacity utilization, expressed as a percentage, between 20-90%. Application \nAutoscaling ensures the ratio of consumed capacity to provisioned capacity stays at or near this value.\n",
      "allowedPattern": "^([2-8]\\d|90)$"
    },
    "ReadScaleOutCooldown": {
      "type": "Integer",
      "description": "(Required) The amount of time, in seconds, to wait for a previous read capacity scale-out activity to take effect.\n",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "ReadScaleInCooldown": {
      "type": "Integer",
      "description": "(Required) The amount of time, in seconds, after a read capacity scale-in activity completes before another \nscale-in activity can start.\n",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "MinWriteCapacity": {
      "type": "Integer",
      "description": "(Required) The minimum number of provisioned-throughput write units for the DynamoDB Table.",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "MaxWriteCapacity": {
      "type": "Integer",
      "description": "(Required) The maximum number of provisioned-throughput write units for the DynamoDB Table.",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "TargetWriteCapacityUtilization": {
      "type": "Integer",
      "description": "(Required) The desired target write capacity utilization, expressed as a percentage, between 20-90%. Application \nAutoscaling ensures the ratio of consumed capacity to provisioned capacity stays at or near this value.\n",
      "allowedPattern": "^([2-8]\\d|90)$"
    },
    "WriteScaleOutCooldown": {
      "type": "Integer",
      "description": "(Required) The amount of time, in seconds, to wait for a previous write capacity scale-out activity to take \neffect.\n",
      "allowedPattern": "^(\\d{1,1024})$"
    },
    "WriteScaleInCooldown": {
      "type": "Integer",
      "description": "(Required) The amount of time, in seconds, after a write capacity scale-in activity completes before another \nscale-in activity can start.\n",
      "allowedPattern": "^(\\d{1,1024})$"
    }
  },
  "outputs": [
    "RegisterAppAutoscalingTargetWrite.Response",
    "PutScalingPolicyWrite.Response",
    "RegisterAppAutoscalingTargetRead.Response",
    "PutScalingPolicyRead.Response",
    "VerifyDynamoDbAutoscalingEnabled.DynamoDbAutoscalingEnabledResponse"
  ],
  "mainSteps": [
    {
      "name": "RegisterAppAutoscalingTargetWrite",
      "description": "## RegisterAppAutoscalingTargetWrite\nThis step will execute the RegisterScalableTarget API call to configure Application Autoscaling on the DynamoDB \nTable specified by the user to configure minimum and maximum write capacity units.\n## Outputs\nResponse: The full response from the RegisterScalableTarget API call\n",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "application-autoscaling",
        "Api": "RegisterScalableTarget",
        "MaxCapacity": "{{ MaxWriteCapacity }}",
        "MinCapacity": "{{ MinWriteCapacity }}",
        "ResourceId": "table/{{ TableName }}",
        "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "RegisterAppAutoscalingTargetWriteDelay",
      "description": "## RegisterAppAutoscalingTargetWriteDelay\nThis step is to place a delay between the required calls to prevent API throttling\n",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT0.5S"
      }
    },
    {
      "name": "PutScalingPolicyWrite",
      "description": "## PutScalingPolicyWrite\nThis step will execute the PutScalingPolicy API call to configure Application Autoscaling on the DynamoDB Table \nspecified by the user to configure the desired target write capacity utilization.\n## Outputs\nResponse: The full response from the PutScalingPolicy API call\n",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "application-autoscaling",
        "Api": "PutScalingPolicy",
        "PolicyName": "{{ TableName }}-Policy-Write",
        "ServiceNamespace": "dynamodb",
        "ResourceId": "table/{{ TableName }}",
        "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
        "PolicyType": "TargetTrackingScaling",
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleOutCooldown": "{{ WriteScaleOutCooldown }}",
          "ScaleInCooldown": "{{ WriteScaleInCooldown }}",
          "TargetValue": "{{ TargetWriteCapacityUtilization }}"
        }
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "PutScalingPolicyWriteDelay",
      "description": "## PutScalingPolicyWriteDelay\nThis step is to place a delay between the required calls to prevent API throttling\n",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT0.5S"
      }
    },
    {
      "name": "RegisterAppAutoscalingTargetRead",
      "description": "## RegisterAppAutoscalingTargetRead\nThis step will execute the RegisterScalableTarget API call to configure Application Autoscaling on the DynamoDB \nTable specified by the user to configure minimum and maximum read capacity units.\n## Outputs\nResponse: The full response from the RegisterScalableTarget API call\n",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "application-autoscaling",
        "Api": "RegisterScalableTarget",
        "ResourceId": "table/{{ TableName }}",
        "ServiceNamespace": "dynamodb",
        "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
        "MinCapacity": "{{ MinReadCapacity }}",
        "MaxCapacity": "{{ MaxReadCapacity }}"
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "RegisterAppAutoscalingTargetReadDelay",
      "description": "## ApplicationAutoscalingRegisterReadDelay\nThis step is to place a delay between the required calls to prevent API throttling\n",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT0.5S"
      }
    },
    {
      "name": "PutScalingPolicyRead",
      "description": "## PutScalingPolicyRead\nThis step will execute the PutScalingPolicy API call to configure Application Autoscaling on the DynamoDB Table \nspecified by the user to configure the desired target read capacity utilization.\n## Outputs\nResponse: The full response from the PutScalingPolicy API call\n",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "application-autoscaling",
        "Api": "PutScalingPolicy",
        "PolicyName": "{{ TableName }}-Policy-Read",
        "PolicyType": "TargetTrackingScaling",
        "ResourceId": "table/{{ TableName }}",
        "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb",
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleOutCooldown": "{{ ReadScaleOutCooldown }}",
          "ScaleInCooldown": "{{ ReadScaleInCooldown }}",
          "TargetValue": "{{ TargetReadCapacityUtilization }}"
        }
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyDynamoDbAutoscalingEnabled",
      "description": "## VerifyDynamoDbAutoscalingEnabled\nThis step will verify Application Autoscaling capacity values are configured as provided on the user-specified \nDynamoDB Table.\n## Outputs\nDynamoDbAutoscalingEnabledResponse:  Output of the step indicating successful configuration of Application Autoscaling on \nthe DynamoDB table.\n",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "handler",
        "InputPayload": {
          "TableName": "{{ TableName }}",
          "MinReadCapacity": "{{ MinReadCapacity }}",
          "MaxReadCapacity": "{{ MaxReadCapacity }}",
          "TargetReadCapacityUtilization": "{{ TargetReadCapacityUtilization }}",
          "ReadScaleOutCooldown": "{{ ReadScaleOutCooldown }}",
          "ReadScaleInCooldown": "{{ ReadScaleInCooldown }}",
          "MinWriteCapacity": "{{ MinWriteCapacity }}",
          "MaxWriteCapacity": "{{ MaxWriteCapacity }}",
          "TargetWriteCapacityUtilization": "{{ TargetWriteCapacityUtilization }}",
          "WriteScaleOutCooldown": "{{ WriteScaleOutCooldown }}",
          "WriteScaleInCooldown": "{{ WriteScaleInCooldown }}"
        },
        "Script": "import time\nimport boto3\n\n\ndef verify_scalable_target(client, resource_id, scalable_dimension, min_capacity, max_capacity):\n    time.sleep(0.5)\n    response = client.describe_scalable_targets(\n        ServiceNamespace=\"dynamodb\", ResourceIds=[resource_id], ScalableDimension=scalable_dimension\n    )\n    scalable_target = response[\"ScalableTargets\"][0]\n    min_capacity_configured = scalable_target[\"MinCapacity\"]\n    max_capacity_configured = scalable_target[\"MaxCapacity\"]\n\n    return min_capacity_configured == min_capacity and max_capacity_configured == max_capacity\n\n\ndef verify_scaling_policy(\n    client, policy_name, resource_id, scalable_dimension, target_value, scale_out_cooldown, scale_in_cooldown\n):\n    time.sleep(0.5)\n    response = client.describe_scaling_policies(\n        PolicyNames=[policy_name],\n        ServiceNamespace=\"dynamodb\",\n        ResourceId=resource_id,\n        ScalableDimension=scalable_dimension,\n    )\n    target_tracking_policy = response[\"ScalingPolicies\"][0][\"TargetTrackingScalingPolicyConfiguration\"]\n    target_value_configured = target_tracking_policy[\"TargetValue\"]\n    scale_out_cooldown_configured = target_tracking_policy[\"ScaleOutCooldown\"]\n    scale_in_cooldown_configured = target_tracking_policy[\"ScaleInCooldown\"]\n\n    return (\n        target_value_configured == target_value\n        and scale_out_cooldown_configured == scale_out_cooldown\n        and scale_in_cooldown_configured == scale_in_cooldown\n    )\n\n\ndef handler(event, context):\n    table_name = event[\"TableName\"]\n    resource_id = f\"table/{table_name}\"\n    min_read_capacity = event[\"MinReadCapacity\"]\n    max_read_capacity = event[\"MaxReadCapacity\"]\n    read_target_value = event[\"TargetReadCapacityUtilization\"]\n    read_scale_out_cooldown = event[\"ReadScaleOutCooldown\"]\n    read_scale_in_cooldown = event[\"ReadScaleInCooldown\"]\n    min_write_capacity = event[\"MinWriteCapacity\"]\n    max_write_capacity = event[\"MaxWriteCapacity\"]\n    write_target_value = event[\"TargetWriteCapacityUtilization\"]\n    write_scale_out_cooldown = event[\"WriteScaleOutCooldown\"]\n    write_scale_in_cooldown = event[\"WriteScaleInCooldown\"]\n\n    application_autoscaling = boto3.client(\"application-autoscaling\")\n\n    read_target_configured = verify_scalable_target(\n        client=application_autoscaling,\n        resource_id=resource_id,\n        scalable_dimension=\"dynamodb:table:ReadCapacityUnits\",\n        min_capacity=min_read_capacity,\n        max_capacity=max_read_capacity,\n    )\n\n    read_policy_configured = verify_scaling_policy(\n        client=application_autoscaling,\n        policy_name=f\"{table_name}-Policy-Read\",\n        resource_id=resource_id,\n        scalable_dimension=\"dynamodb:table:ReadCapacityUnits\",\n        target_value=read_target_value,\n        scale_out_cooldown=read_scale_out_cooldown,\n        scale_in_cooldown=read_scale_in_cooldown,\n    )\n\n    write_target_configured = verify_scalable_target(\n        client=application_autoscaling,\n        resource_id=resource_id,\n        scalable_dimension=\"dynamodb:table:WriteCapacityUnits\",\n        min_capacity=min_write_capacity,\n        max_capacity=max_write_capacity,\n    )\n\n    write_policy_configured = verify_scaling_policy(\n        client=application_autoscaling,\n        policy_name=f\"{table_name}-Policy-Write\",\n        resource_id=resource_id,\n        scalable_dimension=\"dynamodb:table:WriteCapacityUnits\",\n        target_value=write_target_value,\n        scale_out_cooldown=write_scale_out_cooldown,\n        scale_in_cooldown=write_scale_in_cooldown,\n    )\n\n    if (\n        read_target_configured\n        and read_policy_configured\n        and write_target_configured\n        and write_policy_configured\n    ):\n        success_message = (\n            \"Verification of configuration of Application Autoscaling on DynamoDB Table is successful.\"\n        )\n        return {\"DynamoDbAutoscalingEnabled\": success_message}\n\n    raise Exception(\n        f\"FAILED TO VERIFY CONFIGURATION OF APPLICATION AUTOSCALING ON DYNAMODB TABLE {table_name}.\"\n      )\n"
      },
      "outputs": [
        {
          "Name": "DynamoDbAutoscalingEnabledResponse",
          "Type": "String",
          "Selector": "$.Payload.DynamoDbAutoscalingEnabled"
        }
      ]
    }
  ]
}
