{
  "schemaVersion": "0.3",
  "description": "### Document Name - AWSConfigRemediation-EnableEnhancedMonitoringOnRDSInstance\n\n## What does this document do?\nThis document is used to enable enhanced monitoring on an RDS Instance using the input parameter DB Instance resourceId.\n\n## Input Parameters\n* ResourceId: (Required) Resource ID of the RDS DB Instance.\n* MonitoringInterval: (Optional)\n   * The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.\n   * If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0.\n   * Valid Values: 1, 5, 10, 15, 30, 60\n   * Default: 60\n* MonitoringRoleArn: (Required) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* EnableEnhancedMonitoring.DbInstance - The standard HTTP response from the ModifyDBInstance API.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/[a-zA-Z0-9+=,.@_/-]+$"
    },
    "ResourceId": {
      "type": "String",
      "description": "(Required) Resource ID of the Amazon RDS instance for which Enhanced Monitoring needs to be enabled.",
      "allowedPattern": "db-[A-Z0-9]{26}"
    },
    "MonitoringInterval": {
      "type": "Integer",
      "description": "(Optional) The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.",
      "default": 60,
      "allowedValues": [
        1,
        5,
        10,
        15,
        30,
        60
      ]
    },
    "MonitoringRoleArn": {
      "type": "String",
      "description": "(Required) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/[a-zA-Z0-9+=,.@_/-]+$"
    }
  },
  "outputs": [
    "EnableEnhancedMonitoring.DbInstance"
  ],
  "mainSteps": [
    {
      "name": "DescribeDBInstances",
      "action": "aws:executeAwsApi",
      "description": "## DescribeDBInstances\n  Makes describeDBInstances API call using RDS Instance DbiResourceId to get DBInstanceId.\n## Outputs\n* DbInstanceIdentifier: DBInstance Identifier of the RDS Instance.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "dbi-resource-id",
            "Values": [
              "{{ ResourceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "DbInstanceIdentifier",
          "Selector": "$.DBInstances[0].DBInstanceIdentifier",
          "Type": "String"
        }
      ]
    },
    {
      "name": "VerifyDBInstanceStatus",
      "action": "aws:assertAwsResourceProperty",
      "timeoutSeconds": 600,
      "isEnd": false,
      "description": "## VerifyDBInstanceStatus\nVerifies if DB Instance status is available before enabling enhanced monitoring.\n",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ DescribeDBInstances.DbInstanceIdentifier }}",
        "PropertySelector": "$.DBInstances[0].DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "EnableEnhancedMonitoring",
      "action": "aws:executeAwsApi",
      "description": "## EnableEnhancedMonitoring\n  Makes ModifyDBInstance API call to enable Enhanced Monitoring on the RDS Instance\n  using the DBInstanceId from the previous action.\n## Outputs\n  * DbInstance: The standard HTTP response from the ModifyDBInstance API.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBInstance",
        "ApplyImmediately": false,
        "DBInstanceIdentifier": "{{ DescribeDBInstances.DbInstanceIdentifier }}",
        "MonitoringInterval": "{{ MonitoringInterval }}",
        "MonitoringRoleArn": "{{ MonitoringRoleArn }}"
      },
      "outputs": [
        {
          "Name": "DbInstance",
          "Selector": "$",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyEnhancedMonitoringEnabled",
      "action": "aws:executeScript",
      "description": "## VerifyEnhancedMonitoringEnabled\nChecks that the enhanced monitoring is enabled on RDS Instance in the previous step exists.\n## Outputs\n* Output: The standard HTTP response from the ModifyDBInstance API.\n",
      "isEnd": true,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "handler",
        "InputPayload": {
          "MonitoringInterval": "{{ MonitoringInterval }}",
          "DBIdentifier": "{{ DescribeDBInstances.DbInstanceIdentifier }}"
        },
        "Script": "import boto3\nimport time\n\ndef handler(event, context):\n    rds_client = boto3.client(\"rds\")\n    db_instance_id = event[\"DBIdentifier\"]\n    monitoring_interval = event[\"MonitoringInterval\"]\n\n    try:\n        rds_waiter = rds_client.get_waiter(\"db_instance_available\")\n        rds_waiter.wait(DBInstanceIdentifier=db_instance_id)\n\n        db_instances = rds_client.describe_db_instances(\n            DBInstanceIdentifier=db_instance_id)\n\n        for db_instance in db_instances.get(\"DBInstances\", [{}]):\n            db_monitoring_interval = db_instance.get(\"MonitoringInterval\")\n\n        if db_monitoring_interval == monitoring_interval:\n            return {\n                      \"output\": db_instances[\"ResponseMetadata\"]\n                    }\n        else:\n            info = \"Verification Failed. RDS Instance monitoring interval {} is not enabled with the required value {}\".format(\n                    db_monitoring_interval, monitoring_interval)\n            raise info\n    except Exception as e:\n        raise e"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
