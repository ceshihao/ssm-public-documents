{
  "description": "## Id\nAWSResilienceHub-UpdateDynamoDBTableProvisionedCapacitySOP_2020-04-01\n\n## Intent\nUpdate provisioned capacity for DynamoDB Table\n\n## Type\nSOP\n\n## Risk\nSmall\n\n## Requirements\n  * DynamoDB table\n\n## Permissions required for AutomationAssumeRole\n  * dynamodb:UpdateTable\n  * dynamodb:DescribeTable\n  * ssm:GetAutomationExecution\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) DynamoDBTableName\n  * type: String\n  * description: DynamoDB Table Name\n\n### (Required) DynamoDBTableRCU\n  * type: String\n  * description:  Requested DynamoDB table Read Capacity Units\n\n### (Required) DynamoDBTableWCU\n  * type: String\n  * description: Requested DynamoDB table Write Capacity Units\n\n## Details\nThe document updates DynamoDB table provisioned read and write capacity units and verifies that that table\nis active.\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * UpdateDynamoDBTableProvisionedCapacity\n  * VerifyDynamoDBTableUpdateStatus\n  * GetUpdatedProvisionedThroughput\n  * OutputRecoveryTime\n\n## Outputs\n### GetUpdatedProvisionedThroughput.ReadCapacityUnits\n  * type: Integer\n  * description: DynamoDB table Read Capacity Units after update\n\n### GetUpdatedProvisionedThroughput.WriteCapacityUnits\n  * type: Integer\n  * description: DynamoDB table Write Capacity Units after update\n\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: Time to recover in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "DynamoDBTableName": {
      "type": "String",
      "description": "(Required) The DynamoDB Table Name."
    },
    "DynamoDBTableRCU": {
      "type": "Integer",
      "description": "(Required) The DynamoDB Table Read Capacity Units."
    },
    "DynamoDBTableWCU": {
      "type": "Integer",
      "description": "(Required) The DynamoDB Table Write Capacity Units."
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "outputs": [
    "GetUpdatedProvisionedThroughput.ReadCapacityUnits",
    "GetUpdatedProvisionedThroughput.WriteCapacityUnits",
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "AssertBillingModeProvisioned",
      "description": "Asserts that billing mode iS PROVISIONED",
      "action": "aws:executeScript",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "validate_billing_mode",
        "Script": "import logging\nimport random\nimport time\nfrom typing import Any, Callable, Iterator, List\n\nimport boto3\nfrom botocore.config import Config\n\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\n\n\n\ndef _execute_boto3_dynamodb(delegate: Callable[[Any], dict]) -> dict:\n    \"\"\"\n    Executes the given delegate with dynamodb client parameter\n    :param delegate: The delegate to execute (with boto3 function)\n    :return: The output of the given function\n    \"\"\"\n    dynamo_db_client = boto3.client('dynamodb', config=boto3_config)\n    description = delegate(dynamo_db_client)\n    if not description['ResponseMetadata']['HTTPStatusCode'] == 200:\n        logging.error(description)\n        raise ValueError('Failed to execute request')\n    return description\n\n\n\ndef _describe_table(table_name: str) -> dict:\n    \"\"\"\n    Describes the given dynamodb table\n    :param table_name: The table name\n    :return: The dictionary of table description properties\n    \"\"\"\n    return _execute_boto3_dynamodb(\n        delegate=lambda x: x.describe_table(TableName=table_name))\n\n\n\ndef validate_billing_mode(events: dict, context: dict) -> None:\n    \"\"\"\n    Validate billing mode to be specific value.\n    :param events: The dictionary that supposed to have the following keys:\n    * `ExpectedValues` - The list of values the property expected to be\n    * `TableName` - The target table name\n    :return: The status of continuous backup\n    \"\"\"\n    if 'ExpectedValues' not in events:\n        raise KeyError('Requires ExpectedValues')\n    if 'TableName' not in events:\n        raise KeyError('Requires TableName')\n\n    table_name: str = events['TableName']\n    expected_values: List[str] = events['ExpectedValues']\n\n    description = _describe_table(table_name=table_name)\n    billing_mode = description.get('Table', {}).get('BillingModeSummary', {}).get('BillingMode', '')\n\n    # process empty property case\n    if not billing_mode and (not expected_values or '' in expected_values or None in expected_values):\n        return\n    else:\n        if billing_mode not in expected_values:\n            raise ValueError(\n                f'BillingMode is required to be one of the following values {expected_values}, '\n                'but was {match.value}')",
        "InputPayload": {
          "ExpectedValues": [
            "PROVISIONED",
            ""
          ],
          "TableName": "{{ DynamoDBTableName }}"
        }
      }
    },
    {
      "name": "UpdateDynamoDBTableProvisionedCapacity",
      "description": "Update table's provisioned read and write capacity units",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "UpdateTable",
        "TableName": "{{ DynamoDBTableName }}",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "{{ DynamoDBTableRCU }}",
          "WriteCapacityUnits": "{{ DynamoDBTableWCU }}"
        }
      }
    },
    {
      "name": "VerifyDynamoDBTableUpdateStatus",
      "description": "Wait for the table to become active",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}",
        "PropertySelector": "$.Table.TableStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    },
    {
      "name": "GetUpdatedProvisionedThroughput",
      "description": "Get updated provisioned read and write capacity units",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "dynamodb",
        "Api": "DescribeTable",
        "TableName": "{{ DynamoDBTableName }}"
      },
      "outputs": [
        {
          "Name": "ReadCapacityUnits",
          "Selector": "$.Table.ProvisionedThroughput.ReadCapacityUnits",
          "Type": "Integer"
        },
        {
          "Name": "WriteCapacityUnits",
          "Selector": "$.Table.ProvisionedThroughput.WriteCapacityUnits",
          "Type": "Integer"
        }
      ]
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import boto3\nimport logging\nfrom datetime import datetime, timezone\nimport time\n\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
