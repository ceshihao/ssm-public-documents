{
  "description": "Tutorial: Create a Classic Load Balancer\n===\nThis Automation document sets up a Classic Load Balancer for an EC2 instance. It Automates the [Create a Classic Load Balancer Tutorial](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-getting-started.html). \n\nOnce this document is executed, a load balancer that receives public HTTP traffic and sends it to your EC2 instances will be created. Visiting the load balancer DNS name (found in the outputLoadBalancerDNSName step output or the load balancer tab in the console) will redirect to an EC2 instance and show a page with hello world! \n\nPrerequisites\n---\nTo run the following Automation document, you must have permissions to run Automation workflows and create the following resources. The Automation workflow runs in the context of the current Amazon Identity and Access Management (IAM) user.\n    \nResources created \n---\n  * A virtual private cloud (VPC) with a route table, public subnet via an internet gateway, network ACL, and security group\n  * A security group that allows access to HTTP/80\n  * An IAM instance profile role that enables the EC2 instance to register with Amazon Systems Manager\n  * An EC2 instance that is launched using the latest Amazon Linux AMI\n  * A Classic Load Balancer that will redirect traffic to an EC2 instance\n\n  Cleanup\n ---\n  To remove resources created by this Automation document, navigate to the [Amazon CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created.\n\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-ClassicLoadBalancerSSMDocument).*",
  "mainSteps": [
    {
      "action": "aws:createStack",
      "inputs": {
        "Capabilities": [
          "CAPABILITY_NAMED_IAM"
        ],
        "StackName": "ClassicLoadBalancerStack",
        "TemplateBody": "Parameters :\n  LatestAmazonLinuxAmiId :\n    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'\nResources:\n  ManagedInstanceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - ssm.amazonaws.com\n            - ec2.amazonaws.com\n          Action: sts:AssumeRole\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n      Path: '/'\n      Policies:\n      - PolicyName: putParameter\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          # Allows access to Parameter Store parameters specific to the tutorial\n          - Effect: Allow\n            Action:\n            - ssm:PutParameter\n            Resource: 'arn:aws:ssm:*:*:parameter/Tutorials/Passwords/AL/*'\n  ManagedInstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Path: '/'\n      Roles:\n      - !Ref ManagedInstanceRole\n      InstanceProfileName: ManagedInstanceProfileClassicLoadBalancer\n  VPC:\n    Type: 'AWS::EC2::VPC'\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: Automation-Classic-Load-Balancer\n  InternetGateway:\n    Type: 'AWS::EC2::InternetGateway'\n    Properties:\n      Tags:\n      - Key: Name\n        Value: Automation-Classic-Load-Balancer\n  VPCGatewayAttachment:\n    Type: 'AWS::EC2::VPCGatewayAttachment'\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n  SubnetPublic:\n    Type: 'AWS::EC2::Subnet'\n    Properties:\n      AvailabilityZone: !Select [0, !GetAZs '']\n      CidrBlock: 10.0.0.0/20\n      MapPublicIpOnLaunch: true\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-Classic-Load-Balancer\n  RouteTablePublic:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-Classic-Load-Balancer\n  RouteTableAssociationPublic:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref SubnetPublic\n      RouteTableId: !Ref RouteTablePublic\n  RouteTablePublicInternetRoute:\n    Type: 'AWS::EC2::Route'\n    DependsOn: VPCGatewayAttachment\n    Properties:\n      RouteTableId: !Ref RouteTablePublic\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref InternetGateway\n  NetworkAclPublic:\n    Type: 'AWS::EC2::NetworkAcl'\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: Automation-Classic-Load-Balancer\n  SubnetNetworkAclAssociationPublic:\n    Type: 'AWS::EC2::SubnetNetworkAclAssociation'\n    Properties:\n      SubnetId: !Ref SubnetPublic\n      NetworkAclId: !Ref NetworkAclPublic\n  NetworkAclEntryInPublicAllowAll:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref NetworkAclPublic\n      RuleNumber: 100\n      Protocol: -1\n      RuleAction: allow\n      Egress: false\n      CidrBlock: '0.0.0.0/0'\n  NetworkAclEntryOutPublicAllowAll:\n    Type: 'AWS::EC2::NetworkAclEntry'\n    Properties:\n      NetworkAclId: !Ref NetworkAclPublic\n      RuleNumber: 100\n      Protocol: -1\n      RuleAction: allow\n      Egress: true\n      CidrBlock: '0.0.0.0/0'\n  InstanceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Security Group created for AWS-Classic-Load-Balancer'\n      GroupName: Automation-Classic-Load-Balancer-HTTP\n      SecurityGroupIngress: \n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n      Tags: \n        - Key: Name\n          Value: Automation-Classic-Load-Balancer\n      VpcId: !Ref VPC\n  LinuxEc2Instance: \n    Type: AWS::EC2::Instance\n    Properties: \n      InstanceType: t2.small\n      ImageId: !Ref LatestAmazonLinuxAmiId\n      NetworkInterfaces: \n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet: \n            - Ref: 'InstanceSecurityGroup'\n          SubnetId: \n            Ref: 'SubnetPublic'\n      IamInstanceProfile: !Ref ManagedInstanceProfile\n      Tags:\n        - Key: Name\n          Value: Automation-Classic-Load-Balancer\n  ClassicLoadBalancer: \n    Type: AWS::ElasticLoadBalancing::LoadBalancer\n    Properties:\n      HealthCheck:\n        HealthyThreshold: 10\n        Interval: 30\n        Target: HTTP:80/\n        Timeout: 5\n        UnhealthyThreshold: 2\n      Instances:\n        - !Ref LinuxEc2Instance \n      Listeners:\n        - InstancePort: 80\n          InstanceProtocol: HTTP\n          LoadBalancerPort: 80\n          Protocol: HTTP\n      LoadBalancerName: tutorialLoadBalancer\n      SecurityGroups:\n        - !Ref InstanceSecurityGroup\n      Subnets:\n        - !Ref SubnetPublic\n\nOutputs:\n  TemplateID:\n    Description: 'Template id.'\n    Value: 'vpc'\n  SubnetPublic:\n    Description: 'Subnet A public.'\n    Value: !Ref SubnetPublic\n    Export:\n      Name: !Sub '${AWS::StackName}-SubnetPublic'"
      },
      "name": "createStack",
      "onFailure": "step:deleteStack"
    },
    {
      "action": "aws:runCommand",
      "description": "This step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to test your instance in subsequent steps. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.\n",
      "inputs": {
        "Comment": "Outputting public DNS address of EC2 instance",
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "curl -H \"X-aws-ec2-metadata-token: $(curl -X PUT 'http://169.254.169.254/latest/api/token' -sq -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600' 2>/dev/null)\" -sq http://169.254.169.254/latest/meta-data/public-hostname"
          ],
          "executionTimeout": "3600",
          "workingDirectory": ""
        },
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-Classic-Load-Balancer"
            ]
          }
        ]
      },
      "name": "outputPublicDNS",
      "onFailure": "step:deleteStack"
    },
    {
      "action": "aws:runCommand",
      "description": "his step starts with installing the latest security updates and bug fixes. After updates have been installed, the Apache web server (httd24), MySQL (mysql57-server), and PHP software packages (php72 and php72-mysqlnd) are installed on the instance. The Apache web server service is then configured to start automatically.\nOnce this step is complete, you can test your web server by entering the public DNS address (or the public IP address of your instance) in a web browser. You should see the Apache test page.",
      "inputs": {
        "Comment": "Installing LAMP server",
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "sudo yum update -y",
            "sudo yum install -y httpd24 php72 mysql57-server php72-mysqlnd",
            "sudo service httpd start",
            "sudo chkconfig httpd on",
            "chkconfig --list httpd",
            "curl -H \"X-aws-ec2-metadata-token: $(curl -X PUT 'http://169.254.169.254/latest/api/token' -sq -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600' 2>/dev/null)\" -sq http://169.254.169.254/latest/meta-data/public-hostname"
          ],
          "executionTimeout": "3600",
          "workingDirectory": ""
        },
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-Classic-Load-Balancer"
            ]
          }
        ]
      },
      "name": "installLAMPServer",
      "onFailure": "step:deleteStack"
    },
    {
      "action": "aws:runCommand",
      "description": "**Setting File Permissions**\n\nThis step adds your user (```ec2-user```) to the ```apache``` group. After this, the group ownership of ```/var/www``` and its contents is changed to the ```apache``` group. The Automation then adds group write permissions and sets the group ID on future subdirectories for the directory ```/var/www``` and its subdirectories.",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "sudo usermod -a -G apache ec2-user",
            "groups ec2-user",
            "sudo chown -R ec2-user:apache /var/www",
            "sudo chmod 2775 /var/www",
            "find /var/www -type d -exec sudo chmod 2775 {} \\;",
            "find /var/www -type f -exec sudo chmod 0664 {} \\;"
          ],
          "executionTimeout": "3600"
        },
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-Classic-Load-Balancer"
            ]
          }
        ]
      },
      "name": "setFilePermissions",
      "onFailure": "step:deleteStack"
    },
    {
      "action": "aws:runCommand",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "echo \"<!DOCTYPE html><html><head><title>Example</title></head><body><p>Hello World!</p></body> </html>\" > /var/www/html/index.html"
          ],
          "executionTimeout": "3600"
        },
        "Targets": [
          {
            "Key": "tag:Name",
            "Values": [
              "Automation-Classic-Load-Balancer"
            ]
          }
        ]
      },
      "name": "createIndexHTML",
      "onFailure": "step:deleteStack"
    },
    {
      "action": "aws:executeAwsApi",
      "description": "This step outputs the DNS address for the load balancer. Visiting this address should direct to the same page as visiting the public DNS address of the EC2 instance. Select the radio button next to the Step execution ID to display the DNS address of the load balancer.\n",
      "inputs": {
        "Api": "DescribeLoadBalancers",
        "LoadBalancerNames": [
          "tutorialLoadBalancer"
        ],
        "Service": "elb"
      },
      "isEnd": true,
      "name": "outputLoadBalancerDNSName",
      "onFailure": "step:deleteStack",
      "outputs": [
        {
          "Name": "LoadBalancerDNS",
          "Selector": "$.LoadBalancerDescriptions[0].DNSName",
          "Type": "String"
        }
      ]
    },
    {
      "action": "aws:deleteStack",
      "description": "Cleans up cloudformation stack",
      "inputs": {
        "StackName": "ClassicLoadBalancerStack"
      },
      "name": "deleteStack"
    }
  ],
  "schemaVersion": "0.3"
}
