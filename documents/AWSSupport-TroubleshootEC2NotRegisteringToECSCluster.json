{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootEC2NotRegisteringToECSCluster** runbook helps troubleshooting the reason why an EC2 instance is failing to register to Elastic Container Service (ECS) cluster. More specifically, the Automation runbook helps to detect issues related to: (1) the EC2 instance user data doesn't have the correct cluster information, (2) the EC2 instance is missing the required IAM instance profile, and (3) network configuration issues.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) IAM role which AWS Systems Manager will assume to execute this automation. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html",
      "allowedPattern": "^arn:(aws|aws-cn|aws-us-gov):iam::\\d{12}:role\\/[\\w+=/,.@-]+$"
    },
    "ClusterName": {
      "type": "String",
      "description": "(Required) Name of the ECS cluster that the container instance is unable to register.",
      "default": "",
      "allowedPattern": "^[a-zA-Z0-9_-]{1,255}$"
    },
    "InstanceId": {
      "type": "String",
      "description": "(Required) Instance-id that is failing to register the cluster.",
      "default": "",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    }
  },
  "mainSteps": [
    {
      "name": "executeChecker",
      "action": "aws:executeScript",
      "description": "A python script that checks the main requisites that the EC2 instance should have to register in an ECS Cluster.",
      "isCritical": true,
      "timeoutSeconds": 540,
      "inputs": {
        "Runtime": "python3.7",
        "InputPayload": {
          "InstanceId": "{{InstanceId}}",
          "ClusterName": "{{ClusterName}}"
        },
        "Handler": "lambda_handler",
        "Script": "import boto3\n\nfrom saw_ecs.ec2 import EC2Instance\nfrom saw_ecs.cluster import ECSCluster\nfrom saw_ecs import __main__\n\n\ndef lambda_handler(events, context):\n    ec2_client = boto3.client(\"ec2\")\n    instance = EC2Instance(id=events[\"InstanceId\"], ec2_client=ec2_client)\n    cluster = ECSCluster(name=events[\"ClusterName\"])\n\n    stdout, info_codes = __main__.generate_stdout(instance, cluster)\n\n    # return {\"statusCode\": 200, \"body\": stdout}\n    return {\"stdout\": stdout, \"info_codes\": info_codes}\n",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "stdout",
          "Selector": "$.Payload.stdout",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ]
    }
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "sha256": "cccb9509129b7b8582aa4ab1338d82b11b4762384192ef451954c754920962b4"
      }
    }
  },
  "outputs": [
    "executeChecker.stdout"
  ]
}
