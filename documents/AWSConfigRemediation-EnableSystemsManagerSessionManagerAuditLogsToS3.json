{
  "schemaVersion": "0.3",
  "description": "### Document name - AWSConfigRemediation-EnableSystemsManagerSessionManagerAuditLogsToS3\n\n## What does this document do?\nThis document enables AWS Systems Manager Session Manager session output logs to an Amazon S3 bucket using [CreateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateDocument.html) or [UpdateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_UpdateDocument.html) API.\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* BucketName: (Required) Amazon S3 bucket name to serve as the destination for the AWS Systems Manager Session Manager session logs.\n* S3KeyPrefix: (Optional) Amazon S3 bucket prefix.\n\n## Output Parameters\n* EnableS3Logging.Response: The standard HTTP response from the GetDocument API.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) Amazon S3 bucket name to serve as the destination for the AWS Systems Manager Session Manager session logs."
    },
    "S3KeyPrefix": {
      "type": "String",
      "description": "(Optional) Amazon S3 bucket prefix.",
      "allowedPattern": ".{0,1024}",
      "default": ""
    }
  },
  "outputs": [
    "EnableS3Logging.Response"
  ],
  "mainSteps": [
    {
      "name": "EnableS3Logging",
      "action": "aws:executeScript",
      "description": "## EnableS3Logging\nUpdates the document which stores AWS Systems Manager session manager preferences and if it doesn't exist, creates one.\n## Outputs\n* Response: The standard HTTP response from the GetDocument API.\n",
      "timeoutSeconds": 600,
      "isEnd": true,
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "handler",
        "InputPayload": {
          "BucketName": "{{ BucketName }}",
          "S3KeyPrefix": "{{ S3KeyPrefix }}"
        },
        "Script": "import boto3\nimport json\nfrom time import sleep\n\nstandard_document_content = '''\n{{\n  \"schemaVersion\": \"1.0\",\n  \"description\": \"Document to hold regional settings for Session Manager\",\n  \"sessionType\": \"Standard_Stream\",\n  \"inputs\": {{\n    \"s3BucketName\": \"{0}\",\n    \"s3KeyPrefix\": \"{1}\",\n    \"s3EncryptionEnabled\": true,\n    \"cloudWatchLogGroupName\": \"\",\n    \"cloudWatchEncryptionEnabled\": true,\n    \"kmsKeyId\": \"\",\n    \"runAsEnabled\": false,\n    \"runAsDefaultUser\": \"\"\n  }}\n}}\n'''\n\ndef is_document_exists(ssm_client, document_name):\n    try:\n        document_response = ssm_client.get_document(Name=document_name)\n        return json.loads(document_response['Content'])\n    except ssm_client.exceptions.InvalidDocument:\n        return False\n\ndef handler(event, context):\n    document_name = \"SSM-SessionManagerRunShell\"\n    bucket_name = event[\"BucketName\"]\n    key_prefix = event[\"S3KeyPrefix\"]\n    new_document_content = standard_document_content.format(bucket_name, key_prefix)\n\n    ssm_client = boto3.client(\"ssm\")\n    document_content = is_document_exists(ssm_client, document_name)\n    if document_content:\n        document_content[\"inputs\"][\"s3BucketName\"] = bucket_name\n        document_content[\"inputs\"][\"s3KeyPrefix\"] = key_prefix\n        updated_content = json.dumps(document_content)\n        ssm_client.update_document(Content=updated_content,\n                                   Name=document_name,\n                                   DocumentVersion=\"$LATEST\",\n                                   DocumentFormat=\"JSON\")\n        # Setting the default version of the document to $LATEST\n        document_response = ssm_client.describe_document(Name=document_name)\n        document_status = document_response[\"Document\"][\"Status\"]\n        latest_version = document_response[\"Document\"][\"LatestVersion\"]\n        if document_status == 'Active':\n            ssm_client.update_document_default_version(Name=document_name, DocumentVersion=latest_version)\n    else:\n        ssm_client.create_document(Content=new_document_content,\n                                   Name=document_name,\n                                   DocumentType=\"Session\")\n\n    # Verification\n    document_response = ssm_client.get_document(Name=document_name)\n    configured_bucket = json.loads(document_response['Content'])[\"inputs\"][\"s3BucketName\"]\n    configured_key_prefix = json.loads(document_response['Content'])[\"inputs\"][\"s3KeyPrefix\"]\n    if document_response and configured_bucket == bucket_name and configured_key_prefix == key_prefix:\n       return{\n            \"output\": {\n                \"Message\": \"Verification of EnableSystemsManagerSessionManagerAuditLogsToS3 is successful.\",\n                \"HTTPResponse\": document_response['ResponseMetadata']\n            }\n       }\n    raise Exception(\"AWS Systems Manager 'SSM-SessionManagerRunShell' DOCUMENT CREATE OR UPDATE FAILED.\", document_response['ResponseMetadata'])"
      },
      "outputs": [
        {
          "Name": "Response",
          "Selector": "$.Payload.output",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
