{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootAWSBatchJob** runbook helps you troubleshoot an AWS Batch Job that is stuck in `RUNNABLE` status. This automation checks the resources in the AWS Batch Compute Environments that are mapped to the job's queue by verifying the following prerequisites:\n\n1. Check if the Compute Environment is configured with enough CPU, memory, or GPU resources to run the job\n2. Check if the Compute Environment has instances and the instances are available to run the job\n3. Check if the Compute Environment service role has sufficient permissions to make calls to other AWS services on your behalf\n\n## Notes:\n\n- You must run this runbook in the same AWS Region as your job that is stuck in `RUNNABLE` status.\n- This runbook can be executed for AWS Batch jobs scheduled on Amazon Elastic Container Service (Amazon ECS), either Fargate or EC2 instances. If the automation is executed for an AWS Batch job on Amazon Elastic Kubernetes Service (Amazon EKS), the execution stops.\n- If instances are available to run the job but fail to register the Amazon ECS cluster, this runbook executes the `AWSSupport-TroubleshootECSContainerInstance` automation runbook to help you troubleshoot the issue. For more information, see the [AWSSupport-TroubleshootECSContainerInstance](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-troubleshoot-ecs-container-instance.html) runbook reference.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "JobId": {
      "type": "String",
      "description": "(Required) The ID of the AWS Batch Job that is stuck in RUNNABLE status.",
      "allowedPattern": "^[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}(:[0-9]+)?(#[0-9]+)?$"
    }
  },
  "mainSteps": [
    {
      "name": "PreflightPermissionChecks",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeScript",
      "description": "Performs preflight IAM permission checks against the executing user/role. Incase of any missing permissions this step provides the API Actions missing in the global output section",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "iam_permission_handler.iam_permission_handler",
        "InputPayload": {
          "JobId": "{{ JobId }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "Permission_check_results",
          "Selector": "$.Payload.results",
          "Type": "String"
        },
        {
          "Name": "message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ],
      "nextStep": "BranchOnUserHasPermission"
    },
    {
      "name": "BranchOnUserHasPermission",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether the user or role being used to run this automartion has permissions to all required actions for the runbook.",
      "nextStep": "ExecutionResults",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ PreflightPermissionChecks.Permission_check_results }}",
              "StringEquals": "FAILED"
            },
            "NextStep": "AWSBatchJobEvaluation"
          }
        ],
        "Default": "ExecutionResults"
      }
    },
    {
      "name": "AWSBatchJobEvaluation",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeScript",
      "description": "Performs checks against the AWS Batch Job, Job Queue, and Compute Environment resources, verifying the job exists and is in RUNNABLE state.",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "job_checks_handler.job_checks_handler",
        "InputPayload": {
          "JobId": "{{ JobId }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "Job_check_results",
          "Selector": "$.Payload.results",
          "Type": "String"
        },
        {
          "Name": "message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ],
      "nextStep": "BranchOnBatchJobExistsAndIsinRunnableState"
    },
    {
      "name": "BranchOnBatchJobExistsAndIsinRunnableState",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether the job exists and it is in RUNNABLE status.",
      "nextStep": "ExecutionResults",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ AWSBatchJobEvaluation.Job_check_results }}",
              "StringEquals": "FAILED"
            },
            "NextStep": "BatchComputeEnvironmentEvaluation"
          }
        ],
        "Default": "ExecutionResults"
      }
    },
    {
      "name": "BatchComputeEnvironmentEvaluation",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeScript",
      "description": "Performs checks against the AWS Batch Compute Environment.",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "ce_checks_handler.ce_checks_handler",
        "InputPayload": {
          "JobId": "{{ JobId }}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "compute_env_results",
          "Selector": "$.Payload.results",
          "Type": "String"
        },
        {
          "Name": "message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        },
        {
          "Name": "is_fargate_job",
          "Selector": "$.Payload.is_fargate_job",
          "Type": "String"
        },
        {
          "Name": "compute_env_to_check_infra",
          "Selector": "$.Payload.compute_env_to_check_infra",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnComputeEnvironmentChecksAreOK"
    },
    {
      "name": "BranchOnComputeEnvironmentChecksAreOK",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether the Compute Environments checks succeeded or not.",
      "nextStep": "ExecutionResults",
      "inputs": {
        "Choices": [
          {
            "And": [
              {
                "Variable": "{{ BatchComputeEnvironmentEvaluation.compute_env_results }}",
                "StringEquals": "SUCCESS"
              },
              {
                "Variable": "{{ BatchComputeEnvironmentEvaluation.is_fargate_job }}",
                "StringEquals": "True"
              }
            ],
            "NextStep": "ExecutionResults"
          },
          {
            "And": [
              {
                "Variable": "{{ BatchComputeEnvironmentEvaluation.compute_env_results }}",
                "StringEquals": "SUCCESS"
              },
              {
                "Variable": "{{ BatchComputeEnvironmentEvaluation.is_fargate_job }}",
                "StringEquals": "False"
              }
            ],
            "NextStep": "UnderlyingInfraEvaluation"
          }
        ],
        "Default": "ExecutionResults"
      }
    },
    {
      "name": "UnderlyingInfraEvaluation",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeScript",
      "description": "Performs checks against the underlying Auto Scaling Group or Spot Fleet Request.",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "asg_sfr_checks_handler.asg_sfr_checks_handler",
        "InputPayload": {
          "JobId": "{{ JobId }}",
          "ComputeEnvToCheckInfra": "{{BatchComputeEnvironmentEvaluation.compute_env_to_check_infra}}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "underlying_infra_results",
          "Selector": "$.Payload.results",
          "Type": "String"
        },
        {
          "Name": "message",
          "Selector": "$.Payload.message",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        },
        {
          "Name": "instances",
          "Selector": "$.Payload.instances",
          "Type": "MapList"
        },
        {
          "Name": "run_ecs_automation",
          "Selector": "$.Payload.run_ecs_automation",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnInstancesNotJoiningEcsCluster"
    },
    {
      "name": "BranchOnInstancesNotJoiningEcsCluster",
      "action": "aws:branch",
      "onFailure": "Abort",
      "description": "Branches based on whether there are instances not joining to the Amazon ECS cluster.",
      "nextStep": "ExecutionResults",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ UnderlyingInfraEvaluation.run_ecs_automation }}",
              "StringEquals": "No"
            },
            "NextStep": "EcsAutomationRunner"
          }
        ],
        "Default": "ExecutionResults"
      }
    },
    {
      "name": "EcsAutomationRunner",
      "onFailure": "step:ExecutionResults",
      "onCancel": "step:ExecutionResults",
      "action": "aws:executeAutomation",
      "description": "Runs the AWSSupport-TroubleshootECSContainerInstance automation for the instances not joining to the Amazon ECS cluster.",
      "timeoutSeconds": 120,
      "maxAttempts": 3,
      "inputs": {
        "DocumentName": "AWSSupport-TroubleshootECSContainerInstance",
        "TargetMaps": "{{ UnderlyingInfraEvaluation.instances }}",
        "RuntimeParameters": {
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        }
      },
      "nextStep": "ExecutionResults"
    },
    {
      "name": "ExecutionResults",
      "action": "aws:executeScript",
      "description": "Generates output based on previous steps.",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "isCritical": true,
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "results_report_handler.results_report_handler",
        "Script": "%results_output_handler%",
        "InputPayload": {
          "PreflightPermissionChecks": "{{PreflightPermissionChecks.message}}",
          "PreflightPermissionChecksResults": "{{PreflightPermissionChecks.Permission_check_results}}",
          "AWSBatchJobEvaluation": "{{AWSBatchJobEvaluation.message}}",
          "AWSBatchJobEvaluationResults": "{{AWSBatchJobEvaluation.Job_check_results}}",
          "BatchComputeEnvironmentEvaluation": "{{BatchComputeEnvironmentEvaluation.message}}",
          "BatchComputeEnvironmentEvaluationResults": "{{BatchComputeEnvironmentEvaluation.compute_env_results}}",
          "BatchComputeEnvironmentEvaluationFargate": "{{BatchComputeEnvironmentEvaluation.is_fargate_job}}",
          "UnderlyingInfraEvaluation": "{{UnderlyingInfraEvaluation.message}}",
          "UnderlyingInfraEvaluationResults": "{{UnderlyingInfraEvaluation.underlying_infra_results}}",
          "EcsAutomationExecutionId": "{{EcsAutomationRunner.ExecutionId}}"
        },
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "message",
          "Selector": "$.Payload.ExecutionLogs",
          "Type": "String"
        },
        {
          "Name": "info_codes",
          "Selector": "$.Payload.info_codes",
          "Type": "StringList"
        }
      ],
      "isEnd": true
    }
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "2ac3e7766f5aac8af62705350b346b3f3f2d0a60c9586ca07e39d372493dce31"
      }
    }
  },
  "outputs": [
    "ExecutionResults.message"
  ]
}
