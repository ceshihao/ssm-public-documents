{
  "description": "### Document name - AWS-ConfigureMaintenanceWindows\n\n## What does this document do?\nThe AWS-ConfigureMaintenanceWindows Automation document enables or disables SSM Maintenace Windows in bulk.\n\n## Input Parameters\n* MaintenanceWindows: (Required) The ID's of the Maintenace Windows on which you want to enable/disable.\n* MaintenanceWindowsstatus: (Required) Specifies whether to enable or disable Maintenance Windows.\n  * Allowed Values: True | False\n  * Default: False\n\n## Output parameters\n* ConfigureMaintenanceWindows.status_of_all_windows: A boolean variable describing status of the MW.\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "MaintenanceWindows": {
      "type": "StringList",
      "description": "(Required) The ID of the SSM Maintenance Windows on which you want to enable/disable.",
      "allowedPattern": "^mw-[0-9a-f]{17}$"
    },
    "MaintenanceWindowsstatus": {
      "type": "String",
      "description": "(Required) Specify whether to enable or disable Maintenance Windows. Valid values: \"True\" | \"False\"",
      "allowedValues": [
        "True",
        "False"
      ]
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The role ARN to assume during automation execution.",
      "default": "",
      "allowedPattern": "^$|arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role\\/?[a-zA-Z_0-9+=,.@\\-_\\/]+"
    }
  },
  "mainSteps": [
    {
      "name": "ConfigureMaintenanceWindows",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "timeoutSeconds": 300,
      "description": "## Enable/Disable SSM Maintenace windows \nConfigure Maintenance Windows\n ## Inputs\n  * MaintenanceWindows: List of maintenance windows ID's with comma separated limit 300  (e.g. mw-XXXXXXXXXXXX, mw-XXXXXXXXXXXX, ...).\n  * MaintenanceWindowsstatus: Specify a new status for Maintenance Windows to update (\"True\", \"False\").\n## Outputs\n* status_of_all_windows: A list with Input maintenace windows with status.\n",
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "maintenance_window_handler",
        "InputPayload": {
          "MaintenanceWindows": "{{MaintenanceWindows}}",
          "MaintenanceWindowsstatus": "{{MaintenanceWindowsstatus}}"
        },
        "Script": "import boto3\nimport botocore\nimport os\nimport time\nfrom botocore.config import Config\nregion = os.environ['AWS_REGION']\nconfig = Config(\n  retries = {\n      'max_attempts': 5,\n      'mode': 'standard'\n  }\n)\n# Create an SSM client\nssm_client = boto3.client('ssm', region_name=region, config=config)\n\ndef maintenance_window_handler(events, context):\n    \"\"\"\n    This Function will enable/disable list of maintenace windows provided as input,\n    :param maint_windows: List\n    :param status: boolean\n    :return: response\n    \"\"\"\n    maintenance_windows = events[\"MaintenanceWindows\"]\n    status = events[\"MaintenanceWindowsstatus\"]\n    print(\"Status:\",status)\n    if status == \"True\":\n        status = True\n    else:\n        status = False\n\n    all_windows = {}\n\n    for WindowId in maintenance_windows:\n        # Get the maintenance window ID current status\n        current_status = get_maintenance_window_status(WindowId, status)\n        if status != current_status[WindowId] and \"Invalid\" not in str(current_status[WindowId]):\n            # Enable/disable the maintenance window\n            resp= ssm_client.update_maintenance_window(\n                        WindowId=WindowId,\n                        Enabled=status)\n            all_windows[WindowId] = resp['Enabled']\n        if \"Invalid\" in str(current_status[WindowId]):\n            all_windows[WindowId] = \"Invalid Maintenance ID\"\n        else:\n            all_windows[WindowId] = current_status[WindowId]\n    return all_windows\n\ndef get_maintenance_window_status(windowid, status):\n    \"\"\"\n    Checks if the maintenance window status matches the given status\n    :param ssm_client:\n    :param windowid: string\n    :param status: boolean\n    :return:\n    \"\"\"\n    windows_status = {}\n    try:\n        # Call the describe_maintenance_windows method to get the status of the maintenance window\n        response = ssm_client.get_maintenance_window(WindowId=windowid)\n        time.sleep(2)\n        # Get the status of the maintenance window\n        if response:\n            windows_status[windowid] = response['Enabled']\n    except ssm_client.exceptions.DoesNotExistException:\n        windows_status[windowid] = \"Invalid Maintenance ID : %s\" % windowid\n    except Exception as ex:\n        raise ex\n    return windows_status\n"
      },
      "isEnd": true,
      "outputs": [
        {
          "Name": "status_of_all_windows",
          "Selector": "$.Payload.status_of_all_windows",
          "Type": "MapList"
        }
      ]
    }
  ]
}
