{
  "description": "The **AWSSupport-CollectAmazonConnectContactFlowLog** automation runbook helps to collect the Amazon Connect contact flow logs for a specific contact ID stored in the configured Amazon CloudWatch log group and upload them to a specified Amazon Simple Storage Service (Amazon S3) bucket. To help with the security of the logs gathered from your Amazon Connect contact flow, the automation evaluates the Amazon S3 bucket configuration to determine if the bucket grants public `read` or `write` access permissions, and it is owned by the AWS account specified in the `S3BucketOwnerAccountId` parameter. If your Amazon S3 bucket uses server-side encryption with AWS Key Management Service keys (SSE-KMS), make sure the user or AWS Identity and Access Management (IAM) role being used to run this automation has the `kms:GenerateDataKey` permissions on the AWS KMS key. For more information about the logs generated by your Amazon Connect instance see [Flow logs stored in an Amazon CloudWatch log group](https://docs.aws.amazon.com/connect/latest/adminguide/contact-flow-logs-stored-in-cloudwatch.html).\n\n### Important\nThe CloudWatch Logs Insights queries incur charges based on the amount of data that is queried. Free tier customers are charged only for usage that exceeds service quotas. For more information, see [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "ConnectInstanceId": {
      "type": "String",
      "description": "(Required) The ID of your Amazon Connect instance.",
      "allowedPattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    },
    "ContactId": {
      "type": "String",
      "allowedPattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "description": "(Required) The ID of the contact that you want to collect Contact Flow Log for."
    },
    "S3BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) The Amazon S3 bucket name in your account where you want to upload Contact Flow Log. Make sure that bucket policy does not grant unnecessary read/write permissions to parties that do not need access to the collected logs."
    },
    "S3ObjectPrefix": {
      "type": "String",
      "description": "(Optional) The Amazon S3 object path in the Amazon S3 bucket for an uploaded the Contact Flow Log. For example, if you specify 'CollectedLogs', the log will be uploaded as 's3://your-s3-bucket/CollectedLogs/ContactFlowLog_[ContactId]_[AWSAccountId].gz'. If you do not specify this parameter, the SSM Automation execution ID is used, example: 's3://your-s3-bucket/[automation:EXECUTION_ID]/ContactFlowLog_[ContactId]_[AWSAccountId].gz'. Note: if you specify a value for 'S3ObjectPrefix' and you run this automation using the same [ContactId], the Contact Flow Log will be overwritten.",
      "default": "",
      "allowedPattern": "^$|^[a-zA-Z0-9\\.\\-_\\\\!*'()/]{1,994}$",
      "maxChars": 994
    },
    "S3BucketOwnerAccount": {
      "type": "String",
      "description": "(Optional) The AWS Account Number that owns the Amazon S3 bucket where you want to upload the Contact Flow Log. If you do not specify this parameter, the runbooks uses the AWS account ID of the user or role in which the Automation runs.",
      "allowedPattern": "^$|^[0-9]{12}$",
      "default": ""
    },
    "S3BucketOwnerRoleArn": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the IAM role with permissions to get the Amazon S3 bucket and account block public access settings, bucket encryption configuration, the bucket ACLs, the bucket policy status, and upload objects to the bucket. If this parameter is not specified, the runbook uses the `AutomationAssumeRole` (if specified) or user that starts this runbook (if `AutomationAssumeRole` is not specified). Please see the required permissions section in the runbook description.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "CheckConnectInstanceExistance",
      "description": "Checks if the Amazon Connect instance provided in the `ConnectInstanceId` is `ACTIVE`.",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "connect",
        "Api": "DescribeInstance",
        "InstanceId": "{{ ConnectInstanceId }}",
        "PropertySelector": "$.Instance.InstanceStatus",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "nextStep": "CheckS3BucketPublicStatus"
    },
    {
      "name": "CheckS3BucketPublicStatus",
      "description": "Checks if the Amazon S3 bucket specified in the `S3BucketName` allows anonymous, or public read or write access permissions.",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "Bucket": "{{ S3BucketName }}",
          "BucketOwnerRoleArn": "{{ S3BucketOwnerRoleArn }}",
          "BucketOwnerAccount": "{{ S3BucketOwnerAccount }}",
          "AutomationAssumeRole": "{{ AutomationAssumeRole }}"
        },
        "Script": "%PYTHONSCRIPT%",
        "Handler": "s3_bucket_public_status.check_bucket_public_status",
        "Runtime": "python3.11",
        "Attachment": "check_bucket_public_status.zip"
      },
      "nextStep": "GenerateLogSearchTimeRange"
    },
    {
      "name": "GenerateLogSearchTimeRange",
      "description": "Generates `StartTime` and `EndTime` for the `StartQuery` step based on `InitiationTimestamp` and `LastUpdateTimestamp` returned by `DescribeContact` API. `StartTime` will be an hour before `InitiationTimestamp` and `EndTime` will be an hour after `LastUpdateTimestamp`.",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "ConnectInstanceId": "{{ ConnectInstanceId }}",
          "ContactId": "{{ ContactId }}"
        },
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport datetime\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef get_contact_timestamps(instance_id, contact_id):\n    \"\"\"Retrieves InitiationTimestamp and LastUpdateTimestamp.\n\n    Retrives InitiationTimestamp and LastUpdateTimestamp for a certain contact.\n    DisconnectTimestampisn't usedas the contact may not be disconnected yet.\n\n    Args:\n        instance_id: The ID of Amazon Connect Instance\n        contact_id: The ID of a contact\n\n    Raises:\n        botocore.exceptions.ClientError: An error occurred when calling DescribeContact API.\n        When returned error code is 'ResourceNotFoundException', it asumes the provided Contact ID\n        does not exist. If not, it assumes other failure happens such as service unavailability.\n    \"\"\"\n\n    connect = boto3.client(\"connect\")\n\n    try:\n        response = connect.describe_contact(InstanceId=instance_id, ContactId=contact_id)\n        initiation_timestamp = response[\"Contact\"][\"InitiationTimestamp\"]\n        last_update_timestamp = response[\"Contact\"][\"LastUpdateTimestamp\"]\n\n        return initiation_timestamp, last_update_timestamp\n\n    except ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"ResourceNotFoundException\":\n            print(\n                f\"Error: The ContactId '{contact_id}' does not exist for your instance '{instance_id}'. Please check if the Contact ID you provide is accurate\"\n            )\n            raise error\n        else:\n            print(f\"Error: An error occured when retrieving contact information for the ContactId '{contact_id}'\")\n            raise error\n\n\ndef generate_time_range(initiation_timestamp, last_update_timestamp):\n    \"\"\"Generates time range for log search\n\n    Generate time range (StartTime and EndTime) for Contact Flow Log search. Additional one hour to be\n    reduced from initiation_timestamp and added to last_update_timestamp as buffers.\n\n    Args:\n        initiation_timestamp: The timestamp when the contact was initaited\n        last_update_timestamp: The timestamp when the contact was updated last\n    \"\"\"\n\n    start_time = int((initiation_timestamp + datetime.timedelta(hours=-1)).timestamp())\n    end_time = int((last_update_timestamp + datetime.timedelta(hours=1)).timestamp())\n\n    return start_time, end_time\n\n\ndef handler(event, context):\n    \"\"\"Handler function\n\n    This is a handler function that is specified in SSM document step 'GenerateLogSearchTimeRange'.\n    It generates StartTime and EndTime for CloudWatch Logs StartQuery API based on InitiationTimestamp\n    and LastUpdateTimestamp returned by Amazon Connect DescribeContact API.\n\n    Args:\n        events: Events passed by SSM document\n        context: context objects\n    \"\"\"\n\n    instance_id = event.get(\"ConnectInstanceId\", \"\")\n    contact_id = event.get(\"ContactId\", \"\")\n\n    initiation_timestamp, last_update_timestamp = get_contact_timestamps(instance_id, contact_id)\n    start_time, end_time = generate_time_range(initiation_timestamp, last_update_timestamp)\n\n    return {\"StartTime\": start_time, \"EndTime\": end_time}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload.StartTime",
          "Type": "Integer"
        },
        {
          "Name": "EndTime",
          "Selector": "$.Payload.EndTime",
          "Type": "Integer"
        }
      ],
      "nextStep": "StartQuery"
    },
    {
      "name": "StartQuery",
      "description": "Starts a query log for the provided `ContactId` in the CloudWatch Logs log group associated with the Amazon Connect instance provided in `ConnectInstanceId`. Queries time out after 60 minutes of runtime. If your query times out, reduce the time range being searched. You can view the queries currently in progress as well as your recent query history in the CloudWatch console. For more information see [View running queries or query history](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogs-Insights-Query-History.html).",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "ConnectInstanceId": "{{ ConnectInstanceId }}",
          "ContactId": "{{ ContactId }}",
          "StartTime": "{{ GenerateLogSearchTimeRange.StartTime }}",
          "EndTime": "{{ GenerateLogSearchTimeRange.EndTime }}"
        },
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef get_log_group_name(instance_id):\n    \"\"\"Get CloudWatch Logs log group name\n\n    Get CloudWatch Logs log group name for storing Contact Flow log.\n    Since the log group name is in the format of \"/aws/connect/{ConnectInstanceAlias}\", it calls\n    DescribeInstance API to retrieve Amazon Connect Instance Alias to return the log group name.\n\n    Args:\n        instance_id: The ID of Amazon Connect Instance\n\n    Raises:\n        botocore.exceptions.ClientError: An error occurred when calling DescribeInstance API.\n    \"\"\"\n\n    connect = boto3.client(\"connect\")\n\n    try:\n        response = connect.describe_instance(InstanceId=instance_id)\n        log_group_name = \"/aws/connect/{}\".format(response[\"Instance\"][\"InstanceAlias\"])\n\n        return log_group_name\n\n    except ClientError as error:\n        print(f\"Error: An error occured when executing DescribeInstance API against the instance '{instance_id}'\")\n        raise error\n\n\ndef start_query(instance_id, contact_id, start_time, end_time):\n    \"\"\"Start query\n\n    Start CloudWatch Logs insight query with the obtained Log Group name and provided start time/end time.\n\n    Args:\n        intsance_id: The ID of Amazon Connect Instance\n        contact_id: The ID of the contact\n        start_time: The query start time\n        end_time: The query end time\n\n    Raises:\n        botocore.exceptions.ClientError: An error occurred when calling StartQuery API.\n    \"\"\"\n\n    logs = boto3.client(\"logs\")\n\n    log_group_name = get_log_group_name(instance_id)\n    query_string = 'fields @timestamp, @message | sort @timestamp asc | filter ContactId = \"{}\" | limit 10000'.format(\n        contact_id\n    )\n\n    try:\n        response = logs.start_query(\n            logGroupName=log_group_name,\n            startTime=start_time,\n            endTime=end_time,\n            queryString=query_string,\n            limit=10000,\n        )\n\n        return response[\"queryId\"]\n\n    except ClientError as error:\n        print(\"Error: An error occured when starting a query for Contact Flow Log search.\")\n        raise error\n\n\ndef handler(event, context):\n    \"\"\"Handler function\n\n    This is a handler function that is specified in SSM document step 'StartQuery'.\n    It executes a query against CloudWatch Logs log group that stores Contact Flow log.\n\n    Args:\n        events: Events passed by SSM document\n        context: context objects\n    \"\"\"\n\n    instance_id = event.get(\"ConnectInstanceId\")\n    contact_id = event.get(\"ContactId\", \"\")\n    start_time = event.get(\"StartTime\", \"\")\n    end_time = event.get(\"EndTime\", \"\")\n\n    query_id = start_query(instance_id, contact_id, start_time, end_time)\n\n    return {\"QueryId\": query_id}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "QueryId",
          "Selector": "$.Payload.QueryId",
          "Type": "String"
        }
      ],
      "nextStep": "WaitForQueryCompletion"
    },
    {
      "name": "WaitForQueryCompletion",
      "description": "Waits for the CloudWatch Logs query log for the provided `ContactId` to complete. Please notice that the query times out after `60` minutes of runtime. If your query times out, reduce the time range being searched. You can view the queries currently in progress as well as your recent query history in the CloudWatch console. For more information see [View running queries or query history](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogs-Insights-Query-History.html).",
      "action": "aws:waitForAwsResourceProperty",
      "onFailure": "Continue",
      "timeoutSeconds": 3900,
      "inputs": {
        "Service": "logs",
        "Api": "GetQueryResults",
        "queryId": "{{ StartQuery.QueryId }}",
        "PropertySelector": "$.status",
        "DesiredValues": [
          "Complete",
          "Failed",
          "Cancelled",
          "Timeout",
          "Unknown"
        ]
      },
      "nextStep": "UploadContactFlowLog"
    },
    {
      "name": "UploadContactFlowLog",
      "description": "Gets the query result and uploads the Contact flow log to the Amazon S3 bucket specified in `S3BucketName`.",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "ContactId": "{{ ContactId }}",
          "QueryId": "{{ StartQuery.QueryId }}",
          "S3BucketName": "{{ S3BucketName }}",
          "S3ObjectPrefix": "{{ S3ObjectPrefix }}",
          "S3BucketOwnerAccount": "{{ S3BucketOwnerAccount }}"
        },
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\nimport gzip\nimport json\nimport os\nimport tempfile\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef get_log_events(query_id):\n    \"\"\"Get log events\n\n    Get log events for Contact Flow log entries. First check the query status and\n    if it's 'Completed', retrieve log events from GetQueryResults API response\n\n    Args:\n        query_id: THe ID of CloudWatch Logs Insights query\n\n    Raises:\n        ValueError: An error with query status other than \"Completed\"\n        botocore.exceptions.ClientError: An error occured when executing GetQueryResults API\n    \"\"\"\n\n    logs = boto3.client(\"logs\")\n    log_events = []\n\n    try:\n        response = logs.get_query_results(queryId=query_id)\n        query_status = response[\"status\"]\n\n        if query_status != \"Complete\":\n            raise ValueError(\n                f\"Error: CloudWatch Logs Insight query failed with status {query_status}.\"\n                \" You can view the queries currently in progress as well as your recent query history\"\n                \" in the CloudWatch console. For more information see [View running queries or query history]\"\n                \"(https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogs-Insights-Query-History.html).\"\n            )\n\n        for event in response[\"results\"]:\n            for event_object in event:\n                if event_object[\"field\"] == \"@message\":\n                    try:\n                        log_events.append(json.loads(event_object[\"value\"]))\n\n                    # Append an event as string if it cannot be parsed\n                    except json.decoder.JSONDecodeError:\n                        log_events.append(event_object[\"value\"])\n        return log_events\n\n    except ClientError as error:\n        print(\"Error: An error occured when executing GetQueryResults API.\")\n        raise error\n\n\ndef write_compressed_logs_gzip(log_events, dst_file_path):\n    \"\"\"Write logs with GZIP\n    Write Contact Flow log entries to a GZIP compressed file.\n\n    Args:\n        log_events: Contact Flow log entries\n        dst_file_path: The file path for the compressed file\n    \"\"\"\n\n    print(f\"Saving logs to {dst_file_path}\")\n    with gzip.open(dst_file_path, \"wt\") as zipfile:\n        for log_event in log_events:\n            if type(log_event) is dict:\n                json.dump(log_event, zipfile, ensure_ascii=False, indent=2)\n            else:\n                zipfile.write(log_event)\n            zipfile.write(\"\\n\")\n\n\ndef upload_contact_flow_log(filename, bucket, key, account_id):\n    \"\"\"Upload Contact Flow log\n\n    Upload a GZIP compressed Contact Flow log file to a S3 bucket.\n\n    Args:\n        filename: The name of the file that is uploaded\n        bucket: The name of S3 bucket\n        key: The object key for the uploaded file\n        account_id: The account ID of the expected bucket owner\n\n    Raises:\n        botocore.exceptions.ClientError: An error occured while uploading the file to the S3 bucket\n    \"\"\"\n\n    s3 = boto3.client(\"s3\")\n\n    try:\n        args = {\"ExpectedBucketOwner\": account_id, \"ACL\": \"bucket-owner-full-control\"}\n        print(f\"Uploading {filename} to {bucket}/{key} with args {args}\")\n        s3.upload_file(filename, bucket, key, ExtraArgs=args)\n\n    except ClientError as error:\n        print(\"Error: An error ocurred when trying to upload the file.\")\n        raise error\n\n\ndef handler(event, context):\n    \"\"\"Handler function\n\n    This is a handler function that is specified in SSM document step 'UploadContactFlowLog'.\n    It uploads a GZIP compressed Contact Flow log to the specified S3 bucket.\n\n    Args:\n        events: Events passed by SSM document\n        context: context objects\n    \"\"\"\n\n    contact_id = event.get(\"ContactId\", \"\")\n    query_id = event.get(\"QueryId\", \"\")\n    s3_bucket = event.get(\"S3BucketName\", \"\")\n    object_path = event.get(\"S3ObjectPrefix\", \"\").strip(\"/ \")\n    account_id = event.get(\"S3BucketOwnerAccountId\", \"\")\n\n    if not account_id:\n        account_id = context[\"global:ACCOUNT_ID\"]\n\n    if not object_path:\n        object_path = context[\"automation:EXECUTION_ID\"]\n\n    log_events = get_log_events(query_id)\n\n    if not log_events:\n        raise RuntimeError(\"Error: No entry found for Contact ID: {}\".format(contact_id))\n\n    file_name = \"ContactFlowLog_{}_{}.gz\".format(contact_id, context[\"global:ACCOUNT_ID\"])\n    temp_dir = tempfile.TemporaryDirectory()\n    tmp_file_path = os.path.join(temp_dir.name, file_name)\n    write_compressed_logs_gzip(log_events, tmp_file_path)\n    s3_object_key = \"{}/{}\".format(object_path, file_name)\n    upload_contact_flow_log(tmp_file_path, s3_bucket, s3_object_key, account_id)\n\n    s3_uri = \"s3://{}/{}\".format(s3_bucket, s3_object_key)\n\n    s3_console_uri = \"https://s3.console.aws.amazon.com/s3/object\"\n    if context[\"global:AWS_PARTITION\"] == \"aws-cn\":\n        s3_console_uri = \"https://console.amazonaws.cn/s3/object\"\n    elif context[\"global:AWS_PARTITION\"] == \"aws-us-gov\":\n        s3_console_uri = \"https://console.amazonaws-us-gov.com/s3/object\"\n\n    s3_console_url = \"{}/{}?region={}&prefix={}\".format(\n        s3_console_uri,\n        s3_bucket,\n        context[\"global:REGION\"],\n        s3_object_key,\n    )\n\n    return {\"S3Uri\": s3_uri, \"S3ConsoleUrl\": s3_console_url}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "S3Uri",
          "Selector": "$.Payload.S3Uri",
          "Type": "String"
        },
        {
          "Name": "S3ConsoleUrl",
          "Selector": "$.Payload.S3ConsoleUrl",
          "Type": "String"
        }
      ],
      "nextStep": "GenerateReport"
    },
    {
      "name": "GenerateReport",
      "description": "Returns the Amazon S3 Console URL where the Contact Flow log was uploaded and an example AWS CLI command that you can use to download the log file.",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "ContactId": "{{ ContactId }}",
          "S3Uri": "{{ UploadContactFlowLog.S3Uri }}",
          "S3ConsoleUrl": "{{ UploadContactFlowLog.S3ConsoleUrl }}"
        },
        "Script": "# Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n\ndef handler(event, context):\n    \"\"\"Handler function\n\n    This is a handler function that is specified in SSM document step 'GenerateReport'.\n    Shows the location of the uploaded Contact Flow log and how to download it.\n\n    Args:\n        events: Events passed by SSM document\n        context: context objects\n    \"\"\"\n\n    contact_id = event.get(\"ContactId\", \"\")\n    s3_uri = event.get(\"S3Uri\", \"\")\n    s3_console_url = event.get(\"S3ConsoleUrl\", \"\")\n\n    aws_cli_command = \"aws s3 cp {} . --region {}\".format(s3_uri, context[\"global:REGION\"])\n\n    return_data = \"\"\n    return_data += (\n        \"\\n\\n{:=<50}\".format(\"\")\n        + \"\\n{:^50}\".format(\"Amazon Connect Contact Flow Log Collector Result\")\n        + \"\\n{:=<50}\".format(\"\")\n        + \"\\n\\n\"\n    )\n    return_data += \"Successfully retrieved Contact Flow log for the contact '{}'.\\n\\n\".format(contact_id)\n    return_data += \"You can access the log file from the S3 Console URL below:\\n\\n\"\n    return_data += \"- S3 Console URL for the Contact Flow Log file\\n\"\n    return_data += s3_console_url\n    return_data += \"\\n\\n\\n\"\n    return_data += \"Alternatively, you can download the log file by using the AWS CLI command below:\\n\"\n    return_data += \"```\\n\"\n    return_data += aws_cli_command\n    return_data += \"\\n```\\n\\n\\n\"\n\n    return return_data\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "isEnd": true
    }
  ],
  "outputs": [
    "GenerateReport.OutputPayload"
  ],
  "files": {
    "check_bucket_public_status.zip": {
      "checksums": {
        "SHA256": "be0dee25ffdfeedf7e18bce29ddb6093ea8999b87510499d8e141fcf2c9d721b"
      }
    }
  }
}
