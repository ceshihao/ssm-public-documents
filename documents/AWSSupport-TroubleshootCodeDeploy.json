{
  "description": "# AWSSupport-TroubleshootCodeDeploy\n---\nThis automation document checks the reasons why a specific EC2 deployment failed by verifying the required IAM permissions on the instance, which lifecycle hook failed and the error reported.\nThen it prints out troubleshooting steps to help resolving the failed deployment.\n\n### **Parameters**\n1.  **InstanceId**:\n\nType: StringList\n\nDescription: **(Required)** Provide the Instance Id where the deployment failed. (e.g. i-05fa91429c6cdcb49)\n\n2.  **DeploymentId**:\n\nType: StringList\n\nDescription: **(Required)** Provide the deployment Id which failed. (e.g. d-CPLJA860O)\n\n 3.  **AutomationAssumeRole**:\n\nType: String\n\nDescription: **(Optional)** The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, this document will use the permissions of the user that executes this document.\n\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) IAM role which AWS Systems Manager will assume to execute this automation. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html",
      "allowedPattern": "^$|^arn:aws:iam::[0-9]*:role/[/\\w+=,.@-]+$"
    },
    "DeploymentId": {
      "type": "String",
      "description": "Deployment Id which failed.",
      "allowedPattern": "^d-[A-Z0-9]{9}$"
    },
    "InstanceId": {
      "type": "String",
      "description": "The instance ID where the deployment failed.",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    }
  },
  "mainSteps": [
    {
      "name": "VerifyDeployment",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "Codedeploy",
        "Api": "GetDeploymentTarget",
        "deploymentId": "{{ DeploymentId }}",
        "targetId": "{{ InstanceId }}"
      },
      "description": "Verify if the deployment Id exists and if the instance belongs to this deployment."
    },
    {
      "name": "CheckInstanceDetails",
      "description": "Collects information about the instance.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "isCritical": true,
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "script_handler",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}"
        },
        "Script": "import boto3\n\ndef script_handler(events, context):\n  instance_id = events[\"InstanceId\"]\n  \n  info = check_instance_info(instance_id)\n  Instanceprofile = info[1]\n  InstanceSubnet = info[2]\n  InstanceState = info[0]\n  StateReason = info[3]\n\n  return {'Instanceprofile': Instanceprofile,'InstanceSubnet': InstanceSubnet, 'InstanceState': InstanceState , 'StateReason': StateReason }\n\ndef check_instance_info(instance_id):\n    ec = boto3.client('ec2')\n    Instanceprofile= \"\"\n    InstanceSubnet = \"\"\n    StateReason = \"\"\n\n    try:\n      InstanceInfo = ec.describe_instances(InstanceIds=[instance_id])\n    ##### WHEN THE INSTANCE TERMINATED SINCE MORE THAN 1 HOUR, IT DOESN'T RETURN STATUS ####\n      if not InstanceInfo['Reservations']:\n         InstanceState = \"terminated\"\n         return [ InstanceState , Instanceprofile , InstanceSubnet, StateReason ]\n      else:\n        for Reservation in InstanceInfo['Reservations']:\n          for inst in Reservation['Instances']:\n            InstanceState = inst[\"State\"][\"Name\"]\n            if InstanceState == \"running\":\n               try:\n                 Instanceprofile = inst[\"IamInstanceProfile\"][\"Arn\"]\n               except:\n                 Instanceprofile = \"\"\n               InstanceSubnet = inst[\"SubnetId\"]\n            elif InstanceState == \"terminated\":\n              StateReason = inst[\"StateReason\"][\"Message\"]\n        return [ InstanceState , Instanceprofile , InstanceSubnet, StateReason ]\n    except:\n      InstanceState = \"terminated\"\n      return [ InstanceState , Instanceprofile , InstanceSubnet, StateReason ]\n\n"
      },
      "outputs": [
        {
          "Name": "Instanceprofile",
          "Selector": "$.Payload.Instanceprofile",
          "Type": "String"
        },
        {
          "Name": "InstanceSubnet",
          "Selector": "$.Payload.InstanceSubnet",
          "Type": "String"
        },
        {
          "Name": "InstanceState",
          "Selector": "$.Payload.InstanceState",
          "Type": "String"
        },
        {
          "Name": "StateReason",
          "Selector": "$.Payload.StateReason",
          "Type": "String"
        }
      ]
    },
    {
      "name": "TroubleshootCodedeploy",
      "description": "Detects issues related to deployment.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "isCritical": true,
      "inputs": {
        "Runtime": "python3.7",
        "Handler": "script_handler",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "DeploymentId": "{{ DeploymentId }}",
          "Instanceprofile": "{{CheckInstanceDetails.Instanceprofile }}",
          "InstanceSubnet": "{{ CheckInstanceDetails.InstanceSubnet }}",
          "InstanceState": "{{CheckInstanceDetails.InstanceState }}",
          "StateReason": "{{CheckInstanceDetails.StateReason}}"
        },
        "Script": "import boto3\nimport datetime\nimport json\n\ndef script_handler(events, context):\n  deployment_id = events[\"DeploymentId\"]\n  instance_id = events[\"InstanceId\"]\n  InstanceState = events[\"InstanceState\"]\n  Instanceprofile = events[\"Instanceprofile\"]\n  InstanceSubnet = events[\"InstanceSubnet\"]\n  StateReason = events[\"StateReason\"]\n  FailureReason = \"\"\n\n\n  codedeploy = boto3.client('codedeploy')\n   #### COLLECTING REVISION INFO ########\n  try:\n     deploymentResponse = codedeploy.get_deployment_target(deploymentId = deployment_id,targetId = instance_id)\n     deploymentStatus= deploymentResponse['deploymentTarget']['instanceTarget']['status']\n     if deploymentStatus == 'Succeeded':\n          FailureReason = (\"\\nThe Deployment Succeeded. There is no issue with the deployment on the instance \"+instance_id )\n          return {'FinalResult': FailureReason }\n          exit\n     if deploymentStatus == 'Skipped':\n          FailureReason = (\"\\nThe Deployment is Skipped. Please try to use a failed deployment\" )\n          return {'FinalResult': FailureReason }\n          exit\n\n     elif (deploymentStatus == 'InProgress') or (deploymentStatus == 'Queued') or (deploymentStatus == 'Created'):\n          FailureReason = (\"\\nThe deployment is in progress, please wait until the deployment finishes.\")\n          return {'FinalResult': FailureReason }\n          exit\n     elif (deploymentStatus == 'Failed') or (deploymentStatus == 'Stopped') :\n   ###### COLLECTING revision INFO #####\n      getdep = codedeploy.get_deployment(deploymentId = deployment_id)\n      revisionType = getdep[\"deploymentInfo\"][\"revision\"][\"revisionType\"]\n      if revisionType == \"S3\":\n         bucket = getdep[\"deploymentInfo\"][\"revision\"][\"s3Location\"][\"bucket\"]\n         key = getdep[\"deploymentInfo\"][\"revision\"][\"s3Location\"][\"key\"]\n      if revisionType == \"GitHub\":\n         key = getdep[\"deploymentInfo\"][\"revision\"][\"gitHubLocation\"][\"repository\"]\n      creator = getdep[\"deploymentInfo\"][\"creator\"] \n   ###### COLLECTING DEPLOYMENT STATUS #####\n      deploymentStyle = getdep[\"deploymentInfo\"][\"deploymentStyle\"][\"deploymentType\"]\n\n      ###### COLLECTING INSTANCE INFO #####\n   #### COLLECTING DEPLOYMENT ERROR CODES #####\n      for hook in deploymentResponse['deploymentTarget']['instanceTarget']['lifecycleEvents']:\n        if hook[\"status\"] == \"Failed\":\n           if 'diagnostics' in hook:\n             script_name = hook['diagnostics']['scriptName']\n             errorCode = hook['diagnostics']['errorCode']\n             errorMessage = hook['diagnostics']['message']\n           else:\n             script_name = \"\"\n             errorCode = \"\"\n             errorMessage = \"\"\n           lifecycleEventName = hook['lifecycleEventName']\n           StartTime = hook[\"startTime\"]\n           EndTime = hook[\"endTime\"]\n\n      elapsed = EndTime - StartTime\n\n     \n      Header = (\"Result:\\n\"\n      \"-----------\\n \"\n    \"\\n[*] The deployment \"+ deployment_id+ \" is \" +deploymentStyle+\" deployment, failed in \"+lifecycleEventName + \" lifecycle hook\"\n    \"\\n[*] Instance \" + instance_id +\" is in \" + InstanceState + \" state\\n\"\n     \"\\n\")\n\n      if deploymentStyle == \"IN_PLACE\": \n      #### ALL IN PLACE CHECKS\n         if (lifecycleEventName == \"BeforeBlockTraffic\") or (lifecycleEventName == \"ApplicationStop\"):\n            if (errorMessage == \"\") and (errorCode == \"\"):\n                     if creator == \"autoscaling\":\n                         FailureReason1 = (\" This deployment initiated due to a scale up event in your autoscaling group, Codedeploy agent must be installed and running on the instance to proceed with the deployment.\"\n                         \"\\n To troubleshoot this issue, scale up a new instance, which will trigger a new deployment. \"\n                         \"\\n During the deployment is running, perform the following troubleshooting steps:\\n\")\n                         FailureReason2 = check_agent()\n                         FailureReason3 = (\"\\n For best practices: Install Codedeploy agent in the userdata/ launch template to make sure any instance starts, will install the latest version of your Codedeploy agent\"\n                               \"\\n https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-cli.html\")\n                         FailureReason = FailureReason1 + FailureReason2 + FailureReason3\n                         \n                         \n                     elif InstanceState == \"running\":\n                        if Instanceprofile == \"\":\n                            FailureReason = (\"The instance does not have an IAM instance profile associated with it\"\n                            \"\\nAn IAM instance profile grants the CodeDeploy agent permission to communicate with CodeDeploy and to download your revision from Amazon S3.\"\n                            \"\\nSee https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-iam-instance-profile.html\"\n                            \"\\nRestart Codedeploy agent after attaching the instance profile to the instance => service codedeploy-agent restart\")\n                      \n                        else: \n                            \n                            FailureReason =  (\"To Troubleshoot, SSH into the instance: \"+ instance_id + \"\"\n                            \"\\n [1] Check Codedeploy agent status => service codedeploy-agent status\"\n                            \"\\n  * If the agent is stopped, try to restart the agent and verify if it is in a running state, if the agent is not able to start, please check codedeploy agent logs:\"\n                            \"\\n    - For Linux OS : less /var/log/aws/codedeploy-agent/codedeploy-agent.log\"\n                            \"\\n    - For windows OS: notepad C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt\"\n                            \"\\n [2] Verify if the agent is able to communicate with Codedeploy service endpoints:\"\n                            \"\\n  *  Use nc command => yum install nc\"\n                            \"\\n     nc -v codedeploy.$REGION.amazonaws.com 443\"\n                            \"\\n     nc -v codedeploy-commands-secure.$REGION.amazonaws.com 443\"\n                            \"\\n [3] If the instance is located in a private subnet that does not have Nat Gateway, an interface VPC endpoint for CodeDeploy is needed. \"\n                            \"\\n  *  To Use CodeDeploy with Amazon Virtual Private Cloud : https://docs.aws.amazon.com/codedeploy/latest/userguide/vpc-endpoints.html\")\n\n                     else: ## instance terminated , could be scale down autoscaling event or manual.\n                        FailureReason1 = (\"The instance is terminated, the IAM role information cannot be retrieved for debugging\"\n                        \"\\nWhenever you face the same issue, please perform the following:\")\n                        FailureReason2 = check_agent()\n                        FailureReason3 = (\"[4] Make sure the instance has the correct IAM role attached, for more details check here :https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-iam-instance-profile.html\"\n                        \"\\n * For best practices: Try to install Codedeploy agent in the userdata/ launch template to make sure any instance starts will install the latest version of your Codedeploy agent\")\n                        FailureReason = FailureReason1 + FailureReason2 + FailureReason3\n                        \n\n            else:\n               FailureReason = PreviousRevision_script(script_name,errorCode,errorMessage)\n             \n         if lifecycleEventName == \"DownloadBundle\":\n          # here I check if the instance terminated during the deployment which caused the failure.\n            FailureReason = Verify_DownloadBundle(errorMessage,Instanceprofile,revisionType,key,bucket)\n         if lifecycleEventName == \"BeforeInstall\":\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                FailureReason= Verify_BeforeInstall(elapsed,script_name,errorMessage,errorCode,InstanceState)\n             else:\n                FailureReason = scale[1]\n\n         if lifecycleEventName == \"Install\":\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                FailureReason = Verify_Install(errorMessage,errorCode)    \n             else:\n                FailureReason = scale[1]    \n         if lifecycleEventName == \"AllowTraffic\":\n             FailureReason = Verify_AllowTraffic(errorMessage)\n         if (lifecycleEventName == \"AfterInstall\") or (lifecycleEventName == \"ValidateService\") or (lifecycleEventName == \"ApplicationStart\") or (lifecycleEventName == \"BeforeAllowTraffic\") or (lifecycleEventName == \"AfterAllowTraffic\"):\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                FailureReason = Custom_Script(elapsed,script_name,errorCode,errorMessage,InstanceState)\n             else:\n                FailureReason = scale[1]\n\n         if lifecycleEventName == \"AfterBlockTraffic\":\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id ,creator)\n             if scale[0] == \"false\":\n                FailureReason = PreviousRevision_script(script_name,errorCode,errorMessage)\n             else:\n                FailureReason = scale[1]\n         if lifecycleEventName == \"BlockTraffic\":\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                 ### PORT known issue ###\n                FailureReason = (\"During BlockTraffic, Codedeploy service invoke the Loadbalancer to de-register the instance from the target group before start installing the application revision\"\n                \"\\nDeregisterTargets API call can be noticed in cloudtrail logs during BlockTraffic lifecycle hook\"\n                \"\\nCurrently Codedeploy does not support the case when the target group have a different port than the port used to register the instance.\"\n                \"\\n** DeregisterTargets API will not be able to deregister the instance if the port configured in the Target group is different\"\n                \"\\nYou need to make sure that both the target group and the instance are configured to use the same port.\"\n                \"\\nBlockTraffic depends mainly on the de-registration delay on the target group or connection draining on Classic LB. To speed up this step, the de-registration delay /connection draining value can be reduced to a reasonable value. \")\n             else:\n               FailureReason = scale[1]\n\n#### END OF IN PLACE CHECKS #####        \n      elif deploymentStyle == \"BLUE_GREEN\": \n           if lifecycleEventName == \"ApplicationStop\":\n              if (errorMessage == \"\") and (errorCode == \"\"):\n                  FailureReason1 = (\"* You are running a Blue/Green deployment, where the deployment failed in the green instances due to Codedeploy agent issue\\n\")\n                  if InstanceState == \"running\":\n                        if Instanceprofile == \"\":\n                            \n                            FailureReason2 = (\"The green instances does not have IAM role attached to it. This cause Codedeploy agent to fail with MissingCredentials error\"\n                            \"\\n Refer to our documentation here https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-iam-instance-profile.html\")\n                        else:\n                            FailureReason2 = (\"To troubleshoot, SSH into the instance:\"\n                            \"\\n * Check Codedeploy agent status => service codedeploy-agent status\"\n                            \"\\n * If you are installing Codedeploy agent in the userdata script, Please make sure that your userdata execution time doesn't exceed 5 minutes, other wise the deployment will fail after 5 minutes as it didn't receive any response from Codedeploy agent and this is because the agent was not yet installed.\"\n                            \"\\n * In case you have a long userdata script, try to bake some packages/files with the AMI to reduce the time needed\")\n\n                  else:\n                         FailureReason2 = (\"The instance is not in running state to troubleshoot the agent logs\"\n                         \"\\n You can initiate another blue/green deployment, then SSH into the instance which failed and verify if Codedeploy agent is running\"\n                         \"\\n If you are installing Codedeploy agent in the userdata script, Please make sure that your userdata execution time doesn't exceed 5 minutes, otherwise the deployment will fail after 5 minutes as it didn't receive any response from Codedeploy agent and this is because the agent was not yet installed.\"\n                         \"\\n If you have long userdata script, Baking the Codedeploy agent with the AMI would be a good option for your use case.\"\n                         \"\\n In case you have a long userdata script, try to bake some packages/files with the AMI to reduce the time needed\")\n                  FailureReason = FailureReason1 + FailureReason2 \n          \n              else:\n                FailureReason =  PreviousRevision_script(script_name,errorCode,errorMessage)\n  \n           if lifecycleEventName == \"DownloadBundle\":\n               FailureReason = Verify_DownloadBundle(errorMessage,Instanceprofile,revisionType,key,bucket)\n           if lifecycleEventName == \"BeforeInstall\":\n               FailureReason = Verify_BeforeInstall(elapsed,script_name,errorMessage,errorCode,InstanceState)\n           if lifecycleEventName == \"Install\":\n               FailureReason = Verify_Install(errorMessage,errorCode)        \n           if lifecycleEventName == \"AllowTraffic\":\n               FailureReason = Verify_AllowTraffic(errorMessage)\n           if (lifecycleEventName == \"AfterInstall\") or (lifecycleEventName == \"ValidateService\") or (lifecycleEventName == \"ApplicationStart\") or (lifecycleEventName == \"BeforeAllowTraffic\") or (lifecycleEventName == \"AfterAllowTraffic\"):\n               FailureReason = Custom_Script(elapsed,script_name,errorCode,errorMessage,InstanceState)\n           if lifecycleEventName == \"BeforeBlockTraffic\":  \n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                if (errorMessage == \"\") and (errorCode == \"\"):\n                   FailureReason1 = (\"The deployment failed on the blue instance\" + instance_id + \" Because codedeply agent is either not installed or not running\\n\")\n                   FailureReason2 = check_agent()\n                   FailureReason = FailureReason1 + FailureReason2 \n                else:\n                  FailureReason = PreviousRevision_script(script_name,errorCode,errorMessage)\n             else:\n               FailureReason = scale[1]\n           if lifecycleEventName == \"AfterBlockTraffic\":\n             scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n             if scale[0] == \"false\":\n                FailureReason = PreviousRevision_script(script_name,errorCode,errorMessage)\n             else:\n                FailureReason = scale[1]\n           if (lifecycleEventName == \"BlockTraffic\"):\n               scale = Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator )\n               if scale[0] == \"false\":\n                 ### PORT known issue ###\n                  FailureReason = (\"During BlockTraffic, Codedeploy service invoke the Loadbalancer to de-register the instance from the target group\"\n                  \"\\nYou must be able to see 'DeregisterTargets' API call in your cloudtrail logs during BlockTraffic lifecycle hook\"\n                  \"\\nHowever we have a known issue, that when your target group port is different than the port which your instance registered with, then DeregisterTargets API will not be able to deregister the target\"\n                  \"\\n** Please check the target group configuration and which port is configured with, and check which port the instances are registered with, make sure you are using the same port\"\n                  \"\\nAlso note that BlockTraffic depends mainly on the de-registration delay on the target group or connection draining on Classic LB, if you would like to speed up this step, you can reduce de-registration delay /connection draining value to a reasonable value. \")\n               else:\n                  FailureReason = scale[1]\n      FinalResult = Header + FailureReason \n      return {'FinalResult': FinalResult }\n    \n  except Exception as exceptionMessage:\n     print (exceptionMessage)\n\ndef issue_not_found():\n     FailureReason2 = (\"To troubleshoot the issue:\"\n     \"\\n---------------------------\"\n     \"\\n [1] Enable Codedeploy agent debug logs on the instance:\"\n     \"\\n     - For Linux OS: You need to edit the configuration file /etc/codedeploy-agent/conf/codedeployagent.yml ==> Set verbose: true , and then restart Codedeploy agent\"\n     \"\\n     - For Windows OS: the debug mode is already enabled \"\n     \"\\n [2] Retry the deployment, SSH into the instance to collect codedeploy agent log : \"\n     \"\\n     - For Linux OS : less /var/log/aws/codedeploy-agent/codedeploy-agent.log\"\n     \"\\n     - For windows OS: notepad C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt\")\n     return FailureReason2\ndef PreviousRevision_script(script_name,errorCode,errorMessage):\n\n            if \"did not find an AppSpec\" in errorMessage:\n          ####### ISSUE HERE RELATED TO APPSPEC ###\n               FailureReason = (\" [Error] ==> : \"+ errorMessage  +\"\\n\"\n               \"\\nThe easiest way to solve this issue is as below: \"\n               \"\\n-------------------------------------------------\"\n               \"\\n* You can always ignore failure due to scripts in ApplicationStop or BeforeBlockTraffic or AfterBlockTraffic\" \n               \"\\n* Use the CodeDeploy console to create a deployment. On the Create deployment page, under ApplicationStop lifecycle event failure, choose Don't fail the deployment to an instance if this lifecycle event on the instance fails.\"\n               \"\\nYou can also use the AWS CLI to call the create-deployment command and include the --ignore-application-stop-failures option.\"\n               \"\\n \\nTo troubleshoot the issue itself:\"\n               \"\\n-------------------------------------\"\n               \"\\nCodedeploy agent fetches _last_successful_install file located in deployment-instructions directly inside the deployment-root to execute scripts in ApplicationStop or BeforeBlockTraffic or AfterBlockTraffic \"\n               \"\\nThese lifecycle hooks are executed before DownloadBundle and before the revision installed, so they are executed from the previous installed revision\"\n               \"\\nThe <deployment groupID>_last_successful_install file contains the location of the last successful installed revision which will locate the appspec file there, to execute scripts in ApplicationStop and BeforeBlockTraffic\"\n               \"\\nSSH into the instance and try to locate the appspec manually from the previous revision by checking _last_successful_install file first\"\n               \"\\nFor more details: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent.html#codedeploy-agent-install-files\")\n               return FailureReason\n            else:\n        ###### HERE ISSUE RELATED TO THE CUSTOMER SCRIPT ####\n               FailureReason = (\"The script \"+ script_name + \" Failed to run \" + \" with error \" + errorCode + \" ==> : \"+ errorMessage  +\"\"\n               \"\\n\\nThe easiest way to solve this issue is as below: \"\n               \"\\n-------------------------------------------------\"\n               \"\\n* You can always ignore failure due to scripts in ApplicationStop or BeforeBlockTraffic or AfterBlockTraffic\" \n               \"\\n* Use the CodeDeploy console to create a deployment => On the 'Create deployment' page -> under ApplicationStop lifecycle event failure -> choose Don't fail the deployment to an instance if this lifecycle event on the instance fails.\"\n               \"\\n* You can also use the AWS CLI to call the create-deployment command and include the --ignore-application-stop-failures option.\"\n               \"\\n\\nTo troubleshoot the script itself:\"\n               \"\\n-------------------------------------\"\n               \"\\nThis script is executed from the last successful installed revision, and not from the current revision\"\n               \"\\nCodedeploy agent fetches _last_successful_install file located in deployment-instructions directly inside the deployment-root.\"\n               \"\\nThe <deployment groupID>_last_successful_install file contains the location of the last successful installed revision which will locate the appspec file there, to execute scripts in ApplicationStop and BeforeBlockTraffic\"\n               \"\\nSSH into the instance and try the run the script manually from the previous revision, and check why the script is failing\"\n               \"\\nFor more details: https://docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-deployments.html#troubleshooting-deployments-lifecycle-event-failures\")\n               return FailureReason\n\ndef   Verify_DownloadBundle(errorMessage,Instanceprofile,revisionType,key,bucket):\n           if errorMessage == \"Access Denied\":\n               \n               FailureReason = (\"Codedeploy agent did not have permission to download the file: \" + key + \" from S3 bucket: \" \n               \"\\nMake sure the IAM role for the instance profile \" + Instanceprofile  + \" has the correct permissions\"\n               \"\\nTo resolve the issue:\"\n               \"\\n------------------------\"\n               \"\\n[1] Attach the correct S3 permissions to the IAM role :\"\n               \"\\n Follow the instructions here: https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-iam-instance-profile.html\"\n               \"\\n Make sure the IAM Policy allow S3:Get* and S3:List* Actions on the Resource: [arn:aws:s3:::\"+ bucket +\"/*]\"\n               \"\\n[2] Check the S3 bucket Policy:\"\n               \"\\n Check the S3 bucket policy to make sure it is not denying IAM role to access the bucket, check https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html\"\n               \"\\n[3] The bucket in another account ?\"\n               \"\\n If the bucket : \" + bucket + \" is located another account, make sure to follow cross account permissions here https://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-cross-account.html#deployments-cross-account-2-grant-bucket-permissions\")\n               return FailureReason\n           elif \"The specified bucket does not exist\" in errorMessage:\n               FailureReason = (\"[Error]:\" + errorMessage + \"\"\n               \"\\nS3 revision used in the deployment is the file: \" + key + \" from S3 bucket \" + bucket +\"\"\n               \"\\n[1] Make sure the bucket: \" + bucket + \" is exist and located in the same region of your Codedeploy application \"\n               \"\\n[2] The key must be exist in your bucket. To verify, Go to S3 bucket directly from the console and make sure that the bucket with name \" + bucket + \" is exist. \")\n               return FailureReason\n           elif \"The specified key does not exist\" in errorMessage:\n               FailureReason = (\"[Error]:\" + errorMessage + \"\"\n               \"\\nS3 revision used in the deployment is the file: \" + key + \" from S3 bucket \" + bucket +\"\"\n               \"\\n[1] Make sure the key: \" + key + \" is exist and located in the bucket \"\n               \"\\n[2] To verify, Go to S3 bucket directly from the console and make sure that the key with name \" + key + \" is exist. \")\n               return FailureReason\n           elif \"The bucket you are attempting to access must be addressed using the specified endpoint\" in errorMessage:\n               FailureReason = (\"\\nThe bucket \" + bucket + \" you are trying to use is located in another region\"\n               \"\\n\\nCross region support:\"\n               \"\\n----------------------\"\n               \"\\n Codedeploy does not support cross region use of S3 buckets, the S3 bucket must be exist in the same region where codedeploy application exist\"\n               \"\\n \\nCross account support:\"\n               \"\\n----------------------\"\n               \"\\n Codedeploy support using S3 buckets from different accounts, however the buckets must be located in same region of the application. \"\n               \"\\n For cross account permissions, please check here : https://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-cross-account.html#deployments-cross-account-2-grant-bucket-permissions\"\n               \"\\n Looking for cross account/cross region deployment ? please check here : https://aws.amazon.com/blogs/devops/building-a-cross-regioncross-account-code-deployment-solution-on-aws/\")\n               return FailureReason\n           elif \"Server returned codes: 404\" in errorMessage:\n               if revisionType == \"GitHub\":\n                  FailureReason = (\"Add the correct Github repository [\"+ key +\"] and commit Id, Codedeploy got 404 -Not found - error from Github => \" + errorMessage  )\n                  return FailureReason\n           elif errorMessage == \"\":\n                   FailureReason1= (\"* The deployment failed because Codedeploy agent is not running.\\n\")                              \n                   FailureReason2 = check_agent()\n                   FailureReason = FailureReason1 + FailureReason2\n                   return FailureReason\n\n           else: ## any other issue ##\n               FailureReason = issue_not_found()\n               return FailureReason\n           \ndef Verify_BeforeInstall(elapsed,script_name,errorMessage,errorCode,InstanceState):\n        if (script_name == \"\"):\n             if \"did not find an AppSpec\" in errorMessage:\n          ####### ISSUE HERE RELATED TO APPSPEC ###\n               FailureReason = (\"Your appspec file is not found ==> \" + errorMessage + \"\"\n               \"\\nYou can resolve the issue as below:\"\n               \"\\n-----------------------------------\"\n               \"\\n[1] Make sure your appspec file is located in the top root directory of your revision\"\n               \"\\n[2] SSH into the instance and check the appspec file location, it must be the same as expected \"\n               \"\\n[3] Download the revision from S3 directly, extract it, the appspec file must be in the top root directory and not inside any other directory.\")\n               return FailureReason\n             else:\n               FailureReason = (\"You have an issue with your Appspec file\"\n               \"\\n-----------------------------------------\"\n               \"\\n[1] Check the format of your AppSpec file\"\n               \"\\n[2] Visit our documentation https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-example.html#appspec-file-example-server Make sure your appspec file syntax is correct\")\n               return FailureReason\n        else:\n              FailureReason =Custom_Script(elapsed,script_name,errorCode,errorMessage,InstanceState)\n              return FailureReason\n\ndef Verify_Install(errorMessage,errorCode):\n\n         if \"rb_sysopen -\" in  errorMessage:\n             FailureReason = (\"[Error]: \"+ errorMessage + \"\"\n              \"\\nThis error might happen due to:\"\n              \"\\n[1] If the file format has non UTF8 characters\"\n              \"\\n[2] If the Filename + Path is greater than 260 character. This is Windows limitation that can be fixed as below\"\n              \"\\n   (1) run regedit.exe as administrator\"\n              \"\\n   (2) locate [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem]\"\n              \"\\n   (3) change data value [LongPathsEnabled] (DWORD) to 1\"\n              \"\\n   (4) close regedit and restart Windows\"\n              \"\\n[3] If you are trying to copy files in your appspec that are not exists in the revision, please try to locate the file manually on the instance\"\n              \"\\n[4] If the file is dll file, then make sure to stop the application in BeforeInstall lifecycle hook before copying the files to avoid any lock for the dll files\"\n              \"\\n \\n*** Please make sure to use the recent codedeploy agent version on your instance and try the deployment again.\")\n             return FailureReason\n\n         elif \"specified file already exists at this location\" in  errorMessage:\n             FailureReason = (\"While Codedeploy agent was copying the files to the destination folder, some file/s were exist in the location ==> \" + errorMessage +\"\\n\"\n             \"\\nYou can resolve the issue as below:\"\n             \"\\n--------------------------------------\\n\"\n             \"\\n[1] You can either remove these file from your AMI, and keep the AMI clean, Codedeploy will manage to install these files\"\n             \"\\n[2] Or choose Overwrite option:  the easiest way to avoid this error is to specify overwrite option when you create the deployment. For each deployment, you can choose whether to fail the deployment, to overwrite the files, or to retain the files already on the instance\"\n             \"\\n    ** When you create a deployment from console, You can choose Create Deployment => Additional deployment behavior settings =>Overwrite , it will overwrite the files on the instance \"\n             \"\\nFor more information check : https://docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-deployments.html#troubleshooting-same-files-different-app-name\")\n             return FailureReason\n     #### ADD HERE CASE WHEN DESTINATION FOLDER IS NOT EXIST ####\n         elif \"No such file or directory\" in  errorMessage:\n             FailureReason = (\"Your appspec define some file/s to copy the instance, however these file/s are not exist in the revision\"\n             \"\\n[Error]: \"+ errorMessage + \"\"\n             \"\\nTo troubleshoot the issue, download the revision manually from S3 and try to locate the file mentioned in the error message above\"\n             \"\\nOr SSH into the instance and try to locate the specified file manually\")\n             return FailureReason\n     #### other issue ###\n         elif \"malformed utf-8\" in  errorMessage:\n             FailureReason = (\"[Error]: \"+ errorMessage + \"\"\n              \"\\n \\n* This error happened when you have file/s with a name that contains non UTF8 format.\"\n              \"\\nTo detect these files => Collect codedeploy agent logs from C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt and perform the below command to list which files has non UTF8 format:\"\n              \"\\n-----------------------------------\"\n              \"\\ngrep  -axv ‘.*’ codedeploy-agent-log\"\n              \"\\n-----------------------------------\"\n              \"\\nRename the files to match the UTF8 format and retry the deployment\")\n             return FailureReason\n\n\n         else:\n             FailureReason1 = (\"Error:\" + errorMessage + \"\\n\")\n             FailureReason2 = issue_not_found()\n             FailureReason = FailureReason1 + FailureReason2\n             return FailureReason\n\n\ndef Verify_AllowTraffic(errorMessage):\n\n   if \"The instance is not currently running\" in  errorMessage:\n          FailureReason = (\"\\nYour deployment failed in AllowTraffic lifecycle hook because the Instance cannot be registered with the configured LoadBalancer.\\n\"\n          \"\\nThe LoadBalancer is configured in a different VPC than the instance, Check Cloudtrail logs for event name: RegisterTargets\"\n          \"\\nMake sure that the instance and the Loadbalancer are configured on the same VPC\\n\")\n          return FailureReason\n   else:\n           FailureReason = (\"\\nYour deployment stuck in AllowTraffic lifecycle hook, and failed after 1 hour timeout. This is because the instance did not pass the health check of the LoadBalancer.\\n\"\n           \"\\nWhat could cause AllowTraffic to fail ? and how to resolve it \"\n           \"\\n---------------------------------------------------------------\"\n           \"\\nDuring AllowTraffic, the instance will be registered to the Loadbalancer, it must pass the health check to pass AllowTraffic lifecycle hook\"\n           \"\\nSometime the application may return HTTP response that is not the same as what configured for the health check, such as 404, 502, 503, 400. You need to check the target group or your Classic LB health check to see what is the value that is considered as a success\\n\"\n           \"\\nTo troubleshoot the issue:\"\n           \"\\n---------------------------\"\n           \"\\n[1] SSH into the instance during the deployment is stuck in AllowTraffic \"\n           \"\\n[2] Perform curl command from inside the instance to check the HTTP returned code => curl -I localhost\"\n           \"\\n[3] If health check on Loadbalancer/ Target group shows timeout, make sure the Loadbalancer is able to reach the instance on that port. Check the security group on the instance\"\n           \"\\n \\n*** We recommend to validate the application at ValidateService or beforeAllowTraffic, by adding a custom script that perform curl command on specific path.\"\n           \"\\nThe example below is an example how would you validate your application in BeforeAllowTraffic lifecycle hook\"\n           \"\\n \\nAppspec Example:\"\n           \"\\n----------------\"\n           \"\\n[....]\"\n           \"\\n  BeforeAllowTraffic: \"\n           \"\\n    - location: Test-Traffic-response.sh\"\n           \"\\n[....]\"\n           \"\\n \\nTest-Traffic-response.sh example\"\n           \"\\n--------------------------------\"\n           \"\\n[....]\"\n           \"\\nstatus=`curl -I http://localhost/index.php  | grep 200`\"\n           \"\\nif [ ! -z $status ]\"\n           \"\\n then\"\n           \"\\n  exit 0;\"\n           \"\\nelse\"\n           \"\\n  exit 1;\"\n           \"\\nfi\"\n           \"\\n[....]\")\n           return FailureReason\n               \ndef Custom_Script(elapsed,script_name,errorCode,errorMessage,InstanceState):\n    if errorCode == \"ScriptTimedOut\":\n        FailureReason1  = (\"The script didn't finish executing within the specified time, no returned result received from your script \")\n        if elapsed >= datetime.timedelta(hours=1):\n          FailureReason2 = (\"\\nCodedeploy has 1 hour timeout for running each lifecycle hook, if your script needs more than 1 hour to be executed, then you may divide the script into smaller scripts\"\n          \"\\nIf you are running windows OS, make sure that Powershell handles exceptions correctly, and the script must return 0 if succeeded\"\n          \"\\nFor windows scripts, please check here : http://blogs.msdn.com/b/powershell/archive/2006/10/14/windows-powershell-exit-codes.aspx\")\n        else:\n          FailureReason2 = (\"\\nYou can increase the timeout defined in your appspec file, to make sure the script will finish executing during the deployment.\"\n          \"\\nYou can ssh into the instance and try to run the script manually and see how much time it takes\")\n        FailureReason = FailureReason1 + FailureReason2\n        return FailureReason\n    \n    elif (errorMessage == \"\") and (errorCode == \"\") and (script_name == \"\"):\n        FailureReason = (\"This lifecycle hook failed without error returned from codedeploy agent\"\n        \"\\nTo troubleshoot the issue:\"\n        \"\\n-----------------------------\"\n        \"\\n[1] SSH into your instance and check codedeploy agent status => service codedeploy-agent status\"\n        \"\\n    ==> If Codedeploy agent is in stopped status, restart the agent, make sure the agent is running and retry the deployment.\"\n        \"\\n    ==> If Codedeploy agent is running, proceed to step [2]\"\n        \"\\n\\n[2] Check if the instance has lack of memory issue. Check /var/log/messages for 'Out of memory / OOM' notifications.\"\n        \"\\n\\n[3] Check Codedeploy agent logs at the time of the deployment to see if codedeploy agent was running properly.\"\n        \"\\n    For Linux OS: less /var/log/aws/codedeploy-agent/codedeploy-agent.log\"\n        \"\\n    For Windows OS: notepad C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt\"\n        \"\\n    ==> For more visibility, you can enable codedeploy agent verbose logs, please check here: https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-agent-configuration.html\"\n        \"\\n\\n[4] Check the deployment script logs to see what happened during this lifecycle hook\"\n        \"\\n   [-] Script logs location for Linux will be similar to : /opt/codedeploy-agent/deployment-root/<deployment-group-ID>/<deployment-ID>/logs/scripts.log\"\n        \"\\n   [-] https://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance-unix\"\n        \"\\n\\n[5] If you have a custom script in this lifecycle, try to execute the script manually inside the instance and see the output\\n\")\n\n        return FailureReason\n    elif (errorCode == \"ScriptFailed\") and (\"failed with exit code 1\" in  errorMessage):\n        FailureReason = (\"You have issue with the script \" + script_name +\" that \"+ errorCode + \" ==> \"+ errorMessage + \"\"\n        \"\\nTo troubleshoot the issue:\"\n        \"\\n-----------------------------\"\n        \"\\n[1] SSH into your instance and try to run the script \"+ script_name + \" manually, See what is the output\"\n        \"\\n[2] You can also view the deployment script log inside the instance to see where the script failed:\"\n        \"\\n   [-] Script logs location for Linux will be similar to : /opt/codedeploy-agent/deployment-root/<deployment-group-ID>/<deployment-ID>/logs/scripts.log\"\n        \"\\n   [-] https://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance-unix\"\n        \"\\n\\nFor windows OS: \"\n        \"\\n-----------------\"\n        \"\\nLogs can be found at: C:\\ProgramData\\Amazon\\CodeDeploy\\deployment-group-ID\\deployment-ID\\logs\\scripts.log\"\n        \"\\n \\nIf a Windows PowerShell script running as part of a deployment relies on 64-bit functionality,the script might crash or not run as expected.\"\n        \"\\nThis is because, by default, CodeDeploy uses the 32-bit version of Windows PowerShell to run Windows PowerShell scripts that are part of an application revision\"\n        \"\\nTo resolve this: Add a code at the beginning of your script as the example here :https://docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-deployments.html#troubleshooting-deployments-powershell \")\n        return FailureReason\n\n\n\n    else:\n        FailureReason = (\"You have issue with the script \" + script_name +\" that \"+ errorCode + \" ==> \"+ errorMessage + \"\"\n        \"\\nTo troubleshoot the issue:\"\n        \"\\n-----------------------------\"\n        \"\\n[1] Check if the instance was terminated during the deployment, this could happen due to scale down event in the autoscaling group\"\n        \"\\n   => If this is your case, then make sure to suspend the autoscaling group below actions before you start the deployment\"\n        \"\\n      Actions are [ AZRebalance , ReplaceUnhealthy , ScheduledActions , AlarmNotification ]\" \n        \"\\n      Make sure to resume the process after the deployment finish\"\n        \"\\n      For more details how to suspend Autoscaling group actions, please refer to: https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#as-suspend-resume\"\n        \"\\n\\n[2] Try to launch new instance and SSH into the instance and run the failed script manually\" \n        \"\\n[3] You can view the deployment script log inside the launched instance to see where the script failed:\"\n        \"\\n   [-] Script logs location for Linux will be similar to : /opt/codedeploy-agent/deployment-root/<deployment-group-ID>/<deployment-ID>/logs/scripts.log\"\n        \"\\n   [-] https://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance-unix\"\n        \"\\n\\nFor windows OS: \"\n        \"\\n-----------------\"\n        \"\\nLogs can be found at: C:\\ProgramData\\Amazon\\CodeDeploy\\deployment-group-ID\\deployment-ID\\logs\\scripts.log\"\n        \"\\n \\nIf a Windows PowerShell script running as part of a deployment relies on 64-bit functionality,the script might crash or not run as expected.\"\n        \"\\nThis is because, by default, CodeDeploy uses the 32-bit version of Windows PowerShell to run Windows PowerShell scripts that are part of an application revision\"\n        \"\\nTo resolve this: Add a code at the beginning of your script as the example here :https://docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-deployments.html#troubleshooting-deployments-powershell \")\n        return FailureReason\n\n    \n\ndef Check_scale_down(errorMessage,errorCode, script_name,InstanceState,instance_id,creator ):\n       FailureReason = \"\"\n       if (errorMessage == \"\") and (errorCode == \"\") and (script_name == \"\") and ( creator == \"user\") and (InstanceState == \"terminated\"):\n            scaledown = \"true\"\n            FailureReason =(\"The instance \"+ instance_id+\" has been terminated during the deployment, This might happen due to scale down event from the autoscaling group \"\n            \"\\nWhen an instance is terminated during the deployment, Codedeploy service will not get the expected response from Codedeploy agent which running on the instance, and this cause the deployment to fail\"\n            \"\\nIn order to get more information about the reason why the instance was terminated, please go to your autoscaling group from the console, check Activity history of the autoscaling group\"\n            \"\\nYou should be able to see the reason. For example : this could happen due to scale down event during the deployment\"\n            \"\\n \\nHow to avoid the same situation:\"\n            \"\\n---------------------------------\"\n            \"\\nMake sure to suspend the autoscaling group below actions before you start the deployment\"\n            \"\\nActions are [ AZRebalance , ReplaceUnhealthy , ScheduledActions , AlarmNotification ]\" \n            \"\\nMake sure to resume the process after the deployment finish\"\n            \"\\nFor more details how to suspend Autoscaling group actions, please refer to: https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#as-suspend-resume\")\n            return [ scaledown, FailureReason ]\n       else:\n            scaledown = \"false\"\n            return [ scaledown , FailureReason ]\n\ndef check_agent():\n      FailureReason2 = ( \"\\nTo troubleshoot, SSH into the instance: \"\n                       \"\\n---------------------------------------\"\n                       \"\\n [1] Check Codedeploy agent status => service codedeploy-agent status \"\n                       \"\\n [2] Restart codedeploy agent  => service codedeploy-agent restart , and verify the status again \"\n                       \"\\n [3] If the agent is not running, verify the reason by checking Codedeploy agent log as below: \"\n                       \"\\n     - For linux OS : less /var/log/aws/codedeploy-agent/codedeploy-agent.log \"\n                       \"\\n     - For windows OS: notepad C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt \\n\")\n          \n      return FailureReason2\n          \n\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ],
  "outputs": [
    "TroubleshootCodedeploy.output"
  ]
}
