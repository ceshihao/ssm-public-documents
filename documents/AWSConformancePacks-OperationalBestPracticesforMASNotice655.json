{
  "schemaVersion": "1.0",
  "description": "Operational Best Practices for MAS Notice 655",
  "templateBody": {
    "Parameters": {
      "AccessKeysRotatedParamMaxAccessKeyAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMaxPasswordAge": {
        "Default": "90",
        "Type": "String"
      },
      "IamPasswordPolicyParamMinimumPasswordLength": {
        "Default": "14",
        "Type": "String"
      },
      "IamPasswordPolicyParamPasswordReusePrevention": {
        "Default": "24",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireLowercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireNumbers": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireSymbols": {
        "Default": "true",
        "Type": "String"
      },
      "IamPasswordPolicyParamRequireUppercaseCharacters": {
        "Default": "true",
        "Type": "String"
      },
      "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Default": "90",
        "Type": "String"
      },
      "InternetGatewayAuthorizedVpcOnlyParamAuthorizedVpcIds": {
        "Default": "",
        "Type": "String"
      },
      "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Default": "TRUE",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort1": {
        "Default": "20",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort2": {
        "Default": "21",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort3": {
        "Default": "3389",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort4": {
        "Default": "3306",
        "Type": "String"
      },
      "RestrictedIncomingTrafficParamBlockedPort5": {
        "Default": "4333",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Default": "True",
        "Type": "String"
      },
      "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Default": "True",
        "Type": "String"
      },
      "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts": {
        "Default": "443",
        "Type": "String"
      }
    },
    "Resources": {
      "AccessKeysRotated": {
        "Properties": {
          "ConfigRuleName": "access-keys-rotated",
          "InputParameters": {
            "maxAccessKeyAge": {
              "Fn::If": [
                "accessKeysRotatedParamMaxAccessKeyAge",
                {
                  "Ref": "AccessKeysRotatedParamMaxAccessKeyAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ACCESS_KEYS_ROTATED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AccountPartOfOrganizations": {
        "Properties": {
          "ConfigRuleName": "account-part-of-organizations",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ACCOUNT_PART_OF_ORGANIZATIONS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AlbWafEnabled": {
        "Properties": {
          "ConfigRuleName": "alb-waf-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticLoadBalancingV2::LoadBalancer"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ALB_WAF_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ApiGwAssociatedWithWaf": {
        "Properties": {
          "ConfigRuleName": "api-gw-associated-with-waf",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ApiGateway::Stage"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "API_GW_ASSOCIATED_WITH_WAF"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "AutoscalingLaunchConfigPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "autoscaling-launch-config-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::AutoScaling::LaunchConfiguration"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "DmsReplicationNotPublic": {
        "Properties": {
          "ConfigRuleName": "dms-replication-not-public",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "DMS_REPLICATION_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EbsSnapshotPublicRestorableCheck": {
        "Properties": {
          "ConfigRuleName": "ebs-snapshot-public-restorable-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2Imdsv2Check": {
        "Properties": {
          "ConfigRuleName": "ec2-imdsv2-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_IMDSV2_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceManagedBySsm": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-managed-by-systems-manager",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance",
              "AWS::SSM::ManagedInstanceInventory"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_MANAGED_BY_SSM"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2InstanceNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "ec2-instance-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_INSTANCE_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstanceAssociationComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-association-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::AssociationCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2ManagedinstancePatchComplianceStatusCheck": {
        "Properties": {
          "ConfigRuleName": "ec2-managedinstance-patch-compliance-status-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SSM::PatchCompliance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "Ec2SecurityGroupAttachedToEni": {
        "Properties": {
          "ConfigRuleName": "ec2-security-group-attached-to-eni-periodic",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EC2_SECURITY_GROUP_ATTACHED_TO_ENI_PERIODIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticBeanstalkManagedUpdatesEnabled": {
        "Properties": {
          "ConfigRuleName": "elastic-beanstalk-managed-updates-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::ElasticBeanstalk::Environment"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTIC_BEANSTALK_MANAGED_UPDATES_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "ElasticsearchInVpcOnly": {
        "Properties": {
          "ConfigRuleName": "elasticsearch-in-vpc-only",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ELASTICSEARCH_IN_VPC_ONLY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EmrKerberosEnabled": {
        "Properties": {
          "ConfigRuleName": "emr-kerberos-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EMR_KERBEROS_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "EmrMasterNoPublicIp": {
        "Properties": {
          "ConfigRuleName": "emr-master-no-public-ip",
          "Scope": {
            "ComplianceResourceTypes": []
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "EMR_MASTER_NO_PUBLIC_IP"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "GuarddutyEnabledCentralized": {
        "Properties": {
          "ConfigRuleName": "guardduty-enabled-centralized",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "GUARDDUTY_ENABLED_CENTRALIZED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamGroupHasUsersCheck": {
        "Properties": {
          "ConfigRuleName": "iam-group-has-users-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Group"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_GROUP_HAS_USERS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamNoInlinePolicyCheck": {
        "Properties": {
          "ConfigRuleName": "iam-no-inline-policy-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User",
              "AWS::IAM::Role",
              "AWS::IAM::Group"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_NO_INLINE_POLICY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPasswordPolicy": {
        "Properties": {
          "ConfigRuleName": "iam-password-policy",
          "InputParameters": {
            "MaxPasswordAge": {
              "Fn::If": [
                "iamPasswordPolicyParamMaxPasswordAge",
                {
                  "Ref": "IamPasswordPolicyParamMaxPasswordAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "MinimumPasswordLength": {
              "Fn::If": [
                "iamPasswordPolicyParamMinimumPasswordLength",
                {
                  "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PasswordReusePrevention": {
              "Fn::If": [
                "iamPasswordPolicyParamPasswordReusePrevention",
                {
                  "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireLowercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireLowercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireNumbers": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireNumbers",
                {
                  "Ref": "IamPasswordPolicyParamRequireNumbers"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireSymbols": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireSymbols",
                {
                  "Ref": "IamPasswordPolicyParamRequireSymbols"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RequireUppercaseCharacters": {
              "Fn::If": [
                "iamPasswordPolicyParamRequireUppercaseCharacters",
                {
                  "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_PASSWORD_POLICY"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithAdminAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-admin-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamPolicyNoStatementsWithFullAccess": {
        "Properties": {
          "ConfigRuleName": "iam-policy-no-statements-with-full-access",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::Policy"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamRootAccessKeyCheck": {
        "Properties": {
          "ConfigRuleName": "iam-root-access-key-check",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_ROOT_ACCESS_KEY_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserGroupMembershipCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-group-membership-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_GROUP_MEMBERSHIP_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "iam-user-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserNoPoliciesCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-no-policies-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::IAM::User"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_NO_POLICIES_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IamUserUnusedCredentialsCheck": {
        "Properties": {
          "ConfigRuleName": "iam-user-unused-credentials-check",
          "InputParameters": {
            "maxCredentialUsageAge": {
              "Fn::If": [
                "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge",
                {
                  "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "IAM_USER_UNUSED_CREDENTIALS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "IncomingSshDisabled": {
        "Properties": {
          "ConfigRuleName": "restricted-ssh",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INCOMING_SSH_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InstancesInVpc": {
        "Properties": {
          "ConfigRuleName": "ec2-instances-in-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Instance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INSTANCES_IN_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "InternetGatewayAuthorizedVpcOnly": {
        "Properties": {
          "ConfigRuleName": "internet-gateway-authorized-vpc-only",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::InternetGateway"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY"
          },
          "InputParameters": {
            "AuthorizedVpcIds": {
              "Fn::If": [
                "internetGatewayAuthorizedVpcOnlyParamAuthorizedVpcIds",
                {
                  "Ref": "InternetGatewayAuthorizedVpcOnlyParamAuthorizedVpcIds"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaFunctionPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "lambda-function-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "LambdaInsideVpc": {
        "Properties": {
          "ConfigRuleName": "lambda-inside-vpc",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Lambda::Function"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "LAMBDA_INSIDE_VPC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "MfaEnabledForIamConsoleAccess": {
        "Properties": {
          "ConfigRuleName": "mfa-enabled-for-iam-console-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "NoUnrestrictedRouteToIgw": {
        "Properties": {
          "ConfigRuleName": "no-unrestricted-route-to-igw",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::RouteTable"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "NO_UNRESTRICTED_ROUTE_TO_IGW"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsAutomaticMinorVersionUpgradeEnabled": {
        "Properties": {
          "ConfigRuleName": "rds-automatic-minor-version-upgrade-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsInstancePublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "rds-instance-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBInstance"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RdsSnapshotsPublicProhibited": {
        "Properties": {
          "ConfigRuleName": "rds-snapshots-public-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::RDS::DBSnapshot",
              "AWS::RDS::DBClusterSnapshot"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterMaintenancesettingsCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-maintenancesettings-check",
          "InputParameters": {
            "allowVersionUpgrade": {
              "Fn::If": [
                "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade",
                {
                  "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftClusterPublicAccessCheck": {
        "Properties": {
          "ConfigRuleName": "redshift-cluster-public-access-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RedshiftEnhancedVpcRoutingEnabled": {
        "Properties": {
          "ConfigRuleName": "redshift-enhanced-vpc-routing-enabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::Redshift::Cluster"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RestrictedIncomingTraffic": {
        "Properties": {
          "ConfigRuleName": "restricted-common-ports",
          "InputParameters": {
            "blockedPort1": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort1",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort2": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort2",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort3": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort3",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort4": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort4",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "blockedPort5": {
              "Fn::If": [
                "restrictedIncomingTrafficParamBlockedPort5",
                {
                  "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "RESTRICTED_INCOMING_TRAFFIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RootAccountHardwareMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "root-account-hardware-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "RootAccountMfaEnabled": {
        "Properties": {
          "ConfigRuleName": "root-account-mfa-enabled",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "ROOT_ACCOUNT_MFA_ENABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3AccountLevelPublicAccessBlocksPeriodic": {
        "Properties": {
          "ConfigRuleName": "s3-account-level-public-access-blocks-periodic",
          "InputParameters": {
            "BlockPublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "BlockPublicPolicy": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "IgnorePublicAcls": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "RestrictPublicBuckets": {
              "Fn::If": [
                "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets",
                {
                  "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketLevelPublicAccessProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-level-public-access-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicReadProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-read-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_READ_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "S3BucketPublicWriteProhibited": {
        "Properties": {
          "ConfigRuleName": "s3-bucket-public-write-prohibited",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::S3::Bucket"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SagemakerNotebookNoDirectInternetAccess": {
        "Properties": {
          "ConfigRuleName": "sagemaker-notebook-no-direct-internet-access",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecretsmanagerRotationEnabledCheck": {
        "Properties": {
          "ConfigRuleName": "secretsmanager-rotation-enabled-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SecretsManager::Secret"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECRETSMANAGER_ROTATION_ENABLED_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SecretsmanagerScheduledRotationSuccessCheck": {
        "Properties": {
          "ConfigRuleName": "secretsmanager-scheduled-rotation-success-check",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::SecretsManager::Secret"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SsmDocumentNotPublic": {
        "Properties": {
          "ConfigRuleName": "ssm-document-not-public",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SSM_DOCUMENT_NOT_PUBLIC"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "SubnetAutoAssignPublicIpDisabled": {
        "Properties": {
          "ConfigRuleName": "subnet-auto-assign-public-ip-disabled",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::Subnet"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcDefaultSecurityGroupClosed": {
        "Properties": {
          "ConfigRuleName": "vpc-default-security-group-closed",
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_DEFAULT_SECURITY_GROUP_CLOSED"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VpcSgOpenOnlyToAuthorizedPorts": {
        "Properties": {
          "ConfigRuleName": "vpc-sg-open-only-to-authorized-ports",
          "InputParameters": {
            "authorizedTcpPorts": {
              "Fn::If": [
                "vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts",
                {
                  "Ref": "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Scope": {
            "ComplianceResourceTypes": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      },
      "VulnManagementPlanExists": {
        "Properties": {
          "ConfigRuleName": "vuln-management-plan-exists",
          "Description": "Ensure a vulnerability management plan is developed and implemented in order to have a formally defined processes to address vulnerabilities in your environment.",
          "Source": {
            "Owner": "AWS",
            "SourceIdentifier": "AWS_CONFIG_PROCESS_CHECK"
          }
        },
        "Type": "AWS::Config::ConfigRule"
      }
    },
    "Conditions": {
      "accessKeysRotatedParamMaxAccessKeyAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "AccessKeysRotatedParamMaxAccessKeyAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMaxPasswordAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMaxPasswordAge"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamMinimumPasswordLength": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamMinimumPasswordLength"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamPasswordReusePrevention": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamPasswordReusePrevention"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireLowercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireLowercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireNumbers": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireNumbers"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireSymbols": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireSymbols"
              }
            ]
          }
        ]
      },
      "iamPasswordPolicyParamRequireUppercaseCharacters": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamPasswordPolicyParamRequireUppercaseCharacters"
              }
            ]
          }
        ]
      },
      "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
              }
            ]
          }
        ]
      },
      "internetGatewayAuthorizedVpcOnlyParamAuthorizedVpcIds": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "InternetGatewayAuthorizedVpcOnlyParamAuthorizedVpcIds"
              }
            ]
          }
        ]
      },
      "redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort1": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort1"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort2": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort2"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort3": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort3"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort4": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort4"
              }
            ]
          }
        ]
      },
      "restrictedIncomingTrafficParamBlockedPort5": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "RestrictedIncomingTrafficParamBlockedPort5"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamBlockPublicPolicy"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamIgnorePublicAcls"
              }
            ]
          }
        ]
      },
      "s3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "S3AccountLevelPublicAccessBlocksPeriodicParamRestrictPublicBuckets"
              }
            ]
          }
        ]
      },
      "vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              "",
              {
                "Ref": "VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts"
              }
            ]
          }
        ]
      }
    }
  }
}
