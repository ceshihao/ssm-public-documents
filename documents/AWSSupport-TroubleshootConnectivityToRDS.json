{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootConnectivityToRDS** runbook diagnoses connectivity issues between an Amazon Elastic Compute Cloud (Amazon EC2) instance and an Amazon Relational Database Service(RDS) instance. The automation ensures the Database(DB) instance is available, and then checks the associated security group rules, network access control lists (network ACLs), and route tables for potential connectivity issues.  This runbook first determines if the DB instance is in **availble** state and only then proceeds to perform the checks over the Security groups,  the associated network ACLs and route tables.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "DBInstanceIdentifier": {
      "type": "String",
      "description": "(Required) The DB instance ID to test connectivity to.",
      "allowedPattern": "^[a-zA-Z][a-zA-Z0-9-]{0,58}[a-zA-Z0-9]$"
    },
    "SourceInstance": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The ID of the Amazon EC2 instance to test connectivity from.",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    }
  },
  "mainSteps": [
    {
      "name": "assertDBInstanceStatus",
      "description": "Confirms the DB instance status is ``available``",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}",
        "PropertySelector": "$.DBInstances[0].DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      },
      "nextStep": "getRDSInstanceProperties"
    },
    {
      "name": "getRDSInstanceProperties",
      "description": "Gets information about the DB instance.",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}"
      },
      "outputs": [
        {
          "Name": "DBInstanceStatus",
          "Selector": "$.DBInstances[0].DBInstanceStatus",
          "Type": "String"
        },
        {
          "Name": "PubliclyAccessible",
          "Selector": "$.DBInstances[0].PubliclyAccessible",
          "Type": "Boolean"
        },
        {
          "Name": "EndpointPort",
          "Selector": "$.DBInstances[0].Endpoint.Port",
          "Type": "Integer"
        },
        {
          "Name": "EndpointAddress",
          "Selector": "$.DBInstances[0].Endpoint.Address",
          "Type": "String"
        },
        {
          "Name": "VpcId",
          "Selector": "$.DBInstances[0].DBSubnetGroup.VpcId",
          "Type": "String"
        },
        {
          "Name": "VpcSecurityGroups",
          "Selector": "$.DBInstances[0].VpcSecurityGroups..VpcSecurityGroupId",
          "Type": "StringList"
        },
        {
          "Name": "DBInstanceIdentifier",
          "Selector": "$.DBInstances[0].DBInstanceIdentifier",
          "Type": "String"
        },
        {
          "Name": "Subnets",
          "Selector": "$.DBInstances[0].DBSubnetGroup.Subnets..SubnetIdentifier",
          "Type": "StringList"
        }
      ],
      "nextStep": "getRDSSubnetCidrs"
    },
    {
      "name": "getRDSSubnetCidrs",
      "description": "Gets the DB instance subnet CIDR.",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSubnets",
        "SubnetIds": [
          "{{ getRDSInstanceProperties.Subnets }}"
        ]
      },
      "outputs": [
        {
          "Name": "CidrBlocks",
          "Selector": "$.Subnets..CidrBlock",
          "Type": "StringList"
        }
      ],
      "nextStep": "getEC2InstanceProperties"
    },
    {
      "name": "getEC2InstanceProperties",
      "description": "Gets information about the EC2 instance.",
      "action": "aws:executeAwsApi",
      "timeoutSeconds": 60,
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ SourceInstance }}"
        ]
      },
      "outputs": [
        {
          "Name": "SecurityGroupIds",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups..GroupId",
          "Type": "StringList"
        },
        {
          "Name": "SubnetId",
          "Selector": "$.Reservations[0].Instances[0].SubnetId",
          "Type": "String"
        },
        {
          "Name": "VpcId",
          "Selector": "$.Reservations[0].Instances[0].VpcId",
          "Type": "String"
        },
        {
          "Name": "PrivateIpAddress",
          "Selector": "$.Reservations[0].Instances[0].NetworkInterfaces..PrivateIpAddresses..PrivateIpAddress",
          "Type": "StringList"
        }
      ],
      "nextStep": "evalSecurityGroupRules"
    },
    {
      "name": "evalSecurityGroupRules",
      "description": "Evaluates security group rules.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "RDSEndpointPort": "{{ getRDSInstanceProperties.EndpointPort }}",
          "RDSSecurityGroupIds": "{{ getRDSInstanceProperties.VpcSecurityGroups }}",
          "RDSSubnetCidrs": "{{ getRDSSubnetCidrs.CidrBlocks }}",
          "EC2InstanceIPs": "{{ getEC2InstanceProperties.PrivateIpAddress }}",
          "EC2SecurityGroupIds": "{{ getEC2InstanceProperties.SecurityGroupIds }}"
        },
        "Handler": "eval_secgroups",
        "Runtime": "python3.11",
        "Script": "from ipaddress import ip_address, ip_network\n\nimport boto3\n\nec2 = boto3.client(\"ec2\")\n\n\nclass TrafficNotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\nclass ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\ndef evaluate_security_group_rules_basedon_cidr(sg_rules, remote_cidrs, remote_sg, protocol, port, sg_id):\n    required_cidrs = list(remote_cidrs)\n    for rule in sg_rules:\n        if (rule[\"IpProtocol\"] == protocol and port in range(rule[\"FromPort\"], rule[\"ToPort\"] + 1)) or (\n            rule[\"IpProtocol\"] == \"-1\"\n        ):\n            for group in rule[\"UserIdGroupPairs\"]:\n                if group[\"GroupId\"] in remote_sg:\n                    return True\n            for remote_cidr in remote_cidrs:\n                for cidrs in rule[\"IpRanges\"]:\n                    if ip_network(cidrs[\"CidrIp\"], strict=False).overlaps(ip_network(remote_cidr, strict=False)):\n                        required_cidrs.remove(remote_cidr)\n                        break\n    if required_cidrs:\n        print(\n            f\"Security group {sg_id} is not allowing {protocol} traffic to/from IP ranges {required_cidrs} for port(s) {protocol}.\"\n        )\n        return False\n    else:\n        return True\n\n\ndef evaluate_security_group_rules_basedon_ip(sg_rules, remote_ip, remote_sg, protocol, port, sg_id):\n    for rule in sg_rules:\n        if (rule[\"IpProtocol\"] == protocol and port in range(rule[\"FromPort\"], rule[\"ToPort\"] + 1)) or (\n            rule[\"IpProtocol\"] == \"-1\"\n        ):\n            for group in rule[\"UserIdGroupPairs\"]:\n                if group[\"GroupId\"] in remote_sg:\n                    return True\n            for cidrs in rule[\"IpRanges\"]:\n                if ip_address(remote_ip) in ip_network(cidrs[\"CidrIp\"], strict=False):\n                    return True\n    print(f\"Security group {sg_id} is not allowing {protocol} traffic to/from IP {remote_ip} for port(s) {port}.\")\n    return False\n\n\ndef get_security_groups(sg_ids):\n    security_groups = []\n    try:\n        paginator = ec2.get_paginator(\"describe_security_groups\")\n        page_iterator = paginator.paginate(GroupIds=sg_ids)\n        for page in page_iterator:\n            security_groups.extend(page[\"SecurityGroups\"])\n    except Exception:\n        raise ValidationError(\"Failed to get security groups\")\n    return security_groups\n\n\ndef eval_secgroups(events, _):\n\n    # RDS Info\n    dbport = int(events[\"RDSEndpointPort\"])\n    dbsecuritygroup = events[\"RDSSecurityGroupIds\"]\n    ingressrules = get_security_groups(dbsecuritygroup)\n\n    dbsubnetcidrs = events[\"RDSSubnetCidrs\"]\n    # EC2 Instance Info\n    ec2_instance_ip = events[\"EC2InstanceIPs\"][0]\n    ec2instancesecuritygroup = events[\"EC2SecurityGroupIds\"]\n    egressrules = get_security_groups(ec2instancesecuritygroup)\n\n    # Verify Egress traffic from EC2 Instance to RDS subnets\n    for egressrule in egressrules:\n        print(f\"Checking egress traffic for security group {ec2instancesecuritygroup}\")\n        result = evaluate_security_group_rules_basedon_cidr(\n            egressrule[\"IpPermissionsEgress\"], dbsubnetcidrs, dbsecuritygroup, \"tcp\", dbport, egressrule[\"GroupId\"]\n        )\n        if result:\n            break\n    if not result:\n        raise TrafficNotAllowedError(\n            f\"Please review security group(s) {ec2instancesecuritygroup} for rules allowing egress TCP traffic to port {dbport}.\"\n        )\n    # Verify Ingress traffic to RDS from EC2 Instance IP\n    for ingressrule in ingressrules:\n        print(f\"Checking ingress traffic for security group {dbsecuritygroup}\")\n        result = evaluate_security_group_rules_basedon_ip(\n            ingressrule[\"IpPermissions\"],\n            ec2_instance_ip,\n            ec2instancesecuritygroup,\n            \"tcp\",\n            dbport,\n            ingressrule[\"GroupId\"],\n        )\n        if result:\n            break\n    if not result:\n        raise TrafficNotAllowedError(\n            f\"Please review security group(s) {dbsecuritygroup} for rules allowing ingress TCP traffic from port {dbport}\"\n        )\n    print(\"Security Group validation successful\")\n    return \"Security Group validation successful\"\n"
      },
      "outputs": [
        {
          "Name": "SecurityGroupEvaluation",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "evalNetworkAclRules"
    },
    {
      "name": "evalNetworkAclRules",
      "description": "Evaluates network ACLs.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "RDSEndpointPort": "{{ getRDSInstanceProperties.EndpointPort }}",
          "RDSSubnets": "{{ getRDSInstanceProperties.Subnets }}",
          "RDSSubnetCidrs": "{{ getRDSSubnetCidrs.CidrBlocks }}",
          "EC2InstanceIPs": "{{ getEC2InstanceProperties.PrivateIpAddress }}",
          "EC2Subnets": "{{ getEC2InstanceProperties.SubnetId }}"
        },
        "Handler": "eval_nacls",
        "Runtime": "python3.11",
        "Script": "from ipaddress import ip_address, ip_network\n\nimport boto3\n\nec2 = boto3.client(\"ec2\")\n\n\nclass TrafficNotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\nclass ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\ndef evaluate_traffic_basedon_cidr(acl_entries, egress, required_ports, remote_cidr, acl_id):\n    allowed_ports = []\n    denied_ports = []\n    allowed_cidrs = {}\n    denied_cidrs = {}\n    try:\n        for port in required_ports:\n            if not (port in allowed_ports or port in denied_ports):\n                for entry in acl_entries:\n                    if not (port in allowed_ports or port in denied_ports):\n                        if entry[\"Egress\"] == egress:\n                            if entry[\"Protocol\"] == \"-1\" or entry[\"Protocol\"] == required_ports[port]:\n                                for cidr in remote_cidr:\n                                    if not (port in allowed_ports or port in denied_ports):\n                                        if ip_network(entry[\"CidrBlock\"], strict=False).overlaps(\n                                            ip_network(cidr, strict=False)\n                                        ):\n                                            if \"PortRange\" in entry.keys():\n                                                if port in range(\n                                                    entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1\n                                                ):\n                                                    if entry[\"RuleAction\"] == \"allow\":\n                                                        allowed_ports.append(port)\n                                                        allowed_cidrs[port] = [\n                                                            entry[\"CidrBlock\"],\n                                                            entry[\"RuleNumber\"],\n                                                        ]\n                                                    else:\n                                                        denied_ports.append(port)\n                                                        denied_cidrs[port] = [\n                                                            entry[\"CidrBlock\"],\n                                                            entry[\"RuleNumber\"],\n                                                        ]\n                                                else:\n                                                    continue\n                                            else:\n                                                if entry[\"RuleAction\"] == \"allow\":\n                                                    allowed_ports.append(port)\n                                                    allowed_cidrs[port] = [entry[\"CidrBlock\"], entry[\"RuleNumber\"]]\n                                                    break\n                                                else:\n                                                    denied_ports.append(port)\n                                                    denied_cidrs[port] = [entry[\"CidrBlock\"], entry[\"RuleNumber\"]]\n                                                    break\n                                        else:\n                                            continue\n                                    else:\n                                        break\n                            else:\n                                continue\n                        else:\n                            continue\n                    else:\n                        break\n            else:\n                continue\n\n            continue\n        if denied_ports:\n            print(f\"Network acl {acl_id} is not allowing traffic for port(s) {denied_ports}\")\n            return denied_ports\n    except Exception:\n        raise ValidationError(\"Failed to evaluate network acl\")\n    return\n\n\ndef evaluate_traffic_basedon_ip(acl_entries, egress, required_ports, remote_ips, acl_id):\n    allowed_ports = []\n    denied_ports = []\n    allowed_ips = {}\n    denied_ips = {}\n    try:\n        for port in required_ports:\n            if not (port in allowed_ports or port in denied_ports):\n                for entry in acl_entries:\n                    if not (port in allowed_ports or port in denied_ports):\n                        if entry[\"Egress\"] == egress:\n                            if entry[\"Protocol\"] == \"-1\" or entry[\"Protocol\"] == required_ports[port]:\n                                for ip in remote_ips:\n                                    if not (port in allowed_ports or port in denied_ports):\n                                        if ip_address(ip) in ip_network(entry[\"CidrBlock\"], strict=False):\n                                            if \"PortRange\" in entry.keys():\n                                                if port in range(\n                                                    entry[\"PortRange\"][\"From\"], entry[\"PortRange\"][\"To\"] + 1\n                                                ):\n                                                    if entry[\"RuleAction\"] == \"allow\":\n                                                        allowed_ports.append(port)\n                                                        allowed_ips[port] = [\n                                                            entry[\"CidrBlock\"],\n                                                            entry[\"RuleNumber\"],\n                                                        ]\n                                                    else:\n                                                        denied_ports.append(port)\n                                                        denied_ips[port] = [entry[\"CidrBlock\"], entry[\"RuleNumber\"]]\n                                                else:\n                                                    continue\n                                            else:\n                                                if entry[\"RuleAction\"] == \"allow\":\n                                                    allowed_ports.append(port)\n                                                    allowed_ips[port] = [entry[\"CidrBlock\"], entry[\"RuleNumber\"]]\n                                                    break\n                                                else:\n                                                    denied_ports.append(port)\n                                                    denied_ips[port] = [entry[\"CidrBlock\"], entry[\"RuleNumber\"]]\n                                                    break\n                                        else:\n                                            continue\n                                    else:\n                                        break\n                            else:\n                                continue\n                        else:\n                            continue\n                    else:\n                        break\n            else:\n                continue\n\n            continue\n        if denied_ports > 0:\n            print(f\"Network acl {acl_id} is not allowing traffic for port(s) {denied_ports}\")\n            return denied_ports\n    except Exception:\n        print(\"Failed to evaluate network acl\")\n    return\n\n\ndef get_nacls(subnets):\n    nacls = []\n    if isinstance(subnets, str):\n        subnets = subnets.split(\",\")\n    try:\n        paginator = ec2.get_paginator(\"describe_network_acls\")\n        page_iterator = paginator.paginate(Filters=[{\"Name\": \"association.subnet-id\", \"Values\": subnets}])\n        for page in page_iterator:\n            nacls.extend(page[\"NetworkAcls\"])\n    except Exception:\n        raise ValidationError(\"Failed to get network ACLs\")\n    return nacls\n\n\ndef eval_nacls(events, _):\n    # RDS Info\n    reqports = {events[\"RDSEndpointPort\"]: \"6\"}\n    rdsnacls = get_nacls(events[\"RDSSubnets\"])\n    rdscidrs = events[\"RDSSubnetCidrs\"]\n\n    # EC2 Instance Info\n    ec2nacls = get_nacls(events[\"EC2Subnets\"])\n    ec2instanceips = events[\"EC2InstanceIPs\"]\n    # Verify Egress traffic from EC2 Instance to RDS subnets\n    for acl in ec2nacls:\n        print(f\"Checking egress traffic for network acl {acl['NetworkAclId']}\")\n        result = evaluate_traffic_basedon_cidr(acl[\"Entries\"], True, reqports, rdscidrs, acl[\"NetworkAclId\"])\n        if result:\n            raise TrafficNotAllowedError(\n                f\"Please review network acl {acl['NetworkAclId']} for egress rules allowing port(s) {result}\"\n            )\n    # Verify Ingress traffic to RDS from EC2 Instance IP\n    for acl in rdsnacls:\n        print(f\"Checking ingress traffic for network acl {acl['NetworkAclId']}\")\n        result = evaluate_traffic_basedon_ip(acl[\"Entries\"], False, reqports, ec2instanceips, acl[\"NetworkAclId\"])\n        if result:\n            raise TrafficNotAllowedError(\n                f\"Please review network acl {acl['NetworkAclId']} for egress rules allowing port(s) {result}\"\n            )\n    print(\"Network ACL validation successful\")\n    return \"Network ACL validation successful\"\n"
      },
      "outputs": [
        {
          "Name": "NetworkAclEvaluation",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "nextStep": "evalRouteTableEntries"
    },
    {
      "name": "evalRouteTableEntries",
      "description": "Evaluates route tables.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "RDSSubnetIds": "{{ getRDSInstanceProperties.Subnets }}",
          "RDSSubnetCidrs": "{{ getRDSSubnetCidrs.CidrBlocks }}",
          "RDSVpcId": "{{ getRDSInstanceProperties.VpcId }}",
          "EC2SubnetId": "{{ getEC2InstanceProperties.SubnetId }}",
          "EC2InstanceIPs": "{{ getEC2InstanceProperties.PrivateIpAddress }}",
          "EC2VpcId": "{{ getEC2InstanceProperties.VpcId }}"
        },
        "Handler": "eval_routetables",
        "Runtime": "python3.11",
        "Script": "from ipaddress import ip_network\n\nimport boto3\n\nec2 = boto3.client(\"ec2\")\n\n\nclass MissingRouteError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\nclass CidrOverlapeError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\nclass RouteTableAssociationError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\nclass ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return str(self.message)\n\n\ndef get_route_tables(subnet_ids, vpc_id=None):\n    route_tables = []\n    filters = [{\"Name\": \"association.subnet-id\", \"Values\": subnet_ids}]\n    if vpc_id:\n        filters = [{\"Name\": \"vpc-id\", \"Values\": [vpc_id]}, {\"Name\": \"association.main\", \"Values\": [\"true\"]}]\n    try:\n        paginator = ec2.get_paginator(\"describe_route_tables\")\n        page_iterator = paginator.paginate(Filters=filters)\n        for page in page_iterator:\n            route_tables.extend(page[\"RouteTables\"])\n    except Exception as e:\n        raise ValidationError(f\"An error occurred when describing route tables: {e}\") from None\n    return route_tables\n\n\ndef eval_routetables(events, _):\n    try:\n        # RDS Info\n        rdssubnetids = events[\"RDSSubnetIds\"]\n        rdscidrs = events[\"RDSSubnetCidrs\"]\n        rdsroutetables = get_route_tables(rdssubnetids)\n        rdsvpcid = events[\"RDSVpcId\"]\n        rdsvpcroutetables = get_route_tables([], rdsvpcid)\n\n        # EC2 Instance Info\n        ec2subnetid = [events[\"EC2SubnetId\"]]\n        ec2instanceips = events[\"EC2InstanceIPs\"]\n        ec2routetables = get_route_tables(ec2subnetid)\n        ec2vpcid = events[\"EC2VpcId\"]\n        ec2vpcroutetables = get_route_tables([], ec2vpcid)\n\n        rds_rtb_list = []\n        ec2_rtb_list = []\n        b_check_vpc_rtb_rds = False\n        b_check_vpc_rtb_ec2 = False\n\n        rds_rtb_subnet_list = []  # All subnets that contain a valid rtb\n        ec2_rtb_subnet_list = []\n\n        # Initializing RouteTables\n        for rtb in rdsroutetables:\n            for assoc in rtb[\"Associations\"]:\n                if assoc[\"SubnetId\"] in rdssubnetids:\n                    rds_rtb_subnet_list.append(assoc[\"SubnetId\"])\n        if len(rds_rtb_subnet_list) < len(rdssubnetids):\n            b_check_vpc_rtb_rds = True\n\n        for rtb in ec2routetables:\n            for assoc in rtb[\"Associations\"]:\n                if assoc[\"SubnetId\"] in ec2subnetid:\n                    ec2_rtb_subnet_list.append(assoc[\"SubnetId\"])\n        if len(ec2_rtb_subnet_list) < len(ec2subnetid):\n            b_check_vpc_rtb_ec2 = True\n\n        # First verification: Check whether resources are in the same VPC. If not, Cidr cannot overlap\n        if not rdsvpcid == ec2vpcid:\n            for rdscidr in rdscidrs:\n                for ec2instanceip in ec2instanceips:\n                    if ip_network(rdscidr, strict=False).overlaps(ip_network(ec2instanceip, strict=False)):\n                        raise CidrOverlapeError(\n                            \"Resources are located in different VPCs, however, Cidrs are overlapping\"\n                        )\n        else:\n            print(\"Resources located in the same VPC\")\n            return \"Resources located in the same VPC\"\n\n        # Second verification: Check whether resources are using the same route table\n        for rtb in rdsroutetables:\n            rds_rtb_list.append(rtb[\"RouteTableId\"])\n\n        for rtb in ec2routetables:\n            ec2_rtb_list.append(rtb[\"RouteTableId\"])\n\n        if (rdsroutetables == ec2routetables) and b_check_vpc_rtb_ec2 is False and b_check_vpc_rtb_rds is False:\n            print(f\"Source and destination resources are using the same route table(s): {ec2_rtb_list}\")\n            return f\"Source and destination resources are using the same route table(s): {ec2_rtb_list}\"\n        # Third verification: Check wheter route is through a peering connection\n        # Verify whether RDS RTBs contains route to EC2 network\n        for rtb in rdsroutetables:\n            required_ips = list(ec2instanceips)\n            for route in rtb[\"Routes\"]:\n                if \"VpcPeeringConnectionId\" not in route.keys():\n                    continue\n                if not required_ips:\n                    break\n                for remote_ip in ec2instanceips:\n                    if ip_network(route[\"DestinationCidrBlock\"], strict=False).overlaps(\n                        ip_network(remote_ip, strict=False)\n                    ):\n                        required_ips.remove(remote_ip)\n            if not required_ips:\n                rds_rtb_list.remove(rtb[\"RouteTableId\"])\n\n        if b_check_vpc_rtb_rds is True:\n            for rtb in rdsvpcroutetables:\n                required_ips = list(ec2instanceips)\n                for route in rtb[\"Routes\"]:\n                    if \"VpcPeeringConnectionId\" not in route.keys():\n                        continue\n                    if len(required_ips) == 0:\n                        break\n                    for remote_ip in ec2instanceips:\n                        if ip_network(route[\"DestinationCidrBlock\"], strict=False).overlaps(\n                            ip_network(remote_ip, strict=False)\n                        ):\n                            if remote_ip in required_ips:\n                                required_ips.remove(remote_ip)\n                if len(required_ips) == 0:\n                    rds_rtb_list.remove(rtb[\"RouteTableId\"])\n\n        # Verify whether EC2 RTB contains route to RDS network\n        for rtb in ec2routetables:\n            required_cidrs = list(rdscidrs)\n            for route in rtb[\"Routes\"]:\n                if \"VpcPeeringConnectionId\" not in route.keys():\n                    continue\n                if not required_cidrs:\n                    break\n                for remote_cidr in rdscidrs:\n                    if ip_network(route[\"DestinationCidrBlock\"], strict=False).overlaps(\n                        ip_network(remote_cidr, strict=False)\n                    ):\n                        if remote_cidr in required_cidrs:\n                            required_cidrs.remove(remote_cidr)\n            if not required_cidrs:\n                ec2_rtb_list.remove(rtb[\"RouteTableId\"])\n\n        if b_check_vpc_rtb_ec2 is True:\n            for rtb in ec2vpcroutetables:\n                required_ips = list(rdscidrs)\n                for route in rtb[\"Routes\"]:\n                    if \"VpcPeeringConnectionId\" not in route.keys():\n                        continue\n                    if len(required_cidrs) == 0:\n                        break\n                    for remote_cidr in rdscidrs:\n                        if ip_network(route[\"DestinationCidrBlock\"], strict=False).overlaps(\n                            ip_network(remote_cidr, strict=False)\n                        ):\n                            required_cidrs.remove(remote_cidr)\n                if not required_ips:\n                    ec2_rtb_list.remove(rtb[\"RouteTableId\"])\n\n        if rds_rtb_list:\n            raise MissingRouteError(\n                f\"Please review route table(s) {rds_rtb_list} for entries matching {ec2instanceips} Cidr\"\n            )\n        if ec2_rtb_list:\n            raise MissingRouteError(\n                f\"Please review route table(s) {ec2_rtb_list} for entries matching {ec2_rtb_list} Cidr\"\n            )\n\n        print(\"Route table validation successful\")\n        return \"Route table validation successful\"\n\n    except MissingRouteError:\n        raise\n\n    except CidrOverlapeError:\n        raise\n"
      },
      "outputs": [
        {
          "Name": "RouteTableEvaluation",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ],
  "outputs": [
    "getRDSInstanceProperties.DBInstanceIdentifier",
    "getRDSInstanceProperties.DBInstanceStatus",
    "evalSecurityGroupRules.SecurityGroupEvaluation",
    "evalNetworkAclRules.NetworkAclEvaluation",
    "evalRouteTableEntries.RouteTableEvaluation"
  ]
}
