{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootEKSWorkerNode** automation runbook helps troubleshoot Amazon Elastic Kubernetes Service (Amazon EKS) worker nodes that are [failing to join an Amazon EKS cluster](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html#worker-node-fail). This automation runbook checks both the Amazon EKS cluster and the worker node configuration validating the following:\n\n> * Required node tags are applied.\n> * Worker node instance type is supported.\n> * Network communication between the worker node and the cluster API server is allowed.\n> * Node [AWS Identity and Access Management (IAM) role and policies](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) configuration.\n> * Cluster [IAM role and Policies](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html) configuration.\n> * Amazon Virtual Private Cloud (VPC) endpoints for [private Clusters](https://docs.aws.amazon.com/eks/latest/userguide/private-clusters.html).\n> * Worker node [Amazon Machine Image (AMI) version](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html).\n> * VPC DHCP options set.\n> * Kubelet, container runtime and status.\n\n### Prerequisites:\n> * To check the kubelet container runtime and status, the Amazon EC2 instance must be managed by AWS Systems Manager. If your Amazon EC2 instance is not managed and online, this check is skipped.\n\n### Important:\n> * This runbook doesn't make any changes to your Amazon EKS cluster or your worker node.\n> * This runbook doesn't support worker nodes running Windows or Bottlerocket operating systems.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "ClusterName": {
      "type": "String",
      "description": "(Required) The name of the Amazon EKS cluster.",
      "allowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9-\\_]{0,99}$"
    },
    "WorkerID": {
      "type": "AWS::EC2::Instance::Id",
      "description": "(Required) The EC2 instance ID for the worker node which failed to join the Amazon EKS cluster."
    }
  },
  "mainSteps": [
    {
      "name": "validateIfClusterExistsAndActive",
      "description": "Confirms that the Amazon EKS cluster you specify in the `ClusterName` parameter exists and it is in `ACTIVE` state.",
      "action": "aws:assertAwsResourceProperty",
      "isCritical": true,
      "timeoutSeconds": 30,
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "Service": "eks",
        "Api": "DescribeCluster",
        "name": "{{ ClusterName }}",
        "PropertySelector": "$.cluster.status",
        "DesiredValues": [
          "ACTIVE"
        ]
      },
      "nextStep": "validateIfInstanceExistsAndRunning"
    },
    {
      "name": "validateIfInstanceExistsAndRunning",
      "description": "Confirms that the Amazon EC2 worker node you specify in the `WorkerID` parameter exists and it is in `running` state.",
      "action": "aws:assertAwsResourceProperty",
      "isCritical": true,
      "onFailure": "Abort",
      "timeoutSeconds": 30,
      "maxAttempts": 3,
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstanceStatus",
        "InstanceIds": [
          "{{ WorkerID }}"
        ],
        "PropertySelector": "$.InstanceStatuses[0].InstanceState.Name",
        "DesiredValues": [
          "running"
        ]
      },
      "nextStep": "TroubleshootWorkerNode"
    },
    {
      "name": "TroubleshootWorkerNode",
      "description": "Runs a Python script that helps identify possible causes for the worker node failing to join the cluster.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "isCritical": true,
      "isEnd": true,
      "inputs": {
        "InputPayload": {
          "ClusterName": "{{ ClusterName }}",
          "WorkerID": "{{ WorkerID }}"
        },
        "Handler": "main.script_handler",
        "Runtime": "python3.11",
        "Attachment": "artifact.zip"
      },
      "outputs": [
        {
          "Name": "Message",
          "Selector": "$.Payload.Message",
          "Type": "String"
        }
      ]
    }
  ],
  "outputs": [
    "TroubleshootWorkerNode.Message"
  ],
  "files": {
    "artifact.zip": {
      "checksums": {
        "SHA256": "c8969948c45b7bda8e54f36ab400917888ef9e3469b9110a81026086e40319b0"
      }
    }
  }
}
