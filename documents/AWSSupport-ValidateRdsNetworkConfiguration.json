{
  "description": "The **AWSSupport-ValidateRdsNetworkConfiguration** runbook helps you prevent an Amazon Relational Database Service (Amazon RDS), Amazon Aurora, or Amazon DocumentDB database instance being marked as `incompatible-network` state before performing the `ModifyDBInstance` or `StartDBInstance` operations. If your database instance is already in `incompatible-network` state, the runbook tries to identify the reason by checking the network configuration.\n\nThe runbook performs the following steps:\n> * Checks your current region elastic network interfaces quota.\n> * Checks if all the DB subnet group associated subnets exists.\n> * There are enough free IP addresses available in each subnet.\n> * Checks the Amazon Virtual Private Cloud (Amazon VPC) attributes (`enableDnsSupport` and `enableDnsHostnames`) are enabled if your Amazon RDS is publicly accessible.\n\nFor more information about troubleshooting `incompatible-network` state see [How do I resolve issues with an Amazon DocumentDB instance that is in an incompatible-network state?](https://repost.aws/knowledge-center/documentdb-incompatible-network) and [How do I resolve issues with an Amazon RDS database that is in an incompatible-network state?](https://repost.aws/knowledge-center/rds-incompatible-network)\n\n### Important\nFor Amazon Aurora or Amazon DocumentDB clusters please use the `InstanceIdentifier` as a parameter, not the `ClusterIdentifier` for Amazon RDS DB instances.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "DBInstanceIdentifier": {
      "type": "String",
      "description": "(Required) The Amazon Aurora or Amazon DocumentDB instance identifier.",
      "allowedPattern": "^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$",
      "maxChars": 63
    }
  },
  "mainSteps": [
    {
      "name": "assertRdsState",
      "action": "aws:assertAwsResourceProperty",
      "description": "Checks if the provided instance identifier exists and has any of the following states: available, stopped or incompatible-network.",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}",
        "PropertySelector": "$.DBInstances[0].DBInstanceStatus",
        "DesiredValues": [
          "available",
          "stopped",
          "incompatible-network"
        ]
      },
      "nextStep": "gatherRdsInformation",
      "onFailure": "Abort"
    },
    {
      "name": "gatherRdsInformation",
      "action": "aws:executeAwsApi",
      "description": "Gets details about the RDS instance properties and its network configuration.",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}"
      },
      "outputs": [
        {
          "Name": "Name",
          "Selector": "$.DBInstances[0].DBInstanceIdentifier",
          "Type": "String"
        },
        {
          "Name": "State",
          "Selector": "$.DBInstances[0].DBInstanceStatus",
          "Type": "String"
        },
        {
          "Name": "Engine",
          "Selector": "$.DBInstances[0].Engine",
          "Type": "String"
        },
        {
          "Name": "DBSubnetGroup",
          "Selector": "$.DBInstances[0].DBSubnetGroup",
          "Type": "StringMap"
        },
        {
          "Name": "DBVpcId",
          "Selector": "$.DBInstances[0].DBSubnetGroup.VpcId",
          "Type": "String"
        },
        {
          "Name": "PrimaryAZ",
          "Selector": "$.DBInstances[0].AvailabilityZone",
          "Type": "String"
        },
        {
          "Name": "SecondaryAZ",
          "Selector": "$.DBInstances[0].SecondaryAvailabilityZone",
          "Type": "String"
        },
        {
          "Name": "IsPublic",
          "Selector": "$.DBInstances[0].PubliclyAccessible",
          "Type": "Boolean"
        },
        {
          "Name": "IsMaz",
          "Selector": "$.DBInstances[0].MultiAZ",
          "Type": "Boolean"
        }
      ],
      "onFailure": "Abort",
      "nextStep": "checkEniQuota"
    },
    {
      "name": "checkEniQuota",
      "action": "aws:executeScript",
      "description": "Checks for the current available quota of Amazon ENI for the region.",
      "nextStep": "validateVpcAttributes",
      "onFailure": "Continue",
      "inputs": {
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport logging\nfrom typing import Any, Dict, Union\n\nimport boto3\nfrom botocore.errorfactory import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n# Network Interface QuotaCode\nENI_QUOTA_CODE = \"L-DF5E4CA3\"\n\n\ndef get_eni_quota_usage(events, context):\n    result: dict = {\"EniQuota\": {\"total\": 0, \"used\": 0, \"available\": 0}, \"Check\": {\"Status\": \"\", \"Detail\": []}}\n    # get region and partition\n    region = context[\"global:REGION\"]\n    partition = context[\"global:AWS_PARTITION\"]\n\n    service_quota = boto3.client(\"service-quotas\", region_name=region)\n\n    # Skip quota check for ISO partitions where Service Quotas is not available\n    if partition in [\"aws-iso\", \"aws-iso-b\"]:\n        status = \"PASSED\"\n        message_detail = \"ENI quota check skipped in ISO/ISO-B partition where Service Quotas is not available.\"\n        result[\"Check\"][\"Status\"] = status\n        result[\"Check\"][\"Detail\"] = [message_detail]\n        return result\n\n    ec2 = boto3.client(\"ec2\", region_name=region)\n\n    try:\n        service_quota = boto3.client(\"service-quotas\", region_name=region)\n        # define the options dictionary as per the get_service_quota API input parameters\n        options: Dict[Union[str, bytes], Any] = {}\n        options = {\"ServiceCode\": \"vpc\", \"QuotaCode\": ENI_QUOTA_CODE}\n\n        result[\"EniQuota\"][\"total\"] = int(service_quota.get_service_quota(**options)[\"Quota\"][\"Value\"])\n\n        # modify options dictonary to only have MaxResults which is needed by describe_network_interfaces\n        options = {\"MaxResults\": 1000}\n\n        while True:\n            nw_interfaces_response = ec2.describe_network_interfaces(**options)\n            result[\"EniQuota\"][\"used\"] += len(nw_interfaces_response[\"NetworkInterfaces\"])\n\n            if result[\"EniQuota\"][\"total\"] == result[\"EniQuota\"][\"used\"]:\n                break\n\n            try:\n                options[\"NextToken\"] = nw_interfaces_response[\"NextToken\"]\n            except KeyError:\n                break\n\n        result[\"EniQuota\"][\"available\"] = result[\"EniQuota\"][\"total\"] - result[\"EniQuota\"][\"used\"]\n\n        if result[\"EniQuota\"][\"available\"] > 16:\n            status = \"PASSED\"\n            message_detail = f\"Quota for Elastic Network Interface (ENIs) ({result['EniQuota']['available']}) is sufficient at the moment.\"\n        elif result[\"EniQuota\"][\"available\"] <= 16 and result[\"EniQuota\"][\"available\"] != 0:\n            status = \"WARNING\"\n            message_detail = f\"Quota for Elastic Network Interface (ENIs) ({result['EniQuota']['available']}) is sufficient at the moment, but please make sure to have more quota to accomodate ongoing changes.\\n\"\n        else:\n            status = \"FAILED\"\n            message_detail = \"Quota for Elastic Network Interface (ENIs) (0) is not sufficient at the moment.\\n\"\n\n        if status != \"PASSED\":\n            message_detail += \"o Either remove existing ENIs that are not in use or raise a limit increase request to increase the quota.\\n\"\n            message_detail += \"   [+] Request an increase: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html#request-increase\\n\"\n\n    except ClientError as error:\n        status = \"FAILED\"\n        message_detail = f\"Failed to call the API operation - {error.response['Error']['Code']}\\n\"\n        message_detail += \"o Please make sure that the user/role has the permission `servicequotas:GetServiceQuota`, if the permission is missing \\n  please provide the user/role with permissions and re-run the automation.\\n\"\n\n        log.error(f\"Failed to call the API operation - {error}\")\n\n    result[\"Check\"][\"Status\"] = status\n    result[\"Check\"][\"Detail\"] = message_detail.splitlines()\n\n    return result\n",
        "Handler": "get_eni_quota_usage",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "ENICheck",
          "Selector": "$.Payload.Check",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "validateVpcAttributes",
      "action": "aws:executeScript",
      "description": "Checks if the DNS related parameters are set to `true` if the instance is `PubliclyAccessible`.",
      "nextStep": "validateSubnetAttributes",
      "onFailure": "Continue",
      "inputs": {
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport logging\n\nimport boto3\nfrom botocore.errorfactory import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\ndef validate_vpc_attrs(events, context):\n    result: dict = {\n        \"Check\": {\n            \"Status\": \"SKIPPED\",\n            \"Detail\": [\"DB Instance is not PubliclyAccessible, so this check is not required.\"],\n        },\n    }\n\n    # get region VpcId and PubliclyAccessibility\n    region = context[\"global:REGION\"]\n    vpc_id = events.get(\"DBVpcId\")\n    rds_publicly_accessible = events.get(\"IsPublic\")\n\n    if rds_publicly_accessible:\n        try:\n            ec2 = boto3.client(\"ec2\", region_name=region)\n\n            dns_hostname_value = ec2.describe_vpc_attribute(Attribute=\"enableDnsHostnames\", VpcId=vpc_id)[\n                \"EnableDnsHostnames\"\n            ][\"Value\"]\n            dns_support_value = ec2.describe_vpc_attribute(Attribute=\"enableDnsSupport\", VpcId=vpc_id)[\n                \"EnableDnsSupport\"\n            ][\"Value\"]\n\n            if dns_hostname_value and dns_support_value:\n                status = \"PASSED\"\n                message_detail = (\n                    \"Value for both VPC attributes (`enableDnsHostnames` and `enableDnsSupport`) is set to `true`.\"\n                )\n            elif not dns_hostname_value and not dns_support_value:\n                status = \"FAILED\"\n                message_detail = (\n                    \"Value for both VPC attributes (`enableDnsHostnames` and `enableDnsSupport`) is set to `false`.\\n\"\n                )\n                message_detail += \"o Please set the value of the VPC attributes (`enableDnsHostnames` and `enableDnsSupport`) to `true`.\\n\"\n            elif not dns_hostname_value or not dns_support_value:\n                vpc_attr = \"enableDnsHostnames\" if not dns_hostname_value else \"EnableDnsSupport\"\n                status = \"FAILED\"\n                message_detail = f\"Value for `{vpc_attr}` VPC Attribute is `false`.\\n\"\n                message_detail += f\"o Please set the value of `{vpc_attr}` VPC attribute to `true`.\\n\"\n\n            if status == \"FAILED\":\n                message_detail += \"   [+] View and update DNS attributes for your VPC: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-updating\\n\"\n        except ClientError as error:\n            status = \"FAILED\"\n            message_detail = f\"Failed to call the API operation - {error.response['Error']['Code']}.\\n\"\n            message_detail += \"o Please make sure that the user/role has the permission `ec2:DescribeVpcAttribute`, if the permission is missing please \\n  provide the user/role with permissions and re-run the automation.\\n\"\n\n            log.error(f\"Failed to call the API operation - {error}\")\n\n        result[\"Check\"][\"Status\"] = status\n        result[\"Check\"][\"Detail\"] = message_detail.splitlines()\n\n        return result\n    else:\n        return result\n",
        "InputPayload": {
          "DBVpcId": "{{ gatherRdsInformation.DBVpcId }}",
          "IsPublic": "{{ gatherRdsInformation.IsPublic }}"
        },
        "Handler": "validate_vpc_attrs",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "VPCCheck",
          "Selector": "$.Payload.Check",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "validateSubnetAttributes",
      "action": "aws:executeScript",
      "description": "Validates the existence of subnets in the DBSubnetGroup and checks for available IPs for each subnet.",
      "nextStep": "generateReport",
      "onFailure": "Continue",
      "inputs": {
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\nimport logging\nfrom collections import Counter\n\nimport boto3\nfrom botocore.errorfactory import ClientError\n\nlog = logging.getLogger()\nlog.setLevel(logging.INFO)\n\n\ndef validate_subnets(events, context):\n    result: dict = {\n        \"Subnets\": {},\n        \"Checks\": {\"Existance\": {\"Status\": \"\", \"Detail\": []}, \"FreeIp\": {\"Status\": \"\", \"Detail\": []}, \"OtherAz\": {}},\n    }\n\n    # get the required parameters from events and context\n    region = context[\"global:REGION\"]\n    dbsubnet_group = events.get(\"DBSubnetGroup\")\n    primary_az = events.get(\"PrimaryAZ\")\n    is_maz = events.get(\"IsMaz\")\n    secondary_az = events.get(\"SecondaryAZ\")\n\n    # extract the subnets from the output of the DBSubnetGroup\n    result[\"Subnets\"] = {\n        i[\"SubnetIdentifier\"]: {\"AZ\": i[\"SubnetAvailabilityZone\"][\"Name\"], \"RdsAz\": \"\", \"IsPresent\": \"\"}\n        for i in dbsubnet_group[\"Subnets\"]\n    }\n    # count the subnets present availability zone-wise\n    total_subnets_in_region = dict(Counter([result[\"Subnets\"][i][\"AZ\"] for i in result[\"Subnets\"]]))\n\n    # variables to hold status of the checks\n    subcheck_status = \"\"\n    freeipcheck_status = \"\"\n\n    # variables to hold the detailed message/recommendations for the checks\n    subcheck_detailed_msg = \"\"\n    freeipcheck_detailed_msg = \"\"\n\n    try:\n        ec2 = boto3.client(\"ec2\", region_name=region)\n\n        # gather the information about available subnets and their respective FreeIPs\n        describe_subnets_op = ec2.describe_subnets(\n            Filters=[{\"Name\": \"subnet-id\", \"Values\": list(result[\"Subnets\"].keys())}]\n        )\n        available_subnets_ips = {i[\"SubnetId\"]: i[\"AvailableIpAddressCount\"] for i in describe_subnets_op[\"Subnets\"]}\n\n        for subnet in result[\"Subnets\"].keys():\n            if subnet in available_subnets_ips.keys():\n                result[\"Subnets\"][subnet][\"IsPresent\"] = True\n                result[\"Subnets\"][subnet][\"FreeIPs\"] = available_subnets_ips[subnet]\n            else:\n                result[\"Subnets\"][subnet][\"IsPresent\"] = False\n\n            # check if the subnet is required by RDS or not\n            if result[\"Subnets\"][subnet][\"AZ\"] == primary_az or result[\"Subnets\"][subnet][\"AZ\"] == secondary_az:\n                result[\"Subnets\"][subnet][\"RdsAz\"] = True\n            else:\n                result[\"Subnets\"][subnet][\"RdsAz\"] = False\n\n        if is_maz:\n            primaryaz_subnets = {\n                i: result[\"Subnets\"][i][\"FreeIPs\"]\n                for i in result[\"Subnets\"]\n                if result[\"Subnets\"][i][\"AZ\"] == primary_az and result[\"Subnets\"][i][\"IsPresent\"]\n            }\n            secondaryaz_subnets = {\n                i: result[\"Subnets\"][i][\"FreeIPs\"]\n                for i in result[\"Subnets\"]\n                if result[\"Subnets\"][i][\"AZ\"] == secondary_az and result[\"Subnets\"][i][\"IsPresent\"]\n            }\n\n            free_ips_primary = [primaryaz_subnets[i] for i in primaryaz_subnets]\n            free_ips_secondary = [secondaryaz_subnets[i] for i in secondaryaz_subnets]\n\n            # subnet existance and FreeIp check for RDS required Az\n            if total_subnets_in_region[primary_az] == len(primaryaz_subnets) and total_subnets_in_region[\n                secondary_az\n            ] == len(secondaryaz_subnets):\n                # subnets per availability zone and present subnets count matches\n                subcheck_status = \"PASSED\"\n                subcheck_detailed_msg = (\n                    f\"All subnets in `{primary_az}` and `{secondary_az}` availability zone exists.\\n\"\n                )\n            elif (\n                total_subnets_in_region[primary_az] == total_subnets_in_region[secondary_az] == 1\n                and len(primaryaz_subnets) == len(secondaryaz_subnets) == 1\n            ):\n                # subnets per availability zone and present subets are equal to 1\n                subcheck_status = \"PASSED\"\n                subcheck_detailed_msg = (\n                    f\"All subnets in `{primary_az}` and `{secondary_az}` availability zone exists.\\n\"\n                )\n            elif len(primaryaz_subnets) > 0 and len(secondaryaz_subnets) > 0:\n                # atleast one subnet is present per availability zone\n                subcheck_status = \"PASSED\"\n                subcheck_detailed_msg = f\"Subnet(s) in `{primary_az}` and `{secondary_az}` availability zone exists.\\n\"\n            elif len(primaryaz_subnets) > 0 and len(secondaryaz_subnets) == 0:\n                # no subnets in secondary availability zone\n                subcheck_status = \"FAILED\"\n                subcheck_detailed_msg = f\"Subnets in `{secondary_az}` availability zone does not exists.\\n\"\n\n                freeipcheck_status = \"SKIPPED\"\n                freeipcheck_detailed_msg = (\n                    f\"Check was skipped because availability zone `{secondary_az}` does not have the required subnet.\\n\"\n                )\n            elif len(primaryaz_subnets) == 0 and len(secondaryaz_subnets) > 0:\n                # no subnets present in primary availability zone\n                subcheck_status = \"FAILED\"\n                subcheck_detailed_msg = f\"Subnets in `{primary_az}` availability zone does not exists.\\n\"\n\n                freeipcheck_status = \"SKIPPED\"\n                freeipcheck_detailed_msg = (\n                    f\"Check was skipped because availability zone `{primary_az}` does not have the required subnet.\\n\"\n                )\n            else:\n                subcheck_status = \"FAILED\"\n                subcheck_detailed_msg = (\n                    f\"Subnets from both `{primary_az}` and `{secondary_az}` availability zone does not exists.\\n\"\n                )\n\n                freeipcheck_status = \"SKIPPED\"\n                freeipcheck_detailed_msg = f\"Check was skipped because both availability zone (`{primary_az}` and `{secondary_az}`) does not have the required subnet(s).\\n\"\n\n            if not freeipcheck_status:\n                if (sum(free_ips_primary) > 0 and sum(free_ips_secondary) == 0) or (\n                    sum(free_ips_primary) == 0 and sum(free_ips_secondary) > 0\n                ):\n                    # either availability zone has 0 IPs\n                    freeipcheck_status = \"FAILED\"\n                    freeipcheck_detailed_msg = f\"There are no sufficient available IPs in either `{secondary_az}` (FreeIPs: {sum(free_ips_secondary)}) or `{primary_az}` (FreeIPs: {sum(free_ips_primary)}) availability zone.\\n\"\n                elif sum(free_ips_primary) > 16 and sum(free_ips_secondary) > 16:\n                    # both availability zone have more than 16\n                    freeipcheck_status = \"PASSED\"\n                    freeipcheck_detailed_msg = (\n                        f\"There are sufficient available IPs in `{primary_az}` and `{secondary_az} availability zone.\\n\"\n                    )\n                elif (sum(free_ips_primary) > 16 and sum(free_ips_secondary) < 16) or (\n                    sum(free_ips_primary) < 16 and sum(free_ips_secondary) > 16\n                ):\n                    # either availability zone have less than 16\n                    freeipcheck_status = \"WARNING\"\n                    freeipcheck_detailed_msg = f\"At the moment, free IPs in availability zone `{secondary_az}` are {sum(free_ips_secondary)} and in `{primary_az}` are {sum(free_ips_primary)}. Recommendation is to have more than 16 FreeIPs.\\n\"\n                elif sum(free_ips_primary) < 16 and sum(free_ips_secondary) < 16:\n                    # both availability zone have less than 16\n                    freeipcheck_status = \"WARNING\"\n                    freeipcheck_detailed_msg = f\"At the moment, free IPs in availability zone `{secondary_az}` are {sum(free_ips_secondary)} and in `{primary_az}` are {sum(free_ips_primary)}. Recommendation is to have more than 16 FreeIPs.\\n\"\n        else:\n            primaryaz_subnets = {\n                i: result[\"Subnets\"][i][\"FreeIPs\"]\n                for i in result[\"Subnets\"]\n                if result[\"Subnets\"][i][\"AZ\"] == primary_az and result[\"Subnets\"][i][\"IsPresent\"]\n            }\n            free_ips_primary = [primaryaz_subnets[i] for i in primaryaz_subnets]\n\n            # subnet existance check for RDS AZ\n            if total_subnets_in_region[primary_az] == len(primaryaz_subnets):\n                # subnets per availability zone and present subnets count matches\n                subcheck_status = \"PASSED\"\n                subcheck_detailed_msg = f\"All subnets in `{primary_az}` availability zone exists.\\n\"\n            elif total_subnets_in_region[primary_az] == 1 and len(primaryaz_subnets) == 1:\n                # subnets per availability zone and present subets are equal to 1\n                subcheck_status = \"PASSED\"\n                subcheck_detailed_msg = f\"All subnets in `{primary_az}` availability zone exists.\\n\"\n            elif len(primaryaz_subnets) > 0:\n                # atleast one subnet is present per availability zone\n                subcheck_status = \"WARNING\"\n                subcheck_detailed_msg = f\"Some of the subnet(s) in `{primary_az}` availability zone exists.\\n\"\n            else:\n                subcheck_status = \"FAILED\"\n                subcheck_detailed_msg = f\"Subnets from `{primary_az}` availability zone does not exists.\\n\"\n\n                freeipcheck_status = \"SKIPPED\"\n                freeipcheck_detailed_msg = (\n                    f\"Check was skipped because availability zone `{primary_az}` does not the required subnet.\\n\"\n                )\n\n            if not freeipcheck_status:\n                if sum(free_ips_primary) > 16:\n                    freeipcheck_status = \"PASSED\"\n                    freeipcheck_detailed_msg = (\n                        f\"There are sufficient available IPs in `{primary_az}` availability zone.\\n\"\n                    )\n                elif sum(free_ips_primary) == 0:\n                    freeipcheck_status = \"FAILED\"\n                    freeipcheck_detailed_msg = (\n                        f\"There are no sufficient available IPs in `{primary_az}` availability zone.\\n\"\n                    )\n                else:\n                    freeipcheck_status = \"WARNING\"\n                    freeipcheck_detailed_msg = f\"At the moment, free IPs in availability zone `{primary_az}` are {sum(free_ips_primary)}. Recommendation is to have more than 16 FreeIPs.\\n\"\n\n            # checks for other AZs\n            remaining_azs = [i for i in total_subnets_in_region if i != primary_az]\n            remaining_azchecks = {i: {\"Subnet\": \"\", \"FreeIP\": \"\"} for i in remaining_azs}\n\n            for az in remaining_azs:\n                az_subnets = [i[\"SubnetId\"] for i in describe_subnets_op[\"Subnets\"] if i[\"AvailabilityZone\"] == az]\n                az_freeip = [available_subnets_ips[i] for i in available_subnets_ips.keys() if i in az_subnets]\n\n                # subnet check\n                if len(az_subnets) == total_subnets_in_region[az]:\n                    remaining_azchecks[az][\"Subnet\"] = \"PASSED\"\n                elif len(az_subnets) < total_subnets_in_region[az]:\n                    remaining_azchecks[az][\"Subnet\"] = \"WARNING\"\n                else:\n                    remaining_azchecks[az][\"Subnet\"] = \"FAILED\"\n\n                # freeip check\n                if sum(az_freeip) > 16:\n                    remaining_azchecks[az][\"FreeIP\"] = \"PASSED\"\n                elif sum(az_freeip) < 16 and sum(az_freeip) > 0:\n                    remaining_azchecks[az][\"FreeIP\"] = \"WARNING\"\n                else:\n                    remaining_azchecks[az][\"FreeIP\"] = \"FAILED\"\n\n                result[\"Checks\"][\"OtherAz\"] = remaining_azchecks\n\n        # add recommendation\n        if subcheck_status == \"FAILED\":\n            subcheck_detailed_msg += \"o Please restore the database from a latest snapshot that was taken, \\n   it is also recommended to take a snapshot before you perform Modify/Stop operation for the instance.\\n\"\n            subcheck_detailed_msg += \"   [+] Restoring from a DB snapshot : https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RestoreFromSnapshot.html\\n\"\n\n        if freeipcheck_status != \"PASSED\":\n            freeipcheck_detailed_msg += (\n                \"o Please free up some IPs before performing Modify/Stop opeartion on the instance.\\n\"\n            )\n            freeipcheck_detailed_msg += \"   [+] Learn why a subnet in your VPC has insufficient IP addresses : https://repost.aws/knowledge-center/subnet-insufficient-ips\\n\"\n    except ClientError as error:\n        subcheck_status = \"FAILED\"\n        subcheck_detailed_msg = f\"Failed to call the API operation - {error.response['Error']['Code']}.\\n\"\n        subcheck_detailed_msg += \"o Please make sure that the user/role has the permission `ec2:DescribeSubnets`, if the permission is missing \\n  please provide the user/role with permissions and re-run the automation.\\n\"\n\n        freeipcheck_status = \"FAILED\"\n        freeipcheck_detailed_msg = f\"Failed to call the API operation - {error.response['Error']['Code']}.\\n\"\n\n        log.error(f\"Failed to call the API operation - {error}\")\n\n    result[\"Checks\"][\"Existance\"][\"Status\"] = subcheck_status\n    result[\"Checks\"][\"Existance\"][\"Detail\"] = subcheck_detailed_msg.splitlines()\n\n    result[\"Checks\"][\"FreeIp\"][\"Status\"] = freeipcheck_status\n    result[\"Checks\"][\"FreeIp\"][\"Detail\"] = freeipcheck_detailed_msg.splitlines()\n\n    return result\n",
        "InputPayload": {
          "DBSubnetGroup": "{{ gatherRdsInformation.DBSubnetGroup }}",
          "PrimaryAZ": "{{ gatherRdsInformation.PrimaryAZ }}",
          "IsMaz": "{{ gatherRdsInformation.IsMaz }}",
          "SecondaryAZ": "{{ gatherRdsInformation.SecondaryAZ }}"
        },
        "Handler": "validate_subnets",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "SubnetValidation",
          "Selector": "$.Payload.Subnets",
          "Type": "StringMap"
        },
        {
          "Name": "SubnetChecks",
          "Selector": "$.Payload.Checks",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "generateReport",
      "action": "aws:executeScript",
      "description": "Generates a consolidated report including information about the checks performed and next steps if any steps failed.",
      "inputs": {
        "Script": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\n\n# check icons\nSTATUS = {\n    \"PASSED\": \"\\u2705\",  # Check Mark\n    \"WARNING\": \"\\u2757\",  # ! Symbol\n    \"FAILED\": \"\\u274C\",  # Red Cross Mark\n    \"SKIPPED\": \"\\u23E9\",  # Right-Pointing Double Triangle\n    \"ERROR\": \"\\u26D4\",  # Dash in between circle\n    \"SUCCESS\": \"\\u2705\",\n}\n\n\ndef generate_report(events, context):\n    rds_identifier = events.get(\"DBInstanceIdentifier\")\n    rds_state = events.get(\"State\")\n    rds_engine = events.get(\"Engine\")\n    rds_ismaz = events.get(\"IsMaz\")\n\n    eniquota_check = events.get(\"ENICheck\")\n    vpcattr_check = events.get(\"VPCCheck\")\n    subnets_check = events.get(\"SubnetChecks\")\n\n    # docdb aurora-postgresql postgres\n    if rds_engine.startswith(\"aurora\"):\n        instance_type = \"Aurora DB\"\n    elif rds_engine == \"docdb\":\n        instance_type = \"DocumentDB DB\"\n    else:\n        instance_type = \"RDS\"\n\n    report = []\n    cluster_notes = []\n    heading_text = [\n        f\"# AWS {instance_type} Network Configuration Checks: {rds_identifier} ({rds_state})\",\n        f\"## {STATUS['SUCCESS']} No Issue(s) Found\",\n        \"\\n### [Troubleshooting Results]\",\n    ]\n    check_messages = [\n        f\"1. Checking ENI Quota for region the {instance_type} Instance is in:\",\n        \"2. Checking VPC Attribute (`enableDnsHostname` & `enableDnsSupport`) settings:\",\n        f\"3. Checking if subnets required for {instance_type} exists or not:\",\n        \"4. Checking if Available IPs are sufficient per subnets that are required:\",\n        \"5. Checking if other Availability zone satisfy Check No# 3 & 4:\",\n    ]\n    # notes/disclaimer\n    notes_message = [\n        \"\\nDisclaimer: Please note that Check 5 is only valid if you are going to perform a MultiAZ conversion,\\nif you are not trying to perform a MultiAZ conversion then you can ignore the Check 5.\",\n        \"If any of the availability zone above has status as FAILED/WARNING then, please check the respective availability zone.\",\n    ]\n\n    # add notes for clsuters (aurora/docdb)\n    if (rds_engine.startswith(\"aurora\") or rds_engine == \"docdb\") and rds_state == \"incompatible-network\":\n        cluster_type = rds_engine.title() if rds_engine.startswith(\"aurora\") else \"DocumentDB\"\n        cluster_notes = [\n            f\"o To resolve the `incompatible-network` state for Amazon {cluster_type} Instance, please add a new instance to the cluster,\\n\"\n            \"   and delete the instance which is in `incompatible-network` state.\"\n        ]\n        if rds_engine == \"aurora\":\n            cluster_notes.append(\n                \"   [+] Adding Aurora Replicas to a DB cluster : https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-replicas-adding.html\"\n            )\n        else:\n            cluster_notes.append(\n                \"   [+] Adding an Amazon DocumentDB instance to a cluster : https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-add.html\"\n            )\n\n    # check if any of the checks failed\n    if (\n        eniquota_check[\"Status\"] == \"FAILED\"\n        or vpcattr_check[\"Status\"] == \"FAILED\"\n        or subnets_check[\"Existance\"][\"Status\"] == \"FAILED\"\n        or subnets_check[\"FreeIp\"][\"Status\"] == \"FAILED\"\n    ):\n        heading_text[1] = f\"### {STATUS['ERROR']} Issue(s) Found!!!\"\n\n    # add heading to the report\n    report += heading_text\n\n    # first check - eni quota\n    report.append(check_messages[0])\n    report.append(f\" {STATUS[eniquota_check['Status']]} [{eniquota_check['Status']}] : {eniquota_check['Detail'][0]}\\n\")\n\n    # second check - vpc attributes\n    report.append(check_messages[1])\n    report.append(f\" {STATUS[vpcattr_check['Status']]} [{vpcattr_check['Status']}] : {vpcattr_check['Detail'][0]}\\n\")\n\n    # third check - subnet existance\n    report.append(check_messages[2])\n    report.append(\n        f\" {STATUS[subnets_check['Existance']['Status']]} [{subnets_check['Existance']['Status']}] : {subnets_check['Existance']['Detail'][0]}\\n\"\n    )\n\n    # forth check - subnet existance\n    report.append(check_messages[3])\n    report.append(\n        f\" {STATUS[subnets_check['FreeIp']['Status']]} [{subnets_check['FreeIp']['Status']}] : {subnets_check['FreeIp']['Detail'][0]}\\n\"\n    )\n\n    # fifth check - other az if saz, skip if aurora or docdb\n    if (not rds_ismaz and subnets_check[\"OtherAz\"]) and not (rds_engine.startswith(\"aurora\") or rds_engine == \"docdb\"):\n        report.append(check_messages[4])\n        for az in subnets_check[\"OtherAz\"]:\n            report.append(f\"  * Availability Zone: {az}\")\n            report.append(\n                f\"      i. Subnet Existance Check: {STATUS[subnets_check['OtherAz'][az]['Subnet']]} [{subnets_check['OtherAz'][az]['Subnet']}]\"\n            )\n            report.append(\n                f\"     ii. Available IP Check: {STATUS[subnets_check['OtherAz'][az]['FreeIP']]} [{subnets_check['OtherAz'][az]['FreeIP']}]\"\n            )\n\n    # check next steps\n    report.append(\"\\n### [Next Steps]\")\n\n    if cluster_notes:\n        report += cluster_notes\n\n    if eniquota_check[\"Status\"] != \"PASSED\":\n        report += eniquota_check[\"Detail\"][1:]\n\n    if vpcattr_check[\"Status\"] != \"PASSED\":\n        report += vpcattr_check[\"Detail\"][1:]\n\n    if subnets_check[\"Existance\"][\"Status\"] != \"PASSED\":\n        report += subnets_check[\"Existance\"][\"Detail\"][1:]\n\n    if subnets_check[\"FreeIp\"][\"Status\"] != \"PASSED\" and subnets_check[\"FreeIp\"][\"Status\"] != \"SKIPPED\":\n        report += subnets_check[\"FreeIp\"][\"Detail\"][1:]\n\n    if heading_text[1] == f\"## {STATUS['SUCCESS']} No Issue(s) Found\" and (\n        eniquota_check[\"Status\"]\n        == subnets_check[\"Existance\"][\"Status\"]\n        == subnets_check[\"FreeIp\"][\"Status\"]\n        == \"PASSED\"\n        and vpcattr_check[\"Status\"] in [\"SKIPPED\", \"PASSED\"]\n    ):\n        report.append(\n            f\"\\n{STATUS['SUCCESS']} All the checks has passed so the {instance_type} Network configuration is correct.\"\n        )\n\n    # add notes/disclaimer if not aurora/docdb\n    if (not rds_ismaz and subnets_check[\"OtherAz\"]) and not (rds_engine.startswith(\"aurora\") or rds_engine == \"docdb\"):\n        report += notes_message\n\n    return \"\\n\".join(report)\n",
        "InputPayload": {
          "ENICheck": "{{ checkEniQuota.ENICheck }}",
          "VPCCheck": "{{ validateVpcAttributes.VPCCheck }}",
          "SubnetChecks": "{{ validateSubnetAttributes.SubnetChecks }}",
          "Engine": "{{ gatherRdsInformation.Engine }}",
          "State": "{{ gatherRdsInformation.State }}",
          "IsMaz": "{{ gatherRdsInformation.IsMaz }}",
          "DBInstanceIdentifier": "{{ DBInstanceIdentifier }}"
        },
        "Handler": "generate_report",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "Report",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isEnd": true,
      "onFailure": "Abort"
    }
  ],
  "outputs": [
    "generateReport.Report"
  ]
}
