{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-TroubleshootElasticBeanstalk** runbook helps you troubleshoot the potential reasons why your AWS Elastic Beanstalk environment is in a `Degraded` or `Severe` state. This automation checks the following AWS resources associated with your Elastic Beanstalk environment:\n\n> * Configuration details for a load balancer, AWS CloudFormation stack, Amazon EC2 Auto Scaling group, Amazon Elastic Compute Cloud (Amazon EC2) instances, and virtual private cloud (VPC).\n> * Network configuration issues with the associated security group rules, route tables, and network access control lists (ACLs) associated with your subnets.\n> * Verifies connectivity to the Elastic Beanstalk endpoints and public internet access.\n> * Verifies the status of the load balancer.\n> * Verifies the status of the Amazon EC2 instances.\n> * Retrieves a log bundle from your Elastic Beanstalk environment, and optionally uploads the files to AWS Support.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "ApplicationName": {
      "type": "String",
      "description": "(Required) The name of your Elastic Beanstalk application.",
      "allowedPattern": "^[A-Za-z0-9\\_\\'\\.\\,\\+\\-\\[\\]\\(\\)]{1,100}$"
    },
    "EnvironmentName": {
      "type": "String",
      "description": "(Required) The name of your Elastic Beanstalk environment.",
      "allowedPattern": "^[a-zA-Z0-9]{1}[a-zA-Z0-9\\-]{2,38}[a-zA-Z0-9]{1}$"
    },
    "AWSS3UploaderLink": {
      "default": "",
      "type": "String",
      "description": "(Optional) An URL provided to you by AWS Support to upload the log bundle from your Elastic Beanstalk environment to the AWS Support S3 Uploader. This option is only available to customers who have purchased an AWS Support plan, and have opened a Support case. Please make sure you are not sending any sensitive data, including access credentials and data bound by special requirements or regulations.",
      "allowedPattern": "^$|https://d1mg6achc83nsz.cloudfront.net/[a-z0-9]{1,64}/us-east-1"
    }
  },
  "mainSteps": [
    {
      "name": "IAMPermissionsCheck",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "action": "aws:executeScript",
      "isCritical": true,
      "description": "Verifies if the AWS Identity and Access Management (IAM) principal who started the automation has the required permissions to perform all of the actions defined in the runbook.",
      "timeoutSeconds": 60,
      "inputs": {
        "Handler": "iam_permission_handler.iam_permission_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "BranchOnProceedOnlyIfUserHasPermission"
    },
    {
      "name": "BranchOnProceedOnlyIfUserHasPermission",
      "description": "Proceeds with the tests execution if the principal running the automation has all the required permissions or generates a report, if not.",
      "action": "aws:branch",
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "Variable": "{{ IAMPermissionsCheck.out }}",
            "StringEquals": "OK",
            "NextStep": "GetEnvironmentDetails"
          }
        ],
        "Default": "GenerateReport"
      },
      "isEnd": false
    },
    {
      "name": "GetEnvironmentDetails",
      "description": "Collects information about the Elastic Beanstalk environment including the load balancer, AWS CloudFormation stack, Amazon EC2 Auto Scaling group, Amazon EC2 instances, and Amazon VPC configuration.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "isCritical": true,
      "timeoutSeconds": 180,
      "maxAttempts": 1,
      "inputs": {
        "InputPayload": {
          "EnvironmentName": "{{ EnvironmentName }}",
          "ApplicationName": "{{ ApplicationName }}"
        },
        "Handler": "get_environment_details.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "EnvironmentType",
          "Selector": "$.Payload.EnvironmentType",
          "Type": "String"
        },
        {
          "Name": "EC2Subnet",
          "Selector": "$.Payload.EC2Subnet",
          "Type": "StringList"
        },
        {
          "Name": "LBSubnets",
          "Selector": "$.Payload.LBSubnets",
          "Type": "StringList"
        },
        {
          "Name": "EC2Security",
          "Selector": "$.Payload.EC2Security",
          "Type": "StringList"
        },
        {
          "Name": "ELBSecurity",
          "Selector": "$.Payload.ELBSecurity",
          "Type": "StringList"
        },
        {
          "Name": "VPC",
          "Selector": "$.Payload.VPC",
          "Type": "String"
        },
        {
          "Name": "LoadBalancer",
          "Selector": "$.Payload.LoadBalancer",
          "Type": "String"
        },
        {
          "Name": "LoadBalancerType",
          "Selector": "$.Payload.LoadBalancerType",
          "Type": "String"
        },
        {
          "Name": "CloudFormation",
          "Selector": "$.Payload.CloudFormation",
          "Type": "String"
        },
        {
          "Name": "EC2Instances",
          "Selector": "$.Payload.EC2Instances",
          "Type": "StringList"
        },
        {
          "Name": "EnvironmentName",
          "Selector": "$.Payload.EnvironmentName",
          "Type": "String"
        },
        {
          "Name": "ApplicationName",
          "Selector": "$.Payload.ApplicationName",
          "Type": "String"
        }
      ],
      "nextStep": "CheckVPCSubnets"
    },
    {
      "name": "CheckVPCSubnets",
      "description": "Checks the routing tables and the network ACLs associated with the subnets in your Amazon VPC for network connectivity issues.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "onCancel": "Abort",
      "timeoutSeconds": 180,
      "maxAttempts": 1,
      "inputs": {
        "InputPayload": {
          "EnvironmentType": "{{ GetEnvironmentDetails.EnvironmentType }}",
          "VPC": "{{ GetEnvironmentDetails.VPC }}",
          "LBSubnets": "{{ GetEnvironmentDetails.LBSubnets }}",
          "EC2Subnet": "{{ GetEnvironmentDetails.EC2Subnet }}"
        },
        "Handler": "check_vpcsubnets.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "CheckSecurityGroups"
    },
    {
      "name": "CheckSecurityGroups",
      "description": "Checks the security group rules associated with your Amazon EC2 instances for network connectivity issues.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "onCancel": "Abort",
      "timeoutSeconds": 180,
      "maxAttempts": 1,
      "inputs": {
        "InputPayload": {
          "EnvironmentType": "{{ GetEnvironmentDetails.EnvironmentType }}",
          "EC2Security": "{{ GetEnvironmentDetails.EC2Security }}",
          "ELBSecurity": "{{ GetEnvironmentDetails.ELBSecurity }}"
        },
        "Handler": "check_securitygroups.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "CheckEc2Health"
    },
    {
      "name": "CheckEc2Health",
      "description": "Verifies the status checks for the Amazon EC2 instances.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "onCancel": "Abort",
      "timeoutSeconds": 180,
      "maxAttempts": 1,
      "inputs": {
        "InputPayload": {
          "EnvironmentName": "{{ GetEnvironmentDetails.EnvironmentName }}",
          "ApplicationName": "{{ GetEnvironmentDetails.ApplicationName }}",
          "EnvironmentType": "{{ GetEnvironmentDetails.EnvironmentType }}",
          "LoadBalancer": "{{ GetEnvironmentDetails.LoadBalancer }}",
          "LoadBalancerType": "{{ GetEnvironmentDetails.LoadBalancerType }}"
        },
        "Handler": "check_ec2_health.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "CollectLogsLink"
    },
    {
      "name": "CollectLogsLink",
      "description": "Generates a link for a log bundle of your Elastic Beanstalk environment.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "onCancel": "Abort",
      "timeoutSeconds": 180,
      "maxAttempts": 1,
      "inputs": {
        "InputPayload": {
          "EnvironmentName": "{{ GetEnvironmentDetails.EnvironmentName }}",
          "ApplicationName": "{{ GetEnvironmentDetails.ApplicationName }}"
        },
        "Handler": "generate_log_link.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "UploadLogs"
    },
    {
      "name": "UploadLogs",
      "description": "Uploads the log bundle to AWS Support.",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "onCancel": "Abort",
      "timeoutSeconds": 180,
      "maxAttempts": 2,
      "inputs": {
        "InputPayload": {
          "EnvironmentName": "{{ GetEnvironmentDetails.EnvironmentName }}",
          "S3Uploader": "{{ AWSS3UploaderLink }}",
          "EC2Instances": "{{ GetEnvironmentDetails.EC2Instances }}"
        },
        "Handler": "collect_bundle_logs.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload.FinalResult",
          "Type": "String"
        }
      ],
      "nextStep": "GenerateReport"
    },
    {
      "name": "GenerateReport",
      "description": "Generates a report of action items to assist the troubleshooting of the impaired Elastic Beanstalk environment.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "onCancel": "Abort",
      "isCritical": true,
      "timeoutSeconds": 180,
      "maxAttempts": 2,
      "inputs": {
        "InputPayload": {
          "IAMPermissionsCheck": "{{ IAMPermissionsCheck.out }}",
          "CheckVPCSubnets": "{{ CheckVPCSubnets.out }}",
          "CheckSecurityGroups": "{{ CheckSecurityGroups.out }}",
          "CheckEc2Health": "{{ CheckEc2Health.out }}",
          "CollectLogsLink": "{{ CollectLogsLink.out }}",
          "UploadLogs": "{{ UploadLogs.out }}"
        },
        "Handler": "finish_execution.script_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "out",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "5bacbe74c552cd6cac4af8b94bbfc4e9864ad3dc2d8ae542098176c79eab861f"
      }
    }
  },
  "outputs": [
    "GenerateReport.out"
  ]
}
