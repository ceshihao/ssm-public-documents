{
  "description": "## Id\nAWSResilienceHub-PurgeSQSQueueSOP_2021-03-11\n\n## Intent\nCleans up the given queue\n\n## Type\nSOP\n\n## Risk\nHigh\n\n## Requirements:\n  * SQS Queue\n\n## Permissions required for AutomationAssumeRole\n  * sqs:PurgeQueue\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: ARN of the IAM role with permissions listed above\n\n### (Required) QueueUrl\n  * type: String\n  * description: The URL of the SQS Queue\n\n## Details\nThe document purges the queue using API and waits one minute for purge to complete\n\n## Steps executed in normal flow\n  * RecordStartTime\n  * PurgeQueue\n  * SleepUntilCompletionOfPurgeQueue\n  * OutputRecoveryTime\n\n## Outputs\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: SOP execution time in seconds",
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "QueueUrl": {
      "type": "String",
      "description": "(Required) The URL of the SQS Queue"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    }
  },
  "outputs": [
    "OutputRecoveryTime.RecoveryTime"
  ],
  "mainSteps": [
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "PurgeQueue",
      "description": "Call SQS API to purge SQS queue",
      "action": "aws:executeAwsApi",
      "maxAttempts": 3,
      "inputs": {
        "Service": "sqs",
        "Api": "PurgeQueue",
        "QueueUrl": "{{QueueUrl}}"
      }
    },
    {
      "name": "SleepUntilCompletionOfPurgeQueue",
      "description": "Sleep as the message deletion process takes up to 60 seconds",
      "action": "aws:sleep",
      "inputs": {
        "Duration": "PT60S"
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
