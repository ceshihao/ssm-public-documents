{
  "description": "The **AWSSupport-TroubleshootLambdaS3Event** automation runbook helps to troubleshoot issues with Amazon Simple Storage Service (Amazon S3) event notification configuration for AWS Lambda function. It checks if the event notification of your Amazon S3 bucket is properly configured for your AWS Lambda function, if a configured filter rule contains any special characters that prevent notification from being delivered as expected, and if the resource policy of the AWS Lambda function allows Amazon S3 to deliver event notification to the AWS Lambda function. It generates a report from the results of these checks and suggests possible remedial actions. For more information on troubleshooting issues with Amazon S3 event notification for AWS Lambda function, see [Why do I get the error \"Unable to validate the following destination configurations\" when I create an Amazon S3 Event Notification?](https://repost.aws/knowledge-center/lambda-invoke-error-s3-bucket-permission) and [Why doesn't my Amazon S3 event notification invoke my Lambda function?](https://repost.aws/knowledge-center/lambda-configure-s3-event-notification).",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "LambdaFunctionArn": {
      "type": "String",
      "description": "(Required) The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 event notifications will be delivered to.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$"
    },
    "S3BucketName": {
      "type": "AWS::S3::Bucket::Name",
      "description": "(Required) The Amazon S3 bucket name that you configure an event notification for the AWS Lambda function."
    }
  },
  "mainSteps": [
    {
      "name": "CheckS3BucketExistence",
      "action": "aws:executeAwsApi",
      "nextStep": "CheckLambdaFunctionExistence",
      "description": "Checks if Amazon S3 bucket provided in the `S3BucketName` exists.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "s3",
        "Api": "HeadBucket",
        "Bucket": "{{ S3BucketName }}"
      }
    },
    {
      "name": "CheckLambdaFunctionExistence",
      "action": "aws:executeAwsApi",
      "nextStep": "AnalyzeS3EventNotification",
      "description": "Checks if AWS Lambda function provided in the `LambdaFunctionArn` exists.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "Service": "lambda",
        "Api": "GetFunction",
        "FunctionName": "{{ LambdaFunctionArn }}"
      }
    },
    {
      "name": "AnalyzeS3EventNotification",
      "action": "aws:executeScript",
      "nextStep": "AnalyzeLambdaFunctionResourcePolicy",
      "description": "Retrieves bucket notification configurations for the provided Amazon S3 bucket and checks if it contains a configuration to send event notification to the AWS Lambda function. It also checks if a configured filter rule contains any special characters that prevent notifications from being delivered as expected.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{ S3BucketName }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}"
        },
        "Script": "import json\nimport re\n\nimport boto3\nimport botocore\n\ns3 = boto3.client(\"s3\")\n\n\ndef get_lambda_function_config(bucket_name):\n    lambda_function_config: list = []\n\n    try:\n        response = s3.get_bucket_notification_configuration(Bucket=bucket_name)\n        if \"LambdaFunctionConfigurations\" in response:\n            lambda_function_config = response[\"LambdaFunctionConfigurations\"]\n\n        return lambda_function_config\n\n    except botocore.exceptions.ClientError as error:\n        if error.response[\"Error\"][\"Code\"] == \"NoSuchBucket\":\n            raise RuntimeError(\n                f\"Error: The Amazon S3 bucket '{bucket_name}' does not exist. Please make sure if you provided the right bucket for 'S3BucketName' parameter.\"\n            )\n        else:\n            raise RuntimeError(\n                f\"Error: Could not retrieve bucket notification configuration for the Amazon S3 bucket '{bucket_name}' due to an error: {str(error)}\"\n            )\n\n\ndef get_matching_config_list(lambda_function_config, provided_lambda_arn):\n    config_list: list = []\n    for config in lambda_function_config:\n        configured_lambda_arn = config[\"LambdaFunctionArn\"]\n        if provided_lambda_arn == configured_lambda_arn:\n            config_list.append(config)\n\n    return config_list\n\n\ndef get_special_char_filter_rules(config):\n    filter_rules: list = []\n    if \"Filter\" not in config or \"Key\" not in config[\"Filter\"] or \"FilterRules\" not in config[\"Filter\"][\"Key\"]:\n        return filter_rules\n\n    pattern = re.compile('[$&+,:;=?@\" \"]')\n    for rule in config[\"Filter\"][\"Key\"][\"FilterRules\"]:\n        if pattern.search(rule[\"Value\"]) is not None:\n            filter_rules.append(\n                {\n                    \"Name\": rule[\"Name\"],\n                    \"Type\": \"SpecialChar\",\n                }\n            )\n        else:\n            if rule[\"Value\"] == \"*\" or rule[\"Value\"] == \".*\":\n                filter_rules.append(\n                    {\n                        \"Name\": rule[\"Name\"],\n                        \"Type\": \"Wildcard\",\n                    }\n                )\n\n    return filter_rules\n\n\ndef handler(event, _):\n    bucket_name = event.get(\"S3BucketName\", \"\")\n    lambda_arn = event.get(\"LambdaFunctionArn\", \"\")\n\n    report_str = (\n        \"\\n{:-<55}\".format(\"\")\n        + \"\\n{:^55}\".format(\"S3 Event Notification Configuration Analysis Result\")\n        + \"\\n{:-<55}\".format(\"\")\n        + \"\\n\\n\"\n    )\n\n    lambda_function_config = get_lambda_function_config(bucket_name)\n    matching_config_list = get_matching_config_list(lambda_function_config, lambda_arn)\n    if not matching_config_list:\n        report_str += (\n            \"!!! Action Required !!!\\n\"\n            + f\"No event notification configuration found for the AWS Lambda function {lambda_arn}. Please create one following the documentation below.\\n\"\n            + \"\\n\"\n            + \"- Enabling and configuring event notifications using the Amazon S3 console\\n\"\n            + \"https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-event-notifications.html\\n\"\n            + \"\\n\"\n        )\n        return {\"Report\": report_str}\n\n    else:\n        report_str += (\n            f\"Event notification configuration found for the AWS Lambda function '{lambda_arn}' as follows:\\n\\n\"\n        )\n\n    for config in matching_config_list:\n        report_str += (\n            f\"Configuration ID: {config['Id']}\\n\" + \"---------------\\n\" + f\"* Events: {json.dumps(config['Events'])}\\n\"\n        )\n        if \"Filter\" in config and \"Key\" in config[\"Filter\"] and \"FilterRules\" in config[\"Filter\"][\"Key\"]:\n            report_str += f\"* Filter Rules: {json.dumps(config['Filter']['Key']['FilterRules'])}\\n\\n\"\n\n        special_char_rules = get_special_char_filter_rules(config)\n        if not special_char_rules:\n            report_str += \"--> No special characters or wildcard character ('*') found in filter rules.\\n\\n\\n\"\n        else:\n            for rule in special_char_rules:\n                report_str += f\"!!! Action Required !!! (Rule: {rule['Name']}) \\n\"\n                if rule[\"Type\"] == \"SpecialChar\":\n                    report_str += \"Special characters found in the value of the rule. You must enter them in URL-encoded (percent-encoded) format: https://www.w3schools.com/tags/ref_urlencode.asp\\n\\n\"\n                else:\n                    report_str += \"Wildcard character '*' found in the value of the rule. A wildcard character '*' cannot be used in filters as a prefix or suffix to represent any character.\\n\\n\"\n            report_str += (\n                \"For more information, see the 'Note' section in the documentation below.\\n\"\n                + \"\\n\"\n                + \"- Configuring event notifications using object key name filtering\\n\"\n                + \"https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html\\n\"\n            )\n\n    return {\"Report\": report_str}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "Report",
          "Selector": "$.Payload.Report",
          "Type": "String"
        }
      ]
    },
    {
      "name": "AnalyzeLambdaFunctionResourcePolicy",
      "action": "aws:executeScript",
      "nextStep": "GenerateReport",
      "description": "Checks if the resource policy of the AWS Lambda function allows Amazon S3 to deliver event notifications to the AWS Lambda function.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{ S3BucketName }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}"
        },
        "Script": "import json\nimport uuid\n\nimport boto3\nimport botocore\n\n_lambda = boto3.client(\"lambda\")\n\n\ndef get_resource_policy(lambda_arn):\n\n    policy: dict = {\"Statement\": []}\n    try:\n        response = _lambda.get_policy(FunctionName=lambda_arn)\n        policy = json.loads(response[\"Policy\"])\n        return policy\n\n    except botocore.exceptions.ClientError as error:\n        # Assuming the specified Lambda function (or its version/alias) does not have resource policy configured since function existence has already been confirmed in the previous step\n        if error.response[\"Error\"][\"Code\"] == \"ResourceNotFoundException\":\n            return policy\n        else:\n            raise RuntimeError(\n                f\"Error: Could not retrieve resource policy for the AWS Lambda function '{lambda_arn}' due to an error: {str(error)}\"\n            ) from None\n\n\ndef is_bucket_allowed_to_invoke(policy, bucket):\n    is_allowed = False\n    for statement in policy[\"Statement\"]:\n        if statement[\"Action\"] != \"lambda:InvokeFunction\":\n            continue\n\n        if (\n            \"Service\" not in statement[\"Principal\"]\n            or statement[\"Principal\"][\"Service\"] != \"s3.amazonaws.com\"\n            or statement[\"Effect\"] != \"Allow\"\n        ):\n            continue\n\n        if \"Condition\" not in statement:\n            continue\n\n        for key in statement[\"Condition\"]:\n            if key != \"ArnLike\":\n                continue\n\n            if statement[\"Condition\"][key][\"AWS:SourceArn\"].split(\":\", 6)[5] == bucket:\n                is_allowed = True\n                break\n\n    return is_allowed\n\n\ndef handler(event, context):\n    bucket_name = event.get(\"S3BucketName\", \"\")\n    lambda_arn = event.get(\"LambdaFunctionArn\", \"\")\n    account_id = context[\"global:ACCOUNT_ID\"]\n\n    report_str = (\n        \"\\n{:-<55}\".format(\"\")\n        + \"\\n{:^55}\".format(\"Lambda Function Resource Policy Analysis Result\")\n        + \"\\n{:-<55}\".format(\"\")\n        + \"\\n\\n\"\n    )\n\n    resource_policy = get_resource_policy(lambda_arn)\n\n    if is_bucket_allowed_to_invoke(resource_policy, bucket_name):\n        report_str += (\n            f\"Resource policy permission for the Lambda function '{lambda_arn}' exists and is correct.\\n\"\n            + \"If an event type matches and you continue to observe an issue, please check and configure your Lambda concurrency to handle concurrent executions of incoming Amazon S3 event notifications.\\n\\n\"\n        )\n    else:\n        statement_id = f\"{account_id}_s3_notification_for_lambda_{uuid.uuid4()}\"\n        report_str += (\n            \"!!! Action Required !!!\\n\"\n            + f\"The provided AWS Lambda function '{lambda_arn}' does not have resource policy configured for the Amazon S3 bucket {bucket_name}. Please configure one by following the tutorial below.\\n\\n\"\n            + \"- Tutorial: Using an Amazon S3 trigger to invoke a Lambda function\\n\"\n            + \"https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html\\n\\n\"\n            + \"Alternatively, you can configure resource policy by executing the following AWS CLI command.\\n\"\n            + \"```\\n\"\n            + f\"aws lambda add-permission --function-name {lambda_arn} --action lambda:InvokeFunction --statement-id {statement_id} --principal s3.amazonaws.com --source-arn arn:aws:s3:::{bucket_name} --source-account {account_id}\\n\"\n            + \"```\\n\\n\"\n        )\n\n    return {\"Report\": report_str}\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      },
      "outputs": [
        {
          "Name": "Report",
          "Selector": "$.Payload.Report",
          "Type": "String"
        }
      ]
    },
    {
      "name": "GenerateReport",
      "action": "aws:executeScript",
      "isEnd": true,
      "description": "Consolidates `Report` outputs from the `AnalyzeS3EventNotification` and `AnalyzeLambdaFunctionResourcePolicy` steps, and generates a finalized report.",
      "timeoutSeconds": 600,
      "onFailure": "Abort",
      "isCritical": true,
      "inputs": {
        "InputPayload": {
          "S3BucketName": "{{ S3BucketName }}",
          "LambdaFunctionArn": "{{ LambdaFunctionArn }}",
          "S3EventNotificationReport": "{{ AnalyzeS3EventNotification.Report }}",
          "LambdaFunctionResourcePolicyReport": "{{ AnalyzeLambdaFunctionResourcePolicy.Report }}"
        },
        "Script": "def handler(event, _):\n    bucket_name = event.get(\"S3BucketName\", \"\")\n    lambda_arn = event.get(\"LambdaFunctionArn\", \"\")\n    s3_notification_report = event.get(\"S3EventNotificationReport\", \"\")\n    lambda_resource_policy_report = event.get(\"LambdaFunctionResourcePolicyReport\", \"\")\n\n    report_str = (\n        \"\\n\\n\\n+-+-+ AWSSupport-TroubleshootS3Lambda Runbook Report +-+-+\"\n        + \"\\n\\n\"\n        + \"The runbook was executed against following resources:\\n\"\n        + \"\\n\"\n        + f\"* Amazon S3 Bucket: {bucket_name}\\n\"\n        + f\"* AWS Lambda Function: {lambda_arn}\\n\"\n        + \"\\n\"\n        + \"Please read each report below and take any action if necessary.\\n\\n\"\n        + s3_notification_report\n        + lambda_resource_policy_report\n    )\n\n    return report_str\n",
        "Handler": "handler",
        "Runtime": "python3.11"
      }
    }
  ],
  "outputs": [
    "GenerateReport.OutputPayload"
  ]
}
