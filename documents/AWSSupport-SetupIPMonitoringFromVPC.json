{
  "schemaVersion": "0.3",
  "description": "The **AWSSupport-SetupIPMonitoringFromVPC** runbook helps to monitor a set of targets IPv4 and/or IPv6 addresses by continuously running `ping`, `MTR`, `traceroute`, and `tracetcp` tests on a specific interval. The runbook performs the tests by creating an Amazon Elastic Compute Cloud (Amazon EC2) instance in a specified subnet using AWS CloudFormation. The test results are processed by the Amazon CloudWatch agent which pushes the log events to Amazon CloudWatch Logs. The runbook creates metric filters and an Amazon CloudWatch dashboard so you can visualize average `ping` latency (using the average round-trip time) and `ping` packet loss statistics.\n\nThe CloudWatch Logs data can be used for network troubleshooting and analysis of pattern/trends. You can manually configure Amazon CloudWatch alarms with Amazon SNS notifications when ping packet loss and/or latency reach a specific threshold. The data can also be used when opening an AWS Support case to help isolate and reduce the time to resolution when investigating a network issue.\n\nUsing this runbook incurs costs to your AWS account for the running time of the Amazon EC2 instance, the Amazon CloudWatch Logs, and the Amazon CloudWatch dashboard. For more details, see [Amazon EC2 Pricing](https://aws.amazon.com/ec2/pricing/) and [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing).\n\nTo clean up resources created by this runbook, you can manually delete the AWS CloudFormation stack that is used to provision the Amazon EC2 instance, the Amazon CloudWatch logs, and the Amazon CloudWatch dashboard.\n\n#### Important:\n> * By default, this runbook creates an AWS Identity and Access Management (IAM) instance profile, and a security group that are used by the EC2 instance. You can optionally specify an existing IAM instance profile and/or security group.\n> * By default, the Amazon CloudWatch dashboard and logs are retained when the AWS CloudFormation stack is deleted. You can change this behavior by setting the `RetainDashboardAndLogsOnDeletion` parameter to `False`.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.",
      "default": ""
    },
    "SubnetId": {
      "type": "String",
      "description": "(Required) The subnet ID for the monitor instance. **Note:** If you specify a private subnet, make sure it allows access for the test instance to connect to the monitoring IPs, and to the Amazon CloudWatch and AWS Systems Manager service endpoints.",
      "allowedPattern": "^subnet-[a-f0-9]{8,17}$"
    },
    "TargetIPs": {
      "type": "String",
      "description": "(Required) The comma separated list of IPv4s and/or IPv6s to monitor. No spaces allowed. Maximum size is 255 characters. **Note**: If you provide an invalid or duplicated IP, the automation will fail and rollback the test setup.",
      "allowedPattern": "^[0-9a-fA-F.:,]{6,255}$"
    },
    "CloudWatchLogGroupNamePrefix": {
      "description": "(Optional) The prefix name that will be used for the Amazon CloudWatch Logs log groups for the test results.",
      "type": "String",
      "default": "/AWSSupport-SetupIPMonitoringFromVPC",
      "allowedPattern": "^[0-9a-zA-Z_.#/\\-]{1,512}$"
    },
    "CloudWatchLogGroupRetentionInDays": {
      "description": "(Optional) The number of days you want to set the log data retention setting for the Amazon CloudWatch logs. **Note:** The CloudWatch Logs log retention feature deletes the log events in a stream based on retention policy. It doesn't delete log streams or log groups.",
      "type": "String",
      "allowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653"
      ],
      "default": "7"
    },
    "InstanceType": {
      "type": "String",
      "description": "(Optional) The Amazon EC2 instance type for the test instance. Default size: `t3.micro`.",
      "default": "t3.micro",
      "allowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t4g.micro",
        "t4g.small",
        "t4g.medium",
        "t4g.large"
      ]
    },
    "TestInstanceSecurityGroupId": {
      "type": "String",
      "description": "(Optional) The security group ID for the test instance. If not specified, the automation creates one during the instance creation. Make sure the security group allows outbound access to the monitoring IPs.",
      "default": "",
      "allowedPattern": "^$|^sg-[a-f0-9]{8,17}$"
    },
    "TestInstanceProfileName": {
      "type": "String",
      "description": "(Optional) The name of an existing IAM instance profile for the test instance. If not specified, the automation creates one during the instance creation. The role must have the following permissions: `logs:CreateLogStream`, `logs:DescribeLogGroups`, `logs:DescribeLogStreams`, and `logs:PutLogEvents` and the AWS Managed Policy `AmazonSSMManagedInstanceCore`. For more information, see [Create IAM roles to use with the CloudWatch agent on Amazon EC2 instances](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html).",
      "default": "",
      "allowedPattern": "^$|^[\\w+=,.@-]{1,128}$"
    },
    "TestInterval": {
      "type": "String",
      "description": "(Optional) The number of minutes between test intervals. The default value is `1` minute and the maximum is `10` minutes.",
      "allowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ],
      "default": "1"
    },
    "SleepTime": {
      "type": "String",
      "description": "(Optional) The number of minutes this runbook should wait before deleting the test results (the AWS CloudFormation stack). The default value is `24` hours (`1,440` minutes), and the maximum is less than `7` days (`10,080` minutes). If you set this value to `0` the stack is not deleted automatically.",
      "allowedPattern": "^(?:[0-9]|[1-9]\\d{1,3}|100[0-7][0-9])$",
      "default": "1440"
    },
    "RetainDashboardAndLogsOnDeletion": {
      "type": "String",
      "description": "(Optional) Specify `False` to delete the Amazon CloudWatch dashboard and Logs when deleting the AWS CloudFormation stack. The default value is `True`. By default, the dashboard and logs are retained and will need to be manually deleted when they are no longer needed.",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "describeSubnet",
      "description": "Describes the provided subnet to get the associated Amazon Virtual Private Cloud (VPC) ID and its associated IPv6 address pool.",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeSubnets",
        "SubnetIds": [
          "{{ SubnetId }}"
        ]
      },
      "outputs": [
        {
          "Name": "VpcId",
          "Selector": "$.Subnets[0].VpcId"
        },
        {
          "Name": "Ipv6CidrBlockAssociationState",
          "Selector": "$.Subnets[0].Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlockState.State"
        }
      ],
      "isCritical": true,
      "nextStep": "validateIPAddresses"
    },
    {
      "name": "validateIPAddresses",
      "description": "Validates the provided target IPs are syntactically correct IPv4 and/or IPv6 addresses, gets the architecture of the selected `InstanceType`, and if the target subnet has an IPv6 pool association. If any IP is IPv6, the subnet requires an IPv6 pool association.",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "nextStep": "createTestInstance",
      "inputs": {
        "InputPayload": {
          "TargetIPs": "{{ TargetIPs }}",
          "InstanceType": "{{ InstanceType }}",
          "Ipv6CidrBlockAssociationState": "{{ describeSubnet.Ipv6CidrBlockAssociationState }}"
        },
        "Handler": "validate_ips_and_get_instance_arch.function_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "Architecture",
          "Selector": "$.Payload.architecture",
          "Type": "String"
        },
        {
          "Name": "Ipv6CidrBlockAssociationState",
          "Selector": "$.Payload.ipv6association",
          "Type": "String"
        },
        {
          "Name": "IPsList",
          "Selector": "$.Payload.ips",
          "Type": "String"
        },
        {
          "Name": "IPsNames",
          "Selector": "$.Payload.ip_names",
          "Type": "String"
        }
      ]
    },
    {
      "name": "createTestInstance",
      "action": "aws:createStack",
      "description": "Creates an AWS CloudFormation stack that provisions the Amazon CloudWatch dashboard, the Log Groups, and a test EC2 instance including an IAM instance profile, and security group that will be used for the tests.",
      "isCritical": true,
      "timeoutSeconds": 600,
      "inputs": {
        "StackName": "AWSSupport-SetupIPMonitoringFromVPC-{{ automation:EXECUTION_ID }}",
        "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::LanguageExtensions\nDescription: Creates the temporary monitoring instance in the specified subnet\nParameters:\n  RetainDashboardAndLogsOnDeletion:\n    Type: String\n    Default: 'False'\n    AllowedValues:\n      - 'True'\n      - 'False'\n    Description: \"Specify if the CloudWatch Dashboard and logs should be retained after stack deletion.\"\n  Architecture:\n    Type: String\n    AllowedValues:\n      - arm64\n      - x86_64\n  VpcId:\n    Description: Existing VPC ID\n    Type: 'AWS::EC2::VPC::Id'\n  SubnetId:\n    Description: 'Existing subnet ID. If specified, no VPC is created.'\n    Type: String\n    Default: ''\n  InstanceProfileName:\n    Description: The name of an existing IAM instance profile.\n    Type: String\n    Default: ''\n  InstanceSecurityGroup:\n    Description: The ID of an existing security group.\n    Type: String\n    Default: ''\n  ExecutionId:\n    Description: Systems Manager Automation Execution ID.\n    Type: String\n    Default: ''\n  LinuxAMI:\n    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\n  ARMLinuxAMI:\n    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2\n  InstanceType:\n    Type: String\n    Default: t3.micro\n  CreateHelperInstance:\n    Description: Confirm that you want to create the helper instance.\n    Type: String\n    Default: 'False'\n    AllowedValues:\n      - 'True'\n      - 'False'\n  IPv6CidrBlockAssociationState:\n    Description: Assign a primary IPv6 address to the instance\n    Type: String\n  CloudWatchLogGroupNamePrefix:\n    Description: The name of the prefix used for each CloudWatch log group created\n    Type: String\n  LogGroupRetention:\n    Description: LogGroupRetention\n    Type: Number\n    Default: 7\n  IPsNames:\n    Description: List of IPs to be used for the monitoring instance. Example 192_168_1_1,2001_0db8_85a3_0000_0000_8a2e_0370_7334,...\n    Type: CommaDelimitedList\nConditions:\n  ArchitectureIsARM: !Equals\n    - !Ref Architecture\n    - arm64\n  CreateHelperInstance: !Equals\n    - !Ref CreateHelperInstance\n    - 'True'\n  CreateInstanceProfile: !Equals\n    - !Ref InstanceProfileName\n    - ''\n  CreateSecurityGroup: !Equals\n    - !Ref InstanceSecurityGroup\n    - ''\n  EnablePrimaryIpv6: !Equals\n    - !Ref IPv6CidrBlockAssociationState\n    - 'True'\n  RetainDashboard: !Equals\n    - !Ref RetainDashboardAndLogsOnDeletion\n    - 'True'\nResources:\n  Fn::ForEach::MtrLogGroup:\n    - IP\n    - !Ref IPsNames\n    - 'LogGroupMtr&{IP}':\n        Type: AWS::Logs::LogGroup\n        DeletionPolicy: !If [RetainDashboard, Retain, Delete]\n        UpdateReplacePolicy: !If [RetainDashboard, Retain, Delete]\n        Properties:\n          LogGroupName: !Sub '${CloudWatchLogGroupNamePrefix}/mtr-from-${SubnetId}-to-${IP}'\n          RetentionInDays: !Ref LogGroupRetention\n  Fn::ForEach::Ping1500LogGroup:\n    - IP\n    - !Ref IPsNames\n    - 'LogGroupPing1500&{IP}':\n        Type: AWS::Logs::LogGroup\n        DeletionPolicy: !If [RetainDashboard, Retain, Delete]\n        UpdateReplacePolicy: !If [RetainDashboard, Retain, Delete]\n        Properties:\n          LogGroupName: !Sub '${CloudWatchLogGroupNamePrefix}/ping1500-from-${SubnetId}-to-${IP}'\n          RetentionInDays: !Ref LogGroupRetention\n  Fn::ForEach::Ping64LogGroup:\n    - IP\n    - !Ref IPsNames\n    - 'LogGroupPing64&{IP}':\n        Type: AWS::Logs::LogGroup\n        DeletionPolicy: !If [RetainDashboard, Retain, Delete]\n        UpdateReplacePolicy: !If [RetainDashboard, Retain, Delete]\n        Properties:\n          LogGroupName: !Sub '${CloudWatchLogGroupNamePrefix}/ping64-from-${SubnetId}-to-${IP}'\n          RetentionInDays: !Ref LogGroupRetention\n  Fn::ForEach::TracepathLogGroup:\n    - IP\n    - !Ref IPsNames\n    - 'LogGroupTracepath&{IP}':\n        Type: AWS::Logs::LogGroup\n        DeletionPolicy: !If [RetainDashboard, Retain, Delete]\n        UpdateReplacePolicy: !If [RetainDashboard, Retain, Delete]\n        Properties:\n          LogGroupName: !Sub '${CloudWatchLogGroupNamePrefix}/tracepath-from-${SubnetId}-to-${IP}'\n          RetentionInDays: !Ref LogGroupRetention\n  Fn::ForEach::TracerouteLogGroup:\n    - IP\n    - !Ref IPsNames\n    - 'LogGroupTraceroute&{IP}':\n        Type: AWS::Logs::LogGroup\n        DeletionPolicy: Delete\n        UpdateReplacePolicy: Delete\n        Properties:\n          LogGroupName: !Sub '${CloudWatchLogGroupNamePrefix}/traceroutetcp-from-${SubnetId}-to-${IP}'\n          RetentionInDays: !Ref LogGroupRetention\n  SetupIPMonitoringFromVPCEC2Role:\n    Condition: CreateInstanceProfile\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Sub 'SetupIPMonitoringFromVPC-${ExecutionId}'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ec2.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Policies:\n        - PolicyName: SetupIPMonitoringFromVPC-EC2Role_CW_Permissions\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Sid: CloudWatchLogsPermissions\n                Action:\n                  - 'logs:CreateLogStream'\n                  - 'logs:DescribeLogGroups'\n                  - 'logs:DescribeLogStreams'\n                  - 'logs:PutLogEvents'\n                Resource:\n                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudWatchLogGroupNamePrefix}/*\n                Effect: Allow\n      ManagedPolicyArns:\n        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'\n        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMPatchAssociation'\n  SetupIPMonitoringFromVPCInstanceProfile:\n    Condition: CreateInstanceProfile\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      Roles:\n        - !Ref SetupIPMonitoringFromVPCEC2Role\n      InstanceProfileName: !Sub 'SetupIPMonitoringFromVPC-${ExecutionId}'\n  LaunchTemplate:\n    Type: 'AWS::EC2::LaunchTemplate'\n    Properties:\n      LaunchTemplateData:\n        MetadataOptions:\n          HttpEndpoint: enabled\n          HttpTokens: required\n          HttpPutResponseHopLimit: 1\n  HelperSecurityGroup:\n    Condition: CreateSecurityGroup\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: !Sub >-\n        Security group created by AWSSupport-SetupIPMonitoringFromVPC Automation\n        execution ${ExecutionId}.\n      VpcId: !Ref VpcId\n      SecurityGroupEgress:\n        - CidrIp: 0.0.0.0/0\n          IpProtocol: '-1'\n        - CidrIpv6: '::/0'\n          IpProtocol: '-1'\n  HelperInstance:\n    Condition: CreateHelperInstance\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !If\n        - ArchitectureIsARM\n        - !Ref ARMLinuxAMI\n        - !Ref LinuxAMI\n      LaunchTemplate:\n        LaunchTemplateId: !Ref LaunchTemplate\n        Version: !GetAtt\n          - LaunchTemplate\n          - LatestVersionNumber\n      InstanceType: !Ref InstanceType\n      PropagateTagsToVolumeOnCreation: true\n      NetworkInterfaces:\n        - Description: !Sub >-\n            Network Interface created by AWSSupport-SetupIPMonitoringFromVPC\n            Automation execution ${ExecutionId}.\n          DeleteOnTermination: true\n          DeviceIndex: '0'\n          SubnetId: !Ref SubnetId\n          GroupSet:\n            - !If\n              - CreateSecurityGroup\n              - !Ref HelperSecurityGroup\n              - !Ref InstanceSecurityGroup\n          Ipv6AddressCount: !If\n            - EnablePrimaryIpv6\n            - 1\n            - 0\n      IamInstanceProfile: !If\n        - CreateInstanceProfile\n        - !Ref SetupIPMonitoringFromVPCInstanceProfile\n        - !Ref InstanceProfileName\n  CloudWatchDashboard:\n    Type: AWS::CloudWatch::Dashboard\n    Condition: CreateHelperInstance\n    DeletionPolicy: !If [RetainDashboard, Retain, Delete]\n    UpdateReplacePolicy: !If [RetainDashboard, Retain, Delete]\n    Properties:\n      DashboardName: !Sub \"${SubnetId}_${HelperInstance}\"\n      DashboardBody: !Sub |\n        {\n            \"widgets\": [\n                {\n                    \"type\": \"text\",\n                    \"properties\": {\n                        \"markdown\": \"\\n# AWSSupport-SetupIPMonitoringFromVPC\\nThis dashboard was created by the AWSSupport-SetupIPMonitoringFromVPC runbook automation for ${SubnetId} ${HelperInstance}\"\n                    }\n                }\n            ]\n        }\nOutputs:\n  HelperInstanceId:\n    Condition: CreateHelperInstance\n    Value: !Ref HelperInstance\n  HelperSecurityGroupId:\n    Value: !If\n      - CreateSecurityGroup\n      - !Ref HelperSecurityGroup\n      - !Ref InstanceSecurityGroup\n  DashboardName:\n    Condition: CreateHelperInstance\n    Value: !Sub \"${SubnetId}_${HelperInstance}\"\n  StackName:\n    Value: !Sub \"${AWS::StackName}\"\n  IamRole:\n    Value: !If [CreateInstanceProfile, !Ref SetupIPMonitoringFromVPCEC2Role, '']\n  InstanceProfile:\n    Value: !If [CreateInstanceProfile, !Ref SetupIPMonitoringFromVPCInstanceProfile, !Ref InstanceProfileName]",
        "TimeoutInMinutes": 20,
        "OnFailure": "DELETE",
        "ClientRequestToken": "AWSSupport-SetupIPMonitoringFromVPC-{{ automation:EXECUTION_ID }}",
        "Parameters": [
          {
            "ParameterKey": "RetainDashboardAndLogsOnDeletion",
            "ParameterValue": "{{ RetainDashboardAndLogsOnDeletion }}"
          },
          {
            "ParameterKey": "CreateHelperInstance",
            "ParameterValue": "True"
          },
          {
            "ParameterKey": "IPv6CidrBlockAssociationState",
            "ParameterValue": "{{ validateIPAddresses.Ipv6CidrBlockAssociationState }}"
          },
          {
            "ParameterKey": "Architecture",
            "ParameterValue": "{{ validateIPAddresses.Architecture }}"
          },
          {
            "ParameterKey": "VpcId",
            "ParameterValue": "{{ describeSubnet.VpcId }}"
          },
          {
            "ParameterKey": "SubnetId",
            "ParameterValue": "{{ SubnetId }}"
          },
          {
            "ParameterKey": "InstanceProfileName",
            "ParameterValue": "{{ TestInstanceProfileName }}"
          },
          {
            "ParameterKey": "InstanceSecurityGroup",
            "ParameterValue": "{{ TestInstanceSecurityGroupId }}"
          },
          {
            "ParameterKey": "InstanceType",
            "ParameterValue": "{{ InstanceType }}"
          },
          {
            "ParameterKey": "ExecutionId",
            "ParameterValue": "{{ automation:EXECUTION_ID }}"
          },
          {
            "ParameterKey": "CloudWatchLogGroupNamePrefix",
            "ParameterValue": "{{ CloudWatchLogGroupNamePrefix }}"
          },
          {
            "ParameterKey": "IPsNames",
            "ParameterValue": "{{ validateIPAddresses.IPsNames }}"
          },
          {
            "ParameterKey": "LogGroupRetention",
            "ParameterValue": "{{ CloudWatchLogGroupRetentionInDays }}"
          }
        ],
        "Capabilities": [
          "CAPABILITY_NAMED_IAM",
          "CAPABILITY_AUTO_EXPAND"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "AWSSupport-SetupIPMonitoringFromVPC-{{ automation:EXECUTION_ID }}"
          },
          {
            "Key": "AWSSupport-SetupIPMonitoringFromVPC-AutomationExecution",
            "Value": "{{ automation:EXECUTION_ID }}"
          }
        ]
      },
      "outputs": [
        {
          "Name": "CloudFormationStackId",
          "Selector": "$.StackId",
          "Type": "String"
        }
      ],
      "nextStep": "waitForStackCreation",
      "onFailure": "step:describeStackCreationErrors"
    },
    {
      "name": "waitForStackCreation",
      "action": "aws:waitForAwsResourceProperty",
      "description": "Waits for the AWS CloudFormation stack to complete.",
      "isCritical": true,
      "timeoutSeconds": 600,
      "inputs": {
        "Service": "cloudformation",
        "Api": "DescribeStacks",
        "StackName": "{{ createTestInstance.CloudFormationStackId }}",
        "PropertySelector": "$.Stacks[0].StackStatus",
        "DesiredValues": [
          "UPDATE_COMPLETE",
          "CREATE_COMPLETE"
        ]
      },
      "nextStep": "describeStackResources",
      "onFailure": "step:describeStackCreationErrors"
    },
    {
      "name": "describeStackResources",
      "action": "aws:executeAwsApi",
      "description": "Describes the AWS CloudFormation stack resources.",
      "isCritical": true,
      "onFailure": "step:describeStackCreationErrors",
      "timeoutSeconds": 180,
      "inputs": {
        "Service": "cloudformation",
        "Api": "DescribeStacks",
        "StackName": "{{ createTestInstance.CloudFormationStackId }}"
      },
      "outputs": [
        {
          "Name": "HelperInstanceId",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'HelperInstanceId')].OutputValue",
          "Type": "String"
        },
        {
          "Name": "HelperSecurityGroupId",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'HelperSecurityGroupId')].OutputValue",
          "Type": "String"
        },
        {
          "Name": "HelperInstanceIamRole",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'IamRole')].OutputValue",
          "Type": "String"
        },
        {
          "Name": "HelperInstanceProfile",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'InstanceProfile')].OutputValue",
          "Type": "String"
        },
        {
          "Name": "DashboardName",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'DashboardName')].OutputValue",
          "Type": "String"
        },
        {
          "Name": "StackName",
          "Selector": "$.Stacks[0].Outputs[?(@.OutputKey == 'StackName')].OutputValue",
          "Type": "String"
        }
      ],
      "nextStep": "waitForInstanceToBeManaged"
    },
    {
      "name": "waitForInstanceToBeManaged",
      "description": "Waits for the test EC2 instance to become managed by AWS Systems Manager.",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 600,
      "onFailure": "step:deleteStack",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ describeStackResources.HelperInstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": true,
      "nextStep": "installCloudWatchAgent"
    },
    {
      "name": "installCloudWatchAgent",
      "description": "Installs the Amazon CloudWatch Agent.",
      "maxAttempts": 3,
      "action": "aws:runCommand",
      "onFailure": "step:deleteStack",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ describeStackResources.HelperInstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to handle errors",
            "error_trap() {",
            "    if [ -n \"$1\" ]; then",
            "        printf \"%s\\\\n\" \"$1\"",
            "    fi",
            "    printf \"%.s=\" $(seq 1 80)",
            "    printf \"\\\\nThe CloudWatch Agent installation failed. Please try running this automation again.\\\\n\"",
            "    exit 1",
            "}",
            "",
            "# Install the Amazon CloudWatch Agent",
            "echo \"Installing the Amazon CloudWatch Agent...\"",
            "sudo yum install -y amazon-cloudwatch-agent || error_trap \"Error installing Amazon CloudWatch Agent\"",
            "",
            "echo \"Amazon CloudWatch Agent installation completed successfully.\""
          ]
        }
      },
      "isCritical": true,
      "nextStep": "defineNetworkTests"
    },
    {
      "name": "defineNetworkTests",
      "description": "Defines the `MTR`, `ping`, `tracepath`, and `traceroute` tests scripts for each of the provided IPs.",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStack",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ describeStackResources.HelperInstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Set the list of target IPs and types",
            "TARGET_IPS=\"{{ validateIPAddresses.IPsList }}\" # Example: \"192.168.1.1|4|192_168_1_1,2001:0db8:85a3:0000:0000:8a2e:0370:7334|6,8.8.8.8|4\"",
            "INTERVAL=\"{{ TestInterval }}\"",
            "LOG_PATH='/home/ec2-user/logs'",
            "",
            "# Generic function to create scripts",
            "create_script() {",
            "    local ip=$1",
            "    local name=$2",
            "    local cmd=$3",
            "    local parse_cmd=$4",
            "    local ip_name",
            "    ip_name=$(echo \"$ip\" | sed 's/[:.]/_/g')",
            "",
            "    local script_path=\"/home/ec2-user/${name}_${ip_name}.sh\"",
            "    cat <<EOT > \"$script_path\"",
            "#!/bin/bash",
            "$cmd $ip | $parse_cmd",
            "EOT",
            "",
            "    chmod u+x \"$script_path\"",
            "    chown ec2-user:ec2-user \"$script_path\"",
            "    echo \"Script created: $script_path\"",
            "}",
            "",
            "create_mtr_script() {",
            "",
            "    # Options:",
            "    # -rn: Raw output, do not resolve hostnames",
            "    # -c 30: Send 30 pings",
            "    # --interval $INTERVAL: Wait $INTERVAL seconds between pings",
            "    # -Z $INTERVAL: Set the ping timeout to $INTERVAL seconds",
            "",
            "    local ip=$1",
            "    local type=$2",
            "    local cmd=\"sudo /sbin/mtr -rn -c 30 --interval $INTERVAL -Z $INTERVAL\"",
            "    if [[ \"$type\" -eq 6 ]]; then",
            "        cmd=\"sudo /sbin/mtr -6 -rn -c 30 --interval $INTERVAL -Z $INTERVAL\"",
            "    fi",
            "",
            "    create_script \"$ip\" \"mtr\" \"$cmd\" \"sed 's/Start: //g' |  sed -e '2,\\$ s/^/     /'\"",
            "}",
            "",
            "create_ping_scripts() {",
            "",
            "    # Options:",
            "    # -s 56: Set the packet size to 56 bytes (64 bytes total with header)",
            "    # -c 30: Send 30 pings",
            "",
            "    local ip=$1",
            "    local type=$2",
            "    local cmd=\"ping\"",
            "    if [[ \"$type\" -eq 6 ]]; then",
            "        cmd=\"ping6\"",
            "    fi",
            "",
            "    create_script \"$ip\" \"ping64\" \"$cmd -s 56 -c 30\" \"sed -e '1,\\$ s/^/     /' | sed 's/%//g' | tail -n 3 | sed 's#/# #g'\"",
            "    create_script \"$ip\" \"ping1500\" \"$cmd -s 1492 -c 30\" \"sed -e '1,\\$ s/^/     /' | sed 's/%//g' | tail -n 3 | sed 's#/# #g'\"",
            "}",
            "",
            "create_tracepath_script() {",
            "",
            "    # Options:",
            "    # -n: Show numeric IP addresses",
            "",
            "    local ip=$1",
            "    local type=$2",
            "    local cmd=\"tracepath\"",
            "    if [[ \"$type\" -eq 6 ]]; then",
            "        cmd=\"tracepath6\"",
            "    fi",
            "",
            "    create_script \"$ip\" \"tracepath\" \"$cmd -n\" \"grep -v 'Too many hops' | sed -e '$ ! s/^/     /'\"",
            "}",
            "",
            "create_traceroutetcp_script() {",
            "",
            "    # Options:",
            "    # -n: Show numeric IP addresses",
            "    # -q 2: Send 2 queries per hop",
            "    # -A: Show AS (Autonomous System) numbers",
            "    # -T: Use TCP packets",
            "    # -p 80: Use port 80",
            "",
            "    local ip=$1",
            "    local type=$2",
            "    create_script \"$ip\" \"traceroutetcp\" \"sudo traceroute -n -q 2 -A -T -p 80\" \"sed -e 's/^/     /'\"",
            "}",
            "",
            "# Loop through each IP and type in the TARGET_IPS variable",
            "IFS=',' read -ra ADDR <<< \"$TARGET_IPS\"",
            "for ip_with_type in \"${ADDR[@]}\"; do",
            "    IFS='|' read -r ip type <<< \"$ip_with_type\"",
            "    create_mtr_script \"$ip\" \"$type\"",
            "    create_ping_scripts \"$ip\" \"$type\"",
            "    create_tracepath_script \"$ip\" \"$type\"",
            "    create_traceroutetcp_script \"$ip\" \"$type\"",
            "done",
            "",
            "# Create the logs directory",
            "mkdir -p $LOG_PATH || error_trap \"Error creating $LOG_PATH folder\"",
            "chown ec2-user:ec2-user $LOG_PATH || error_trap \"Error setting permissions for $LOG_PATH folder\"",
            "",
            "# MTR Command",
            "# sudo /sbin/mtr -rn -c 30 --interval 1 -Z 1 8.8.8.8 | sed 's/Start: //g' | sed -e '2,$ s/^/     /'",
            "# Example output:",
            "# 2024-05-31T16:03:54+0000",
            "#      HOST: ip-10-0-30-122.eu-west-1.co Loss%   Snt   Last   Avg  Best  Wrst StDev",
            "#        1.|-- 3.248.240.11               0.0%    30    2.3  20.5   1.0  97.6  26.4",
            "#        2.|-- ???                       100.0    30    0.0   0.0   0.0   0.0   0.0",
            "#        3.|-- ???                       100.0    30    0.0   0.0   0.0   0.0   0.0",
            "#       ...",
            "#       10.|-- 216.239.43.223             0.0%    30    2.3   2.4   2.3   2.6   0.1",
            "#       11.|-- 209.85.143.81              0.0%    30    2.4   2.6   2.2   7.8   1.0",
            "#       12.|-- 8.8.8.8                    0.0%    30    1.3   1.3   1.2   1.3   0.0",
            "",
            "# Ping 64-byte Command",
            "# ping -s 56 -c 30 8.8.8.8 | sed -e '1,$ s/^/     /' | sed 's/%//g' | tail -n 3 | sed 's#/# #g'",
            "# Example output:",
            "# --- 8.8.8.8 ping statistics ---",
            "# 30 packets transmitted, 30 received, 0 packet loss, time 29036ms",
            "# rtt min avg max mdev = 1.183 1.199 1.218 0.032 ms",
            "",
            "# Ping 1500-byte Command",
            "# ping -s 1492 -c 30 8.8.8.8 | sed -e '1,$ s/^/     /' | sed 's/%//g' | tail -n 3 | sed 's#/# #g'",
            "# Example output:",
            "# --- 8.8.8.8 ping statistics ---",
            "# 30 packets transmitted, 0 received, +1 errors, 100 packet loss, time 29665ms",
            "",
            "# Tracepath Command",
            "# tracepath -n 8.8.8.8 | grep -v 'Too many hops' | sed -e '$ ! s/^/     /'",
            "# Example output:",
            "# 1?: [LOCALHOST]                                         pmtu 9001",
            "# 1:  10.0.0.1                                              3.379ms pmtu 1500",
            "# 1:  no reply",
            "# 2:  240.1.92.12                                           0.724ms",
            "# 3:  240.1.108.10                                          1.301ms asymm  4",
            "# 4:  100.100.2.12                                          1.802ms asymm  6",
            "# 5:  99.82.176.23                                          3.051ms asymm 10",
            "# ...",
            "# 10:  no reply",
            "# 11:  no reply",
            "# 29:  no reply",
            "# 30:  no reply",
            "# Resume: pmtu 1500",
            "",
            "# Traceroute TCP Command",
            "# sudo traceroute -n 8.8.8.8 -q 2 -A -T -p 80 | sed -e 's/^/     /'",
            "# Example output:",
            "# traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets",
            "# 1  * *",
            "# 2  240.1.92.13 [*]  0.293 ms 240.1.92.15 [*]  0.689 ms",
            "# 3  * *",
            "# 4  * *",
            "# 5  241.0.6.69 [*]  0.665 ms 99.82.176.189 [*]  1.174 ms",
            "# 6  * 240.1.108.8 [*]  0.745 ms",
            "# ...",
            "# 28  * *",
            "# 29  * *"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "startNetworkTests"
    },
    {
      "name": "startNetworkTests",
      "description": "Starts the tests and schedules subsequent executions using cronjobs that run every `TestInterval` minutes. The tests logs are stored in the test instance folder `/home/ec2-user/logs/`",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStack",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ describeStackResources.HelperInstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to handle errors",
            "error_trap() {",
            "    if test -n \"$1\"; then",
            "        printf \"%s\\\\n\" \"$1\"",
            "    fi",
            "    printf \"%.s=\" $(seq 1 80)",
            "    printf \"\\\\nThe crontab configuration failed. Please try running this automation again.\\\\n\"",
            "    exit 1",
            "}",
            "",
            "# Set the list of target IPs",
            "TARGET_IPS=\"{{ validateIPAddresses.IPsList }}\" # Example: \"192.168.1.1|4,2001:0db8:85a3:0000:0000:8a2e:0370:7334|6,8.8.8.8|4\"",
            "CRON_CONF_FILE=\"/home/ec2-user/cronConf.txt\"",
            "INTERVAL=\"{{ TestInterval }}\" # From 1 to 10 minutes",
            "LOG_PATH=\"/home/ec2-user/logs\"",
            "",
            "# Create and open cron configuration file",
            "touch $CRON_CONF_FILE || error_trap \"Error creating crontab configuration file\"",
            "",
            "# Loop through each IP in the TARGET_IPS variable to create the crontab configuration",
            "IFS=',' read -ra ADDR <<< \"$TARGET_IPS\"",
            "for ip_with_type in \"${ADDR[@]}\"; do",
            "    IFS='|' read -r ip _ <<< \"$ip_with_type\"",
            "    ip_name=$(echo \"$ip\" | sed 's/[:.]/_/g')",
            "    {",
            "        echo \"*/$INTERVAL * * * * /home/ec2-user/mtr_${ip_name}.sh >> $LOG_PATH/mtr-to-$ip_name.txt 2>&1\";",
            "        echo \"*/$INTERVAL * * * * /home/ec2-user/ping1500_${ip_name}.sh >> $LOG_PATH/ping1500-to-$ip_name.txt 2>&1\";",
            "        echo \"*/$INTERVAL * * * * /home/ec2-user/ping64_${ip_name}.sh >> $LOG_PATH/ping64-to-$ip_name.txt\";",
            "        echo \"*/$INTERVAL * * * * /home/ec2-user/traceroutetcp_${ip_name}.sh >> $LOG_PATH/traceroutetcp-to-$ip_name.txt 2>&1\";",
            "        echo \"*/$INTERVAL * * * * /home/ec2-user/tracepath_${ip_name}.sh >> $LOG_PATH/tracepath-to-$ip_name.txt 2>&1\";",
            "    } >> $CRON_CONF_FILE",
            "done",
            "",
            "# Apply the new crontab configuration",
            "crontab -u ec2-user $CRON_CONF_FILE || error_trap \"Error applying crontab configuration\""
          ]
        }
      },
      "isCritical": true,
      "nextStep": "configureCloudWatchLogsForTestResults"
    },
    {
      "name": "configureCloudWatchLogsForTestResults",
      "description": "Configures the Amazon CloudWatch Agent to push the test results located in `/home/ec2-user/logs/` to the Amazon CloudWatch Logs.",
      "action": "aws:runCommand",
      "onFailure": "step:deleteStack",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ describeStackResources.HelperInstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to handle errors",
            "error_trap() {",
            "    if test -n \"$1\" ; then",
            "        printf \"%s\\\\n\" \"$1\"",
            "    fi",
            "    printf \"%.s=\" $(seq 1 80)",
            "    printf \"\\\\nThe CloudWatch logs agent configuration failed. Please try running this automation again.\\\\n\"",
            "    exit 1",
            "}",
            "",
            "# Set the list of target IPs",
            "TARGET_IPS=\"{{ validateIPAddresses.IPsList }}\" # Example: \"192.168.1.1|4,2001:0db8:85a3:0000:0000:8a2e:0370:7334|6,8.8.8.8|4\"",
            "LOG_PATH='/home/ec2-user/logs'",
            "RETENTION_DAYS=\"{{ CloudWatchLogGroupRetentionInDays }}\"",
            "EXECUTION_ID=\"{{ automation:EXECUTION_ID }}\"",
            "CLOUDWATCH_PREFIX=\"{{ CloudWatchLogGroupNamePrefix }}\"",
            "CLOUDWATCH_AGENT_CTL=\"/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\"",
            "SUBNET_ID=\"{{ SubnetId }}\"",
            "CONFIG_PATH=\"/home/ec2-user/config\"",
            "",
            "# Function to configure log collection for each IP",
            "configure_log() {",
            "    local ip_name=$1",
            "    local index=$2",
            "    local config_file=\"$CONFIG_PATH/cloudwatchagent-$ip_name.json\"",
            "",
            "    cat <<EOT > \"$config_file\"",
            "{",
            "  \"logs\": {",
            "    \"logs_collected\": {",
            "      \"files\": {",
            "        \"collect_list\": [",
            "          {",
            "            \"file_path\": \"$LOG_PATH/mtr-to-$ip_name.txt\",",
            "            \"log_group_name\": \"$CLOUDWATCH_PREFIX/mtr-from-$SUBNET_ID-to-$ip_name\",",
            "            \"log_stream_name\": \"$EXECUTION_ID\",",
            "            \"timezone\": \"UTC\",",
            "            \"retention_in_days\": $RETENTION_DAYS",
            "          },",
            "          {",
            "            \"file_path\": \"$LOG_PATH/ping1500-to-$ip_name.txt\",",
            "            \"log_group_name\": \"$CLOUDWATCH_PREFIX/ping1500-from-$SUBNET_ID-to-$ip_name\",",
            "            \"log_stream_name\": \"$EXECUTION_ID\",",
            "            \"timezone\": \"UTC\",",
            "            \"multi_line_start_pattern\": \"---.*\",",
            "            \"retention_in_days\": $RETENTION_DAYS",
            "          },",
            "          {",
            "            \"file_path\": \"$LOG_PATH/ping64-to-$ip_name.txt\",",
            "            \"log_group_name\": \"$CLOUDWATCH_PREFIX/ping64-from-$SUBNET_ID-to-$ip_name\",",
            "            \"log_stream_name\": \"$EXECUTION_ID\",",
            "            \"timezone\": \"UTC\",",
            "            \"multi_line_start_pattern\": \"---.*\",",
            "            \"retention_in_days\": $RETENTION_DAYS",
            "          },",
            "          {",
            "            \"file_path\": \"$LOG_PATH/tracepath-to-$ip_name.txt\",",
            "            \"log_group_name\": \"$CLOUDWATCH_PREFIX/tracepath-from-$SUBNET_ID-to-$ip_name\",",
            "            \"log_stream_name\": \"$EXECUTION_ID\",",
            "            \"timezone\": \"UTC\",",
            "            \"multi_line_start_pattern\": \"1?:.*\",",
            "            \"retention_in_days\": $RETENTION_DAYS",
            "          },",
            "          {",
            "            \"file_path\": \"$LOG_PATH/traceroutetcp-to-$ip_name.txt\",",
            "            \"log_group_name\": \"$CLOUDWATCH_PREFIX/traceroutetcp-from-$SUBNET_ID-to-$ip_name\",",
            "            \"log_stream_name\": \"$EXECUTION_ID\",",
            "            \"timezone\": \"UTC\",",
            "            \"multi_line_start_pattern\": \"traceroute\",",
            "            \"retention_in_days\": $RETENTION_DAYS",
            "          }",
            "        ]",
            "      }",
            "    }",
            "  }",
            "}",
            "EOT",
            "",
            "    # Start or append configuration to the Amazon CloudWatch Agent",
            "    if [[ $index -eq 0 ]]; then",
            "        sudo $CLOUDWATCH_AGENT_CTL -a fetch-config -m ec2 -s -c file:\"$config_file\"",
            "        echo \"Fetched $config_file for the CloudWatch logs agent configuration.\"",
            "    else",
            "        sudo $CLOUDWATCH_AGENT_CTL -a append-config -m ec2 -s -c file:\"$config_file\"",
            "        echo \"Appended $config_file for the CloudWatch logs agent configuration.\"",
            "    fi",
            "}",
            "",
            "# Create the logs directory",
            "mkdir -p $CONFIG_PATH || error_trap \"Error creating $CONFIG_PATH folder\"",
            "chown ec2-user:ec2-user $CONFIG_PATH || error_trap \"Error setting permissions for $CONFIG_PATH folder\"",
            "",
            "# Loop through each IP in the TARGET_IPS variable",
            "IFS=',' read -ra ADDR <<< \"$TARGET_IPS\"",
            "index=0",
            "for ip_with_type in \"${ADDR[@]}\"; do",
            "    IFS='|' read -r ip _ <<< \"$ip_with_type\"",
            "    ip_name=$(echo \"$ip\" | sed 's/[:.]/_/g')",
            "    configure_log \"$ip_name\" $index",
            "    index=$((index + 1))",
            "done"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "configureLocalLogRotation"
    },
    {
      "name": "configureLocalLogRotation",
      "description": "Sets rotation to the logs generated in the `/home/ec2-user/logs/` folder.",
      "action": "aws:runCommand",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ describeStackResources.HelperInstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh",
            "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
            "# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0",
            "# Licensed under the Amazon Software License  http://aws.amazon.com/asl/",
            "",
            "# Function to handle errors",
            "error_trap() {",
            "    if test -n \"$1\"; then",
            "        printf \"%s\\\\n\" \"$1\"",
            "    fi",
            "    printf \"%.s=\" $(seq 1 80)",
            "    printf \"\\\\nThe logrotate configuration failed. Please try running this automation again.\\\\n\"",
            "    exit 1",
            "}",
            "",
            "LOG_ROTATE_CONFIG=\"/etc/logrotate.d/logrotateConfig.conf\"",
            "CONFIG_PATH=\"/home/ec2-user/config\"",
            "",
            "# Set the list of target IPs",
            "TARGET_IPS=\"{{ validateIPAddresses.IPsList }}\" # Example: \"192.168.1.1|4,2001:0db8:85a3:0000:0000:8a2e:0370:7334|6,8.8.8.8|4\"",
            "CLOUDWATCH_AGENT_CTL=\"/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\"",
            "",
            "# Create and open the logrotate configuration file",
            "touch $LOG_ROTATE_CONFIG || error_trap \"Error creating logrotate configuration file\"",
            "",
            "# Disable dateext feature from the default logrotate config file",
            "sed -i 's/dateext/#dateext/g' /etc/logrotate.conf || error_trap \"Error disabling dateext feature\"",
            "",
            "# Add log rotation configuration",
            "cat << EOT > $LOG_ROTATE_CONFIG",
            "/home/ec2-user/logs/*.txt {",
            "    daily",
            "    missingok",
            "    size 5M",
            "    start 1",
            "    rotate 4",
            "    notifempty",
            "    create 0660 ec2-user ec2-user",
            "}",
            "EOT",
            "",
            "# Comments for the configuration",
            "# /home/ec2-user/logs/*.txt {",
            "#    daily                 # Rotate logs daily",
            "#    missingok             # If the log file is missing, go on to the next one without issuing an error",
            "#    size 5M               # Rotate logs if they grow bigger than 5M",
            "#    start 1               # Start with log file 1",
            "#    rotate 4              # Keep 4 rotated logs only",
            "#    notifempty            # Do not rotate the log if it is empty",
            "#    create 0660 ec2-user ec2-user # Create new log files with specific permissions and owner",
            "# }",
            "",
            "# Apply the new logrotate configuration",
            "logrotate -v $LOG_ROTATE_CONFIG || error_trap \"Error applying logrotate configuration\"",
            "",
            "",
            "configure_log() {",
            "    local ip_name=$1",
            "    local index=$2",
            "    local config_file=\"$CONFIG_PATH/cloudwatchagent-$ip_name.json\"",
            "",
            "    # Start or append configuration to the Amazon CloudWatch Agent",
            "    if [[ $index -eq 0 ]]; then",
            "        sudo $CLOUDWATCH_AGENT_CTL -a fetch-config -m ec2 -s -c file:\"$config_file\"",
            "        echo \"Fetched $config_file for the CloudWatch logs agent configuration.\"",
            "    else",
            "        sudo $CLOUDWATCH_AGENT_CTL -a append-config -m ec2 -s -c file:\"$config_file\"",
            "        echo \"Appended $config_file for the CloudWatch logs agent configuration.\"",
            "    fi",
            "}",
            "",
            "# Loop through each IP in the TARGET_IPS variable",
            "IFS=',' read -ra ADDR <<< \"$TARGET_IPS\"",
            "index=0",
            "for ip_with_type in \"${ADDR[@]}\"; do",
            "    IFS='|' read -r ip _ <<< \"$ip_with_type\"",
            "    ip_name=$(echo \"$ip\" | sed 's/[:.]/_/g')",
            "    configure_log \"$ip_name\" $index",
            "    index=$((index + 1))",
            "done"
          ]
        }
      },
      "isCritical": true,
      "nextStep": "setCloudWatchLogsMetricFilters"
    },
    {
      "name": "setCloudWatchLogsMetricFilters",
      "description": "Sets the Amazon CloudWatch log group metric filters for ping latency and ping packet loss.",
      "action": "aws:executeScript",
      "maxAttempts": 3,
      "onFailure": "step:deleteStack",
      "inputs": {
        "InputPayload": {
          "InstanceId": "{{ describeStackResources.HelperInstanceId }}",
          "SubnetId": "{{ SubnetId }}",
          "TargetIPs": "{{ validateIPAddresses.IPsList }}",
          "CloudWatchLogGroupNamePrefix": "{{ CloudWatchLogGroupNamePrefix }}"
        },
        "Handler": "add_metrics_filters.function_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "isCritical": true,
      "nextStep": "updateCloudWatchDashboard"
    },
    {
      "name": "updateCloudWatchDashboard",
      "description": "Updates the Amazon CloudWatch dashboard to include the test results widgets for ping latency and ping packet loss.",
      "action": "aws:executeScript",
      "onFailure": "step:deleteStack",
      "inputs": {
        "InputPayload": {
          "InstanceId": "{{ describeStackResources.HelperInstanceId }}",
          "SubnetId": "{{ SubnetId }}",
          "TargetIPs": "{{ validateIPAddresses.IPsList }}",
          "CloudWatchLogGroupRetentionInDays": "{{ CloudWatchLogGroupRetentionInDays }}",
          "CloudWatchLogGroupNamePrefix": "{{ CloudWatchLogGroupNamePrefix }}",
          "StackName": "{{ describeStackResources.StackName }}",
          "RetainDashboardAndLogsOnDeletion": "{{ RetainDashboardAndLogsOnDeletion }}"
        },
        "Handler": "update_cw_dashboard.function_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "StackUrl",
          "Selector": "$.Payload.stack_url",
          "Type": "String"
        },
        {
          "Name": "DashboardUrl",
          "Selector": "$.Payload.dashboard_url",
          "Type": "String"
        },
        {
          "Name": "DashboardName",
          "Selector": "$.Payload.name",
          "Type": "String"
        },
        {
          "Name": "LogGroups",
          "Selector": "$.Payload.log_groups",
          "Type": "StringList"
        }
      ],
      "isCritical": true,
      "nextStep": "branchOnSleepTime"
    },
    {
      "name": "describeStackCreationErrors",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "maxAttempts": 3,
      "description": "Describes the AWS CloudFormation stack events if the runbooks fails to create the stack.",
      "inputs": {
        "InputPayload": {
          "StackName": "{{ createTestInstance.CloudFormationStackId }}",
          "ExpectedStackStatus": "CREATE_COMPLETE",
          "NonExpectedResourceStatus": "ROLLBACK_COMPLETE,CREATE_FAILED,ROLLBACK_FAILED"
        },
        "Handler": "check_stack_status.function_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "DeletionErrorsFromStackEvents",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isCritical": false,
      "nextStep": "deleteStack"
    },
    {
      "name": "branchOnSleepTime",
      "description": "Branches on the value of `SleepTime`. If the value is set to `0`, the automation ends and the AWS CloudFormation stack is not automatically deleted.",
      "action": "aws:branch",
      "onFailure": "step:deleteStack",
      "inputs": {
        "Choices": [
          {
            "Not": {
              "Variable": "{{ SleepTime }}",
              "StringEquals": "0"
            },
            "NextStep": "sleepBeforeDeleteCloudFormationStack"
          }
        ]
      },
      "isCritical": true,
      "isEnd": true
    },
    {
      "name": "sleepBeforeDeleteCloudFormationStack",
      "action": "aws:sleep",
      "onFailure": "Continue",
      "onCancel": "step:deleteStack",
      "description": "Waits `SleepTime` minutes before deleting the AWS CloudFormation stack.",
      "inputs": {
        "Duration": "PT{{SleepTime}}M"
      },
      "nextStep": "deleteStack"
    },
    {
      "name": "deleteStack",
      "action": "aws:deleteStack",
      "onFailure": "step:describeStackDeletionErrors",
      "description": "Deletes the CloudFormation stack created by this automation in your account.",
      "inputs": {
        "StackName": "{{ createTestInstance.CloudFormationStackId }}"
      },
      "isEnd": true
    },
    {
      "name": "describeStackDeletionErrors",
      "action": "aws:executeScript",
      "description": "Describes the AWS CloudFormation stack events if the runbooks fails to delete the stack.",
      "onFailure": "Abort",
      "inputs": {
        "InputPayload": {
          "StackName": "{{ createTestInstance.CloudFormationStackId }}",
          "ExpectedStackStatus": "DELETE_COMPLETE",
          "NonExpectedResourceStatus": "DELETE_FAILED"
        },
        "Handler": "check_stack_status.function_handler",
        "Runtime": "python3.11",
        "Attachment": "attachment.zip"
      },
      "outputs": [
        {
          "Name": "DeletionErrorsFromStackEvents",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "isEnd": true
    }
  ],
  "outputs": [
    "updateCloudWatchDashboard.StackUrl",
    "updateCloudWatchDashboard.DashboardUrl",
    "updateCloudWatchDashboard.DashboardName",
    "updateCloudWatchDashboard.LogGroups",
    "describeStackResources.HelperInstanceId",
    "describeStackResources.StackName"
  ],
  "files": {
    "attachment.zip": {
      "checksums": {
        "SHA256": "272e980fc14e807de1f1c11e843885612182c41bfa213d82f3c52660b0b4a7c3"
      }
    }
  }
}
