{
  "assumeRole": "{{ AutomationAssumeRole }}",
  "description": "Tutorial: Configuring a static website on S3\n===\n\nThis Automation document helps you configure a static website on an Amazon Simple Storage Service (Amazon S3) bucket. The document automates the procedure described in [Tutorial: Configuring a static website](https://docs.aws.amazon.com/AmazonS3/latest/dev/HostingWebsiteOnS3Setup.html) in the *Amazon Simple Storage Service User Guide*.\n\nPrerequisites\n---\n\nTo run the following Automation document, you must have permissions to run Automation workflows and create the following resources. The Automation workflow runs in the context of the current AWS Identity and Access Management (IAM) user unless otherwise specified.\n\nResources created\n---\n\nThis Automation document launches an AWS CloudFormation stack to create the following resources.\n\n  * A S3 bucket that has public read access and a static website configuration\n  * An index and error document that is uploaded to the S3 bucket\n\nOutputs\n---\n\nAfter the Automation is complete, go to the S3 bucket's static website properties in the AWS console to view the public DNS address of the static website.\n\nCleanup\n---\n\nTo remove resources created by this Automation document, navigate to the S3 bucket and remove all items from the bucket and then delete the CloudFormation stack created.\n\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-S3StaticWebsite).*",
  "mainSteps": [
    {
      "action": "aws:createStack",
      "description": "Creates the S3 bucket that will host the static webpage. Enables static website hosting and public access.",
      "inputs": {
        "Parameters": [
          {
            "ParameterKey": "ExecutionId",
            "ParameterValue": "{{ automation:EXECUTION_ID }}"
          }
        ],
        "StackName": "S3BucketStaticWebsite",
        "TemplateBody": "{\n  \"Parameters\": {\n      \"ExecutionId\": {\n        \"Description\": \"Used to create a unique S3 bucket.\",\n        \"Type\": \"String\"\n      }\n  },\n  \"Resources\": {\n    \"S3Bucket\": {\n        \"Type\": \"AWS::S3::Bucket\",\n        \"Properties\": {\n          \"BucketName\": {\n            \"Fn::Join\": [\"\", [\"s3staticwebsite\", {\"Ref\":\"ExecutionId\"}]]\n          },\n          \"AccessControl\": \"PublicRead\",\n          \"WebsiteConfiguration\": {\n            \"IndexDocument\": \"index.html\",\n            \"ErrorDocument\": \"error.html\"\n          }\n        }\n    },\n    \"BucketPolicy\": {\n      \"Type\": \"AWS::S3::BucketPolicy\",\n      \"Properties\": {\n        \"PolicyDocument\": {\n          \"Id\": \"MyPolicy\",\n          \"Statement\": [\n              {\n                \"Sid\": \"PublicReadForGetBucketObjects\",\n                \"Effect\": \"Allow\",\n                \"Principal\": \"*\",\n                \"Action\": \"s3:GetObject\",\n                \"Resource\": {\n                  \"Fn::Join\": [\n                      \"\",\n                      [\n                        \"arn:aws:s3:::\",\n                        {\n                            \"Ref\": \"S3Bucket\"\n                        },\n                        \"/*\"\n                      ]\n                    ]\n                }\n              }\n            ]\n        },\n        \"Bucket\": {\n          \"Ref\": \"S3Bucket\"\n        }\n      }\n    }\n  },\n  \"Outputs\": {\n    \"S3BucketName\": {\n      \"Value\": {\n        \"Ref\": \"S3Bucket\"\n      },\n      \"Description\": \"Name of S3Bucket\"\n    }\n  }\n}"
      },
      "name": "createS3Bucket",
      "onFailure": "step:deleteStackOnError"
    },
    {
      "action": "aws:executeAwsApi",
      "description": "Gets information from stack creation that to use in the following step.",
      "inputs": {
        "Api": "DescribeStacks",
        "Service": "cloudformation",
        "StackName": "{{ createS3Bucket.StackId }}"
      },
      "name": "getStackInformation",
      "outputs": [
        {
          "Name": "S3BucketName",
          "Selector": "$.Stacks[0].Outputs[0].OutputValue",
          "Type": "String"
        }
      ]
    },
    {
      "action": "aws:executeScript",
      "description": "Uploads the index and error page to the S3 bucket.",
      "inputs": {
        "Handler": "script_handler",
        "InputPayload": {
          "S3BucketName": "{{ getStackInformation.S3BucketName }}"
        },
        "Runtime": "python3.6",
        "Script": "import boto3\ndef script_handler(events, context):\n\n  s3 = boto3.resource('s3')\n  data = \"\"\"<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n  <head>\n    <title>My Website Home Page</title>\n  </head>\n  <body>\n    <h1>Welcome to my website</h1>\n    <p>Now hosted on Amazon S3!</p>\n  </body>\n</html>\"\"\"\n\n  s3.Bucket(events[\"S3BucketName\"]).put_object(Key='index.html', Body=data)\n\n  data = \"\"\"<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n  <head>\n    <title>Error</title>\n  </head>\n  <body>\n    <p>Encountered an error.</p>\n  </body>\n</html>\"\"\"\n\n  s3.Bucket(events[\"S3BucketName\"]).put_object(Key='error.html', Body=data)"
      },
      "isEnd": true,
      "name": "uploadContent",
      "onFailure": "step:deleteStackOnError"
    },
    {
      "action": "aws:deleteStack",
      "description": "Deletes the CloudFormation stack when an error is encountered.",
      "inputs": {
        "StackName": "{{ createS3Bucket.StackId }}"
      },
      "name": "deleteStackOnError"
    }
  ],
  "parameters": {
    "AutomationAssumeRole": {
      "default": "",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf",
      "type": "String"
    }
  },
  "schemaVersion": "0.3"
}
