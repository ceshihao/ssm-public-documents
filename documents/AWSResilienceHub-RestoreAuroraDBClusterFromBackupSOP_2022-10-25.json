{
  "description": "## Id\nAWSResilienceHub-RestoreAuroraDBClusterFromBackupSOP_2022-10-25\n\n## Intent\nUsed to recover Amazon Aurora database to a known good state.\n\n## Type\nSOP\n\n## Risk\nMedium\n\n## Requirements\n  * Available Amazon Aurora DB cluster with a backup snapshot.\n\n## Permissions required for AutomationAssumeRole\n  * rds:CreateDBInstance\n  * rds:DescribeDBClusters\n  * rds:DescribeDBInstances\n  * rds:DescribeDBClusterSnapshots\n  * rds:ModifyDBCluster\n  * rds:ModifyDBInstance\n  * rds:RestoreDBClusterFromSnapshot\n  * rds:AddTagsToResource \n\n##### In case cluster is encrypted with a KMS key\n  * kms:CreateGrant\n  * kms:DescribeKey\n\n## Cancellation behavior\nFail\n\n## Inputs\n### (Required) AutomationAssumeRole\n  * type: String\n  * description: Amazon Resource Name (ARN) of the IAM role with permissions listed above.\n\n### (Required) DBClusterIdentifier\n  * type: String\n  * description: Amazon Aurora database cluster identifier.\n\n### (Required) DBSnapshotIdentifier\n  * type: String\n  * description: Aurora DB Snapshot Identifier.\n\n## Details\nThe document restores Amazon Aurora database cluster and instances from the latest snapshot or the specified \nsnapshot. The identifiers of source cluster and source instances are suffixed with\"-replaced\", while the restored clusters \nand instances are renamed to the original source identifiers. After the clusters and instances are restored, the document \nthen waits for them to become available. If users face any issues while restoring, users may need to remove the restored \ncluster and instances, and then remove the \"-replaced\" suffix from the original source identifiers. If renaming fails, \ncluster with the suffix \"-restored-from-backup\" and instances with the suffix \"-restored\" may remain and they should be \nrenamed manually or removed.\n\n## Steps executed in normal flow\n  * TrafficRedirectionPause\n  * RecordStartTime\n  * BackupDbClusterMetadata\n  * BackupDbClusterInstancesMetadata\n  * GetLatestSnapshotIdentifier\n  * RestoreAuroraDbCluster\n  * WaitUntilClusterStateAvailable\n  * RestoreAuroraDbClusterInstances\n  * RenameReplacedAuroraDbCluster\n  * WaitUntilInstanceStateAvailable\n  * RenameRestoredAuroraDbInstances\n  * RenameRestoredCluster\n  * WaitUntilRestoredInstancesAvailable\n  * OutputRecoveryTime\n\n## Outputs\n### OutputRecoveryTime.RecoveryTime\n  * type: Integer\n  * description: SOP execution time in seconds.\n\n### BackupDbClusterMetadata.BackupDbClusterInstancesCountValue\n* type: MapList\n* description: List of instances before recovery.\n\n### BackupDbClusterMetadata.AvailabilityZones\n* type: StringList\n* description: List of cluster's availability zones.\n\n### BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata\n* type: StringMap\n* description: List of instances metadata before recovery.\n\n### GetLatestSnapshotIdentifier.LatestSnapshot\n* type: String\n* description: Snapshot ID of latest available snapshot.\n\n### GetLatestSnapshotIdentifier.LatestSnapshotEngine\n* type: String\n* description: Snapshot ID of the latest available snapshot engine.\n\n### GetLatestSnapshotIdentifier.LatestClusterIdentifier\n* type: String\n* description: Cluster ID of latest available snapshot cluster.\n\n### RestoreAuroraDbCluster.RestoredClusterIdentifier\n* type: String\n* description: Cluster ID of the restored Amazon Aurora database cluster after recovery.\n\n### RestoreAuroraDbClusterInstances.RestoredInstancesIdentifiers\n* type: StringList\n* description: List of restored Amazon Aurora database clusterâ€™s instance IDs after recovery.\n\n### RenameReplacedAuroraDbCluster.ReplacedClusterIdentifier\n* type: String\n* description: Cluster ID of restored Amazon Aurora database cluster after recovery and renaming identifier.\n\n### RenameReplacedAuroraDbInstances.ReplacedInstancesIdentifiers\n* type: String\n* description: List of replaced Amazon Aurora database instance IDs after recovery and renaming identifier.\n\n### RenameRestoredAuroraDbInstances.RestoredInstancesIdentifiers\n* type: String\n* description: List of restored Amazon Aurora database instance IDs after recovery and renaming identifier.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "outputs": [
    "BackupDbClusterMetadata.BackupDbClusterInstancesCountValue",
    "BackupDbClusterMetadata.AvailabilityZones",
    "BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata",
    "GetLatestSnapshotIdentifier.LatestSnapshot",
    "GetLatestSnapshotIdentifier.LatestSnapshotEngine",
    "GetLatestSnapshotIdentifier.LatestClusterIdentifier",
    "RestoreAuroraDbCluster.RestoredClusterIdentifier",
    "RestoreAuroraDbClusterInstances.RestoredInstancesIdentifiers",
    "RenameReplacedAuroraDbCluster.ReplacedClusterIdentifier",
    "RenameReplacedAuroraDbInstances.ReplacedInstancesIdentifiers",
    "RenameRestoredAuroraDbInstances.RestoredInstancesIdentifiers",
    "OutputRecoveryTime.RecoveryTime"
  ],
  "parameters": {
    "DBClusterIdentifier": {
      "type": "String",
      "description": "(Required) Database Cluster Identifier"
    },
    "DBSnapshotIdentifier": {
      "type": "String",
      "default": "latest",
      "description": "(Optional) Database Snapshot Identifier"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this document."
    }
  },
  "mainSteps": [
    {
      "name": "TrafficRedirectionPause",
      "action": "aws:pause",
      "inputs": {
        "Message": "Resume execution once traffic has been redirected from the resource"
      }
    },
    {
      "name": "RecordStartTime",
      "description": "Start recording execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "StartTime",
          "Selector": "$.Payload",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "start_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef start_time(events, context):\n    return datetime.now(timezone.utc).isoformat()"
      }
    },
    {
      "name": "BackupDbClusterMetadata",
      "action": "aws:executeAwsApi",
      "description": "Backup current DbClusterInstances value",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBClusters",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ DBClusterIdentifier }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "BackupDbClusterInstancesCountValue",
          "Selector": "$.DBClusters[0].DBClusterMembers",
          "Type": "MapList"
        },
        {
          "Name": "AvailabilityZones",
          "Selector": "$.DBClusters[0].AvailabilityZones",
          "Type": "StringList"
        }
      ]
    },
    {
      "name": "BackupDbClusterInstancesMetadata",
      "action": "aws:executeScript",
      "description": "Backup current DbClusterInstances type",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "DBClusterInstancesMetadata",
          "Selector": "$.Payload.DBClusterInstancesMetadata",
          "Type": "StringMap"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "backup_cluster_instances_type",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}",
          "DBClusterInstances": "{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef backup_cluster_instances_type(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        restorable_instances_metadata = {}\n        instance_type = {}\n        instances = events['DBClusterInstances']\n        for instance in instances:\n            response = rds.describe_db_instances(DBInstanceIdentifier=instance['DBInstanceIdentifier'])\n            print(response)\n            instance_id = instance['DBInstanceIdentifier']\n            instance_type[instance_id] = {\n                'DBInstanceClass': response['DBInstances'][0]['DBInstanceClass'],\n                'Engine': response['DBInstances'][0]['Engine'],\n                'AvailabilityZone': response['DBInstances'][0]['AvailabilityZone']\n            }\n            restorable_instances_metadata.update(instance_type)\n        return {'DBClusterInstancesMetadata': restorable_instances_metadata}\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "GetLatestSnapshotIdentifier",
      "action": "aws:executeScript",
      "description": "Get identifier of the latest snapshot",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "LatestSnapshot",
          "Selector": "$.Payload.LatestSnapshotIdentifier",
          "Type": "String"
        },
        {
          "Name": "LatestSnapshotEngine",
          "Selector": "$.Payload.LatestSnapshotEngine",
          "Type": "String"
        },
        {
          "Name": "LatestClusterIdentifier",
          "Selector": "$.Payload.LatestClusterIdentifier",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "get_latest_snapshot_id",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef get_latest_snapshot_id(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        paginator = rds.get_paginator('describe_db_cluster_snapshots')\n        page_iterator = paginator.paginate(\n            DBClusterIdentifier=events['DBClusterIdentifier']\n        )\n        filtered_iterator = page_iterator.search(\"sort_by(DBClusterSnapshots, &to_string(SnapshotCreateTime))[-1]\")\n        latest_snapshot = None\n        for snapshot in filtered_iterator:\n            latest_snapshot = snapshot\n        if latest_snapshot:\n            return {\n                'LatestSnapshotIdentifier': latest_snapshot['DBClusterSnapshotIdentifier'],\n                'LatestSnapshotEngine': latest_snapshot['Engine'],\n                'LatestClusterIdentifier': latest_snapshot['DBClusterIdentifier']\n            }\n        else:\n            raise Exception(\n                f\"No snapshots found for cluster {events['DBClusterIdentifier']}\")\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "RestoreAuroraDbCluster",
      "action": "aws:executeScript",
      "description": "Restore cluster from the snapshot",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RestoredClusterIdentifier",
          "Selector": "$.Payload.RestoredClusterIdentifier",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "restore_db_cluster",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}",
          "DBSnapshotIdentifier": "{{ DBSnapshotIdentifier }}",
          "LatestSnapshotIdentifier": "{{ GetLatestSnapshotIdentifier.LatestSnapshot }}",
          "LatestSnapshotEngine": "{{ GetLatestSnapshotIdentifier.LatestSnapshotEngine }}",
          "AvailabilityZones": "{{ BackupDbClusterMetadata.AvailabilityZones }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef restore_db_cluster(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        restored_cluster_identifier = events['DBClusterIdentifier'] + '-restored-' + \\\n            datetime.now().strftime(RESTORED_CLUSTER_SUFFIX_FORMAT)\n        db_cluster_response = rds.describe_db_clusters(DBClusterIdentifier=events['DBClusterIdentifier'])\n        if 'DBClusters' in db_cluster_response and db_cluster_response['DBClusters']:\n            db_cluster = db_cluster_response['DBClusters'][0]\n            db_subnet_group = db_cluster['DBSubnetGroup']\n            db_sgs = [x['VpcSecurityGroupId'] for x in db_cluster['VpcSecurityGroups']]\n            port = db_cluster['Port']\n        else:\n            raise AssertionError(f'No db cluster found with id: {events[\"DBClusterIdentifier\"]}')\n\n        if events['DBSnapshotIdentifier'] == '' or events['DBSnapshotIdentifier'] == 'latest':\n            snapshot_identifier = events['LatestSnapshotIdentifier']\n        else:\n            snapshot_identifier = events['DBSnapshotIdentifier']\n\n        rds.restore_db_cluster_from_snapshot(\n            Engine=events['LatestSnapshotEngine'],\n            SnapshotIdentifier=snapshot_identifier,\n            DBClusterIdentifier=restored_cluster_identifier,\n            DBSubnetGroupName=db_subnet_group,\n            Port=port,\n            AvailabilityZones=events['AvailabilityZones'],\n            VpcSecurityGroupIds=db_sgs)\n\n        return {'RestoredClusterIdentifier': restored_cluster_identifier}\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "WaitUntilClusterStateAvailable",
      "description": "Wait for cluster to be in status available",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBClusters",
        "DBClusterIdentifier": "{{ RestoreAuroraDbCluster.RestoredClusterIdentifier }}",
        "PropertySelector": "$.DBClusters[0].Status",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "RestoreAuroraDbClusterInstances",
      "action": "aws:executeScript",
      "description": "Restore cluster database instances",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RestoredInstancesIdentifiers",
          "Selector": "$.Payload",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "restore_db_cluster_instances",
        "InputPayload": {
          "BackupDbClusterInstancesCountValue": "{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}",
          "DBClusterIdentifier": "{{ RestoreAuroraDbCluster.RestoredClusterIdentifier }}",
          "DBClusterInstancesMetadata": "{{ BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef restore_db_cluster_instances(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        print(events['BackupDbClusterInstancesCountValue'])\n        instances = events['BackupDbClusterInstancesCountValue']\n        instances_sorted = sorted(instances, key=itemgetter('IsClusterWriter'), reverse=True)\n        db_cluster_identifier = events['DBClusterIdentifier']\n        restored_instances_identifiers = []\n        cluster_info = rds.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)['DBClusters'][0]\n        new_cluster_azs = cluster_info['AvailabilityZones']\n        instances_by_az = {}\n        for az in new_cluster_azs:\n            instances_by_az[az] = 0\n        for instance in instances_sorted:\n            primary_instance = 1 if instance['IsClusterWriter'] else 2\n            restorable_instance_identifier = instance['DBInstanceIdentifier']\n            restored_instance_identifier = instance['DBInstanceIdentifier'] + '-restored'\n            if events['DBClusterInstancesMetadata'][restorable_instance_identifier]['AvailabilityZone'] \\\n                    in new_cluster_azs:\n                availability_zone = events['DBClusterInstancesMetadata'][restorable_instance_identifier][\n                    'AvailabilityZone']\n            else:\n                availability_zone = sorted(instances_by_az, key=instances_by_az.get)[0]\n            instances_by_az[availability_zone] += 1\n            rds.create_db_instance(\n                DBInstanceIdentifier=restored_instance_identifier,\n                DBInstanceClass=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['DBInstanceClass'],\n                Engine=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['Engine'],\n                DBClusterIdentifier=db_cluster_identifier,\n                AvailabilityZone=availability_zone,\n                PromotionTier=primary_instance\n            )\n            restored_instances_identifiers.append(restored_instance_identifier)\n        return restored_instances_identifiers\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "RenameReplacedAuroraDbCluster",
      "action": "aws:executeScript",
      "description": "Rename original cluster so it can be replaced with the restored one",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "ReplacedClusterIdentifier",
          "Selector": "$.Payload.ReplacedClusterIdentifier",
          "Type": "String"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "rename_replaced_db_cluster",
        "InputPayload": {
          "DBClusterIdentifier": "{{ DBClusterIdentifier }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef rename_replaced_db_cluster(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        db_cluster_identifier = events['DBClusterIdentifier']\n        new_db_cluster_identifier = db_cluster_identifier + '-replaced'\n        rds.modify_db_cluster(\n            DBClusterIdentifier=db_cluster_identifier,\n            NewDBClusterIdentifier=new_db_cluster_identifier,\n            ApplyImmediately=True,\n        )\n        return {'ReplacedClusterIdentifier': new_db_cluster_identifier}\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "RenameReplacedAuroraDbInstances",
      "action": "aws:executeScript",
      "description": "Rename original instances so they can be replaced with the restored ones",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "ReplacedInstancesIdentifiers",
          "Selector": "$.Payload",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "rename_replaced_db_instances",
        "InputPayload": {
          "DBClusterIdentifier": "{{ RenameReplacedAuroraDbCluster.ReplacedClusterIdentifier }}",
          "BackupDbClusterInstancesCountValue": "{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef rename_replaced_db_instances(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        instances = events['BackupDbClusterInstancesCountValue']\n        replaced_instances_identifiers = []\n        for instance in instances:\n            rds.modify_db_instance(\n                DBInstanceIdentifier=instance['DBInstanceIdentifier'],\n                ApplyImmediately=True,\n                NewDBInstanceIdentifier=instance['DBInstanceIdentifier'] + '-replaced',\n            )\n            replaced_instances_identifiers.append(instance['DBInstanceIdentifier'] + '-replaced')\n        return replaced_instances_identifiers\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "WaitUntilInstanceStateAvailable",
      "description": "Wait for instances to be in status available",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ RestoreAuroraDbCluster.RestoredClusterIdentifier }}"
            ]
          }
        ],
        "PropertySelector": "$.DBInstances..DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "RenameRestoredAuroraDbInstances",
      "action": "aws:executeScript",
      "description": "Rename restored Aurora DB instances so they replace the original ones",
      "onFailure": "Abort",
      "outputs": [
        {
          "Name": "RestoredInstancesIdentifiers",
          "Selector": "$.Payload",
          "Type": "StringList"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "rename_restored_db_instances",
        "InputPayload": {
          "RestoredInstancesIdentifiers": "{{ RestoreAuroraDbClusterInstances.RestoredInstancesIdentifiers }}",
          "RestoredClusterIdentifier": "{{ RestoreAuroraDbCluster.RestoredClusterIdentifier }}"
        },
        "Script": "import logging\nimport random\nimport time\nfrom datetime import datetime, timezone\nfrom operator import itemgetter\n\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\n\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\n\n\n\ndef rename_restored_db_instances(events, context):\n    try:\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\n        rds = boto3.client('rds', config=config)\n        instances = events['RestoredInstancesIdentifiers']\n        restored_instances_identifiers = []\n        for instance in instances:\n            restored_instance_identifier = instance.replace('-restored', '')\n            rds.modify_db_instance(\n                DBInstanceIdentifier=instance,\n                ApplyImmediately=True,\n                NewDBInstanceIdentifier=restored_instance_identifier\n            )\n            restored_instances_identifiers.append(restored_instance_identifier)\n        return restored_instances_identifiers\n    except Exception as e:\n        print(f'Error: {e}')\n        raise"
      }
    },
    {
      "name": "RenameRestoredCluster",
      "action": "aws:executeAwsApi",
      "description": "Rename restored Aurora DB cluster so it replaces the original one",
      "inputs": {
        "Service": "rds",
        "Api": "ModifyDBCluster",
        "DBClusterIdentifier": "{{ RestoreAuroraDbCluster.RestoredClusterIdentifier }}",
        "NewDBClusterIdentifier": "{{ GetLatestSnapshotIdentifier.LatestClusterIdentifier }}",
        "ApplyImmediately": true
      }
    },
    {
      "name": "WaitUntilRestoredInstancesAvailable",
      "description": "Wait for instances to be in status available",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 1200,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "db-cluster-id",
            "Values": [
              "{{ DBClusterIdentifier }}"
            ]
          }
        ],
        "PropertySelector": "$.DBInstances..DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "OutputRecoveryTime",
      "description": "Calculate execution time",
      "action": "aws:executeScript",
      "outputs": [
        {
          "Name": "RecoveryTime",
          "Selector": "$.Payload",
          "Type": "Integer"
        }
      ],
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "recovery_time",
        "Script": "import logging\nimport time\nfrom datetime import datetime, timezone\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom dateutil import parser\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\ndef recovery_time(events, context):\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds",
        "InputPayload": {
          "StartTime": "{{ RecordStartTime.StartTime }}"
        }
      }
    }
  ]
}
