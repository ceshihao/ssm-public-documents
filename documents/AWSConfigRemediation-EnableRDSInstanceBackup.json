{
  "schemaVersion": "0.3",
  "description": "### Document name - AWSConfigRemediation-EnableRDSInstanceBackup\n\n## What does this document do?\nThis document enables backups on an Amazon RDS DB instance using the [ModifyDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ModifyDBInstance.html) API.\nNote: This is not applicable for Amazon Aurora.\n\n## Input Parameters\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n* DbiResourceId: (Required) Resource ID of the Amazon RDS database instance for which backups need to be enabled.\n* ApplyImmediately: (Optional) A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled.\n  * Default: false\n* BackupRetentionPeriod: (Required) A positive integer value that indicates the number of days to retain automated backups.\n* PreferredBackupWindow: (Optional) A daily time range value of at least 30 minutes, in Universal Time Coordinated (UTC).\n  * Default: \"\"\n\n## Output Parameters\n* EnableBackupsOnRDSInstanceAndVerify.Output\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:aws[a-z0-9-]*:iam::\\d{12}:role\\/[\\w-\\/.@+=,]{1,1017}$"
    },
    "DbiResourceId": {
      "type": "String",
      "description": "(Required) Resource ID of the Amazon RDS database instance for which backups need to be enabled.",
      "allowedPattern": "^db-[A-Z0-9]+$"
    },
    "ApplyImmediately": {
      "type": "Boolean",
      "description": "(Optional) A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled.",
      "default": false
    },
    "BackupRetentionPeriod": {
      "type": "Integer",
      "description": "(Required) The integer number of days, between 1 and 35, to retain automated backups.",
      "allowedPattern": "^([1-9]|[12][\\d]|3[0-5])$"
    },
    "PreferredBackupWindow": {
      "type": "String",
      "description": "(Optional) A daily time range value of at least 30 minutes, in Universal Time Coordinated (UTC) in the format hh:mm-hh:mm.",
      "allowedPattern": "^$|^([01]\\d|2[0-3]):[0-5]\\d-([01]\\d|2[0-3]):[0-5]\\d$",
      "default": ""
    }
  },
  "outputs": [
    "EnableBackupsOnRDSInstanceAndVerify.Output"
  ],
  "mainSteps": [
    {
      "name": "GetRDSInstanceIdentifier",
      "action": "aws:executeAwsApi",
      "description": "## GetRDSInstanceIdentifier\nMakes DescribeDBInstances API call using the database instance resource identifier to get DBInstanceIdentifier.\n## Outputs\n* DBInstanceIdentifier: DBInstance identifier of the Amazon RDS instance.\n",
      "timeoutSeconds": 600,
      "isEnd": false,
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "Filters": [
          {
            "Name": "dbi-resource-id",
            "Values": [
              "{{ DbiResourceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "DBInstanceIdentifier",
          "Selector": "$.DBInstances[0].DBInstanceIdentifier",
          "Type": "String"
        }
      ]
    },
    {
      "name": "VerifyDBInstanceStatus",
      "action": "aws:waitForAwsResourceProperty",
      "timeoutSeconds": 900,
      "isEnd": false,
      "description": "## VerifyDBInstanceStatus\nWaits and verifies whether AWS RDS DBInstance status is available before enabling AutoMiniorVersionUpgrade.\n",
      "inputs": {
        "Service": "rds",
        "Api": "DescribeDBInstances",
        "DBInstanceIdentifier": "{{ GetRDSInstanceIdentifier.DBInstanceIdentifier }}",
        "PropertySelector": "$.DBInstances[0].DBInstanceStatus",
        "DesiredValues": [
          "available"
        ]
      }
    },
    {
      "name": "EnableBackupsOnRDSInstanceAndVerify",
      "action": "aws:executeScript",
      "description": "## EnableBackupsOnRDSInstanceAndVerify\nAccepts the Resource ID as input, modifies it to enable backups and verifies that backups are enabled or in `PendingModifiedValues` pending to be enabled.\n## Outputs\n* Output: A success message or failure exception.\n",
      "isEnd": true,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.11",
        "Handler": "handler",
        "InputPayload": {
          "DBInstanceIdentifier": "{{ GetRDSInstanceIdentifier.DBInstanceIdentifier }}",
          "ApplyImmediately": "{{ ApplyImmediately }}",
          "BackupRetentionPeriod": "{{ BackupRetentionPeriod }}",
          "PreferredBackupWindow": "{{ PreferredBackupWindow }}"
        },
        "Script": "import boto3\nimport botocore\n\ndef enable_backups(rds_client,event):\n    try:\n        parameter_names = [\"DBInstanceIdentifier\", \"ApplyImmediately\", \"BackupRetentionPeriod\", \"PreferredBackupWindow\"]\n        modify_params = {p: event[p] for p in parameter_names if event.get(p)}\n        rds_client.modify_db_instance(**modify_params)\n    except botocore.exceptions.ClientError as error:\n        if \"member of a cluster\" in error.response[\"Error\"][\"Message\"]:\n            raise Exception(f\"DB INSTANCE {event['DBInstanceIdentifier']} MODIFICATION FAILED. DB INSTANCE IS A MEMBER OF A CLUSTER, BACKUP RETENTION MANAGED ON THE DB CLUSTER.\")\n        elif \"backup window and maintenance window must not overlap\" in error.response[\"Error\"][\"Message\"]:\n            raise Exception(f\"DB INSTANCE {event['DBInstanceIdentifier']} MODIFICATION FAILED.  BACKUP WINDOW AND MAINTENANCE WINDOW MUST NOT OVERLAP.\")\n        elif \"backup window must be at least 30 minutes\" in error.response[\"Error\"][\"Message\"]:\n            raise Exception(f\"DB INSTANCE {event['DBInstanceIdentifier']} MODIFICATION FAILED. BACKUP WINDOW MUST BE AT LEAST 30 MINUTES.\")\n        else:\n            raise error\n\ndef verify_backups_enabled(rds_client, db_instance_identifier, backup_retention_period, preferred_backup_window):\n    db_instance = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance_identifier)[\"DBInstances\"][0]\n    properties = [\"BackupRetentionPeriod\",\"PreferredBackupWindow\"]\n    retention_periods, backup_windows = ([db_instance[\"PendingModifiedValues\"].get(p), db_instance[p]] for p in properties)\n    return (backup_retention_period in retention_periods and \n        (not preferred_backup_window or preferred_backup_window in backup_windows))\n\ndef handler(event, context):\n    rds_client = boto3.client(\"rds\")\n    db_instance_identifier = event[\"DBInstanceIdentifier\"]\n    enable_backups(rds_client, event)\n    if verify_backups_enabled(rds_client, db_instance_identifier, event[\"BackupRetentionPeriod\"], event.get(\"PreferredBackupWindow\")):\n        return {\"output\": \"Verification of backups enabled for Amazon RDS DB instance is successful.\"}\n    raise Exception(f\"VERIFICATION FAILED. DB RESOURCE ID {db_instance_identifier} BACKUPS NOT ENABLED PER PARAMETERS.\")"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "String"
        },
        {
          "Name": "ModifyDBInstanceResponse",
          "Selector": "$.Payload.ModifyDBInstanceResponse",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
