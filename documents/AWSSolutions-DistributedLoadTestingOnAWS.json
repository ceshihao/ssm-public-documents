{
  "schemaVersion": "1.0",
  "description": "(SO0062) - Distributed Load Testing on AWS is a reference architecture to perform application load testing at scale. Version v1.3.0",
  "templateBody": {
    "Description": "(SO0062) - Distributed Load Testing on AWS is a reference architecture to perform application load testing at scale. Version v1.3.0",
    "Parameters": {
      "AdminName": {
        "Type": "String",
        "Description": "Admin user name to access the Distributed Load Testing Console",
        "MinLength": 4,
        "MaxLength": 20,
        "AllowedPattern": "[a-zA-Z0-9-]+",
        "ConstraintDescription": "Admin username must be a minimum of 4 characters and cannot include spaces"
      },
      "AdminEmail": {
        "Type": "String",
        "Description": "Admin user email address to access the Distributed Load Testing Console",
        "MinLength": 5,
        "AllowedPattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$",
        "ConstraintDescription": "Admin email must be a valid email address"
      },
      "VpcCidrBlock": {
        "Type": "String",
        "Default": "192.168.0.0/16",
        "Description": "CIDR block of the new VPC where AWS Fargate will be placed",
        "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
        "MinLength": 9,
        "MaxLength": 18
      },
      "SubnetACidrBlock": {
        "Type": "String",
        "Default": "192.168.0.0/20",
        "Description": "CIDR block for subnet A of the AWS Fargate VPC",
        "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
        "MinLength": 9,
        "MaxLength": 18
      },
      "SubnetBCidrBlock": {
        "Type": "String",
        "Default": "192.168.16.0/20",
        "Description": "CIDR block for subnet B of the AWS Fargate VPC",
        "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "EgressCidr": {
        "Type": "String",
        "Default": "0.0.0.0/0",
        "Description": "CIDR Block to restrict the ECS container outbound access",
        "MinLength": 9,
        "MaxLength": 18,
        "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "DockerHubSecret": {
        "Type": "String",
        "Description": "Name of Secrets Manager Secret containing Docker Hub credentials"
      }
    },
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Console Access"
            },
            "Parameters": [
              "AdminName",
              "AdminEmail"
            ]
          },
          {
            "Label": {
              "default": "AWS Fargate VPC Settings"
            },
            "Parameters": [
              "VpcCidrBlock",
              "SubnetACidrBlock",
              "SubnetBCidrBlock",
              "EgressCidr"
            ]
          },
          {
            "Label": {
              "default": "Secrets Manager Secret"
            },
            "Parameters": [
              "DockerHubSecret"
            ]
          }
        ],
        "ParameterLabels": {
          "AdminName": {
            "default": "Console Administrator Name"
          },
          "AdminEmail": {
            "default": "Console Administrator Email"
          },
          "VpcCidrBlock": {
            "default": "AWS Fargate VPC CIDR Block"
          },
          "SubnetACidrBlock": {
            "default": "AWS Fargate Subnet A CIDR Block"
          },
          "SubnetBCidrBlock": {
            "default": "AWS Fargate Subnet B CIDR Block"
          },
          "EgressCidr": {
            "default": "AWS Fargate SecurityGroup CIDR Block"
          },
          "DockerHubSecret": {
            "default": "Docker Hub credentials Secret"
          }
        }
      }
    },
    "Mappings": {
      "Solution": {
        "Config": {
          "S3Bucket": "solutions",
          "KeyPrefix": "distributed-load-testing-on-aws/v1.3.0",
          "SendAnonymousData": true,
          "URL": "https://metrics.awssolutionsbuilder.com/generic",
          "SolutionId": "SO0062",
          "CodeVersion": "v1.3.0"
        }
      },
      "CodeBuildSecretsManager": {
        "dockerhub": {
          "login": "- docker login --username $secretUsername --password $secretPassword"
        }
      }
    },
    "Conditions": {
      "Metrics": [
        [
          "Solution",
          "Config",
          "SendAnonymousData"
        ],
        true
      ],
      "SecretProvided": [
        [
          "DockerHubSecret",
          ""
        ]
      ]
    },
    "Resources": {
      "CloudWatchLogsPolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-cloudwatch-policy",
          "Roles": [
            "LambdaApiRole",
            "LambdaResultsRole",
            "EcsTaskExecutionRole",
            "ContainerCodeBuildRole",
            "ContainerCodePipelineRole",
            "LambdaEcrCheckerRole",
            "LambdaTaskStatusRole",
            "LambdaCustomRole",
            "LambdaTaskRole",
            "LambdaTaskCancelerRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*"
                ]
              }
            ]
          }
        }
      },
      "S3Policy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-s3-policy",
          "Roles": [
            "LambdaApiRole",
            "LambdaResultsRole",
            "EcsTaskExecutionRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:HeadObject",
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:ListBucket"
                ],
                "Resource": [
                  "${ScenariosBucket.Arn}",
                  "${ScenariosBucket.Arn}/*"
                ]
              }
            ]
          }
        }
      },
      "DynamoDbPolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-dynamodb-policy",
          "Roles": [
            "LambdaApiRole",
            "LambdaResultsRole",
            "LambdaTaskRole",
            "LambdaEcrCheckerRole",
            "LambdaTaskStatusRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem"
                ],
                "Resource": [
                  "${ScenariosTable.Arn}"
                ]
              }
            ]
          }
        }
      },
      "LambdaApiPermissionPolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-lambdaapi-permission-policy",
          "Roles": [
            "LambdaApiRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:AddPermission",
                  "lambda:RemovePermission"
                ],
                "Resource": [
                  "ApiServices.Arn"
                ]
              }
            ]
          }
        }
      },
      "LambdaApiEventsPolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-lambdaapi-events-policy",
          "Roles": [
            "LambdaApiRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "events:PutTargets",
                  "events:PutRule",
                  "events:DeleteRule",
                  "events:RemoveTargets"
                ],
                "Resource": [
                  "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*Scheduled",
                  "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*Create"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "events:ListRules"
                ],
                "Resource": [
                  "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*"
                ]
              }
            ]
          }
        }
      },
      "TaskCancelerInvokePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "${AWS::StackName}-lambda-TaskCanceler-invoke-policy",
          "Roles": [
            "LambdaApiRole",
            "LambdaTaskStatusRole"
          ],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": [
                  "TaskCanceler.Arn"
                ]
              }
            ]
          }
        }
      },
      "LambdaApiRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-api-lambda-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:ListTasks"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:RunTask",
                      "ecs:DescribeTasks"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task/*",
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": [
                      "${EcsTaskExecutionRole.Arn}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "states:StartExecution"
                    ],
                    "Resource": [
                      "TaskRunnerStepFunctions"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:DeleteMetricFilter"
                    ],
                    "Resource": [
                      "EcsCloudWatchLogGroup.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cloudwatch:DeleteDashboards"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:cloudwatch::${AWS::AccountId}:dashboard/EcsLoadTesting*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "ecs:listTasks does not support resource level permissions."
              }
            ]
          }
        }
      },
      "LambdaTaskRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-task-lambda-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:ListTasks"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:RunTask",
                      "ecs:DescribeTasks"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task/*",
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": [
                      "${EcsTaskExecutionRole.Arn}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:PutMetricFilter"
                    ],
                    "Resource": [
                      "EcsCloudWatchLogGroup.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cloudwatch:PutDashboard"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:cloudwatch::${AWS::AccountId}:dashboard/EcsLoadTesting*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "ecs:listTasks does not support resource level permissions."
              }
            ]
          }
        }
      },
      "LambdaTaskCancelerRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-task-canceler-lambda-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:ListTasks"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:StopTask"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task/*",
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      "${ScenariosTable.Arn}"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "ecs:listTasks does not support resource level permissions."
              }
            ]
          }
        }
      },
      "LambdaTaskStatusRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-task-status-lambda-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:ListTasks"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:DescribeTasks"
                    ],
                    "Resource": [
                      "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task/*"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "ecs:ListTasks cannot specify resource level."
              }
            ]
          }
        }
      },
      "LambdaEcrCheckerRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-ecr-checker-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecr:DescribeImages"
                    ],
                    "Resource": [
                      "EcrRepository.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codebuild:ListBuildsForProject",
                      "codebuild:BatchGetBuilds"
                    ],
                    "Resource": [
                      "ContainerCodeBuild.Arn"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "LambdaResultsRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-api-lambda-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cloudwatch:GetMetricWidgetImage"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "cloudwatch:GetMetricWidgetImage does not support resource level permisions."
              }
            ]
          }
        }
      },
      "LambdaCustomRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-custom-resource-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "${ContainerBucket.Arn}/*",
                      "${ConsoleBucket.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": [
                      [
                        "arn:${AWS::Partition}:s3:::${Bucket}-${AWS::Region}/*",
                        {
                          "Bucket": [
                            "Solution",
                            "Config",
                            "S3Bucket"
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "EcsTaskExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com"
                }
              }
            ]
          },
          "ManagedPolicyArns": [
            "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
          ]
        }
      },
      "ContainerCodeBuildRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Principal": {
                  "Service": "codebuild.amazonaws.com"
                }
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-code-build-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecr:DescribeImages",
                      "ecr:PutImage",
                      "ecr:UploadLayerPart",
                      "ecr:CompleteLayerUpload",
                      "ecr:InitiateLayerUpload",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:ListImages",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:GetRepositoryPolicy"
                    ],
                    "Resource": [
                      "${EcrRepository.Arn}"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecr:GetAuthorizationToken"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:GetObjectVersion",
                      "s3:GetBucketVersioning",
                      "s3:GetObjectVersion",
                      "s3:ListBucketVersions",
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "${ContainerBucket.Arn}",
                      "${ContainerBucket.Arn}/*"
                    ]
                  },
                  [
                    "SecretProvided",
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue"
                      ],
                      "Resource": "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DockerHubSecret}*"
                    },
                    "AWS::NoValue"
                  ]
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "ecr:GetAuthorizationToken does not support resource level permission."
              }
            ]
          }
        }
      },
      "ContainerCodePipelineRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "codepipeline.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-code-pipeline-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:GetObjectVersion",
                      "s3:GetBucketVersioning",
                      "s3:ListBucketVersions",
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "${ContainerBucket.Arn}",
                      "${ContainerBucket.Arn}/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codebuild:StartBuild",
                      "codebuild:BatchGetBuilds"
                    ],
                    "Resource": [
                      "${ContainerCodeBuild.Arn}"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "ApiLambdaInvoke": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": "ApiServices.Arn",
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        }
      },
      "Vpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "VpcCidrBlock",
          "InstanceTenancy": "default",
          "EnableDnsSupport": true,
          "EnableDnsHostnames": true,
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W60",
                "reason": "This VPC is used by Fargates only, so it does not require to have VPC flow logs."
              }
            ]
          }
        }
      },
      "PublicSubnetA": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "SubnetACidrBlock",
          "AvailabilityZone": [
            0,
            ""
          ],
          "VpcId": "Vpc"
        }
      },
      "PublicSubnetB": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "SubnetBCidrBlock",
          "AvailabilityZone": [
            0,
            ""
          ],
          "VpcId": "Vpc"
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
      },
      "MainRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": "Vpc"
        }
      },
      "GatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": "Vpc",
          "InternetGatewayId": "InternetGateway"
        }
      },
      "RouteToInternet": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "GatewayAttachment",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "RouteTableId": "MainRouteTable",
          "GatewayId": "InternetGateway"
        }
      },
      "RouteTableAssociationA": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": "MainRouteTable",
          "SubnetId": "PublicSubnetA"
        }
      },
      "RouteTableAssociationB": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": "MainRouteTable",
          "SubnetId": "PublicSubnetB"
        }
      },
      "EcrRepository": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::ECR::Repository",
        "Properties": {
          "ImageScanningConfiguration": {
            "ScanOnPush": "true"
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W79",
                "reason": "Already contains ScanOnPush, attribute was recently changed from scanOnPush to ScanOnPush causing warning"
              }
            ]
          }
        }
      },
      "EcsCluster": {
        "Type": "AWS::ECS::Cluster",
        "Properties": {
          "ClusterName": "${AWS::StackName}",
          "ClusterSettings": [
            {
              "Name": "containerInsights",
              "Value": "enabled"
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "EcsSecurityGroupIngress": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "Description": "Allow tasks to communicate",
          "FromPort": 50000,
          "IpProtocol": "tcp",
          "GroupId": "EcsSecurityGroup",
          "SourceSecurityGroupId": "EcsSecurityGroup",
          "ToPort": 50000
        }
      },
      "EcsSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "DLTS Tasks Security Group",
          "VpcId": "Vpc",
          "SecurityGroupEgress": [
            {
              "IpProtocol": "-1",
              "CidrIp": "EgressCidr"
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W36",
                "reason": "flagged as not having a Description, property is GroupDescription not Description"
              },
              {
                "id": "W40",
                "reason": "IpProtocol set to -1 (any) as ports are not known prior to running tests"
              }
            ]
          }
        }
      },
      "EcsTaskDefinition": {
        "Type": "AWS::ECS::TaskDefinition",
        "Properties": {
          "Cpu": "2048",
          "ExecutionRoleArn": "EcsTaskExecutionRole.Arn",
          "Memory": "4096",
          "NetworkMode": "awsvpc",
          "RequiresCompatibilities": [
            "FARGATE"
          ],
          "TaskRoleArn": "EcsTaskExecutionRole.Arn",
          "ContainerDefinitions": [
            {
              "Essential": true,
              "Name": "${AWS::StackName}-load-tester",
              "Image": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest",
              "Memory": 4096,
              "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": "EcsCloudWatchLogGroup",
                  "awslogs-region": "AWS::Region",
                  "awslogs-stream-prefix": "load-testing"
                }
              }
            }
          ]
        }
      },
      "EcsCloudWatchLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": 365
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W84",
                "reason": "KMS encryption unnecessary for log group."
              }
            ]
          }
        }
      },
      "ScenariosBucket": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "LoggingConfiguration": {
            "DestinationBucketName": "LogsBucket",
            "LogFilePrefix": "scenarios-bucket-access/"
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "aws:kms"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "CorsConfiguration": {
            "CorsRules": [
              {
                "AllowedMethods": [
                  "GET",
                  "POST",
                  "PUT"
                ],
                "AllowedOrigins": [
                  "https://${ConsoleCloudFront.DomainName}"
                ],
                "AllowedHeaders": [
                  "*"
                ],
                "ExposedHeaders": [
                  "ETag"
                ]
              }
            ]
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "ScenariosBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": "ScenariosBucket",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:*",
                "Effect": "Deny",
                "Principal": "*",
                "Resource": [
                  "${ScenariosBucket.Arn}",
                  "${ScenariosBucket.Arn}/*"
                ],
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": false
                  }
                }
              }
            ]
          }
        }
      },
      "ContainerBucket": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "VersioningConfiguration": {
            "Status": "Enabled"
          },
          "LoggingConfiguration": {
            "DestinationBucketName": "LogsBucket",
            "LogFilePrefix": "container-bucket-access/"
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "aws:kms"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W51",
                "reason": "Since the bucket does not allow the public access, it does not require to have bucket policy."
              }
            ]
          }
        }
      },
      "LogsBucket": {
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "LogDeliveryWrite",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "aws:kms"
                }
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W35",
                "reason": "Logging not enabled, this is the logs bucket for CloudFront and the other S3 buckets."
              },
              {
                "id": "W51",
                "reason": "Since the bucket does not allow the public access, it does not require to have bucket policy."
              }
            ]
          }
        }
      },
      "ConsoleBucket": {
        "Type": "AWS::S3::Bucket",
        "DeletionPolicy": "Retain",
        "UpdateReplacePolicy": "Retain",
        "Properties": {
          "WebsiteConfiguration": {
            "IndexDocument": "index.html",
            "ErrorDocument": "index.html"
          },
          "LoggingConfiguration": {
            "DestinationBucketName": "LogsBucket",
            "LogFilePrefix": "console-bucket-access/"
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "ScenariosTable": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "testId",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "testId",
              "KeyType": "HASH"
            }
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "SSESpecification": {
            "SSEEnabled": true
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W78",
                "reason": "The table does not require PITR."
              }
            ]
          }
        }
      },
      "ConsoleBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": "ConsoleBucket",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "CanonicalUser": "ConsoleOriginAccessIdentity.S3CanonicalUserId"
                },
                "Action": "s3:GetObject",
                "Resource": "${ConsoleBucket.Arn}/*"
              }
            ]
          }
        }
      },
      "ConsoleOriginAccessIdentity": {
        "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
        "Properties": {
          "CloudFrontOriginAccessIdentityConfig": {
            "Comment": "access-identity-${ConsoleBucket}"
          }
        }
      },
      "ConsoleCloudFront": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "Comment": "Website distribution for solution",
            "Logging": {
              "IncludeCookies": false,
              "Bucket": "LogsBucket.DomainName",
              "Prefix": "cloudfront-logs/"
            },
            "Origins": [
              {
                "Id": "console",
                "DomainName": "${ConsoleBucket}.s3.${AWS::Region}.amazonaws.com",
                "OriginPath": "/console",
                "S3OriginConfig": {
                  "OriginAccessIdentity": "origin-access-identity/cloudfront/${ConsoleOriginAccessIdentity}"
                }
              }
            ],
            "DefaultCacheBehavior": {
              "TargetOriginId": "console",
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "POST",
                "PATCH",
                "DELETE"
              ],
              "CachedMethods": [
                "GET",
                "HEAD",
                "OPTIONS"
              ],
              "ForwardedValues": {
                "QueryString": false
              },
              "ViewerProtocolPolicy": "redirect-to-https"
            },
            "IPV6Enabled": true,
            "DefaultRootObject": "index.html",
            "CustomErrorResponses": [
              {
                "ErrorCode": 404,
                "ResponsePagePath": "/index.html",
                "ResponseCode": 200
              },
              {
                "ErrorCode": 403,
                "ResponsePagePath": "/index.html",
                "ResponseCode": 200
              }
            ],
            "ViewerCertificate": {
              "CloudFrontDefaultCertificate": true
            },
            "Enabled": true,
            "HttpVersion": "http2"
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W70",
                "reason": "With the default CF certificate, we cannot set up the minimum protocol to TLS 1.2."
              }
            ]
          }
        }
      },
      "ContainerCodeBuild": {
        "Type": "AWS::CodeBuild::Project",
        "Properties": {
          "Description": "Builds distributed load testing suite",
          "TimeoutInMinutes": 20,
          "ServiceRole": "ContainerCodeBuildRole.Arn",
          "EncryptionKey": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3",
          "Artifacts": {
            "Type": "CODEPIPELINE"
          },
          "Environment": {
            "Type": "LINUX_CONTAINER",
            "ComputeType": "BUILD_GENERAL1_MEDIUM",
            "Image": "aws/codebuild/standard:4.0",
            "PrivilegedMode": true,
            "EnvironmentVariables": [
              {
                "Name": "REPOSITORY",
                "Value": "${EcrRepository}"
              },
              {
                "Name": "REPOSITORY_URI",
                "Value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}"
              },
              [
                "SecretProvided",
                {
                  "Name": "secretUsername",
                  "Value": "${DockerHubSecret}:username",
                  "Type": "SECRETS_MANAGER"
                },
                "AWS::NoValue"
              ],
              [
                "SecretProvided",
                {
                  "Name": "secretPassword",
                  "Value": "${DockerHubSecret}:password",
                  "Type": "SECRETS_MANAGER"
                },
                "AWS::NoValue"
              ]
            ]
          },
          "Source": {
            "Type": "CODEPIPELINE",
            "BuildSpec": [
              "version: 0.2\nphases:\n    pre_build:\n      commands:\n        - aws --version\n        - echo $REPOSITORY\n        - echo $REPOSITORY_URI\n        - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin $REPOSITORY_URI\n        ${DockerHubLogin}\n    build:\n      commands:\n        - docker build -t $REPOSITORY:latest .\n        - docker tag $REPOSITORY:latest $REPOSITORY_URI:latest\n    post_build:\n      commands:\n        - docker push $REPOSITORY_URI:latest\n",
              {
                "DockerHubLogin": [
                  "SecretProvided",
                  [
                    "CodeBuildSecretsManager",
                    "dockerhub",
                    "login"
                  ],
                  ""
                ]
              }
            ]
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "ContainerCodePipeline": {
        "DependsOn": [
          "CopyDockerFile",
          "CloudWatchLogsPolicy"
        ],
        "Type": "AWS::CodePipeline::Pipeline",
        "Properties": {
          "RoleArn": "ContainerCodePipelineRole.Arn",
          "ArtifactStore": {
            "Type": "S3",
            "Location": "ContainerBucket"
          },
          "Stages": [
            {
              "Name": "Source",
              "Actions": [
                {
                  "Name": "Source",
                  "ActionTypeId": {
                    "Category": "Source",
                    "Provider": "S3",
                    "Owner": "AWS",
                    "Version": "1"
                  },
                  "OutputArtifacts": [
                    {
                      "Name": "SourceOutput"
                    }
                  ],
                  "Configuration": {
                    "S3Bucket": "ContainerBucket",
                    "S3ObjectKey": "container.zip"
                  }
                }
              ]
            },
            {
              "Name": "Build",
              "Actions": [
                {
                  "Name": "Build",
                  "ActionTypeId": {
                    "Category": "Build",
                    "Owner": "AWS",
                    "Version": "1",
                    "Provider": "CodeBuild"
                  },
                  "InputArtifacts": [
                    {
                      "Name": "SourceOutput"
                    }
                  ],
                  "OutputArtifacts": [
                    {
                      "Name": "BuildOutput"
                    }
                  ],
                  "Configuration": {
                    "ProjectName": "ContainerCodeBuild"
                  }
                }
              ]
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "CustomResource": {
        "DependsOn": "ScenariosBucket",
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "CFN Lambda backed custom resource to deploy assets to s3",
          "Handler": "index.handler",
          "Role": "LambdaCustomRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "custom-resource.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "METRIC_URL": [
                "Solution",
                "Config",
                "URL"
              ],
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ]
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "ApiServices": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "api microservices for creating, updating, listing and deleting test scenarios",
          "Handler": "index.handler",
          "Role": "LambdaApiRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "api-services.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "SCENARIOS_BUCKET": "ScenariosBucket",
              "SCENARIOS_TABLE": "ScenariosTable",
              "TASK_CLUSTER": "EcsCluster",
              "STATE_MACHINE_ARN": "TaskRunnerStepFunctions",
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "UUID": "Uuid.UUID",
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ],
              "SEND_METRIC": [
                "Solution",
                "Config",
                "SendAnonymousData"
              ],
              "METRIC_URL": [
                "Solution",
                "Config",
                "URL"
              ],
              "ECS_LOG_GROUP": "EcsCloudWatchLogGroup",
              "TASK_CANCELER_ARN": "TaskCanceler.Arn"
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "ResultsParser": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "result parser for indexing xml test results to DynamoDB",
          "Handler": "index.handler",
          "Role": "LambdaResultsRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "results-parser.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 120,
          "Environment": {
            "Variables": {
              "SCENARIOS_BUCKET": "ScenariosBucket",
              "SCENARIOS_TABLE": "ScenariosTable",
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "UUID": "Uuid.UUID",
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ],
              "SEND_METRIC": [
                "Solution",
                "Config",
                "SendAnonymousData"
              ],
              "METRIC_URL": [
                "Solution",
                "Config",
                "URL"
              ]
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "TaskRunner": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "Task runner for ECS task definitions",
          "Handler": "index.handler",
          "Role": "LambdaTaskRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "task-runner.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 900,
          "Environment": {
            "Variables": {
              "SCENARIOS_BUCKET": "ScenariosBucket",
              "SCENARIOS_TABLE": "ScenariosTable",
              "TASK_CLUSTER": "EcsCluster",
              "TASK_DEFINITION": "EcsTaskDefinition",
              "TASK_SECURITY_GROUP": "EcsSecurityGroup",
              "TASK_IMAGE": "${AWS::StackName}-load-tester",
              "SUBNET_A": "PublicSubnetA",
              "SUBNET_B": "PublicSubnetB",
              "API_INTERVAL": 10,
              "ECS_LOG_GROUP": "EcsCloudWatchLogGroup",
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ]
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "TaskCanceler": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "Stops ECS tasks",
          "Handler": "index.handler",
          "Role": "LambdaTaskCancelerRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "task-canceler.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 300,
          "Environment": {
            "Variables": {
              "METRIC_URL": [
                "Solution",
                "Config",
                "URL"
              ],
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ],
              "SCENARIOS_TABLE": "ScenariosTable",
              "TASK_CLUSTER": "EcsCluster"
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "TaskStatusChecker": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "Task status checker",
          "Handler": "index.handler",
          "Role": "LambdaTaskStatusRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "task-status-checker.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 180,
          "Environment": {
            "Variables": {
              "TASK_CLUSTER": "EcsCluster",
              "SCENARIOS_TABLE": "ScenariosTable",
              "TASK_CANCELER_ARN": "TaskCanceler.Arn",
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ]
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "EcrChecker": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "ECR readiness checker",
          "Handler": "index.handler",
          "Role": "LambdaEcrCheckerRole.Arn",
          "Code": {
            "S3Bucket": [
              "-",
              [
                [
                  "Solution",
                  "Config",
                  "S3Bucket"
                ],
                {
                  "Ref": "AWS::Region"
                }
              ]
            ],
            "S3Key": [
              "/",
              [
                [
                  "Solution",
                  "Config",
                  "KeyPrefix"
                ],
                "ecr-checker.zip"
              ]
            ]
          },
          "Runtime": "nodejs12.x",
          "Timeout": 60,
          "Environment": {
            "Variables": {
              "CODE_BUILD_PROJECT": "ContainerCodeBuild",
              "ECR_REPOSITORY_NAME": "EcrRepository",
              "SCENARIOS_TABLE": "ScenariosTable",
              "SOLUTION_ID": [
                "Solution",
                "Config",
                "SolutionId"
              ],
              "VERSION": [
                "Solution",
                "Config",
                "CodeVersion"
              ]
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "CloudWatchLogsPolicy covers a permission to write CloudWatch logs."
              },
              {
                "id": "W89",
                "reason": "VPC not needed for lambda"
              },
              {
                "id": "W92",
                "reason": "Does not run concurrent executions"
              }
            ]
          }
        }
      },
      "ApiLoggingRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Principal": {
                  "Service": "apigateway.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams",
                      "logs:PutLogEvents",
                      "logs:GetLogEvents",
                      "logs:FilterLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": "ApiCloudWatchRolePolicy"
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "ApiAccountConfig": {
        "Type": "AWS::ApiGateway::Account",
        "DependsOn": "Api",
        "Properties": {
          "CloudWatchRoleArn": "ApiLoggingRole.Arn"
        }
      },
      "ApiLogs": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": 365
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W84",
                "reason": "KMS encryption unnecessary for log group"
              }
            ]
          }
        }
      },
      "ApiDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": "ApiAccountConfig",
        "Properties": {
          "RestApiId": "Api",
          "Description": "Production",
          "StageName": "prod",
          "StageDescription": {
            "AccessLogSetting": {
              "DestinationArn": "ApiLogs.Arn",
              "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
            }
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W68",
                "reason": "Usage plan is not needed for the solution."
              }
            ]
          }
        }
      },
      "Api": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "Body": {
            "swagger": "2.0",
            "info": {
              "title": "${AWS::StackName}"
            },
            "basePath": "/prod",
            "schemes": [
              "https"
            ],
            "produces": [
              "application/json"
            ],
            "x-amazon-apigateway-request-validators": {
              "all": {
                "validateRequestBody": true,
                "validateRequestParameters": true
              },
              "params-only": {
                "validateRequestBody": false,
                "validateRequestParameters": true
              }
            },
            "x-amazon-apigateway-request-validator": "all",
            "paths": {
              "/scenarios": {
                "options": {
                  "consumes": [
                    "application/json"
                  ],
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      },
                      "headers": {
                        "Access-Control-Allow-Origin": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Methods": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Headers": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-amazon-apigateway-integration": {
                    "responses": {
                      "default": {
                        "statusCode": "200",
                        "responseParameters": {
                          "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                          "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                          "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "requestTemplates": {
                      "application/json": "{\"statusCode\": 200}"
                    },
                    "type": "mock"
                  }
                },
                "x-amazon-apigateway-any-method": {
                  "x-amazon-apigateway-request-validator": "all",
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      }
                    }
                  },
                  "security": [
                    {
                      "sigv4": []
                    }
                  ],
                  "x-amazon-apigateway-integration": {
                    "uri": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiServices.Arn}/invocations",
                    "responses": {
                      "default": {
                        "statusCode": "200"
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT",
                    "type": "aws_proxy"
                  }
                }
              },
              "/scenarios/{testId}": {
                "options": {
                  "consumes": [
                    "application/json"
                  ],
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      },
                      "headers": {
                        "Access-Control-Allow-Origin": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Methods": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Headers": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-amazon-apigateway-integration": {
                    "responses": {
                      "default": {
                        "statusCode": "200",
                        "responseParameters": {
                          "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                          "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                          "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "requestTemplates": {
                      "application/json": "{\"statusCode\": 200}"
                    },
                    "type": "mock"
                  }
                },
                "x-amazon-apigateway-any-method": {
                  "x-amazon-apigateway-request-validator": "params-only",
                  "produces": [
                    "application/json"
                  ],
                  "parameters": [
                    {
                      "name": "testId",
                      "in": "path",
                      "required": true,
                      "type": "string"
                    }
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      }
                    }
                  },
                  "security": [
                    {
                      "sigv4": []
                    }
                  ],
                  "x-amazon-apigateway-integration": {
                    "uri": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiServices.Arn}/invocations",
                    "responses": {
                      "default": {
                        "statusCode": "200"
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT",
                    "type": "aws_proxy"
                  }
                }
              },
              "/tasks": {
                "options": {
                  "consumes": [
                    "application/json"
                  ],
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      },
                      "headers": {
                        "Access-Control-Allow-Origin": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Methods": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Headers": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-amazon-apigateway-integration": {
                    "responses": {
                      "default": {
                        "statusCode": "200",
                        "responseParameters": {
                          "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                          "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                          "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "requestTemplates": {
                      "application/json": "{\"statusCode\": 200}"
                    },
                    "type": "mock"
                  }
                },
                "x-amazon-apigateway-any-method": {
                  "x-amazon-apigateway-request-validator": "params-only",
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      }
                    }
                  },
                  "security": [
                    {
                      "sigv4": []
                    }
                  ],
                  "x-amazon-apigateway-integration": {
                    "uri": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiServices.Arn}/invocations",
                    "responses": {
                      "default": {
                        "statusCode": "200"
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT",
                    "type": "aws_proxy"
                  }
                }
              }
            },
            "securityDefinitions": {
              "sigv4": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "definitions": {
              "Empty": {
                "type": "object",
                "title": "Empty Schema"
              }
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "CognitoAuthorizedRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "cognito-identity.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRoleWithWebIdentity"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "${AWS::StackName}-congnito-access-role",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "execute-api:Invoke"
                    ],
                    "Resource": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/prod/*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:PutObject",
                      "s3:GetObject"
                    ],
                    "Resource": "${ScenariosBucket.Arn}/public/*"
                  }
                ]
              }
            }
          ]
        }
      },
      "CognitoUnAuthorizedRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "cognito-identity.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRoleWithWebIdentity"
                ]
              }
            ]
          }
        }
      },
      "CognitoUserPool": {
        "Type": "AWS::Cognito::UserPool",
        "Properties": {
          "UserPoolName": "${AWS::StackName}",
          "AdminCreateUserConfig": {
            "AllowAdminCreateUserOnly": true,
            "InviteMessageTemplate": {
              "EmailMessage": "<p>You are invited to join the Distribution Load Testing Solution.</p>\n<p>Username: <strong>{username}</strong></p>\n<p>Password: <strong>{####}</strong></p>\n<p>Console: <strong>https://${ConsoleCloudFront.DomainName}/</strong></p>\n",
              "EmailSubject": "Welcome to Distributed Load Testing",
              "SMSMessage": "Your username is {username} and temporary password is {####}."
            },
            "UnusedAccountValidityDays": 7
          },
          "AliasAttributes": [
            "email"
          ],
          "AutoVerifiedAttributes": [
            "email"
          ],
          "EmailVerificationMessage": "Your Distribution Load Testing console verification code is {####}.",
          "EmailVerificationSubject": "Your Distribution Load Testing console verification code",
          "Policies": {
            "PasswordPolicy": {
              "MinimumLength": 8,
              "RequireLowercase": true,
              "RequireNumbers": true,
              "RequireSymbols": false,
              "RequireUppercase": true
            }
          },
          "Schema": [
            {
              "AttributeDataType": "String",
              "Name": "email",
              "Required": true
            }
          ]
        }
      },
      "CognitoUserPoolClient": {
        "Type": "AWS::Cognito::UserPoolClient",
        "Properties": {
          "ClientName": "${AWS::StackName}-app",
          "GenerateSecret": false,
          "WriteAttributes": [
            "address",
            "email",
            "phone_number"
          ],
          "RefreshTokenValidity": 1,
          "UserPoolId": "CognitoUserPool"
        }
      },
      "CognitoIdentityPool": {
        "Type": "AWS::Cognito::IdentityPool",
        "Properties": {
          "IdentityPoolName": "${AWS::StackName}",
          "AllowUnauthenticatedIdentities": false,
          "CognitoIdentityProviders": [
            {
              "ClientId": "CognitoUserPoolClient",
              "ProviderName": "CognitoUserPool.ProviderName"
            }
          ]
        }
      },
      "CognitoAttachRole": {
        "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
        "Properties": {
          "IdentityPoolId": "CognitoIdentityPool",
          "Roles": {
            "unauthenticated": "CognitoUnAuthorizedRole.Arn",
            "authenticated": "CognitoAuthorizedRole.Arn"
          }
        }
      },
      "CognitoUser": {
        "Type": "AWS::Cognito::UserPoolUser",
        "Properties": {
          "DesiredDeliveryMediums": [
            "EMAIL"
          ],
          "ForceAliasCreation": true,
          "UserAttributes": [
            {
              "Name": "email",
              "Value": "AdminEmail"
            },
            {
              "Name": "nickname",
              "Value": "AdminName"
            },
            {
              "Name": "email_verified",
              "Value": "True"
            }
          ],
          "Username": "AdminName",
          "UserPoolId": "CognitoUserPool"
        }
      },
      "TaskRunnerStepFunctions": {
        "Type": "AWS::StepFunctions::StateMachine",
        "Properties": {
          "RoleArn": "TaskRunnerStepFunctionsRole.Arn",
          "DefinitionString": "{\n  \"Comment\": \"Distributed Load Testing on AWS Task Runner\",\n  \"StartAt\": \"Check ECR is ready\",\n  \"States\": {\n    \"Check ECR is ready\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${EcrChecker.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"ECR is ready?\"\n    },\n    \"ECR is ready?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ecrReady\",\n          \"BooleanEquals\": true,\n          \"Next\": \"Check running tests\"\n        }\n      ],\n      \"Default\": \"Wait 1 minute - ECR ready\"\n    },\n    \"Wait 1 minute - ECR ready\": {\n      \"Comment\": \"Wait 1 minute to check ECR readiness\",\n      \"Type\": \"Wait\",\n      \"Seconds\": 60,\n      \"Next\": \"Check ECR is ready\"\n    },\n    \"Check running tests\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskStatusChecker.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"No running test?\"\n    },\n    \"No running test?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.isRunning\",\n          \"BooleanEquals\": false,\n          \"Next\": \"Run workers\"\n        }\n      ],\n      \"Default\": \"Test is still running\"\n    },\n    \"Test is still running\": {\n      \"Type\": \"Fail\",\n      \"Error\": \"TestAlreadyRunning\",\n      \"Cause\": \"The same test is already running.\"\n    },\n    \"Run workers\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskRunner.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"All workers launched?\"\n    },\n    \"All workers launched?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.isRunning\",\n          \"BooleanEquals\": false,\n          \"Next\": \"Cancel Test\"\n        },\n        {\n          \"Variable\": \"$.taskRunner.runTaskCount\",\n          \"NumericEquals\": 1,\n          \"Next\": \"Wait 1 minute - worker status\"\n        },\n        {\n          \"Variable\": \"$.taskRunner.runTaskCount\",\n          \"NumericEquals\": 0,\n          \"Next\": \"Wait 1 minute - task status\"\n        }\n      ],\n      \"Default\": \"Run workers\"\n    },\n    \"Cancel Test\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskCanceler.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": null,\n      \"OutputPath\": \"$\",\n      \"Next\": \"Parse result\"\n    },\n    \"Wait 1 minute - worker status\": {\n      \"Comment\": \"Wait 1 minute to check task status again\",\n      \"Type\": \"Wait\",\n      \"Seconds\": 60,\n      \"Next\": \"Check worker status\"\n    },\n    \"Check worker status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskStatusChecker.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"All workers running?\"\n    },\n    \"All workers running?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.numTasksRunning\",\n          \"NumericEqualsPath\": \"$.scenario.taskCount\",\n          \"Next\": \"Run leader task\"\n        },\n        {\n          \"Variable\": \"$.isRunning\",\n          \"BooleanEquals\": false,\n          \"Next\": \"Parse result\"\n        }\n      ],\n      \"Default\": \"Wait 1 minute - worker status\"\n    },\n    \"Run leader task\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskRunner.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"Wait 1 minute - task status\"\n    },\n    \"Wait 1 minute - task status\": {\n      \"Comment\": \"Wait 1 minute to check task status again\",\n      \"Type\": \"Wait\",\n      \"Seconds\": 60,\n      \"Next\": \"Check task status\"\n    },\n    \"Check task status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${TaskStatusChecker.Arn}\",\n      \"InputPath\": \"$\",\n      \"OutputPath\": \"$\",\n      \"Next\": \"All tasks done?\"\n    },\n    \"All tasks done?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.isRunning\",\n          \"BooleanEquals\": false,\n          \"Next\": \"Parse result\"\n        }\n      ],\n      \"Default\": \"Wait 1 minute - task status\"\n    },\n    \"Parse result\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ResultsParser.Arn}\",\n      \"Next\": \"Done\"\n    },\n    \"Done\": {\n      \"Type\": \"Pass\",\n      \"End\": true\n    }\n  }\n}\n",
          "LoggingConfiguration": {
            "Destinations": [
              {
                "CloudWatchLogsLogGroup": {
                  "LogGroupArn": "StepFunctionsLogGroup.Arn"
                }
              }
            ],
            "IncludeExecutionData": false,
            "Level": "ALL"
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": [
                "Solution",
                "Config",
                "SolutionId"
              ]
            }
          ]
        }
      },
      "StepFunctionsLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": 365
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W84",
                "reason": "KMS encryption unnecessary for log group."
              }
            ]
          }
        }
      },
      "TaskRunnerStepFunctionsRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "states.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/service-role/",
          "Policies": [
            {
              "PolicyName": "StepFunctionPolicy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "lambda:InvokeFunction",
                    "Resource": [
                      "TaskStatusChecker.Arn",
                      "TaskRunner.Arn",
                      "ResultsParser.Arn",
                      "EcrChecker.Arn",
                      "TaskCanceler.Arn"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogDelivery",
                      "logs:GetLogDelivery",
                      "logs:UpdateLogDelivery",
                      "logs:DeleteLogDelivery",
                      "logs:ListLogDeliveries",
                      "logs:PutResourcePolicy",
                      "logs:DescribeResourcePolicies",
                      "logs:DescribeLogGroups"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "Actions do not support resource level permissions"
              }
            ]
          }
        }
      },
      "CopyDockerFile": {
        "Type": "Custom::CopyDockerFile",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "CopyAssets",
          "SrcBucket": [
            "-",
            [
              [
                "Solution",
                "Config",
                "S3Bucket"
              ],
              {
                "Ref": "AWS::Region"
              }
            ]
          ],
          "SrcPath": [
            "Solution",
            "Config",
            "KeyPrefix"
          ],
          "ManifestFile": "container-manifest.json",
          "DestBucket": "ContainerBucket"
        }
      },
      "CopyConsoleFiles": {
        "Type": "Custom::CopyConsoleFiles",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "CopyAssets",
          "SrcBucket": [
            "-",
            [
              [
                "Solution",
                "Config",
                "S3Bucket"
              ],
              {
                "Ref": "AWS::Region"
              }
            ]
          ],
          "SrcPath": [
            "Solution",
            "Config",
            "KeyPrefix"
          ],
          "ManifestFile": "console-manifest.json",
          "DestBucket": "ConsoleBucket"
        }
      },
      "ConsoleConfig": {
        "Type": "Custom::CopyConsoleFiles",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "ConfigFile",
          "DestBucket": "ConsoleBucket",
          "AwsExports": "const awsConfig = {\n  cw_dashboard: 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=',\n  ecs_dashboard: 'https://${AWS::Region}.console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/${AWS::StackName}/tasks',\n  aws_project_region: '${AWS::Region}',\n  aws_cognito_region: '${AWS::Region}',\n  aws_cognito_identity_pool_id: '${CognitoIdentityPool}',\n  aws_user_pools_id: '${CognitoUserPool}',\n  aws_user_pools_web_client_id: '${CognitoUserPoolClient}',\n  oauth: {},\n  aws_cloud_logic_custom: [\n    {\n      name: 'dlts',\n      endpoint: 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod',\n      region: '${AWS::Region}'\n    }\n  ],\n  aws_user_files_s3_bucket: '${ScenariosBucket}',\n  aws_user_files_s3_bucket_region: '${AWS::Region}'\n}\n"
        }
      },
      "Uuid": {
        "Type": "Custom::UUID",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "UUID"
        }
      },
      "AnonymousMetric": {
        "Condition": "Metrics",
        "Type": "Custom::AnonymousMetric",
        "Properties": {
          "ServiceToken": "CustomResource.Arn",
          "Resource": "AnonymousMetric",
          "Region": "AWS::Region",
          "SolutionId": [
            "Solution",
            "Config",
            "SolutionId"
          ],
          "UUID": "Uuid.UUID",
          "Version": [
            "Solution",
            "Config",
            "CodeVersion"
          ]
        }
      }
    },
    "Outputs": {
      "Console": {
        "Description": "Console URL",
        "Value": "https://${ConsoleCloudFront.DomainName}/"
      },
      "ApiGatewayEndpoint": {
        "Description": "Distributed Load Testing API",
        "Value": "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"
      },
      "SolutionUUID": {
        "Description": "Solution UUID",
        "Value": "Uuid.UUID"
      }
    }
  }
}
