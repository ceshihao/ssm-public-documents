{
  "description": "### Document name - AWSConfigRemediation-SetIAMPasswordPolicy\n\n## What does this document do?\nThis document sets the AWS Identity and Access Management (IAM) user password policy for the AWS account using the [UpdateAccountPasswordPolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAccountPasswordPolicy.html) API.\n\n## Input Parameters\n* AllowUsersToChangePassword: (Optional) Allows all IAM users in your account to use the AWS Management Console to change their own passwords.\n* HardExpiry: (Optional) Prevents IAM users from setting a new password after their password has expired.\n* MaxPasswordAge: (Optional) The number of days that an IAM user password is valid.\n* MinimumPasswordLength: (Optional) The minimum number of characters allowed in an IAM user password.\n* PasswordReusePrevention: (Optional) Specifies the number of previous passwords that IAM users are prevented from reusing.\n* RequireLowercaseCharacters: (Optional) Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).\n* RequireNumbers: (Optional) Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).\n* RequireSymbols: (Optional) pecifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters :! @ \\# $ % ^ * ( ) _ + - = [ ] { } | '\n* RequireUppercaseCharacters: (Optional) Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n## Output Parameters\n* UpdateAndVerifyIamUserPasswordPolicy.Output\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "AllowUsersToChangePassword": {
      "type": "Boolean",
      "description": "(Optional) Allows all IAM users in your AWS account to use the AWS Management Console to change their own passwords.",
      "default": false
    },
    "HardExpiry": {
      "type": "Boolean",
      "description": "(Optional) Prevents IAM users from setting a new password after their password has expired.",
      "default": false
    },
    "MaxPasswordAge": {
      "type": "Integer",
      "description": "(Optional) The number of days that an IAM user password is valid. Must be between 0 and 1095.",
      "allowedPattern": "^(\\d|[1-9]\\d\\d?|10[0-8]\\d|109[0-5])$",
      "default": 0
    },
    "MinimumPasswordLength": {
      "type": "Integer",
      "description": "(Optional) The minimum number of characters allowed in an IAM user password. Must be between 6 and 128.",
      "allowedPattern": "^([6-9]|[1-9]\\d|1[01]\\d|12[0-8])$",
      "default": 6
    },
    "PasswordReusePrevention": {
      "type": "Integer",
      "description": "(Optional) Specifies the number of previous passwords that IAM users are prevented from reusing. Must be between 0 and 24",
      "allowedPattern": "^(1?\\d|2[0-4])$",
      "default": 0
    },
    "RequireLowercaseCharacters": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).",
      "default": false
    },
    "RequireNumbers": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).",
      "default": false
    },
    "RequireSymbols": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters :! @ \\# $ % ^ * ( ) _ + - = [ ] { } | '.",
      "default": false
    },
    "RequireUppercaseCharacters": {
      "type": "Boolean",
      "description": "(Optional) Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).",
      "default": false
    }
  },
  "outputs": [
    "UpdateAndVerifyIamUserPasswordPolicy.Output"
  ],
  "mainSteps": [
    {
      "name": "UpdateAndVerifyIamUserPasswordPolicy",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "isEnd": true,
      "description": "## UpdateAndVerifyIamUserPasswordPolicy\nSets or updates the AWS account password policy using input parameters using UpdateAccountPasswordPolicy API.\nVerify AWS account password policy using GetAccountPasswordPolicy API.\n## Outputs\n* Output: Success message with HTTP Response from GetAccountPasswordPolicy API call or failure exception.\n",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "update_and_verify_iam_user_password_policy",
        "InputPayload": {
          "AllowUsersToChangePassword": "{{ AllowUsersToChangePassword }}",
          "HardExpiry": "{{ HardExpiry }}",
          "MaxPasswordAge": "{{ MaxPasswordAge }}",
          "MinimumPasswordLength": "{{ MinimumPasswordLength }}",
          "PasswordReusePrevention": "{{ PasswordReusePrevention }}",
          "RequireLowercaseCharacters": "{{ RequireLowercaseCharacters }}",
          "RequireNumbers": "{{ RequireNumbers }}",
          "RequireSymbols": "{{ RequireSymbols }}",
          "RequireUppercaseCharacters": "{{ RequireUppercaseCharacters }}"
        },
        "Script": "import boto3\n\n\ndef update_and_verify_iam_user_password_policy(event, context):\n    iam_client = boto3.client('iam')\n\n    try:\n        params = dict()\n        params[\"AllowUsersToChangePassword\"] = event[\"AllowUsersToChangePassword\"]\n        if \"HardExpiry\" in event:\n            params[\"HardExpiry\"] = event[\"HardExpiry\"]\n        if event[\"MaxPasswordAge\"]:\n            params[\"MaxPasswordAge\"] = event[\"MaxPasswordAge\"]\n        if event[\"PasswordReusePrevention\"]:\n            params[\"PasswordReusePrevention\"] = event[\"PasswordReusePrevention\"]\n        params[\"MinimumPasswordLength\"] = event[\"MinimumPasswordLength\"]\n        params[\"RequireLowercaseCharacters\"] = event[\"RequireLowercaseCharacters\"]\n        params[\"RequireNumbers\"] = event[\"RequireNumbers\"]\n        params[\"RequireSymbols\"] = event[\"RequireSymbols\"]\n        params[\"RequireUppercaseCharacters\"] = event[\"RequireUppercaseCharacters\"]\n\n        update_api_response = iam_client.update_account_password_policy(**params)\n\n        # Verifies IAM Password Policy configuration for AWS account using GetAccountPasswordPolicy() api call.\n        response = iam_client.get_account_password_policy()\n        if all([response[\"PasswordPolicy\"][\"AllowUsersToChangePassword\"] == event[\"AllowUsersToChangePassword\"],\n                response[\"PasswordPolicy\"][\"MinimumPasswordLength\"] == event[\"MinimumPasswordLength\"],\n                response[\"PasswordPolicy\"][\"RequireLowercaseCharacters\"] == event[\"RequireLowercaseCharacters\"],\n                response[\"PasswordPolicy\"][\"RequireNumbers\"] == event[\"RequireNumbers\"],\n                response[\"PasswordPolicy\"][\"RequireUppercaseCharacters\"] == event[\"RequireUppercaseCharacters\"],\n                ((response[\"PasswordPolicy\"][\"HardExpiry\"] == event[\"HardExpiry\"]) if \"HardExpiry\" in event else True),\n                ((response[\"PasswordPolicy\"][\"MaxPasswordAge\"] == event[\"MaxPasswordAge\"]) if event[\"MaxPasswordAge\"] else True),\n                ((response[\"PasswordPolicy\"][\"PasswordReusePrevention\"] == event[\"PasswordReusePrevention\"]) if event[\"PasswordReusePrevention\"] else True)]):\n            return {\n                \"output\": {\n                    \"Message\": \"AWS Account Password Policy setting is SUCCESSFUL.\",\n                    \"UpdatePolicyHTTPResponse\": update_api_response,\n                    \"GetPolicyHTTPResponse\": response\n                }\n            }\n        raise Exception(\"VERIFICATION FAILED. AWS ACCOUNT PASSWORD POLICY NOT UPDATED.\")\n\n    except iam_client.exceptions.NoSuchEntityException:\n        raise Exception(\"VERIFICATION FAILED. UNABLE TO UPDATE AWS ACCOUNT PASSWORD POLICY.\")"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "StringMap"
        }
      ]
    }
  ]
}
