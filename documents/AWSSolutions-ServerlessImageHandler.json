{
  "schemaVersion": "1.0",
  "description": "(SO0023) - Serverless Image Handler. Version v6.0.0",
  "templateBody": {
    "Description": "(SO0023) - Serverless Image Handler. Version v6.0.0",
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "CORS Options"
            },
            "Parameters": [
              "CorsEnabledParameter",
              "CorsOriginParameter"
            ]
          },
          {
            "Label": {
              "default": "Image Sources"
            },
            "Parameters": [
              "SourceBucketsParameter"
            ]
          },
          {
            "Label": {
              "default": "Demo UI"
            },
            "Parameters": [
              "DeployDemoUIParameter"
            ]
          },
          {
            "Label": {
              "default": "Event Logging"
            },
            "Parameters": [
              "LogRetentionPeriodParameter"
            ]
          },
          {
            "Label": {
              "default": "Image URL Signature (Note: Enabling signature is not compatible with previous image URLs, which could result in broken image links. Please refer to the implementation guide for details: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/considerations.html)"
            },
            "Parameters": [
              "EnableSignatureParameter",
              "SecretsManagerSecretParameter",
              "SecretsManagerKeyParameter"
            ]
          },
          {
            "Label": {
              "default": "Default Fallback Image (Note: Enabling default fallback image returns the default fallback image instead of JSON object when error happens. Please refer to the implementation guide for details: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/considerations.html)"
            },
            "Parameters": [
              "EnableDefaultFallbackImageParameter",
              "FallbackImageS3BucketParameter",
              "FallbackImageS3KeyParameter"
            ]
          },
          {
            "Label": {
              "default": "Auto WebP"
            },
            "Parameters": [
              "AutoWebPParameter"
            ]
          }
        ],
        "ParameterLabels": {
          "CorsEnabledParameter": {
            "default": "CORS Enabled"
          },
          "CorsOriginParameter": {
            "default": "CORS Origin"
          },
          "SourceBucketsParameter": {
            "default": "Source Buckets"
          },
          "DeployDemoUIParameter": {
            "default": "Deploy Demo UI"
          },
          "LogRetentionPeriodParameter": {
            "default": "Log Retention Period"
          },
          "AutoWebPParameter": {
            "default": "AutoWebP"
          },
          "EnableSignatureParameter": {
            "default": "Enable Signature"
          },
          "SecretsManagerSecretParameter": {
            "default": "SecretsManager Secret"
          },
          "SecretsManagerKeyParameter": {
            "default": "SecretsManager Key"
          },
          "EnableDefaultFallbackImageParameter": {
            "default": "Enable Default Fallback Image"
          },
          "FallbackImageS3BucketParameter": {
            "default": "Fallback Image S3 Bucket"
          },
          "FallbackImageS3KeyParameter": {
            "default": "Fallback Image S3 Key"
          },
          "CloudFrontPriceClassParameter": {
            "default": "CloudFront PriceClass"
          }
        }
      }
    },
    "Parameters": {
      "CorsEnabledParameter": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Would you like to enable Cross-Origin Resource Sharing (CORS) for the image handler API? Select 'Yes' if so."
      },
      "CorsOriginParameter": {
        "Type": "String",
        "Default": "*",
        "Description": "If you selected 'Yes' above, please specify an origin value here. A wildcard (*) value will support any origin. We recommend specifying an origin (i.e. https://example.domain) to restrict cross-site access to your API."
      },
      "SourceBucketsParameter": {
        "Type": "String",
        "Default": "defaultBucket, bucketNo2, bucketNo3, ...",
        "AllowedPattern": ".+",
        "Description": "(Required) List the buckets (comma-separated) within your account that contain original image files. If you plan to use Thumbor or Custom image requests with this solution, the source bucket for those requests will be the first bucket listed in this field."
      },
      "DeployDemoUIParameter": {
        "Type": "String",
        "Default": true,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Would you like to deploy a demo UI to explore the features and capabilities of this solution? This will create an additional Amazon S3 bucket and Amazon CloudFront distribution in your account."
      },
      "LogRetentionPeriodParameter": {
        "Type": "Number",
        "Default": "1",
        "AllowedValues": [
          "1",
          "3",
          "5",
          "7",
          "14",
          "30",
          "60",
          "90",
          "120",
          "150",
          "180",
          "365",
          "400",
          "545",
          "731",
          "1827",
          "3653"
        ],
        "Description": "This solution automatically logs events to Amazon CloudWatch. Select the amount of time for CloudWatch logs from this solution to be retained (in days)."
      },
      "AutoWebPParameter": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Would you like to enable automatic WebP based on accept headers? Select 'Yes' if so."
      },
      "EnableSignatureParameter": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Would you like to enable the signature? If so, select 'Yes' and provide SecretsManagerSecret and SecretsManagerKey values."
      },
      "SecretsManagerSecretParameter": {
        "Type": "String",
        "Default": "",
        "Description": "The name of AWS Secrets Manager secret. You need to create your secret under this name."
      },
      "SecretsManagerKeyParameter": {
        "Type": "String",
        "Default": "",
        "Description": "The name of AWS Secrets Manager secret key. You need to create secret key with this key name. The secret value would be used to check signature."
      },
      "EnableDefaultFallbackImageParameter": {
        "Type": "String",
        "Default": false,
        "AllowedValues": [
          true,
          false
        ],
        "Description": "Would you like to enable the default fallback image? If so, select 'Yes' and provide FallbackImageS3Bucket and FallbackImageS3Key values."
      },
      "FallbackImageS3BucketParameter": {
        "Type": "String",
        "Default": "",
        "Description": "The name of the Amazon S3 bucket which contains the default fallback image. e.g. my-fallback-image-bucket"
      },
      "FallbackImageS3KeyParameter": {
        "Type": "String",
        "Default": "",
        "Description": "The name of the default fallback image object key including prefix. e.g. prefix/image.jpg"
      },
      "CloudFrontPriceClassParameter": {
        "Type": "String",
        "Default": "PriceClass_All",
        "AllowedValues": [
          "PriceClass_All",
          "PriceClass_200",
          "PriceClass_100"
        ],
        "Description": "The AWS CloudFront price class to use. For more information see: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html"
      }
    },
    "Conditions": {
      "CommonResourcesDeployDemoUICondition308D3B09": {
        "Fn::Equals": [
          {
            "Ref": "DeployDemoUIParameter"
          },
          true
        ]
      },
      "CommonResourcesEnableSignatureCondition909DC7A1": {
        "Fn::Equals": [
          {
            "Ref": "EnableSignatureParameter"
          },
          true
        ]
      },
      "CommonResourcesEnableDefaultFallbackImageConditionD1A10983": {
        "Fn::Equals": [
          {
            "Ref": "EnableDefaultFallbackImageParameter"
          },
          true
        ]
      },
      "CommonResourcesEnableCorsConditionA0615348": {
        "Fn::Equals": [
          {
            "Ref": "CorsEnabledParameter"
          },
          true
        ]
      },
      "CDKMetadataAvailable": {
        "Fn::Or": [
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "af-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-northeast-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-northeast-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-southeast-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-southeast-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ca-central-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "cn-north-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "cn-northwest-1"
                ]
              }
            ]
          },
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-central-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-north-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-3"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "me-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "sa-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-east-2"
                ]
              }
            ]
          },
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-west-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-west-2"
                ]
              }
            ]
          }
        ]
      }
    },
    "Resources": {
      "CommonResourcesSecretsManagerPolicy45FE005E": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "secretsmanager:GetSecretValue",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":secretsmanager:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":secret:",
                      {
                        "Ref": "SecretsManagerSecretParameter"
                      },
                      "*"
                    ]
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "CommonResourcesSecretsManagerPolicy45FE005E",
          "Roles": [
            {
              "Ref": "CommonResourcesCustomResourcesCustomResourceRole8958A1ED"
            },
            {
              "Ref": "BackEndImageHandlerFunctionRoleABF81E5C"
            }
          ]
        },
        "Condition": "CommonResourcesEnableSignatureCondition909DC7A1"
      },
      "CommonResourcesCustomResourcesCustomResourceRole8958A1ED": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":logs:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":log-group:/aws/lambda/*"
                        ]
                      ]
                    }
                  },
                  {
                    "Action": [
                      "s3:putBucketAcl",
                      "s3:putEncryptionConfiguration",
                      "s3:putBucketPolicy",
                      "s3:CreateBucket",
                      "s3:GetObject",
                      "s3:PutObject",
                      "s3:ListBucket"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::*"
                        ]
                      ]
                    }
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": "CloudWatchLogsPolicy"
            },
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "ec2:DescribeRegions",
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": "EC2Policy"
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W11",
                "reason": "Allow '*' because it is required for making DescribeRegions API call as it doesn't support resource-level permissions and require to choose all resources."
              }
            ]
          }
        }
      },
      "CommonResourcesCustomResourcesCustomResourceRoleDefaultPolicy5AE1B0FC": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*"
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::solutions-",
                        {
                          "Ref": "AWS::Region"
                        }
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::solutions-",
                        {
                          "Ref": "AWS::Region"
                        },
                        "/serverless-image-handler/v6.0.0/*"
                      ]
                    ]
                  }
                ]
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "CommonResourcesCustomResourcesCustomResourceRoleDefaultPolicy5AE1B0FC",
          "Roles": [
            {
              "Ref": "CommonResourcesCustomResourcesCustomResourceRole8958A1ED"
            }
          ]
        }
      },
      "CommonResourcesCustomResourcesCustomResourceFunction0D924235": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "",
                [
                  "solutions-",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-image-handler/v6.0.0/custom-resource.zip"
          },
          "Role": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceRole8958A1ED",
              "Arn"
            ]
          },
          "Description": "Serverless Image Handler (v6.0.0): Custom resource",
          "Environment": {
            "Variables": {
              "SOLUTION_ID": "SO0023",
              "RETRY_SECONDS": "5",
              "SOLUTION_VERSION": "v6.0.0"
            }
          },
          "Handler": "custom-resource/index.handler",
          "MemorySize": 128,
          "Runtime": "nodejs14.x",
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ],
          "Timeout": 60
        },
        "DependsOn": [
          "CommonResourcesCustomResourcesCustomResourceRoleDefaultPolicy5AE1B0FC",
          "CommonResourcesCustomResourcesCustomResourceRole8958A1ED"
        ],
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "The function does have permission to write CloudWatch Logs."
              },
              {
                "id": "W89",
                "reason": "The Lambda function does not require any VPC connection at all."
              },
              {
                "id": "W92",
                "reason": "The Lambda function does not require ReservedConcurrentExecutions."
              }
            ]
          }
        }
      },
      "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "Region": {
            "Ref": "AWS::Region"
          },
          "CustomAction": "createUuid"
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete"
      },
      "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "createCloudFrontLoggingBucket",
          "BucketSuffix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "-",
                {
                  "Ref": "AWS::Region"
                },
                "-",
                {
                  "Ref": "AWS::AccountId"
                }
              ]
            ]
          }
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete"
      },
      "CommonResourcesCustomResourcesCustomResourceAnonymousMetric51363F57": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "sendMetric",
          "Region": {
            "Ref": "AWS::Region"
          },
          "UUID": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
              "UUID"
            ]
          },
          "AnonymousData": true,
          "CorsEnabled": {
            "Ref": "CorsEnabledParameter"
          },
          "SourceBuckets": {
            "Ref": "SourceBucketsParameter"
          },
          "DeployDemoUi": {
            "Ref": "DeployDemoUIParameter"
          },
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriodParameter"
          },
          "AutoWebP": {
            "Ref": "AutoWebPParameter"
          },
          "EnableSignature": {
            "Ref": "EnableSignatureParameter"
          },
          "EnableDefaultFallbackImage": {
            "Ref": "EnableDefaultFallbackImageParameter"
          }
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete"
      },
      "CommonResourcesCustomResourcesCustomResourceCheckSourceBucketsA313C9B7": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "checkSourceBuckets",
          "Region": {
            "Ref": "AWS::Region"
          },
          "SourceBuckets": {
            "Ref": "SourceBucketsParameter"
          }
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete"
      },
      "CommonResourcesCustomResourcesCustomResourceCheckFallbackImage6CE45571": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "checkFallbackImage",
          "FallbackImageS3Bucket": {
            "Ref": "FallbackImageS3BucketParameter"
          },
          "FallbackImageS3Key": {
            "Ref": "FallbackImageS3KeyParameter"
          }
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete",
        "Condition": "CommonResourcesEnableDefaultFallbackImageConditionD1A10983"
      },
      "CommonResourcesCustomResourcesCustomResourceCheckSecretsManagerAEEEC776": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "checkSecretsManager",
          "SecretsManagerName": {
            "Ref": "SecretsManagerSecretParameter"
          },
          "SecretsManagerKey": {
            "Ref": "SecretsManagerKeyParameter"
          }
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete",
        "Condition": "CommonResourcesEnableSignatureCondition909DC7A1"
      },
      "CommonResourcesCustomResourcesCopyWebsite83738AA9": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "copyS3assets",
          "Region": {
            "Ref": "AWS::Region"
          },
          "ManifestKey": "serverless-image-handler/v6.0.0/demo-ui-manifest.json",
          "SourceS3Bucket": {
            "Fn::Join": [
              "",
              [
                "solutions-",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "SourceS3key": "serverless-image-handler/v6.0.0/demo-ui",
          "DestS3Bucket": {
            "Ref": "FrontEndDistributionToS3S3Bucket3A171D78"
          },
          "Version": "v6.0.0"
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete",
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "CommonResourcesCustomResourcesPutWebsiteConfigC4E435F3": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
              "Arn"
            ]
          },
          "CustomAction": "putConfigFile",
          "Region": {
            "Ref": "AWS::Region"
          },
          "ConfigItem": {
            "apiEndpoint": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                      "DomainName"
                    ]
                  }
                ]
              ]
            }
          },
          "DestS3Bucket": {
            "Ref": "FrontEndDistributionToS3S3Bucket3A171D78"
          },
          "DestS3key": "demo-ui-config.js"
        },
        "UpdateReplacePolicy": "Delete",
        "DeletionPolicy": "Delete",
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "FrontEndDistributionToS3S3Bucket3A171D78": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          },
          "LifecycleConfiguration": {
            "Rules": [
              {
                "NoncurrentVersionTransitions": [
                  {
                    "StorageClass": "GLACIER",
                    "TransitionInDays": 90
                  }
                ],
                "Status": "Enabled"
              }
            ]
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ],
          "VersioningConfiguration": {
            "Status": "Enabled"
          }
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W35",
                "reason": "This S3 bucket does not require access logging."
              }
            ]
          }
        },
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "FrontEndDistributionToS3S3BucketPolicyF3A0315A": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": {
            "Ref": "FrontEndDistributionToS3S3Bucket3A171D78"
          },
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false"
                  }
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*"
                },
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "FrontEndDistributionToS3S3Bucket3A171D78",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "FrontEndDistributionToS3S3Bucket3A171D78",
                      "Arn"
                    ]
                  }
                ],
                "Sid": "HttpsOnly"
              },
              {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Principal": {
                  "CanonicalUser": {
                    "Fn::GetAtt": [
                      "FrontEndDistributionToS3CloudFrontDistributionOrigin1S3OriginD10E575E",
                      "S3CanonicalUserId"
                    ]
                  }
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontEndDistributionToS3S3Bucket3A171D78",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "F16",
                "reason": "Public website bucket policy requires a wildcard principal"
              }
            ]
          }
        },
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "FrontEndDistributionToS3CloudFrontDistributionOrigin1S3OriginD10E575E": {
        "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
        "Properties": {
          "CloudFrontOriginAccessIdentityConfig": {
            "Comment": "Identity for ServerlessImageHandlerStackFrontEndDistributionToS3CloudFrontDistributionOrigin140765BF6"
          }
        },
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "FrontEndDistributionToS3CloudFrontDistribution15FE13D0": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "Comment": "Demo UI Distribution for Serverless Image Handler",
            "CustomErrorResponses": [
              {
                "ErrorCode": 403,
                "ResponseCode": 200,
                "ResponsePagePath": "/index.html"
              },
              {
                "ErrorCode": 404,
                "ResponseCode": 200,
                "ResponsePagePath": "/index.html"
              }
            ],
            "DefaultCacheBehavior": {
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "TargetOriginId": "ServerlessImageHandlerStackFrontEndDistributionToS3CloudFrontDistributionOrigin140765BF6",
              "ViewerProtocolPolicy": "redirect-to-https"
            },
            "DefaultRootObject": "index.html",
            "Enabled": true,
            "HttpVersion": "http2",
            "IPV6Enabled": true,
            "Logging": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                        "BucketName"
                      ]
                    },
                    ".s3.",
                    {
                      "Fn::GetAtt": [
                        "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                        "Region"
                      ]
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Prefix": "ui-cloudfront/"
            },
            "Origins": [
              {
                "DomainName": {
                  "Fn::GetAtt": [
                    "FrontEndDistributionToS3S3Bucket3A171D78",
                    "RegionalDomainName"
                  ]
                },
                "Id": "ServerlessImageHandlerStackFrontEndDistributionToS3CloudFrontDistributionOrigin140765BF6",
                "S3OriginConfig": {
                  "OriginAccessIdentity": {
                    "Fn::Join": [
                      "",
                      [
                        "origin-access-identity/cloudfront/",
                        {
                          "Ref": "FrontEndDistributionToS3CloudFrontDistributionOrigin1S3OriginD10E575E"
                        }
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W70",
                "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
              }
            ]
          }
        },
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "BackEndImageHandlerFunctionRoleABF81E5C": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Path": "/",
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        }
      },
      "BackEndImageHandlerFunctionPolicy437940B5": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/lambda/*"
                    ]
                  ]
                }
              },
              {
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:ListBucket"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::*"
                    ]
                  ]
                }
              },
              {
                "Action": [
                  "rekognition:DetectFaces",
                  "rekognition:DetectModerationLabels"
                ],
                "Effect": "Allow",
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "BackEndImageHandlerFunctionPolicy437940B5",
          "Roles": [
            {
              "Ref": "BackEndImageHandlerFunctionRoleABF81E5C"
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W12",
                "reason": "rekognition:DetectFaces requires '*' resources."
              }
            ]
          }
        }
      },
      "BackEndImageHandlerLambdaFunctionADEF7FF2": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "",
                [
                  "solutions-",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-image-handler/v6.0.0/image-handler.zip"
          },
          "Role": {
            "Fn::GetAtt": [
              "BackEndImageHandlerFunctionRoleABF81E5C",
              "Arn"
            ]
          },
          "Description": "Serverless Image Handler (v6.0.0): Performs image edits and manipulations",
          "Environment": {
            "Variables": {
              "AUTO_WEBP": {
                "Ref": "AutoWebPParameter"
              },
              "CORS_ENABLED": {
                "Ref": "CorsEnabledParameter"
              },
              "CORS_ORIGIN": {
                "Ref": "CorsOriginParameter"
              },
              "SOURCE_BUCKETS": {
                "Ref": "SourceBucketsParameter"
              },
              "REWRITE_MATCH_PATTERN": "",
              "REWRITE_SUBSTITUTION": "",
              "ENABLE_SIGNATURE": {
                "Ref": "EnableSignatureParameter"
              },
              "SECRETS_MANAGER": {
                "Ref": "SecretsManagerSecretParameter"
              },
              "SECRET_KEY": {
                "Ref": "SecretsManagerKeyParameter"
              },
              "ENABLE_DEFAULT_FALLBACK_IMAGE": {
                "Ref": "EnableDefaultFallbackImageParameter"
              },
              "DEFAULT_FALLBACK_IMAGE_BUCKET": {
                "Ref": "FallbackImageS3BucketParameter"
              },
              "DEFAULT_FALLBACK_IMAGE_KEY": {
                "Ref": "FallbackImageS3KeyParameter"
              }
            }
          },
          "Handler": "image-handler/index.handler",
          "MemorySize": 1024,
          "Runtime": "nodejs14.x",
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ],
          "Timeout": 900
        },
        "DependsOn": [
          "BackEndImageHandlerFunctionRoleABF81E5C"
        ],
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W58",
                "reason": "The function does have permission to write CloudWatch Logs."
              },
              {
                "id": "W89",
                "reason": "The Lambda function does not require any VPC connection at all."
              },
              {
                "id": "W92",
                "reason": "The Lambda function does not require ReservedConcurrentExecutions."
              }
            ]
          }
        }
      },
      "BackEndImageHandlerLogGroupA0941EEC": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "LogGroupName": {
            "Fn::Join": [
              "",
              [
                "/aws/lambda/",
                {
                  "Ref": "BackEndImageHandlerLambdaFunctionADEF7FF2"
                }
              ]
            ]
          },
          "RetentionInDays": {
            "Ref": "LogRetentionPeriodParameter"
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W84",
                "reason": "CloudWatch log group is always encrypted by default."
              }
            ]
          }
        }
      },
      "BackEndCachePolicy1DCE9B1B": {
        "Type": "AWS::CloudFront::CachePolicy",
        "Properties": {
          "CachePolicyConfig": {
            "DefaultTTL": 86400,
            "MaxTTL": 31536000,
            "MinTTL": 1,
            "Name": {
              "Fn::Join": [
                "",
                [
                  "ServerlessImageHandler-",
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
                      "UUID"
                    ]
                  }
                ]
              ]
            },
            "ParametersInCacheKeyAndForwardedToOrigin": {
              "CookiesConfig": {
                "CookieBehavior": "none"
              },
              "EnableAcceptEncodingBrotli": false,
              "EnableAcceptEncodingGzip": true,
              "HeadersConfig": {
                "HeaderBehavior": "whitelist",
                "Headers": [
                  "origin",
                  "accept"
                ]
              },
              "QueryStringsConfig": {
                "QueryStringBehavior": "whitelist",
                "QueryStrings": [
                  "signature"
                ]
              }
            }
          }
        }
      },
      "BackEndOriginRequestPolicy771345D7": {
        "Type": "AWS::CloudFront::OriginRequestPolicy",
        "Properties": {
          "OriginRequestPolicyConfig": {
            "CookiesConfig": {
              "CookieBehavior": "none"
            },
            "HeadersConfig": {
              "HeaderBehavior": "whitelist",
              "Headers": [
                "origin",
                "accept"
              ]
            },
            "Name": {
              "Fn::Join": [
                "",
                [
                  "ServerlessImageHandler-",
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
                      "UUID"
                    ]
                  }
                ]
              ]
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "whitelist",
              "QueryStrings": [
                "signature"
              ]
            }
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaApiAccessLogGroup9B786692": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": {
            "Ref": "LogRetentionPeriodParameter"
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W84",
                "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
              }
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "BinaryMediaTypes": [
            "*/*"
          ],
          "EndpointConfiguration": {
            "Types": [
              "REGIONAL"
            ]
          },
          "Name": "LambdaRestApi",
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeployment663240D64e4983e311b7a4ac4c0f406aed3f92e2": {
        "Type": "AWS::ApiGateway::Deployment",
        "Properties": {
          "RestApiId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
          },
          "Description": "Automatically created by the RestApi construct"
        },
        "DependsOn": [
          "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANY8F9763E1",
          "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131",
          "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYE4494B31"
        ],
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W45",
                "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checkes for it in AWS::ApiGateway::Deployment resource"
              }
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3": {
        "Type": "AWS::ApiGateway::Stage",
        "Properties": {
          "RestApiId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
          },
          "AccessLogSetting": {
            "DestinationArn": {
              "Fn::GetAtt": [
                "BackEndImageHandlerCloudFrontApiGatewayLambdaApiAccessLogGroup9B786692",
                "Arn"
              ]
            },
            "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
          },
          "DeploymentId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeployment663240D64e4983e311b7a4ac4c0f406aed3f92e2"
          },
          "MethodSettings": [
            {
              "DataTraceEnabled": false,
              "HttpMethod": "*",
              "LoggingLevel": "INFO",
              "ResourcePath": "/*"
            }
          ],
          "StageName": "image",
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ],
          "TracingEnabled": true
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "ParentId": {
            "Fn::GetAtt": [
              "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              "RootResourceId"
            ]
          },
          "PathPart": "{proxy+}",
          "RestApiId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANYApiPermissionServerlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiF7C63563ANYproxy4E0EC93E": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "BackEndImageHandlerLambdaFunctionADEF7FF2",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
                },
                "/",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3"
                },
                "/*/*"
              ]
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANYApiPermissionTestServerlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiF7C63563ANYproxyE40ABA2A": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "BackEndImageHandlerLambdaFunctionADEF7FF2",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
                },
                "/test-invoke-stage/*/*"
              ]
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANY8F9763E1": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "HttpMethod": "ANY",
          "ResourceId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131"
          },
          "RestApiId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
          },
          "AuthorizationType": "NONE",
          "Integration": {
            "IntegrationHttpMethod": "POST",
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "BackEndImageHandlerLambdaFunctionADEF7FF2",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W59",
                "reason": "AWS::ApiGateway::Method AuthorizationType is set to 'NONE' because API Gateway behind CloudFront does not support AWS_IAM authentication"
              }
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYApiPermissionServerlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiF7C63563ANY3D47D314": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "BackEndImageHandlerLambdaFunctionADEF7FF2",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
                },
                "/",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3"
                },
                "/*/"
              ]
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYApiPermissionTestServerlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiF7C63563ANYE1780638": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "BackEndImageHandlerLambdaFunctionADEF7FF2",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
                },
                "/test-invoke-stage/*/"
              ]
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYE4494B31": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "HttpMethod": "ANY",
          "ResourceId": {
            "Fn::GetAtt": [
              "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              "RootResourceId"
            ]
          },
          "RestApiId": {
            "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
          },
          "AuthorizationType": "NONE",
          "Integration": {
            "IntegrationHttpMethod": "POST",
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "BackEndImageHandlerLambdaFunctionADEF7FF2",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W59",
                "reason": "AWS::ApiGateway::Method AuthorizationType is set to 'NONE' because API Gateway behind CloudFront does not support AWS_IAM authentication"
              }
            ]
          }
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiUsagePlan76CA1E70": {
        "Type": "AWS::ApiGateway::UsagePlan",
        "Properties": {
          "ApiStages": [
            {
              "ApiId": {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
              },
              "Stage": {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3"
              },
              "Throttle": {}
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiCloudWatchRole12575C4D": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "apigateway.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams",
                      "logs:PutLogEvents",
                      "logs:GetLogEvents",
                      "logs:FilterLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":logs:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":*"
                        ]
                      ]
                    }
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
            }
          ],
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        }
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiAccountE5522E5D": {
        "Type": "AWS::ApiGateway::Account",
        "Properties": {
          "CloudWatchRoleArn": {
            "Fn::GetAtt": [
              "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiCloudWatchRole12575C4D",
              "Arn"
            ]
          }
        },
        "DependsOn": [
          "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
        ]
      },
      "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "Comment": "Image Handler Distribution for Serverless Image Handler",
            "CustomErrorResponses": [
              {
                "ErrorCachingMinTTL": 600,
                "ErrorCode": 500
              },
              {
                "ErrorCachingMinTTL": 600,
                "ErrorCode": 501
              },
              {
                "ErrorCachingMinTTL": 600,
                "ErrorCode": 502
              },
              {
                "ErrorCachingMinTTL": 600,
                "ErrorCode": 503
              },
              {
                "ErrorCachingMinTTL": 600,
                "ErrorCode": 504
              }
            ],
            "DefaultCacheBehavior": {
              "AllowedMethods": [
                "GET",
                "HEAD"
              ],
              "CachePolicyId": {
                "Ref": "BackEndCachePolicy1DCE9B1B"
              },
              "Compress": true,
              "OriginRequestPolicyId": {
                "Ref": "BackEndOriginRequestPolicy771345D7"
              },
              "TargetOriginId": "verlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin1BEFA9FF3",
              "ViewerProtocolPolicy": "https-only"
            },
            "Enabled": true,
            "HttpVersion": "http2",
            "IPV6Enabled": true,
            "Logging": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                        "BucketName"
                      ]
                    },
                    ".s3.",
                    {
                      "Fn::GetAtt": [
                        "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                        "Region"
                      ]
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Prefix": "api-cloudfront/"
            },
            "Origins": [
              {
                "CustomOriginConfig": {
                  "OriginProtocolPolicy": "https-only",
                  "OriginSSLProtocols": [
                    "TLSv1.1",
                    "TLSv1.2"
                  ]
                },
                "DomainName": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109"
                      },
                      ".execute-api.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                },
                "Id": "verlessImageHandlerStackBackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin1BEFA9FF3",
                "OriginPath": "/image"
              }
            ],
            "PriceClass": {
              "Ref": "CloudFrontPriceClassParameter"
            }
          },
          "Tags": [
            {
              "Key": "SolutionId",
              "Value": "SO0023"
            }
          ]
        },
        "Metadata": {
          "cfn_nag": {
            "rules_to_suppress": [
              {
                "id": "W70",
                "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
              }
            ]
          }
        }
      },
      "CDKMetadata": {
        "Type": "AWS::CDK::Metadata",
        "Properties": {
          "Analytics": "v2:deflate64:H4sIAAAAAAAA/3VS0U7DMAz8lr23GWMSz0CnISQQ1YAPyFKvhLVxiRNgivrvuMmmdtKQIuUusRP7zguxWN6Iq9mt/KE8qGo/DwotiPDqpNpnxc6U0soWHNiBPMuu06bOCjTkrFduOGRSaafRZIUnh+0GCL1VMNxN8Yt3nXd9Fr/SshWhxEarQ/wloQ02KY33PqOlCPde7cHdS4IsweH6iNI2PjLlfdbIdltJEdbeqFTdzkxxCbbVRMz6TDXoq51F40RYaW5Nb32Me7G61uZOKSB6rMA47eJXxZCwHhL+izh7ppDqA8ZCpzTlb+DLA016uXDMLWFNIjxh/WDRd0PYCbOqna6lgx95EIFVd3edjqo9RRmOJ0dLIlxB1+Ch5YpjuSNj6+voQgInC+NrpcXfw0WDn8F9YBWHJKF34uyykVHsM8JioTeu79libKJClKvTSNF8GJDRkTzwHIx6v+HrctJsfrR5GsDdPaTbN0ztT9W5HMm1GKxAfNL8e3EtrnnNPknr3HKlugWxSfsf4LrmWjEDAAA="
        },
        "Condition": "CDKMetadataAvailable"
      }
    },
    "Outputs": {
      "ApiEndpoint": {
        "Description": "Link to API endpoint for sending image requests to.",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::GetAtt": [
                  "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                  "DomainName"
                ]
              }
            ]
          ]
        }
      },
      "DemoUrl": {
        "Description": "Link to the demo user interface for the solution.",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::GetAtt": [
                  "FrontEndDistributionToS3CloudFrontDistribution15FE13D0",
                  "DomainName"
                ]
              },
              "/index.html"
            ]
          ]
        },
        "Condition": "CommonResourcesDeployDemoUICondition308D3B09"
      },
      "SourceBuckets": {
        "Description": "Amazon S3 bucket location containing original image files.",
        "Value": {
          "Ref": "SourceBucketsParameter"
        }
      },
      "CorsEnabled": {
        "Description": "Indicates whether Cross-Origin Resource Sharing (CORS) has been enabled for the image handler API.",
        "Value": {
          "Ref": "CorsEnabledParameter"
        }
      },
      "CorsOrigin": {
        "Description": "Origin value returned in the Access-Control-Allow-Origin header of image handler API responses.",
        "Value": {
          "Ref": "CorsOriginParameter"
        },
        "Condition": "CommonResourcesEnableCorsConditionA0615348"
      },
      "LogRetentionPeriod": {
        "Description": "Number of days for event logs from Lambda to be retained in CloudWatch.",
        "Value": {
          "Ref": "LogRetentionPeriodParameter"
        }
      }
    }
  }
}
