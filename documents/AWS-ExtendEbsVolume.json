{
  "schemaVersion": "0.3",
  "description": "## Name\n  aws-ExtendEbsVolume.\n## Intent\n  Extends EBS Volume\n## Supported operating systems: \n  * Linux and Windows.\n  * Tested on windows, amazon linux and ubuntu instances.\n## Supported file systems: \n  * xfs \n  * ext4\n## Notes\n  * A role with enough permissions should be provided for the document to be able to start or stop the configuration recording (otherwise the document will run with the caller identity).\n  * Targeted instances must be managed by System Manager.\n  * The operating systems types supported are Linux and Windows.\n  * The MountPoint is required for linux.\n  * The DriveLetter is required for windows.\n  * The new size of the drive must be less than the maximum supported size for that drive in case of windows.\n  * A snapshot from the EBS volume is created before extending it.\n  * File systems supported are xfs and Ext4.\n## Minimum permissions required:\n  * ssm:SendCommand.\n  * ssm:DescribeInstanceInformation.\n  * ssm:GetCommandInvocation.\n  * ec2:CreateSnapshot.\n  * ec2:DeleteSnapshot.\n  * ec2:ModifyVolume.\n  * ec2:CreateTags.\n  * ec2:DescribeVolumes.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "VolumeId": {
      "type": "String",
      "description": "(Required) The volume to be extended.",
      "allowedPattern": "^vol-([a-z0-9\\-]+)$"
    },
    "SizeGib": {
      "type": "String",
      "description": "(Required) The target size to increase the volume to (in GiB).",
      "allowedPattern": "^(?:1(?:[0-5][0-9]{0,3}|[7-9][0-9]{0,2}|6(?:[0-2]{0,3}|[4-9][0-9]?|3(?:[0-7][0-9]?|8[0-4]?|9)?)?)?|[2-9][0-9]{0,3})$"
    },
    "MountPoint": {
      "type": "String",
      "description": "(Optional) The mount point (such as \"/\", \"/data\", ...) of the partition which is to be increased(Required for Linux).",
      "default": "",
      "allowedPattern": "^$|^((\\/\\w+)+|\\/?)$"
    },
    "DriveLetter": {
      "type": "String",
      "description": "(Optional) The drive letter which is to be increased(Required for windows).",
      "default": "",
      "allowedPattern": "^$|^[a-zA-Z]$"
    },
    "keepSnapShot": {
      "type": "Boolean",
      "description": "(Optional) A boolean flag to determine whether to remove the created snapshot after successful resizing of the volume and the file system(True by default).",
      "default": true,
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "InstanceId": {
      "type": "String",
      "description": "(Optional) The identifier of the instance requiring increase of volume.",
      "default": "",
      "allowedPattern": "^$|i-[a-z0-9]{8,17}$"
    },
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf",
      "default": "",
      "allowedPattern": "^$|arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role\\/?[a-zA-Z_0-9+=,.@\\-_\\/]+"
    }
  },
  "mainSteps": [
    {
      "name": "ExtendEbsVolume",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "isCritical": true,
      "timeoutSeconds": 300,
      "description": "Extends EBS Volume\n",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "extend_ebs",
        "InputPayload": {
          "target_size": "{{SizeGib}}",
          "volume_id": "{{VolumeId}}",
          "instance_id": "{{InstanceId}}",
          "drive_letter": "{{DriveLetter}}",
          "keep_snapshot": "{{keepSnapShot}}",
          "mount_point": "{{MountPoint}}",
          "current_execution_id": "{{automation:EXECUTION_ID}}"
        },
        "Script": "import time\n\nimport boto3\n\nec2_client = boto3.client(\"ec2\")\nssm_client = boto3.client(\"ssm\")\n\n\ndef extend_ebs(event, context):\n    platform_type = None\n    if event[\"instance_id\"] != \"\":\n        platform_type = get_operating_system_by_instance_id(\n            event[\"instance_id\"]\n        )\n\n    if platform_type == \"Windows\":\n        validate_windows_partition_size(\n            event[\"instance_id\"], event[\"drive_letter\"], event[\"target_size\"]\n        )\n\n    snapshot_id = create_snapshot(\n        event[\"volume_id\"], event[\"current_execution_id\"]\n    )\n\n    extend_ebs_volume(event[\"volume_id\"], int(event[\"target_size\"]))\n\n    if not event[\"keep_snapshot\"]:\n        delete_snapshot(snapshot_id)\n\n    if event[\"instance_id\"] != \"\":\n        if platform_type == \"Linux\":\n            return extend_file_system_for_linux(\n                event[\"instance_id\"], event[\"mount_point\"]\n            )\n        elif platform_type == \"Windows\":\n            return extend_file_system_for_windows(\n                event[\"instance_id\"],\n                event[\"drive_letter\"],\n                event[\"target_size\"],\n            )\n        else:\n            raise Exception(\"Unsupported Platform\")\n    return \"volume extended successfully\"\n\n\ndef extend_ebs_volume(volume_id, target_size):\n    ec2_client.modify_volume(\n        VolumeId=volume_id,\n        Size=target_size,\n    )\n    while True:\n        response = ec2_client.describe_volumes(VolumeIds=[volume_id])\n        if response[\"Volumes\"][0][\"Size\"] == target_size:\n            return \"success\"\n        time.sleep(3)\n\n\ndef get_operating_system_by_instance_id(instance_id):\n    try:\n        os_type = ssm_client.describe_instance_information(\n            InstanceInformationFilterList=[\n                {\"key\": \"InstanceIds\", \"valueSet\": [instance_id]}\n            ]\n        )\n        if len(os_type[\"InstanceInformationList\"]) > 0:\n            return os_type[\"InstanceInformationList\"][0][\"PlatformType\"]\n        else:\n            raise Exception(\"The instance must be managed by system manager\")\n    except Exception as e:\n        raise Exception(e)\n\n\ndef extend_file_system_for_linux(instance_id, mount_point):\n    response = ssm_client.send_command(\n        InstanceIds=[instance_id],\n        DocumentName=\"AWS-RunShellScript\",\n        TimeoutSeconds=500,\n        Parameters={\n            \"commands\": [\n                \"#!/bin/bash\",\n                \"set -x\",\n                \"findmnt -T {} || exit 1\".format(\n                    mount_point\n                ),  # make sure that the mount point is valid\n                \"partition=`findmnt -T {} | awk '{{print $2}}' | sed -n '2 p'`\".format(\n                    mount_point\n                ),\n                \"deviceName=`lsblk -npo pkname $partition`\",\n                \"partitionNumber=${partition#$deviceName}\",\n                \"sudo growpart $deviceName $partitionNumber\",\n                \"sudo xfs_growfs -d {} || sudo resize2fs $partition\".format(\n                    mount_point\n                ),\n            ]\n        },\n    )\n    command_id = response[\"Command\"][\"CommandId\"]\n    status, status_details = get_command_status_with_wait(\n        instance_id, command_id\n    )\n    if status_details == \"Failed\":\n        raise Exception(\"Error extending the file system\")\n    return \"volume extended successfully\"\n\n\ndef create_snapshot(volume_id, exec_id):\n    try:\n        response = ec2_client.create_snapshot(\n            Description=\"a snapshot before the volume resizing\",\n            VolumeId=volume_id,\n            TagSpecifications=[\n                {\n                    \"ResourceType\": \"snapshot\",\n                    \"Tags\": [{\"Key\": \"execution_id\", \"Value\": exec_id}],\n                },\n            ],\n        )\n        return response[\"SnapshotId\"]\n    except Exception as e:\n        raise Exception(e)\n\n\ndef delete_snapshot(snapshot_id):\n    try:\n        ec2_client.delete_snapshot(\n            SnapshotId=snapshot_id,\n        )\n    except Exception as e:\n        raise Exception(e)\n\n\ndef extend_file_system_for_windows(instance_id, drive_letter, size):\n    size = int(size)\n    response = ssm_client.send_command(\n        InstanceIds=[instance_id],\n        DocumentName=\"AWS-RunPowerShellScript\",\n        TimeoutSeconds=500,\n        Parameters={\n            \"commands\": [\n                \"{{Resize-Partition -DriveLetter {} -Size {}GB}}\".format(\n                    drive_letter, size\n                ),\n            ]\n        },\n    )\n    command_id = response[\"Command\"][\"CommandId\"]\n    status, status_details = get_command_status_with_wait(\n        instance_id, command_id\n    )\n    if status_details == \"Failed\":\n        raise Exception(\"Failed Extending the partition\")\n    return \"volume extended successfully\"\n\n\ndef validate_windows_partition_size(instance_id, drive_letter, size):\n    try:\n        MAX_RETRIALS_NUM = 3\n        WAITING_STATUS = [\"Pending\", \"InProgress\", \"Delayed\"]\n        size = int(size)\n        resp = ssm_client.send_command(\n            InstanceIds=[instance_id],\n            DocumentName=\"AWS-RunPowerShellScript\",\n            TimeoutSeconds=500,\n            Parameters={\n                \"commands\": [\n                    \"$maxSize = Get-PartitionSupportedSize -DriveLetter {}\".format(\n                        drive_letter\n                    ),\n                    \"if($maxSize.SizeMax -lt {} * 1024 * 1024 * 1024)\".format(\n                        size\n                    ),\n                    \"{exit 1}\",\n                ]\n            },\n        )\n        cmd_id = resp[\"Command\"][\"CommandId\"]\n        status, status_details = get_command_status_with_wait(\n            instance_id, cmd_id\n        )\n\n        for retries in range(MAX_RETRIALS_NUM):\n            if status in WAITING_STATUS:\n                time.sleep(10)\n                status, status_details = get_command_status_with_wait(\n                    instance_id, cmd_id\n                )\n\n        if status_details == \"Failed\":\n            raise Exception(\n                \"The target size is greater than the max size of the partition\"\n            )\n    except Exception as e:\n        raise Exception(e)\n    return True\n\n\ndef get_command_status_with_wait(instance_id, command_id):\n    time.sleep(10)\n    response = ssm_client.get_command_invocation(\n        CommandId=command_id, InstanceId=instance_id\n    )\n    status = response[\"Status\"]\n    details = response[\"StatusDetails\"]\n    return status, details\n"
      },
      "outputs": [
        {
          "Name": "output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ]
}
