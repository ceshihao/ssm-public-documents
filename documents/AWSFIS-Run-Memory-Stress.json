{
  "description": "### Document name - AWSFIS-Run-Memory-Stress\n\n## What does this document do?\nIt runs memory stress on an instance via stress-ng tool. If stress-ng is not already installed on the instance, this SSM document will install it, unless InstallDependencies parameter is set to False.\nThis SSM document supports Amazon Linux and Ubuntu operating systems only.\n\n## Dependencies installed by this SSM Document\n* stress-ng\nNote: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).\n\n## Input Parameters\n* DurationSeconds: (Required) The duration - in seconds - of the memory stress.\n* Workers: The number of virtual memory stressors (default: 1).\n* Percent: The percentage of virtual memory to use (required).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n\n## Output Parameters\nNone.",
  "schemaVersion": "2.2",
  "parameters": {
    "DurationSeconds": {
      "type": "String",
      "description": "(Required) The duration - in seconds - of the memory stress.",
      "allowedPattern": "^[0-9]+$"
    },
    "Workers": {
      "type": "String",
      "description": "The number of virtual memory stressors (default: 1).",
      "default": "1",
      "allowedPattern": "^[0-9]+$"
    },
    "Percent": {
      "type": "String",
      "description": "The percentage of virtual memory to use (default: 80).",
      "default": "80",
      "allowedPattern": "^([1-9][0-9]?|100)$"
    },
    "InstallDependencies": {
      "type": "String",
      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
      "default": "True",
      "allowedValues": [
        "True",
        "False"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallDependencies",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
      "inputs": {
        "onFailure": "exit",
        "runCommand": [
          "#!/bin/bash\n\n\nif [[ \"$( command -v stress-ng 2>/dev/null )\" ]]; then\n    if [[ -n \"\" ]] ; then\n        depmod -a\n        if modprobe sch_netem; then\n          exit\n        fi\n    else\n        echo Dependency is already installed. ; exit ;\n    fi\nfi\nif  [[ \"{{ InstallDependencies }}\" == True ]] ; then\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] && grep -i 'Amazon Linux' /etc/system-release  ; then\n    if ! grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      # Use amazon-linux-extras if available (Amazon Linux 2). Don't need it otherwise (Amazon Linux 1)\n      command -v amazon-linux-extras 2>/dev/null 1>&2 && amazon-linux-extras install testing\n      yum -y install stress-ng\n    elif grep -Fiq 'ID=\"amzn\"' /etc/os-release && grep -Fiq 'VERSION_ID=\"2023\"' /etc/os-release ; then\n      \n      yum -y install stress-ng\n    else\n      echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Amazon Linux, Ubuntu, CentOS (8, 9) and RHEL (8, 9) operating systems\"\n      exit 1\n    fi\n\n  elif grep -Fiq 'ID=\"centos\"' /etc/os-release  || grep -Fiq 'ID=\"rhel\"' /etc/os-release ; then\n    # Fetch OS Version\n    os_version_number=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '\"')\n    # if the version has a decimal, this line will remove it\n    os_major_version_number=${os_version_number%.*}\n    # Replace with version number in the url if required\n    if ! rpm --quiet -q epel-release &&  [ -n \"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\" ] ; then\n      epel_dl_url=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-VERSION.noarch.rpm\"\n      epel_with_version=\"${epel_dl_url/VERSION/$os_major_version_number}\"\n      yum -y install $epel_with_version\n    fi\n    rhel_package=\"stress-ng\"\n    \n    yum -y install $rhel_package\n\n  elif grep -i \"Ubuntu\" /etc/issue ; then\n    apt-get update -y\n    # when installing, sometimes ubuntu has stderr that are not breaking errors.\n    install_error=$(apt-get install -y stress-ng) 2>&1\n    if [[ -n \"$install_error\" ]]  ; then\n        echo \"$install_error\"\n    fi\n    ubuntu_commands=( stress-ng )\n    for dependency_command in \"${ubuntu_commands[@]}\"\n    do\n       if ! command -v $dependency_command >/dev/null 2>&1 ; then\n            echo \"Exiting - $dependency_command not installed\"\n            exit 1\n       fi\n    done\n  else\n    echo \"Exiting - This SSM document supports: Amazon Linux 2023, Amazon Linux 2, Amazon Linux, Ubuntu, CentOS (8, 9) and RHEL (8, 9) operating systems\"\n    exit 1\n  fi\n  if [[ -n \"\" ]] ; then\n    if ! systemctl is-enabled atd || ! systemctl is-active atd; then\n        echo \"Enabling and starting atd\"\n        systemctl enable atd\n        systemctl start atd\n    fi\n  fi\nelse\n  echo \"Dependencies are not installed - Please set InstallDependencies to True.\"\n  exit 1\nfi\n"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "FaultInjection",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "description": "## Parameters: DurationSeconds, Workers and Percent\nThis step will run a memory stress test on the instance for the specified DurationSeconds time.\nIt will start `Workers` number of workers, using `Percent` of the total available memory.\n",
      "inputs": {
        "maxAttempts": 1,
        "timeoutSeconds": 43200,
        "runCommand": [
          "#!/bin/bash\n\n\n# Treat unset variables as an error\nset -o nounset\n\n\n#################################\n# General pre fault-execution logic #\n#################################\n\n# To track how long the fault command took to run\nstart_time=$(date +%s)\n\n\n########################\n# Fault-specific logic #\n########################\n\nif [ {{ DurationSeconds }} -lt 1 ] || [ {{ DurationSeconds }} -gt 43200 ] ; then echo \"Parameter DurationSeconds must be between 1 and 43200, was: '{{ DurationSeconds }}'\" >&2 && exit 1; fi\nif [ {{ Percent }} -lt 1 ] || [ {{ Percent }} -gt 100 ] ; then echo \"Parameter Percent must be between 1 and 100, was: '{{ Percent }}'\" >&2 && exit 1; fi\npgrep stress-ng && echo \"Another stress-ng command is running, exiting...\" >&2 && exit 1\necho Initiating memory stress for {{ DurationSeconds }} seconds, {{ Workers }} workers, using {{ Percent }} percent of total available memory...\nstress-ng --vm {{ Workers }} --vm-bytes {{ Percent }}% -t {{ DurationSeconds }}s\necho Finished memory stress.\n\n\n#################################\n# General post fault-execution logic #\n#################################\nDURATION={{ DurationSeconds }}\n\n\nif [[ -z $start_time ]];then\n    >&2 echo \"start_time is not defined\"\n    exit 1;\nfi\n\nelapsed_time=$(( $(date +%s) - start_time ))\n\n# Fail if the fault command exits succssfully but the execution duration is less than the expected duration.\n# This happens when Stress-ng is killed prematurely using SIGTERM or SIGINT.\nif [[ \"$elapsed_time\" -lt \"$DURATION\" ]]; then\n    >&2 echo \"Fault took $elapsed_time seconds to execute, which is less than expected duration $DURATION\"\n    exit 1;\nfi"
        ]
      }
    }
  ]
}
