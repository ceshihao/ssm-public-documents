{
  "description": "Enable or disable Kernel Live Patching on Amazon Linux 2 instances. If you choose 'Enable' and the running kernel version is not 4.14.165-131.185 or later the newest available kernel is installed and your instance is rebooted. If you choose 'Disable' your system is rebooted after Kernel Live Patching is disabled successfully.",
  "schemaVersion": "2.2",
  "parameters": {
    "EnableOrDisable": {
      "type": "String",
      "description": "(Optional) Enable or disable Kernel Live Patching on Amazon Linux 2 instances. If you choose 'Enable' and the running kernel version is not 4.14.165-131.185 or later the newest available kernel is installed and your instance is rebooted. If you choose 'Disable' your system is rebooted after Kernel Live Patching is disabled successfully.",
      "default": "Enable",
      "allowedValues": [
        "Enable",
        "Disable"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "ConfigureKernelLivePatching",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "timeoutSeconds": 7200,
        "runCommand": [
          "#!/bin/bash",
          "#",
          "# Enable/disable kernel live patching on AL2 instances",
          "",
          "set -o errexit -o pipefail -o nounset",
          "declare -r GREP_CMD=\"/bin/grep\"",
          "declare -r UNAME_CMD=\"/bin/uname\"",
          "declare -r YUM_CMD=\"/bin/yum\"",
          "declare -r SYSTEMCTL_CMD=\"/bin/systemctl\"",
          "declare -r AMAZON_LINUX_EXTRAS_CMD=\"/bin/amazon-linux-extras\"",
          "declare -r RPM_CMD=\"/bin/rpm\"",
          "declare -r ARCH_CMD=\"/bin/arch\"",
          "declare -r SUCCESS=0",
          "declare -r FAILURE=1",
          "declare -r EXIT_CODE_REBOOT=194",
          "declare -ra MIN_REQUIRED_KERNEL_ARRAY=(4 14 165 131 185)",
          "declare -r MIN_REQUIRED_KERNEL_STR=\"4.14.165-131.185.amzn2.x86_64\"",
          "CURRENT_KERNEL_STR=\"$(${UNAME_CMD} -r)\"",
          "declare -r CURRENT_KERNEL_STR",
          "declare -r YUM_SLEEP_SECONDS=5",
          "",
          "#######################################",
          "# Check if the instance's operating system is amazon_linux_2(x86_64)",
          "# Arguments:",
          "#   None",
          "# Returns:",
          "#   0 if instance's os is amazon_linux_2(x86_64)",
          "#   1 if instance's os isn't amazon_linux_2(x86_64)",
          "#######################################",
          "instance_is_amazon_linux_2() {",
          "  echo \"[INFO]\tChecking OS requirements\"",
          "  local -r os_path=\"/etc/os-release\"",
          "  local architecture",
          "  architecture=\"$(${ARCH_CMD})\"",
          "  declare -r architecture",
          "  if [[ -f \"${os_path}\" ]] && \\",
          "${GREP_CMD} -q 'ID=\"amzn\"' \"${os_path}\" && \\",
          "${GREP_CMD} -q 'VERSION_ID=\"2\"\\|VERSION_ID=\"2.0\"' \"${os_path}\" && \\",
          "[[ \"${architecture}\" == \"x86_64\" ]]; then",
          "    return ${SUCCESS}",
          "  fi",
          "  return ${FAILURE}",
          "}",
          "",
          "#######################################",
          "# Echo an array representing the current running kernel, e.g (4 14 177 139 254)",
          "# Arguments:",
          "#   None",
          "# Returns:",
          "#   None",
          "# Prints:",
          "#   Space-delimited string of kernel version values",
          "#######################################",
          "get_current_running_kernel() {",
          "  local -a temp_arr_1",
          "  local -a temp_arr_2",
          "  local -a arr1",
          "  local -a arr2",
          "  IFS='.' read -ra arr1 <<< \"${CURRENT_KERNEL_STR}\"",
          "  temp_arr_1=(\"${arr1[@]}\")",
          "  IFS='-' read -ra arr2 <<< \"${arr1[2]}\"",
          "  temp_arr_2=(\"${arr2[@]}\")",
          "  local -a cur_kernel_arr",
          "  cur_kernel_arr=(",
          "    ${temp_arr_1[0]}",
          "    ${temp_arr_1[1]}",
          "    ${temp_arr_2[0]}",
          "    ${temp_arr_2[1]}",
          "    ${temp_arr_1[3]}",
          "  )",
          "  declare -r cur_kernel_arr",
          "  echo \"${cur_kernel_arr[@]}\"",
          "}",
          "",
          "#######################################",
          "# Compare the current running kernel array with the minimal required",
          "# kernel array entry by entry",
          "# Arguments:",
          "#   None",
          "# Returns:",
          "#   0 if the current running kernel verion is above or",
          "#     equal to the min required kernel version",
          "#   1 if the current running kernel version is below min required kernel",
          "#######################################",
          "meet_minimal_requirement() {",
          "  local -a cur_kernel_arr",
          "  read -ra cur_kernel_arr <<< \"$(get_current_running_kernel)\"",
          "  declare -r cur_kernel_arr",
          "  local curr",
          "  local min",
          "  for (( idx=0; idx<${#MIN_REQUIRED_KERNEL_ARRAY[@]}; idx++ )); do",
          "    curr=${cur_kernel_arr[$idx]}",
          "    min=${MIN_REQUIRED_KERNEL_ARRAY[$idx]}",
          "    if (( $curr > $min )); then",
          "      return ${SUCCESS}",
          "    fi",
          "    if (( $curr < $min )); then",
          "      return ${FAILURE}",
          "    fi",
          "  done",
          "  return ${SUCCESS}",
          "}",
          "",
          "#######################################",
          "# Check if *yum* plugin kernel-livepatch is installed by checking the",
          "# return code of running 'rpm -qa | grep -q kernel-livepatch 2>&1",
          "# Arguments:",
          "#   None",
          "# Returns:",
          "#   0 if the *yum* kernel-livepatch plugin is installed successfully",
          "#   1 if the *yum* kernel-livepatch plugin is not installed successfully",
          "#######################################",
          "yum_plugin_installed() {",
          "  ${RPM_CMD} -qa | ${GREP_CMD} -q kernel-livepatch 2>&1 && return ${SUCCESS}",
          "  return ${FAILURE}",
          "}",
          "",
          "#######################################",
          "# If the instance's operating system is NOT amazon_linux_2(x86_64),",
          "# fail the document execution",
          "#######################################",
          "if ! instance_is_amazon_linux_2; then",
          "  msg=\"Kernel live patching currently only supported on 64-bit (x86_64)",
          "architecture for Amazon Linux2 not supported on other architecture or OS\"",
          "  echo >&2 \"[ERROR]\t${msg}\"",
          "  exit ${FAILURE}",
          "fi",
          "",
          "msg=\"Successfully detected AL2 instance",
          "AL2 instance on 64-bit (x86_64) supports kernel live patching\"",
          "echo \"[INFO]\t${msg}\"",
          "",
          "#######################################",
          "# Start of main document content for enabling live patching",
          "#######################################",
          "if [[ {{EnableOrDisable}} == \"Enable\" ]]; then",
          "",
          "  #######################################",
          "  # Check if current kernel is above minimal required kernel version",
          "  #######################################",
          "  if ! meet_minimal_requirement; then",
          "    msg=\"The kernel version on the instance is ${CURRENT_KERNEL_STR}.",
          "It is lower than the minimal required kernel version: ${MIN_REQUIRED_KERNEL_STR}",
          "for live patching. Installing the most recent version of kernel requires",
          "system reboot to load new kernel version\"",
          "    echo \"[INFO]\t${msg}\"",
          "    ${YUM_CMD} install -y kernel",
          "    echo \"[INFO]\tRebooting instance\"",
          "    exit ${EXIT_CODE_REBOOT}",
          "  fi",
          "",
          "  echo \"[INFO]\tYour instance meets the required kernel version for live patching.\"",
          "",
          "  #######################################",
          "  # Install *yum* plugin kernel-livepatch",
          "  #######################################",
          "  echo \"[INFO]\tInstalling the *yum* plugin kernel-livepatch\"",
          "  ${YUM_CMD} install -y yum-plugin-kernel-livepatch",
          "",
          "  sleep ${YUM_SLEEP_SECONDS}",
          "",
          "  #######################################",
          "  # Try to enable *yum* plugin kernel-livepatch if it is installed",
          "  # Every three months customer has to install and reboot into a newer",
          "  # kernel to make sure their instance receive a stream of livepatches",
          "  #######################################",
          "  if ! yum_plugin_installed; then",
          "    echo >&2 \"[ERROR]\tFailed to install the *yum* plugin kernel-livepatch successfully\"",
          "    exit ${FAILURE}",
          "  fi",
          "  echo \"[INFO]\tEnabling the *yum* plugin kernel-livepatch \"",
          "  if ! ${YUM_CMD} kernel-livepatch enable -y; then",
          "    echo >&2 \"[ERROR]\tFailed to enable the *yum* plugin kernel-livepatch \"",
          "    exit ${FAILURE}",
          "  fi",
          "  echo \"[INFO]\tSuccessfully enabled *yum* plugin kernel-livepatch \"",
          "  sleep ${YUM_SLEEP_SECONDS}",
          "  if ${YUM_CMD} kernel-livepatch supported >/dev/null 2>&1; then",
          "    echo \"[INFO]\tCurrent kernel within lifetime support\"",
          "  else",
          "    echo >&2 \"[WARNING]\tCurrent kernel is no longer within lifetime support.",
          "You need to install and reboot into a newer kernel to receive a stream of livepatches.\"",
          "  fi",
          "",
          "  #######################################",
          "  # Update and start the *kpatch* service",
          "  #######################################",
          "  echo \"[INFO]\tInstalling kpatch-runtime\"",
          "  ${YUM_CMD} update kpatch-runtime -y",
          "  echo \"[INFO]\tEnabling kpatch.service\"",
          "  ${SYSTEMCTL_CMD} enable kpatch.service >/dev/null 2>&1",
          "",
          "  #######################################",
          "  # Configure the Amazon Linux 2 Kernel Live Patching repository",
          "  #######################################",
          "  echo \"[INFO]\tEnabling livepatch topic\"",
          "  if ! ${AMAZON_LINUX_EXTRAS_CMD} enable livepatch 2>/dev/null; then",
          "    echo >&2 \"[ERROR]\tCouldn't enable livepatch topic on the instance.\"",
          "    exit ${FAILURE}",
          "  fi",
          "",
          "  echo \"[INFO]\tEnabled livepatch topic on the instance.\"",
          "  echo \"[INFO]\tDone.\"",
          "",
          "fi",
          "#######################################",
          "# Start of main document content for disabling live patching",
          "#######################################",
          "if [[ {{EnableOrDisable}} == \"Disable\" ]]; then",
          "",
          "  #######################################",
          "  # Disabling and uninstalling the *yum* plugin kernel-livepatch",
          "  # if nothing is installed do nothing ",
          "  #######################################",
          "  echo \"[INFO]\tDisabling kernel live patch if installed\"",
          "  if ! yum_plugin_installed; then",
          "    echo \"[INFO]\t*yum* plugin for kernel live patching not installed\"",
          "    exit ${SUCCESS}",
          "  fi",
          "",
          "  ${YUM_CMD} kernel-livepatch disable -y > /dev/null",
          "  sleep ${YUM_SLEEP_SECONDS}",
          "  echo \"[INFO]\t*yum* plugin for kernel live patching disabled \"",
          "  ${YUM_CMD} remove -y yum-plugin-kernel-livepatch > /dev/null",
          "  echo \"[INFO]\t*yum* plugin for kernel live patching uninstalling\"",
          "",
          "  #######################################",
          "  # Confirm that the *yum* plugin for kernel live patching",
          "  # has uninstalled successfully and reboot",
          "  #######################################",
          "  echo \"[INFO]\tVerifying if kernel live patching is disabled/uninstalled\"",
          "  if yum_plugin_installed; then",
          "    echo >&2 \"[ERROR]\tFailed to uninstall *yum* plugin for kernel live patching\"",
          "    exit ${FAILURE}",
          "  fi",
          "  msg=\"*yum* plugin for kernel live patching has been uninstalled",
          "Rebooting instance to complete kernel live patching disabling\"",
          "  echo \"[INFO]\t${msg}\"",
          "  exit ${EXIT_CODE_REBOOT}",
          "",
          "fi"
        ]
      }
    }
  ]
}
