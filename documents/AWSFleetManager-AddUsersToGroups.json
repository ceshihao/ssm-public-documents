{
  "schemaVersion": "2.2",
  "description": "Adds a list of users to all groups specified.",
  "parameters": {
    "Groups": {
      "type": "String",
      "description": "A command separated list of groups to modify.",
      "allowedPattern": "^[^\"'\\/\\\\\\[\\]:;|#=+*?<>\\r\\n]+$"
    },
    "Users": {
      "type": "String",
      "description": "A comma separated list of users to add.",
      "allowedPattern": "^[^\"'\\/\\\\\\[\\]:;|=+*?<>@\\r\\n]+$"
    },
    "PerformAction": {
      "type": "String",
      "description": "(Optional) By default this document will not perform the desired action. For the change to take effect, set this parameter to 'Yes'.",
      "default": "No",
      "allowedValues": [
        "No",
        "Yes"
      ]
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "InvokeWindowsScript",
      "inputs": {
        "runCommand": [
          "$ErrorActionPreference = 'Stop'\n\nFunction ParseInputParameter {\n    param (\n        [string]$Name,\n        [string]$Value,\n        [string]$Regex\n    )\n\n    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'\n    if ($Value -notmatch $ValidParameterRegex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    }\n    $parameterValue = $Value.Substring(3)\n\n    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()\n    $trimmedParameterValue = $trimmedParameterValue.Substring(1)\n    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)\n\n    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {\n        ExitWithFailureMessage -Message \"Invalid syntax for the parameter $Name\"\n    } else {\n        $trimmedParameterValue\n    }\n}\n\nfunction ExitWithFailureMessage {\n    param (\n        [string]$Message,\n        [string]$ExceptionMessage,\n        [Switch]$PrintJson\n    )\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\n        $errorMessage = $Message\n    } else {\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\n    }\n    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}\n    WriteStandardError -Message $errorMessage\n    [System.Environment]::Exit(1)\n}\n\nfunction ExitWithSuccessMessage {\n    param (\n        [string]$Message\n    )\n    Write-Host $Message\n    [System.Environment]::Exit(0)\n}\n\nfunction WriteStandardError {\n    param (\n        [string]$Message\n    )\n    $Host.UI.WriteErrorLine($Message)\n}\n\nfunction TestPerformAction {\n    param ( [string]$PerformAction )\n    if ($PerformAction -ne 'Yes') {\n        Write-Host \"No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes.\"\n        [System.Environment]::Exit(0)\n    }\n}\n\n$Groups = Write-Output --%{{{ Groups }}}\n$Groups = ParseInputParameter -Name 'Groups' -Value $Groups\n\n$Users = Write-Output --%{{{ Users }}}\n$Users = ParseInputParameter -Name 'Users' -Value $Users\n\n$PerformAction = Write-Output --%{{{ PerformAction }}}\n$PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'\nTestPerformAction -PerformAction $PerformAction\n\nfunction TestLocalUserExists {\n    param (\n        [string]$Username\n    )\n    $getCimInstance = @{\n        Class = 'Win32_UserAccount'\n        Filter = 'LocalAccount=True'\n    }\n    if (Get-CimInstance @getCimInstance | Where-Object {$_.Name -eq $Username}) {\n        return $true\n    } else {\n        return $false\n    }\n}\n\nfunction TestLocalGroupExists {\n    param (\n        [string]$Name,\n        [string]$Domain\n    )\n    $getCimInstance = @{Class = 'Win32_Group' }\n    if (Get-CimInstance @getCimInstance | Where-Object {$_.Name -eq $Name -and $_.Domain -eq $Domain}) {\n        return $true\n    } else {\n        return $false\n    }\n}\n\nfunction GroupContains {\n    param (\n        [string]$Username,\n        [psobject]$Group\n    )\n    $Group.psbase.Invoke('Members') | ForEach-Object {\n        $user = $_.GetType().InvokeMember('Name', 'GetProperty', $null, $_, $null)\n        if ($user -eq $Username) {\n            return $true\n        }\n    }\n    return $false\n}\n\n$exceptionCount = 0\n\nforeach ($group in $Groups.Split(',')) {\n    try {\n        $groupName = $group.Trim()\n    } catch {\n        $exceptionCount++\n        WriteStandardError -Message \"The group name $group is invalid.\"\n        continue\n    }\n\n    if ([string]::IsNullOrWhiteSpace($groupName)) {continue}\n\n    if (-not(TestLocalGroupExists -Name $groupName -Domain $env:COMPUTERNAME)) {\n        $exceptionCount++\n        WriteStandardError -Message \"The specified group $groupName does not exist.\"\n        continue\n    }\n\n    $groupObj = ([adsi]\"WinNT://$env:COMPUTERNAME/$groupName,group\")\n    foreach ($user in $Users.Split(',')) {\n        try {\n            $userName = $user.Trim()\n        } catch {\n            $exceptionCount++\n            WriteStandardError -Message \"The user name $user is invalid.\"\n            continue\n        }\n\n        if ([string]::IsNullOrWhiteSpace($userName)) {continue}\n\n        if (-not(TestLocalUserExists -Username $userName)) {\n            $exceptionCount++\n            WriteStandardError -Message \"The user $userName does not exist.\"\n            continue\n        }\n\n        if (GroupContains -Username $userName -Group $groupObj) {\n            Write-Host \"$($groupName): The user $userName is already a member.\"\n        } else {\n            try {\n                $groupObj.Add(\"WinNT://$env:COMPUTERNAME/$userName,user\")\n                Write-Host \"$($groupName): The user $userName has been added.\"\n            } catch {\n                $exceptionCount++\n                WriteStandardError -Message \"$($groupName): Failed to add the user $userName.\"\n            }\n        }\n    }\n}\n\nif ($exceptionCount -gt 0) {\n    $exitWithFailureMessage = @{\n        Message = 'There was at least one error when adding users to the specified groups.'\n        PrintJson = $true\n    }\n    ExitWithFailureMessage @exitWithFailureMessage\n}\n\nExitWithSuccessMessage 'All users have been added to the specified groups.'\n"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "action": "aws:runShellScript",
      "name": "InvokeLinuxScript",
      "inputs": {
        "runCommand": [
          "#!/bin/bash\nset -e\n\nExitWithFailureMessage() {\n    MESSAGE=\"$1\"\n    JSON=\"$2\"\n    if [[ \"$JSON\" == \"PRINT_JSON\" ]]; then\n        echo \"{\\\"error\\\":\\\"$MESSAGE\\\"}\"\n    fi\n    WriteStandardError \"$MESSAGE\"\n    exit 1\n}\n\nExitWithSuccessMessage() {\n    echo \"$1\"\n    exit 0\n}\n\nWriteStandardError() {\n    MESSAGE=\"$1\"\n    (>&2 echo \"$MESSAGE\")\n}\n\nTestPerformAction() {\n    if [[ \"$1\" != \"Yes\" ]]; then\n        echo \"No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes.\"\n        exit 0\n    fi\n}\n\nGroups='{{ Groups }}'\nUsers='{{ Users }}'\n\nPERFORMACTION='{{ PerformAction }}'\nTestPerformAction \"$PERFORMACTION\"\n\nTestLocalGroupExists() {\n  GROUP=\"$1\"\n  if grep -q \"^$GROUP:\" /etc/group; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nTestLocalUserExists() {\n  USERNAME=\"$1\"\n  if grep -q \"^$USERNAME:\" /etc/passwd; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nEXCEPTION_COUNT=0\n\nIFS=',' read -ra group_list <<< \"$Groups\"\nfor group in \"${group_list[@]}\"; do\n  # Remove whitespace\n  groupName=$(echo \"$group\" | sed -e 's/^[[:space:]]*//')\n  if [[ \"$groupName\" == \"\" ]]; then\n    continue\n  fi\n\n  TestLocalGroupExists \"$groupName\" || {\n    EXCEPTION_COUNT=$((EXCEPTION_COUNT+1))\n    WriteStandardError \"The specified group $groupName does not exist.\"\n    continue\n  }\n\n  IFS=',' read -ra user_list <<< \"$Users\"\n  for user in \"${user_list[@]}\"; do\n    # Remove whitespace\n    userName=$(echo \"$user\" | sed -e 's/^[[:space:]]*//')\n    if [[ \"$userName\" == \"\" ]]; then\n      continue\n    fi\n\n    TestLocalUserExists \"$userName\" || {\n      EXCEPTION_COUNT=$((EXCEPTION_COUNT+1))\n      WriteStandardError \"The user $userName does not exist.\"\n      continue\n    }\n\n    usermod -a -G \"$groupName\" \"$userName\" || {\n      EXCEPTION_COUNT=$((EXCEPTION_COUNT+1))\n      WriteStandardError \"$groupName: Failed to add the user $userName.\"\n      continue\n    }\n    echo \"$groupName: The user $userName has been added.\"\n  done\ndone\n\n\nif [[ \"$EXCEPTION_COUNT\" != \"0\" ]]; then\n  ExitWithFailureMessage 'There was at least one error when adding users to the specified groups.' 'PRINT_JSON'\nfi\n\nExitWithSuccessMessage 'All users have been added to the specified groups.'\n"
        ]
      }
    }
  ]
}
