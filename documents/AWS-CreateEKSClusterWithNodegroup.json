{
  "schemaVersion": "0.3",
  "description": "# Document Name - AWS-CreateEKSClusterWithNodegroup\n\n## What does this document do?\nThe AWS-CreateEKSClusterWithNodegroup runbook creates a new Amazon Elastic Kubernetes Service (EKS) control plane\ncluster with provisioned capacity provided by a node group. \n\n**NOTE**: In the event a resource (EKS Cluster or Nodegroup) fails its respective verification step, please validate \nif any resources were created and remove them if necessary.\n\n## Input Parameters\n* AutomationAssumeRole: (Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n  that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems\n  Manager Automation uses the permissions of the user that starts this runbook.\n* ClusterName: (Required) The unique name to give to your cluster.\n* ClusterRoleArn: (Required) The Amazon Resource Name (ARN) of the IAM role that provides permissions for the\n  Kubernetes control plane to make calls to AWS API operations on your behalf. For more information, see\n  [Amazon EKS Service IAM Role](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html) in the Amazon\n  EKS User Guide.\n* NodegroupName: (Required) The unique name to give your node group.\n* NodegroupRoleArn: (Required) The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The\n  Amazon EKS worker node kubelet daemon makes calls to AWS APIs on your behalf. Nodes receive permissions for these\n  API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them\n  into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information,\n  see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon\n  EKS User Guide.\n* SubnetIds: (Required) Subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces\n  in these subnets to allow communication between your nodes and the Kubernetes control plane. You must specify at\n  least two subnet IDs.\n* EKSEndpointPrivateAccess: (Optional) Set this value to true to enable private access for your cluster's Kubernetes\n  API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the\n  private VPC endpoint. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then\n  ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.\n  For more information, see\n  [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)\n  in the Amazon EKS User Guide.\n  * Default: true\n* EKSEndpointPublicAccess: (Optional) Set this value to false to disable public access to your cluster's Kubernetes\n  API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests\n  from within the cluster VPC. For more information, see\n  [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)\n  in the Amazon EKS User Guide.\n  * Default: false\n* PublicAccessCIDRs: (Optional) The CIDR blocks that are allowed access to your cluster's public Kubernetes API server\n  endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. If\n  you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you\n  specify the necessary CIDR blocks. For more information, see\n  [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)\n  in the Amazon EKS User Guide.\n  * Default: []\n* SecurityGroupIds: (Optional) Specify one or more security groups for the cross-account elastic network interfaces\n  that Amazon EKS creates to use that allow communication between your nodes and the Kubernetes control plane. If you\n  don't specify any security groups, then familiarize yourself with the difference between Amazon EKS defaults for\n  clusters deployed with Kubernetes. For more information, see\n  [Amazon EKS security group considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in\n  the Amazon EKS User Guide.\n  * Default: []\n\n## Output Parameters\n* CreateEKSCluster.CreateClusterResponse: Response received from the CreateCluster API call.\n* CreateNodegroup.CreateNodegroupResponse: Response received from the CreateNodegroup API call.\n",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "AutomationAssumeRole": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems\nManager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses\nthe permissions of the user that starts this runbook.\n"
    },
    "ClusterName": {
      "type": "String",
      "allowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9_-]{0,1023}$",
      "description": "(Required) The unique name to give to your cluster."
    },
    "ClusterRoleArn": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control\nplane to make calls to AWS API operations on your behalf.\n"
    },
    "NodegroupName": {
      "type": "String",
      "allowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9_-]{0,1023}$",
      "description": "(Required) The unique name to give your node group."
    },
    "NodegroupRoleArn": {
      "type": "AWS::IAM::Role::Arn",
      "description": "(Required) The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker\nnode kubelet daemon makes calls to AWS APIs on your behalf. Nodes receive permissions for these API calls through\nan IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you\nmust create an IAM role for those nodes to use when they are launched.\n"
    },
    "SubnetIds": {
      "type": "StringList",
      "allowedPattern": "^subnet-[a-z0-9]{1,1017}$",
      "description": "(Required) Subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these\nsubnets to allow communication between your nodes and the Kubernetes control plane. You must specify at least two\nsubnet IDs.\n"
    },
    "EKSEndpointPrivateAccess": {
      "type": "Boolean",
      "default": true,
      "description": "(Optional) Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If\nyou enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. If\nyou disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that\npublicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.\n"
    },
    "EKSEndpointPublicAccess": {
      "type": "Boolean",
      "default": false,
      "description": "(Optional) Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If\nyou disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster\nVPC.\n"
    },
    "PublicAccessCIDRs": {
      "type": "StringList",
      "allowedPattern": "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$",
      "default": [],
      "description": "(Optional) The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint.\nCommunication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. If you've\ndisabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you\nspecify the necessary CIDR blocks.\n"
    },
    "SecurityGroupIds": {
      "type": "StringList",
      "allowedPattern": "^sg-[a-z0-9]{1,1021}$",
      "default": [],
      "description": "(Optional) Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS\ncreates to use that allow communication between your nodes and the Kubernetes control plane. If you don't specify\nany security groups, then familiarize yourself with the difference between Amazon EKS defaults for clusters\ndeployed with Kubernetes.\n"
    }
  },
  "outputs": [
    "CreateEKSCluster.CreateClusterResponse",
    "CreateNodegroup.CreateNodegroupResponse"
  ],
  "mainSteps": [
    {
      "name": "CreateEKSCluster",
      "action": "aws:executeAwsApi",
      "description": "## CreateEKSCluster\nCreates an Amazon EKS control plane.\n## Outputs\nResponse: Response from the CreateCluster API call.\n",
      "inputs": {
        "Service": "eks",
        "Api": "CreateCluster",
        "name": "{{ ClusterName }}",
        "roleArn": "{{ ClusterRoleArn }}",
        "resourcesVpcConfig": {
          "endpointPrivateAccess": "{{ EKSEndpointPrivateAccess }}",
          "endpointPublicAccess": "{{ EKSEndpointPublicAccess }}",
          "publicAccessCidrs": "{{ PublicAccessCIDRs }}",
          "securityGroupIds": "{{ SecurityGroupIds }}",
          "subnetIds": "{{ SubnetIds }}"
        }
      },
      "outputs": [
        {
          "Name": "CreateClusterResponse",
          "Type": "StringMap",
          "Selector": "$"
        }
      ]
    },
    {
      "name": "VerifyEKSClusterIsActive",
      "action": "aws:waitForAwsResourceProperty",
      "description": "## VerifyEKSClusterIsActive\nVerifies the cluster has reached the ACTIVE state.\n",
      "isCritical": true,
      "inputs": {
        "Service": "eks",
        "Api": "DescribeCluster",
        "name": "{{ ClusterName }}",
        "PropertySelector": "$.cluster.status",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    },
    {
      "name": "CreateNodegroup",
      "action": "aws:executeAwsApi",
      "description": "## CreateNodegroup\nCreates a managed node group for an Amazon EKS cluster.\n## Outputs\nResponse: Response received from the API call.\n",
      "inputs": {
        "Service": "eks",
        "Api": "CreateNodegroup",
        "clusterName": "{{ ClusterName }}",
        "nodegroupName": "{{ NodegroupName }}",
        "nodeRole": "{{ NodegroupRoleArn }}",
        "subnets": "{{ SubnetIds }}"
      },
      "outputs": [
        {
          "Name": "CreateNodegroupResponse",
          "Type": "StringMap",
          "Selector": "$"
        }
      ]
    },
    {
      "name": "VerifyNodegroupIsActive",
      "action": "aws:waitForAwsResourceProperty",
      "description": "## VerifyNodegroupIsActive\nVerifies the node group has reached the ACTIVE state.\n",
      "isCritical": true,
      "inputs": {
        "Service": "eks",
        "Api": "DescribeNodegroup",
        "clusterName": "{{ ClusterName }}",
        "nodegroupName": "{{ NodegroupName }}",
        "PropertySelector": "$.nodegroup.status",
        "DesiredValues": [
          "ACTIVE"
        ]
      }
    }
  ]
}
