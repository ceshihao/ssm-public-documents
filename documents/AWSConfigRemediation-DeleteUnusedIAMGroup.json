{
  "description": "### Document name - AWSConfigRemediation-DeleteUnusedIAMGroup\n\n## What does this document do?\nThis document delete an unused IAM group.\n\n## Input Parameters\n* GroupName: (Required) Name of the IAM group to delete.\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output parameters\n* DeleteUnusedIAMGroup.http_response: The standard HTTP response from the DeleteGroup API.\n",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "GroupName": {
      "type": "String",
      "description": "(Required) Group name of the IAM Group to delete. Group Name must be maximum 128 characters and contain only alphanumeric characters and/or the following +=,.@-_",
      "allowedPattern": "^[\\w+=,.@_-]{1,128}$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "allowedPattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/[\\w+=,.@-]+"
    }
  },
  "outputs": [
    "DeleteUnusedIAMGroup.http_response"
  ],
  "mainSteps": [
    {
      "name": "DeleteUnusedIAMGroup",
      "action": "aws:executeScript",
      "timeoutSeconds": 600,
      "isEnd": false,
      "description": "## DeleteUnusedIAMGroup\nDeletes an unused AWS IAM Group.\n## Outputs\n* http_response: The standard HTTP response from the DeleteGroup API.\n",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "delete_unused_iamgroup_handler",
        "InputPayload": {
          "GroupName": "{{ GroupName }}"
        },
        "Script": "import boto3\nPAGE_SIZE=100\ndef delete_group(iam_client, group_name):\n    return iam_client.delete_group(GroupName=group_name)\n\ndef list_attached_group_policies(iam_client, group_name):\n    attached_group_policies = []\n    attached_group_policies_page_result = iam_client.list_attached_group_policies(GroupName=group_name, MaxItems=PAGE_SIZE)\n    next_marker = True\n    while next_marker:\n        attached_group_policies.extend(attached_group_policies_page_result['AttachedPolicies'])\n        if 'Marker' in attached_group_policies_page_result:\n            next_marker = attached_group_policies_page_result.get('Marker')\n            attached_group_policies_page_result = iam_client.list_attached_group_policies(GroupName=group_name, MaxItems=PAGE_SIZE)\n        else:\n            next_marker = False\n    return attached_group_policies\n\ndef detach_attached_group_policies(iam_client, group_name, attached_group_policies):\n    for group_policy in attached_group_policies:\n      iam_client.detach_group_policy(GroupName=group_name, PolicyArn=group_policy['PolicyArn'])\n\ndef delete_inline_group_policy(iam_client, group_name, inline_group_policies):\n    for policy_name in inline_group_policies:\n      iam_client.delete_group_policy(GroupName=group_name, PolicyName=policy_name)\n\ndef list_inline_group_policies(iam_client, group_name):\n    inline_group_policies = []\n    inline_group_policies_page_result = iam_client.list_group_policies(GroupName=group_name, MaxItems=PAGE_SIZE)\n    next_marker = True\n    while next_marker:\n        inline_group_policies.extend(inline_group_policies_page_result['PolicyNames'])\n        if 'Marker' in inline_group_policies_page_result:\n            next_marker = inline_group_policies_page_result.get('Marker')\n            inline_group_policies_page_result = iam_client.list_group_policies(GroupName=group_name, MaxItems=PAGE_SIZE)\n        else:\n            next_marker = False\n    return inline_group_policies      \n\ndef delete_unused_iamgroup_handler(event, context):\n  iam_client = boto3.client('iam')\n  group_name = event['GroupName']\n  \n  inline_group_policies = list_inline_group_policies(iam_client, group_name)\n  delete_inline_group_policy(iam_client, group_name, inline_group_policies)\n\n  attached_group_policies = list_attached_group_policies(iam_client, group_name)\n  detach_attached_group_policies(iam_client, group_name, attached_group_policies)\n  \n  return delete_group(iam_client, group_name)"
      },
      "outputs": [
        {
          "Name": "http_response",
          "Selector": "$.Payload",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "VerifyIAMGroupDeleted",
      "action": "aws:executeScript",
      "description": "## VerifyIAMGroupDeleted\n  Checks that the IAM group deleted in the previous step exists.\n## Outputs\n  * Output: Success message or failure Exception.\n",
      "isEnd": true,
      "timeoutSeconds": 600,
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "handler",
        "InputPayload": {
          "GroupName": "{{ GroupName }}"
        },
        "Script": "import boto3\n\ndef handler(event, context):\n    iam_client = boto3.client('iam')\n    group_name = event['GroupName']\n\n    try:\n      iam_client.get_group(GroupName=group_name)\n      error_message = \"Verification Failed. IAM Group Name {} not deleted \".format(group_name)\n      raise Exception(error_message)\n    except iam_client.exceptions.NoSuchEntityException:\n      return {\n        \"output\": \"Verification of delete IAM group is successfull.\"\n      }"
      },
      "outputs": [
        {
          "Name": "Output",
          "Selector": "$.Payload.output",
          "Type": "String"
        }
      ]
    }
  ]
}
