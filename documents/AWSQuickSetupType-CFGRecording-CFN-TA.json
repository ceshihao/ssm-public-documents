{
  "schemaVersion": "1.0",
  "templateBody": {
    "Parameters": {
      "QSType": {
        "Type": "String",
        "AllowedValues": [
          "LA",
          "TA",
          "MA"
        ],
        "Description": "(Required) Specifies whether the Quick Setup applies to the local account or an AWS organization."
      },
      "QSConfigurationId": {
        "Type": "String",
        "Description": "(Required) Unique identifier of the deployed configuration."
      },
      "QSGlobalResourcesRegion": {
        "Type": "String",
        "Description": "(Required) Name of the AWS Region to deploy global resources such as S3 buckets."
      },
      "QSPrincipalOrgId": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The ID of the principal organization your management account operates in."
      },
      "QSAttachConfigurationPolicy": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Whether to attach Configuration permissions policy which sets boundaries of what configuration can do."
      },
      "RecordAllResources": {
        "Type": "String",
        "Default": "true",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records."
      },
      "RecordGlobalResourceTypes": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Specifies whether AWS Config includes global resource types in an 'all resources' configuration."
      },
      "GlobalResourceTypesRegion": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) Specifies the Region where global resources are recorded."
      },
      "RecordResourceTypes": {
        "Type": "CommaDelimitedList",
        "Default": "",
        "AllowedValues": [
          "",
          "AWS::ACM::Certificate",
          "AWS::ApiGateway::RestApi",
          "AWS::ApiGateway::Stage",
          "AWS::ApiGatewayV2::Api",
          "AWS::ApiGatewayV2::Stage",
          "AWS::AutoScaling::AutoScalingGroup",
          "AWS::AutoScaling::LaunchConfiguration",
          "AWS::AutoScaling::ScalingPolicy",
          "AWS::AutoScaling::ScheduledAction",
          "AWS::CloudFormation::Stack",
          "AWS::CloudFront::Distribution",
          "AWS::CloudFront::StreamingDistribution",
          "AWS::CloudTrail::Trail",
          "AWS::CloudWatch::Alarm",
          "AWS::CodeBuild::Project",
          "AWS::CodePipeline::Pipeline",
          "AWS::Config::ResourceCompliance",
          "AWS::DynamoDB::Table",
          "AWS::EC2::CustomerGateway",
          "AWS::EC2::EIP",
          "AWS::EC2::EgressOnlyInternetGateway",
          "AWS::EC2::FlowLog",
          "AWS::EC2::Host",
          "AWS::EC2::Instance",
          "AWS::EC2::InternetGateway",
          "AWS::EC2::NatGateway",
          "AWS::EC2::NetworkAcl",
          "AWS::EC2::NetworkInterface",
          "AWS::EC2::RegisteredHAInstance",
          "AWS::EC2::RouteTable",
          "AWS::EC2::SecurityGroup",
          "AWS::EC2::Subnet",
          "AWS::EC2::VPC",
          "AWS::EC2::VPCEndpoint",
          "AWS::EC2::VPCEndpointService",
          "AWS::EC2::VPCPeeringConnection",
          "AWS::EC2::VPNConnection",
          "AWS::EC2::VPNGateway",
          "AWS::EC2::Volume",
          "AWS::ElasticBeanstalk::Application",
          "AWS::ElasticBeanstalk::ApplicationVersion",
          "AWS::ElasticBeanstalk::Environment",
          "AWS::ElasticLoadBalancing::LoadBalancer",
          "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "AWS::Elasticsearch::Domain",
          "AWS::IAM::Group",
          "AWS::IAM::Policy",
          "AWS::IAM::Role",
          "AWS::IAM::User",
          "AWS::KMS::Key",
          "AWS::Lambda::Function",
          "AWS::QLDB::Ledger",
          "AWS::RDS::DBCluster",
          "AWS::RDS::DBClusterSnapshot",
          "AWS::RDS::DBInstance",
          "AWS::RDS::DBSecurityGroup",
          "AWS::RDS::DBSnapshot",
          "AWS::RDS::DBSubnetGroup",
          "AWS::RDS::EventSubscription",
          "AWS::Redshift::Cluster",
          "AWS::Redshift::ClusterParameterGroup",
          "AWS::Redshift::ClusterSecurityGroup",
          "AWS::Redshift::ClusterSnapshot",
          "AWS::Redshift::ClusterSubnetGroup",
          "AWS::Redshift::EventSubscription",
          "AWS::S3::AccountPublicAccessBlock",
          "AWS::S3::Bucket",
          "AWS::SNS::Topic",
          "AWS::SQS::Queue",
          "AWS::SSM::AssociationCompliance",
          "AWS::SSM::FileData",
          "AWS::SSM::ManagedInstanceInventory",
          "AWS::SSM::PatchCompliance",
          "AWS::SecretsManager::Secret",
          "AWS::ServiceCatalog::CloudFormationProduct",
          "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
          "AWS::ServiceCatalog::Portfolio",
          "AWS::Shield::Protection",
          "AWS::ShieldRegional::Protection",
          "AWS::WAF::RateBasedRule",
          "AWS::WAF::Rule",
          "AWS::WAF::RuleGroup",
          "AWS::WAF::WebACL",
          "AWS::WAFRegional::RateBasedRule",
          "AWS::WAFRegional::Rule",
          "AWS::WAFRegional::RuleGroup",
          "AWS::WAFRegional::WebACL",
          "AWS::WAFv2::IPSet",
          "AWS::WAFv2::ManagedRuleSet",
          "AWS::WAFv2::RegexPatternSet",
          "AWS::WAFv2::RuleGroup",
          "AWS::WAFv2::WebACL",
          "AWS::XRay::EncryptionConfig"
        ],
        "Description": "(Optional) A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail )."
      },
      "UseCustomBucket": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "(Optional) Use custom delivery bucket."
      },
      "DeliveryBucketName": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The name of the Amazon S3 bucket to which AWS Config delivers configuration snapshots and configuration history files."
      },
      "DeliveryBucketPrefix": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The prefix for the specified Amazon S3 bucket."
      },
      "NotificationOptions": {
        "Type": "String",
        "Default": "NoStreaming",
        "AllowedValues": [
          "NoStreaming",
          "UseExistingTopic",
          "CreateTopic"
        ],
        "Description": "(Optional) Identifies whether to not stream SNS topics, to use existing topic or to create one."
      },
      "CustomDeliveryTopicAccountId": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The ID of the account where the custom SNS topics reside."
      },
      "CustomDeliveryTopicName": {
        "Type": "String",
        "Default": "",
        "Description": "(Optional) The name of the custom SNS topic you want to use."
      },
      "RemediationSchedule": {
        "Type": "String",
        "Default": "none",
        "AllowedValues": [
          "rate(1 day)",
          "rate(7 days)",
          "rate(30 days)",
          "none"
        ],
        "Description": "(Optional) Identifies the custom schedule for Config Recording Associations."
      }
    },
    "Conditions": {
      "ShouldAttachConfigurationPolicy": {
        "Fn::Equals": [
          {
            "Ref": "QSAttachConfigurationPolicy"
          },
          "true"
        ]
      },
      "IsRecurrenceDisabled": {
        "Fn::Equals": [
          {
            "Ref": "RemediationSchedule"
          },
          "none"
        ]
      },
      "RecordAllResources": {
        "Fn::Equals": [
          {
            "Ref": "RecordAllResources"
          },
          "true"
        ]
      },
      "StreamChangesToSNS": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              {
                "Ref": "NotificationOptions"
              },
              "NoStreaming"
            ]
          }
        ]
      },
      "CustomTopicProvided": {
        "Fn::Equals": [
          {
            "Ref": "NotificationOptions"
          },
          "UseExistingTopic"
        ]
      },
      "CustomBucketProvided": {
        "Fn::Equals": [
          {
            "Ref": "UseCustomBucket"
          },
          "true"
        ]
      }
    },
    "Resources": {
      "RoleForAutomation": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ssm.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "ManagedPolicyArns": [
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSSystemsManagerEnableConfigRecordingExecutionPolicy"
            },
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSSystemsManagerEnableExplorerExecutionPolicy"
            }
          ],
          "RoleName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-EnableCRecording-",
                {
                  "Ref": "QSType"
                },
                "_",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          }
        }
      },
      "QuickSetupEnableConfigRecordingDoc": {
        "Type": "AWS::SSM::Document",
        "Properties": {
          "UpdateMethod": "NewVersion",
          "Content": {
            "description": "## AWS-EnableConfigRecording\n\n### What does this document do?\n\nThe **AWSQuickSetup-EnableConfigRecording** automation document starts a new configuration recording, or updates the existing configuration recording of selected resources, in your AWS account.\n\n### Inputs\n\n- **ResourceTypes**: (Optional) A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail).\n- **RecordGlobalResourceTypes**: (Optional) Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records.\n- **RecorderUpdateStrategy**: (Optional) When set to _FAIL_, the document execution will terminate with a failure if an existing configuration recorder has been detected. When set to _NO\\_OP_, the update of the existing configuration recorder will be skipped. When set to _MERGE_, current recorder settings are maintained and specified resources are added to the list of AWS resources to be recorded. When set to _OVERWRITE_, current recorder settings will be replaced with provided values.\n- **DeliveryChannelS3BucketName**: (Required) The name of the Amazon S3 bucket to which AWS Config delivers configuration snapshots and configuration history files. This parameter is required if there is no delivery channel set up in the current region.\n- **DeliveryChannelS3KeyPrefix**: (Optional) The name of the Amazon S3 folder to which AWS Config delivers configuration snapshots and configuration history files.\n- **DeliveryChannelSNSTopicName**: (Optional) The Name of the Amazon SNS topic to which AWS Config sends notifications about configuration changes..\n- **DeliveryChannelSNSTopicAccountID**: (Optional) The Account ID of the Amazon SNS topic to which AWS Config sends notifications about configuration changes.\n- **StreamConfigurationChangesToSNS**: (Optional) When set to true, AWS Config streams configuration changes and notifications to an Amazon SNS topic.\n- **DeliveryChannelDeliveryFrequency**: (Optional) The frequency with which AWS Config delivers configuration snapshots.\n- **DeliveryChannelUpdateStrategy**: (Optional) When set to _FAIL_, the document execution will terminate with a failure if an existing delivery channel has been detected. When set to _NO\\_OP_, the update of the existing delivery channel will be skipped. When set to _OVERWRITE_, current delivery channel settings will be replaced with provided values.\n- **AutomationAssumeRole**: (Required) The ARN of the role that allows Systems Manager Automation to perform actions on your behalf.\n\n### Outputs\n\n- **ConfigurationRecorderName**: The name of the created or updated configuration recorder.\n- **DeliveryChannelName**: The name of the created or updated delivery channel.\n",
            "schemaVersion": "0.3",
            "assumeRole": "{{ AutomationAssumeRole }}",
            "parameters": {
              "ResourceTypes": {
                "default": [
                  "AWS::ALL"
                ],
                "description": "(Optional) A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail).",
                "type": "StringList"
              },
              "RecordGlobalResourceTypes": {
                "allowedValues": [
                  true,
                  false
                ],
                "default": true,
                "description": "(Optional) Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records.",
                "type": "Boolean"
              },
              "GlobalResourceTypesRegion": {
                "default": "",
                "description": "(Optional) Specifies the Region where global resources are recorded.",
                "type": "String"
              },
              "RecorderUpdateStrategy": {
                "allowedValues": [
                  "FAIL",
                  "NO_OP",
                  "MERGE",
                  "OVERWRITE"
                ],
                "default": "OVERWRITE",
                "description": "(Optional) If you specify _FAIL_, the automation ends with an execution status of failed if an existing configuration recorder is detected. If you specify _NO\\_OP_, no changes are made to the existing recorder. If you specify _MERGE_, the existing recorder settings aren't changed and any additional resources you specify in the values for this automation are added to the list of resources to record. If you specify _OVERWRITE_, existing configuration recorder settings are replaced with the values you specify for this automation.",
                "type": "String"
              },
              "DeliveryChannelS3BucketName": {
                "allowedPattern": "^$|^[a-z0-9-\\.]*$",
                "default": "",
                "description": "(Optional) The name of the Amazon S3 bucket AWS Config sends configuration snapshots and configuration history files to. This parameter is required if there is no deliver channel set up in the current Region.",
                "type": "String"
              },
              "DeliveryChannelS3KeyPrefix": {
                "allowedPattern": "^$|^[\\w\\/!\\.\\*\\'\\(\\)]*$",
                "default": "",
                "description": "(Optional) The key prefix in the S3 bucket you want AWS Config configuration snapshots and configuration history files to be stored in.",
                "type": "String"
              },
              "StreamConfigurationChangesToSNS": {
                "allowedValues": [
                  true,
                  false
                ],
                "default": false,
                "description": "(Optional) When set to true, AWS Config streams configuration changes and notifications to an Amazon SNS topic.",
                "type": "Boolean"
              },
              "DeliveryChannelSNSTopicName": {
                "default": "",
                "description": "(Optional) The name of the Amazon SNS topic you want AWS Config to send notifications about configuration changes to.",
                "type": "String"
              },
              "DeliveryChannelSNSTopicAccountID": {
                "default": "",
                "description": "(Optional) The ID of the account where the SNS topic resides that you want AWS Config to send notifications about configuration changes to.",
                "type": "String"
              },
              "DeliveryChannelDeliveryFrequency": {
                "allowedValues": [
                  "",
                  "One_Hour",
                  "Three_Hours",
                  "Six_Hours",
                  "Twelve_Hours",
                  "TwentyFour_Hours"
                ],
                "default": "",
                "description": "(Optional) The frequency with which AWS Config delivers configuration snapshots.",
                "type": "String"
              },
              "DeliveryChannelUpdateStrategy": {
                "allowedValues": [
                  "FAIL",
                  "NO_OP",
                  "OVERWRITE"
                ],
                "default": "OVERWRITE",
                "description": "(Optional) If you specify _FAIL_, the automation ends with an execution status of failed if an existing delivery channel is detected. If you specify _NO\\_OP_, no changes are made to the existing delivery channel. If you specify _OVERWRITE_, existing delivery channel settings are replaced with the values you specify for this automation.",
                "type": "String"
              },
              "AutomationAssumeRole": {
                "description": "(Required) The ARN of the role that allows Systems Manager Automation to perform actions on your behalf.",
                "type": "String"
              }
            },
            "mainSteps": [
              {
                "action": "aws:executeScript",
                "maxAttempts": 3,
                "inputs": {
                  "Handler": "put_configuration_recorder_handler",
                  "InputPayload": {
                    "RecordGlobalResourceTypes": "{{ RecordGlobalResourceTypes }}",
                    "GlobalResourceTypesRegion": "{{ GlobalResourceTypesRegion }}",
                    "RecorderUpdateStrategy": "{{ RecorderUpdateStrategy }}",
                    "ResourceTypes": "{{ ResourceTypes }}"
                  },
                  "Runtime": "python3.8",
                  "Script": "import boto3\n\nALL_AWS_RESOURCES = 'AWS::ALL'\nCONFIG_SLR_NAME = 'AWSServiceRoleForConfig'\nCONFIG_SERVICE_PRINCIPAL = 'config.amazonaws.com'\nRECORDER_UPDATE_STRATEGY_FAIL = \"FAIL\"\nRECORDER_UPDATE_STRATEGY_NO_OP = \"NO_OP\"\nRECORDER_UPDATE_STRATEGY_MERGE = \"MERGE\"\nRECORDER_UPDATE_STRATEGY_OVERWRITE = \"OVERWRITE\"\n\n\ndef put_configuration_recorder_handler(events, context):\n    # document parameters\n    record_resource_types = events['ResourceTypes']\n    record_global_resource_types = events['RecordGlobalResourceTypes']\n    global_resource_types_region = events['GlobalResourceTypesRegion']\n    recorder_update_strategy = events['RecorderUpdateStrategy']\n\n    should_record_global_resources = record_global_resource_types and context['global:REGION'] == global_resource_types_region\n    print('Should enable recording of global resources in this region: ' + str(should_record_global_resources))\n\n    # fetch current recorders\n    config_client = boto3.client('config')\n    current_recorders = config_client.describe_configuration_recorders()[\n        'ConfigurationRecorders']\n\n    # create/update configuration recorder\n    recorder_name = None\n    if not current_recorders:\n        print('Creating a new configuration recorder.')\n        validate_resources_to_record(\n            record_resource_types, should_record_global_resources)\n        recorder_name = set_configuration_recorder(\n            client=config_client,\n            recorder=None,\n            params={\n                'roleARN': get_recorder_role(),\n                'resourceTypes': record_resource_types,\n                'recordGlobalResources': should_record_global_resources\n            }\n        )\n    elif recorder_update_strategy == RECORDER_UPDATE_STRATEGY_MERGE:\n        print('Extending existing configuration recorder.')\n        recorder_name = extend_configuration_recorder(\n            client=config_client,\n            recorder=current_recorders[0],\n            params={\n                'roleARN': get_recorder_role(current_recorders[0]),\n                'resourceTypes': record_resource_types,\n                'recordGlobalResources': should_record_global_resources\n            }\n        )\n    elif recorder_update_strategy == RECORDER_UPDATE_STRATEGY_OVERWRITE:\n        print('Overwriting existing configuration recorder.')\n        validate_resources_to_record(\n            record_resource_types, should_record_global_resources)\n        recorder_name = set_configuration_recorder(\n            client=config_client,\n            recorder=current_recorders[0],\n            params={\n                'roleARN': get_recorder_role(current_recorders[0]),\n                'resourceTypes': record_resource_types,\n                'recordGlobalResources': should_record_global_resources\n            }\n        )\n    elif recorder_update_strategy == RECORDER_UPDATE_STRATEGY_NO_OP:\n        print(f'Skipping the update of the configuration recorder as the RecorderUpdateStrategy is set to \"{recorder_update_strategy}\"')\n    elif recorder_update_strategy == RECORDER_UPDATE_STRATEGY_FAIL:\n        raise Exception(f'Failing the step execution, since an existing recorder is detected and the RecorderUpdateStrategy is set to \"{recorder_update_strategy}\"')\n    else:\n        raise Exception(f'Unrecognized RecorderUpdateStrategy value: {recorder_update_strategy}')\n\n    return {\n        'ConfigurationRecorderName': recorder_name\n    }\n\n\ndef validate_resources_to_record(record_resource_types, should_record_global_resources):\n    if ALL_AWS_RESOURCES in record_resource_types:\n        if len(record_resource_types) > 1:\n            raise Exception(\n                'ResourceTypes must be AWS::ALL or must contain a list of AWS resources (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail), but not both.')\n    else:\n        if should_record_global_resources:\n            raise Exception(\n                'To record global resource types, RecordResourceType must be set to AWS::ALL, RecordGlobalResourceTypes must be enabled and GlobalResourceTypesRegion must be set to a region.')\n\n        if not record_resource_types:\n            raise Exception(\n                'Specify the AWS resources for which Config recording should be enabled.')\n\n\ndef get_recorder_role(recorder=None):\n    iam_client = boto3.client('iam')\n    if recorder:\n        return recorder['roleARN']\n    else:\n        try:\n            config_slr = iam_client.get_role(\n                RoleName=CONFIG_SLR_NAME\n            )\n            return config_slr['Role']['Arn']\n        except iam_client.exceptions.NoSuchEntityException:\n            return iam_client.create_service_linked_role(\n                AWSServiceName=CONFIG_SERVICE_PRINCIPAL\n            )['Role']['Arn']\n\n\ndef set_configuration_recorder(client, recorder, params):\n    recorder_settings = {\n        'roleARN': params['roleARN'],\n        'recordingGroup': {\n            'allSupported': ALL_AWS_RESOURCES in params['resourceTypes'],\n            'includeGlobalResourceTypes': params['recordGlobalResources'],\n            'resourceTypes': [] if ALL_AWS_RESOURCES in params['resourceTypes'] else params['resourceTypes']\n        }\n    }\n    recorder_settings['name'] = recorder['name'] if recorder else 'default'\n\n    client.put_configuration_recorder(\n        ConfigurationRecorder=recorder_settings\n    )\n    return recorder_settings['name']\n\n\ndef extend_configuration_recorder(client, recorder, params):\n    recorder_name = recorder['name']\n    recorder_role = params['roleARN']\n    recording_group = recorder['recordingGroup']\n\n    record_global_resources = recording_group['includeGlobalResourceTypes'] or params['recordGlobalResources']\n    record_all_resources = recording_group['allSupported'] or ALL_AWS_RESOURCES in params[\n        'resourceTypes'] or record_global_resources\n    resource_types = [] if record_all_resources else list(\n        set(recording_group['resourceTypes']) | set(params['resourceTypes']))\n\n    client.put_configuration_recorder(\n        ConfigurationRecorder={\n            'name': recorder_name,\n            'roleARN': recorder_role,\n            'recordingGroup': {\n                'allSupported': record_all_resources,\n                'includeGlobalResourceTypes': record_global_resources,\n                'resourceTypes': resource_types\n            }\n        }\n    )\n\n    return recorder_name\n"
                },
                "name": "PutConfigurationRecorder",
                "outputs": [
                  {
                    "Name": "ConfigurationRecorderName",
                    "Selector": "$.Payload.ConfigurationRecorderName",
                    "Type": "String"
                  }
                ]
              },
              {
                "action": "aws:executeScript",
                "maxAttempts": 2,
                "inputs": {
                  "Handler": "put_delivery_channel_handler",
                  "InputPayload": {
                    "DeliveryChannelDeliveryFrequency": "{{ DeliveryChannelDeliveryFrequency }}",
                    "DeliveryChannelS3BucketName": "{{ DeliveryChannelS3BucketName }}",
                    "DeliveryChannelS3KeyPrefix": "{{ DeliveryChannelS3KeyPrefix }}",
                    "DeliveryChannelSNSTopicName": "{{ DeliveryChannelSNSTopicName }}",
                    "DeliveryChannelSNSTopicAccountID": "{{ DeliveryChannelSNSTopicAccountID }}",
                    "DeliveryChannelUpdateStrategy": "{{ DeliveryChannelUpdateStrategy }}",
                    "StreamConfigurationChangesToSNS": "{{ StreamConfigurationChangesToSNS }}",
                    "AutomationAssumeRoleArn": "{{ AutomationAssumeRole }}"
                  },
                  "Runtime": "python3.8",
                  "Script": "import boto3\nimport botocore\nimport json\nimport time\n\nfrom botocore.utils import ArnParser\n\nCHANNEL_UPDATE_STRATEGY_FAIL = 'FAIL'\nCHANNEL_UPDATE_STRATEGY_NO_OP = 'NO_OP'\nCHANNEL_UPDATE_STRATEGY_OVERWRITE = 'OVERWRITE'\nDEFAULT_DELIVERY_TOPIC_NAME = 'ConfigRecording-Default-Topic'\n\n\ndef get_partition(region):\n    if region.startswith('cn-'):\n        return 'aws-cn'\n    elif region.startswith('us-gov-'):\n        return 'aws-us-gov'\n    else:\n        return 'aws'\n\ndef get_bucket_policy(bucket_name, bucket_prefix, account, region):\n    bucket_arn = f'arn:{get_partition(region)}:s3:::{bucket_name}'\n    return {\n        'Statement': [\n            {\n                'Sid': 'AWSConfigBucketPermissionsCheck',\n                'Effect': 'Allow',\n                'Principal': {\n                    'Service': 'config.amazonaws.com'\n                },\n                'Action': 's3:GetBucketAcl',\n                'Resource': bucket_arn,\n                'Condition': { \n                    'StringEquals': {\n                      'AWS:SourceAccount': account\n                    }\n                }\n            },\n            {\n                'Sid': 'AWSConfigBucketExistenceCheck',\n                'Effect': 'Allow',\n                'Principal': {\n                    'Service': 'config.amazonaws.com'\n                },\n                'Action': 's3:ListBucket',\n                'Resource': bucket_arn,\n                'Condition': { \n                    'StringEquals': {\n                      'AWS:SourceAccount': account\n                    }\n                }\n            },\n            {\n                'Sid': 'AWSConfigBucketDelivery',\n                'Effect': 'Allow',\n                'Principal': {\n                    'Service': 'config.amazonaws.com'\n                },\n                'Action': 's3:PutObject',\n                'Resource': f'{bucket_arn}/{bucket_prefix}/AWSLogs/{account}/Config/*' if bucket_prefix else f'{bucket_arn}/AWSLogs/{account}/Config/*',\n                'Condition': {\n                    'StringEquals': {\n                        's3:x-amz-acl': 'bucket-owner-full-control',\n                        'AWS:SourceAccount': account\n                    }\n                }\n            }\n        ]\n    }\n\ndef create_delivery_bucket(bucket_name, bucket_prefix, account, region, automation_role_arn):\n    s3_client = boto3.client('s3')\n    bucket_policy = get_bucket_policy(bucket_name, bucket_prefix, account, region)\n\n    bucket_params = {\n        'Bucket': bucket_name\n    }\n    if region != 'us-east-1':\n        bucket_params['CreateBucketConfiguration'] = {\n            'LocationConstraint': region\n        }\n\n    s3_client.create_bucket(**bucket_params)\n    s3_client.put_bucket_policy(\n        Bucket=bucket_name,\n        Policy=json.dumps(bucket_policy)\n    )\n    s3_client.put_bucket_encryption(\n        Bucket=bucket_name,\n        ServerSideEncryptionConfiguration={\n            'Rules': [\n                {\n                    'ApplyServerSideEncryptionByDefault': {\n                        'SSEAlgorithm': 'AES256'\n                    }\n                },\n            ]\n        }\n    )\n\n    # Turn on all 4 public access blocks\n    s3_client.put_public_access_block(\n        Bucket=bucket_name,\n        PublicAccessBlockConfiguration={\n            'BlockPublicAcls': True,\n            'IgnorePublicAcls': True,\n            'BlockPublicPolicy': True,\n            'RestrictPublicBuckets': True\n        }\n    )\n\ndef verify_delivery_bucket_exists(bucket_name, bucket_prefix, account, region, automation_role_arn, retries=10, delay=5):\n    try:\n        s3_client = boto3.client('s3')\n        s3_client.head_bucket(\n            Bucket=bucket_name\n        )\n        # if bucket exists always update bucket policy for qs owned buckets because of potential security issue\n        if bucket_name.startswith('aws-quick-setup-config-recording'):\n            s3_client.put_bucket_policy(\n                Bucket=bucket_name,\n                Policy=json.dumps(get_bucket_policy(bucket_name, bucket_prefix, account, region))\n            )\n    except botocore.exceptions.ClientError as error:\n        if error.response['Error']['Code'] == '403':\n            pass\n        elif error.response['Error']['Code'] == '404' and retries > 0:\n            try:\n                create_delivery_bucket(\n                    bucket_name, bucket_prefix, account, region, automation_role_arn)\n            except botocore.exceptions.ClientError as err:\n                if err.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':\n                    pass\n                elif err.response['Error']['Code'] == 'OperationAborted':\n                    time.sleep(delay)\n                    verify_delivery_bucket_exists(\n                        bucket_name, bucket_prefix, account, region, retries - 1)\n                else:\n                    raise err\n        else:\n            raise error\n\n\ndef get_default_topic_arn(account, region):\n    sns_client = boto3.resource('sns')\n    existing_topics = dict(map(lambda topic: [topic.arn.rsplit(':', 1)[\n                           1], topic.arn], sns_client.topics.all()))\n\n    if DEFAULT_DELIVERY_TOPIC_NAME not in existing_topics:\n        expected_topic_arn = f'arn:{get_partition(region)}:sns:{region}:{account}:ConfigRecording-Default-Topic'\n        topic = sns_client.create_topic(\n            Name=DEFAULT_DELIVERY_TOPIC_NAME,\n            Attributes={\n                'DisplayName': DEFAULT_DELIVERY_TOPIC_NAME,\n                'Policy': json.dumps({\n                    'Statement': [\n                        {\n                            'Sid': '__default_statement_ID',\n                            'Effect': 'Allow',\n                            'Principal': {\n                                'AWS': '*'\n                            },\n                            'Action': [\n                                'sns:GetTopicAttributes',\n                                'sns:SetTopicAttributes',\n                                'sns:AddPermission',\n                                'sns:RemovePermission',\n                                'sns:DeleteTopic',\n                                'sns:Subscribe',\n                                'sns:ListSubscriptionsByTopic',\n                                'sns:Publish'\n                            ],\n                            'Resource': expected_topic_arn,\n                            'Condition': {\n                                'StringEquals': {\n                                    'AWS:SourceOwner': account\n                                }\n                            }\n                        },\n                        {\n                            'Sid': 'AWSConfigSNSPolicy',\n                            'Effect': 'Allow',\n                            'Principal': {\n                                'Service': 'config.amazonaws.com'\n                            },\n                            'Action': 'sns:Publish',\n                            'Resource': expected_topic_arn\n                        }\n                    ]\n                })\n            }\n        )\n        return topic.arn\n    else:\n        return existing_topics[DEFAULT_DELIVERY_TOPIC_NAME]\n\n\ndef get_delivery_channel_settings(current_settings, params, region):\n    name = current_settings.get(\n        'name', '') or 'aws-quick-setup-delivery-channel'\n    s3_bucket_name = params['DeliveryChannelS3BucketName'] or current_settings.get(\n        's3BucketName', '')\n    s3_key_prefix = params['DeliveryChannelS3KeyPrefix']\n    stream_to_sns = params['StreamConfigurationChangesToSNS']\n    sns_topic_name = params['DeliveryChannelSNSTopicName']\n    sns_topic_account_id = params['DeliveryChannelSNSTopicAccountID']\n    delivery_frequency = params['DeliveryChannelDeliveryFrequency']\n\n    channel_settings = {\n        'name': name,\n        's3BucketName': s3_bucket_name\n    }\n    if s3_key_prefix:\n        channel_settings['s3KeyPrefix'] = s3_key_prefix\n    if stream_to_sns and sns_topic_name and sns_topic_account_id:\n        channel_settings['snsTopicARN'] = \"arn:{}:sns:{}:{}:{}\".format(get_partition(region), region, sns_topic_account_id, sns_topic_name)\n    if delivery_frequency:\n        channel_settings['configSnapshotDeliveryProperties'] = {\n            'deliveryFrequency': delivery_frequency\n        }\n\n    return channel_settings\n\n\ndef put_delivery_channel_handler(events, context):\n    channel_update_strategy = events['DeliveryChannelUpdateStrategy']\n    stream_to_sns = events['StreamConfigurationChangesToSNS']\n    account = context['global:ACCOUNT_ID']\n    region = context['global:REGION']\n    automation_role_arn = events['AutomationAssumeRoleArn']\n\n    config_client = boto3.client('config')\n    current_delivery_channels = config_client.describe_delivery_channels()[\n        'DeliveryChannels']\n\n    delivery_channel_name = ''\n    # we are always updating the QS-managed delivery channel\n    if not current_delivery_channels or current_delivery_channels[0]['name'] == 'aws-quick-setup-delivery-channel' or channel_update_strategy == CHANNEL_UPDATE_STRATEGY_OVERWRITE:\n        current_settings = current_delivery_channels[0] if current_delivery_channels else {\n        }\n        new_channel_settings = get_delivery_channel_settings(\n            current_settings, events, region)\n\n        if 's3BucketName' in new_channel_settings:\n            verify_delivery_bucket_exists(\n                new_channel_settings['s3BucketName'],\n                new_channel_settings.get('s3KeyPrefix', ''),\n                account,\n                region,\n                automation_role_arn\n            )\n\n        if stream_to_sns and 'snsTopicARN' not in new_channel_settings:\n            new_channel_settings['snsTopicARN'] = get_default_topic_arn(\n                account, region)\n\n        config_client.put_delivery_channel(\n            DeliveryChannel=new_channel_settings\n        )\n        delivery_channel_name = new_channel_settings['name']\n    elif channel_update_strategy == CHANNEL_UPDATE_STRATEGY_FAIL:\n        raise Exception(\n            f'Failing the step execution, since an existing delivery channel is detected and the DeliveryChannelUpdateStrategy is set to \"{channel_update_strategy}\"')\n    elif channel_update_strategy == CHANNEL_UPDATE_STRATEGY_NO_OP:\n        delivery_channel_name = current_delivery_channels[0]['name']\n        print(\n            f'Skipping the update of the configuration recorder as the DeliveryChannelUpdateStrategy is set to \"{channel_update_strategy}\"')\n    else:\n        raise Exception(\n            f'Unrecognized DeliveryChannelUpdateStrategy value: {channel_update_strategy}')\n\n    return {\n        'DeliveryChannelName': delivery_channel_name\n    }\n"
                },
                "name": "PutDeliveryChannel",
                "outputs": [
                  {
                    "Name": "DeliveryChannelName",
                    "Selector": "$.Payload.DeliveryChannelName",
                    "Type": "String"
                  }
                ]
              },
              {
                "action": "aws:executeAwsApi",
                "inputs": {
                  "Api": "StartConfigurationRecorder",
                  "ConfigurationRecorderName": "{{ PutConfigurationRecorder.ConfigurationRecorderName }}",
                  "Service": "config"
                },
                "name": "StartConfigurationRecorder"
              }
            ],
            "outputs": [
              "PutConfigurationRecorder.ConfigurationRecorderName",
              "PutDeliveryChannel.DeliveryChannelName"
            ]
          },
          "DocumentType": "Automation",
          "Name": {
            "Fn::Join": [
              "",
              [
                "AWSQuickSetup-EnableConfigRecordingV2-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          }
        },
        "DependsOn": "RoleForAutomation"
      },
      "QuickSetupEnableConfigRecordingAssociation": {
        "Type": "AWS::SSM::Association",
        "Properties": {
          "Name": {
            "Ref": "QuickSetupEnableConfigRecordingDoc"
          },
          "AssociationName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-CFGRecording-EnableConfigRecording-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Parameters": {
            "ResourceTypes": {
              "Fn::If": [
                "RecordAllResources",
                [
                  "AWS::ALL"
                ],
                {
                  "Ref": "RecordResourceTypes"
                }
              ]
            },
            "RecordGlobalResourceTypes": [
              {
                "Ref": "RecordGlobalResourceTypes"
              }
            ],
            "GlobalResourceTypesRegion": [
              {
                "Ref": "GlobalResourceTypesRegion"
              }
            ],
            "RecorderUpdateStrategy": [
              "MERGE"
            ],
            "DeliveryChannelS3BucketName": [
              {
                "Fn::If": [
                  "CustomBucketProvided",
                  {
                    "Ref": "DeliveryBucketName"
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "aws-quick-setup-config-recording-",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "-",
                        {
                          "Ref": "QSConfigurationId"
                        }
                      ]
                    ]
                  }
                ]
              }
            ],
            "DeliveryChannelS3KeyPrefix": [
              {
                "Fn::If": [
                  "CustomBucketProvided",
                  {
                    "Ref": "DeliveryBucketPrefix"
                  },
                  ""
                ]
              }
            ],
            "StreamConfigurationChangesToSNS": [
              {
                "Fn::If": [
                  "StreamChangesToSNS",
                  true,
                  false
                ]
              }
            ],
            "DeliveryChannelSNSTopicAccountID": [
              {
                "Fn::If": [
                  "StreamChangesToSNS",
                  {
                    "Fn::If": [
                      "CustomTopicProvided",
                      {
                        "Ref": "CustomDeliveryTopicAccountId"
                      },
                      ""
                    ]
                  },
                  ""
                ]
              }
            ],
            "DeliveryChannelSNSTopicName": [
              {
                "Fn::If": [
                  "StreamChangesToSNS",
                  {
                    "Fn::If": [
                      "CustomTopicProvided",
                      {
                        "Ref": "CustomDeliveryTopicName"
                      },
                      ""
                    ]
                  },
                  ""
                ]
              }
            ],
            "DeliveryChannelDeliveryFrequency": [
              "TwentyFour_Hours"
            ],
            "DeliveryChannelUpdateStrategy": [
              "FAIL"
            ],
            "AutomationAssumeRole": [
              {
                "Fn::GetAtt": [
                  "RoleForAutomation",
                  "Arn"
                ]
              }
            ]
          },
          "ScheduleExpression": {
            "Fn::If": [
              "IsRecurrenceDisabled",
              {
                "Ref": "AWS::NoValue"
              },
              {
                "Ref": "RemediationSchedule"
              }
            ]
          }
        }
      },
      "SystemAssociationForEnablingExplorer": {
        "Type": "AWS::SSM::Association",
        "Properties": {
          "Name": "AWS-EnableExplorer",
          "AssociationName": {
            "Fn::Join": [
              "",
              [
                "AWS-QuickSetup-CFGRecording-EnableExplorer-",
                {
                  "Ref": "QSConfigurationId"
                }
              ]
            ]
          },
          "Parameters": {
            "AutomationAssumeRole": [
              {
                "Fn::GetAtt": [
                  "RoleForAutomation",
                  "Arn"
                ]
              }
            ]
          }
        }
      }
    }
  }
}
