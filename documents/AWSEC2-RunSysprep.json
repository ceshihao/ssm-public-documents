{
  "schemaVersion": "2.2",
  "description": "Performs sysprep on Windows Server 2008 SP2 and above.  Does not shutdown the instance.",
  "parameters": {
    "Id": {
      "type": "String",
      "description": "(Optional) A user specified ID for the execution of sysprep.",
      "default": "",
      "allowedPattern": "^[a-zA-Z0-9-_]*$"
    },
    "SysprepTimeout": {
      "type": "String",
      "description": "(Optional) A user-specified timeout for the Sysprep command, in milliseconds.",
      "default": "",
      "allowedPattern": "^[0-9]*$"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "RunSysprep",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": "14400",
        "runCommand": [
          "",
          "$id = '{{Id}}'",
          "Add-Type -TypeDefinition @'",
          "",
          "    using System;",
          "    using System.Collections.Generic;",
          "    using System.Runtime.InteropServices;",
          "",
          "    namespace AwsUwi",
          "    {",
          "        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]",
          "        public struct PROFILEINFO {",
          "            public int dwSize;",
          "            public int dwFlags;",
          "            [MarshalAs(UnmanagedType.LPTStr)]",
          "            public String lpUserName;",
          "            [MarshalAs(UnmanagedType.LPTStr)]",
          "            public String lpProfilePath;",
          "            [MarshalAs(UnmanagedType.LPTStr)]",
          "            public String lpDefaultPath;",
          "            [MarshalAs(UnmanagedType.LPTStr)]",
          "            public String lpServerName;",
          "            [MarshalAs(UnmanagedType.LPTStr)]",
          "            public String lpPolicyPath;",
          "            public IntPtr hProfile;",
          "        }",
          "",
          "        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]",
          "        public struct PROCESS_INFORMATION",
          "        {",
          "           public IntPtr hProcess;",
          "           public IntPtr hThread;",
          "           public int dwProcessId;",
          "           public int dwThreadId;",
          "        }",
          "",
          "        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]",
          "        public struct STARTUPINFO",
          "        {",
          "            public Int32 cb;",
          "            public string lpReserved;",
          "            public string lpDesktop;",
          "            public string lpTitle;",
          "            public Int32 dwX;",
          "            public Int32 dwY;",
          "            public Int32 dwXSize;",
          "            public Int32 dwYSize;",
          "            public Int32 dwXCountChars;",
          "            public Int32 dwYCountChars;",
          "            public Int32 dwFillAttribute;",
          "            public Int32 dwFlags;",
          "            public Int16 wShowWindow;",
          "            public Int16 cbReserved2;",
          "            public IntPtr lpReserved2;",
          "            public IntPtr hStdInput;",
          "            public IntPtr hStdOutput;",
          "            public IntPtr hStdError;",
          "        }",
          "",
          "        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]",
          "        public struct SECURITY_ATTRIBUTES",
          "        {",
          "            public int nLength;",
          "            public IntPtr lpSecurityDescriptor;",
          "            public bool bInheritHandle;",
          "        }",
          "",
          "        public static class PInvoke",
          "        {",
          "            [DllImport(\"advapi32.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            public static extern bool LogonUser(",
          "                string userName,",
          "                string domainName,",
          "                IntPtr password,",
          "                int logonType,",
          "                int logonProvider,",
          "                out IntPtr userToken);",
          "",
          "            [DllImport(\"advapi32.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            public static extern bool CreateProcessAsUser(",
          "                IntPtr userToken,",
          "                string applicationName,",
          "                string commandLine,",
          "                IntPtr processAttributes,",
          "                IntPtr threadAttributes,",
          "                bool inheritHandles,",
          "                int creationFlags,",
          "                IntPtr environment,",
          "                string currentDirectory,",
          "                ref STARTUPINFO startupInfo,",
          "                out PROCESS_INFORMATION processInformation);",
          "",
          "            [DllImport(\"userenv.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            public static extern bool LoadUserProfile(IntPtr hToken, ref PROFILEINFO lpProfileInfo);",
          "",
          "            [DllImport(\"userenv.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            public static extern bool UnloadUserProfile(IntPtr hToken, IntPtr hProfile);",
          "",
          "            [DllImport(\"userenv.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            public static extern bool CreateEnvironmentBlock(out IntPtr lpEnvironment, IntPtr hToken, bool bInherit);",
          "",
          "            [DllImport(\"userenv.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            [return: MarshalAs(UnmanagedType.Bool)]",
          "            public static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);",
          "",
          "            [DllImport(\"kernel32.dll\", SetLastError=true)]",
          "            [return: MarshalAs(UnmanagedType.Bool)]",
          "            public static extern bool CloseHandle(IntPtr hObject);",
          "",
          "            [DllImport(\"kernel32.dll\", SetLastError=true, CharSet=CharSet.Unicode)]",
          "            [return: MarshalAs(UnmanagedType.Bool)]",
          "            public static extern bool GetExitCodeProcess(IntPtr hProcess, out UInt32 lpExitCode);",
          "",
          "            [DllImport(\"kernel32.dll\", SetLastError=true)]",
          "            [return: MarshalAs(UnmanagedType.Bool)]",
          "            public static extern bool CreatePipe(out IntPtr hReadPipe, out IntPtr hWritePipe, ref SECURITY_ATTRIBUTES lpPipeAttributes, uint nSize);",
          "",
          "            [DllImport(\"kernel32.dll\", SetLastError=true)]",
          "            public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);",
          "        }",
          "    }",
          "'@",
          "Add-Type -WarningAction SilentlyContinue -TypeDefinition @'",
          "using System;",
          "",
          "namespace AWSUpdateWindowsInstanceException",
          "{",
          "",
          "    public class LaunchAgentNotDetectedException : Exception",
          "    {",
          "        public LaunchAgentNotDetectedException(){}",
          "",
          "        public LaunchAgentNotDetectedException(string message)",
          "            : base(message)",
          "        {",
          "        }",
          "",
          "        public LaunchAgentNotDetectedException(string message, Exception inner)",
          "            : base(message, inner)",
          "        {",
          "        }",
          "    }",
          "",
          "    public class LaunchAgentDetectionException : Exception",
          "    {",
          "        public LaunchAgentDetectionException(){}",
          "",
          "        public LaunchAgentDetectionException(string message)",
          "            : base(message)",
          "        {",
          "        }",
          "",
          "        public LaunchAgentDetectionException(string message, Exception inner)",
          "            : base(message, inner)",
          "        {",
          "        }",
          "    }",
          "}",
          "'@",
          "Add-Type -TypeDefinition @'",
          "    using System;",
          "    using System.IO;",
          "",
          "    public enum LogLevel { Fatal, Error, Warn, Info, Debug, Trace }",
          "",
          "    public class AwsPoshLogger",
          "    {",
          "        public AwsPoshLogger(string logPath, LogLevel level)",
          "        {",
          "            Level = level;",
          "            LogPath = logPath;",
          "",
          "            if (!File.Exists(logPath))",
          "            {",
          "                File.Create(logPath).Close();",
          "            }",
          "        }",
          "",
          "        public LogLevel Level { get; private set; }",
          "",
          "        public string LogPath { get; private set; }",
          "",
          "        public void Trace(string message)",
          "        {",
          "            if (LogLevel.Trace <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Trace));",
          "                Console.Write(CreateMessage(message, LogLevel.Trace));",
          "            }",
          "        }",
          "",
          "        public void Debug(string message)",
          "        {",
          "            if (LogLevel.Debug <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Debug));",
          "                Console.Write(CreateMessage(message, LogLevel.Debug));",
          "            }",
          "        }",
          "",
          "        public void Info(string message)",
          "        {",
          "            if (LogLevel.Info <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Info));",
          "                Console.Write(CreateMessage(message, LogLevel.Info));",
          "            }",
          "        }",
          "",
          "        public void Warn(string message)",
          "        {",
          "            if (LogLevel.Warn <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Warn));",
          "                Console.Write(CreateMessage(message, LogLevel.Warn));",
          "            }",
          "        }",
          "",
          "        public void Error(string message)",
          "        {",
          "            if (LogLevel.Error <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Error));",
          "                Console.Write(CreateMessage(message, LogLevel.Error));",
          "            }",
          "        }",
          "",
          "        public void Fatal(string message)",
          "        {",
          "            if (LogLevel.Fatal <= Level)",
          "            {",
          "                File.AppendAllText(LogPath, CreateMessage(message, LogLevel.Fatal));",
          "                Console.Write(CreateMessage(message, LogLevel.Fatal));",
          "            }",
          "        }",
          "",
          "        public void LineBreak(string message = \"\")",
          "        {",
          "            File.AppendAllText(LogPath, (message + Environment.NewLine));",
          "            Console.WriteLine(message);",
          "        }",
          "",
          "        private string CreateMessage(string message, LogLevel level)",
          "        {",
          "            var dt = DateTime.Now.ToUniversalTime().ToString(\"MM/dd/yyyy HH:mm:ss UTC\");",
          "            return dt + \" | \" + level.ToString() + \" | \" + message + Environment.NewLine;",
          "        }",
          "    }",
          "'@",
          "Function New-AwsPoshLogger",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$LogFile,",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateSet('Fatal', 'Error', 'Warn', 'Info', 'Debug', 'Trace')]",
          "        [string]$LogLevel = 'Info'",
          "    )",
          "        return $(New-Object AwsPoshLogger -ArgumentList $($LogFile,[LogLevel]::$LogLevel))",
          "}",
          "Function Get-EC2ConfigVersion",
          "{",
          "    $ec2Config = \"$($env:ProgramFiles)\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "    if(-not (Test-Path $ec2Config))",
          "    {",
          "        throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'EC2Config not found.'",
          "    }",
          "    return New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)",
          "}",
          "Function Get-EC2LaunchVersion",
          "{",
          "    [string]$ModuleDirectory = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\\Module\"",
          "    if(-not (Test-Path $ModuleDirectory))",
          "    {",
          "        throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'EC2Launch not found.'",
          "    }",
          "    Import-LocalizedData -BaseDirectory $ModuleDirectory -FileName 'Ec2Launch.psd1' -BindingVariable moduleManifest",
          "    return New-Object System.Version($($moduleManifest.Get_Item('ModuleVersion')))",
          "}",
          "Function Get-EC2LaunchV2Version",
          "{",
          "    $ec2launchV2 = \"$($env:ProgramFiles)\\Amazon\\EC2Launch\\EC2Launch.exe\"",
          "    if(-not (Test-Path $ec2launchV2))",
          "    {",
          "        throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'EC2LaunchV2 not found.'",
          "    }",
          "    return New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2launchV2).FileVersion)",
          "}",
          "Function Start-DetectLaunchAgent",
          "{",
          "    $obj = New-Object PSObject",
          "    $obj | Add-Member -Name LaunchAgentName -Value '' -MemberType NoteProperty",
          "    $obj | Add-Member -Name Version -Value (New-Object System.Version) -MemberType NoteProperty",
          "    $agentInstalledCount = 0",
          "    try",
          "    {",
          "        [System.Version]$ec2LaunchVersion = Get-EC2LaunchVersion",
          "        $agentInstalledCount++",
          "    }",
          "    catch [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException]",
          "    {",
          "        # Do nothing",
          "    }",
          "    try",
          "    {",
          "        [System.Version]$ec2ConfigVersion = Get-EC2ConfigVersion",
          "        $agentInstalledCount++",
          "    }",
          "    catch [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException]",
          "    {",
          "        # Do nothing",
          "    }",
          "    try",
          "    {",
          "        [System.Version]$ec2LaunchV2Version = Get-EC2LaunchV2Version",
          "        $agentInstalledCount++",
          "    }",
          "    catch [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException]",
          "    {",
          "        # Do nothing",
          "    }",
          "    if($agentInstalledCount -ge 2)",
          "    {",
          "        throw [AWSUpdateWindowsInstanceException.LaunchAgentDetectionException] 'More than one agent detected; only one should be installed.'",
          "    }",
          "    if($agentInstalledCount -eq 0)",
          "    {",
          "        throw [AWSUpdateWindowsInstanceException.LaunchAgentNotDetectedException] 'No agent detected. EC2Launch or EC2Config must be installed in order to perform sysprep.'",
          "    }",
          "    if($ec2LaunchVersion)",
          "    {",
          "        $obj.LaunchAgentName = 'EC2Launch'",
          "        $obj.Version = $ec2LaunchVersion",
          "    }",
          "    if($ec2ConfigVersion)",
          "    {",
          "        $obj.LaunchAgentName = 'EC2Config'",
          "        $obj.Version = $ec2ConfigVersion",
          "    }",
          "    if($ec2LaunchV2Version)",
          "    {",
          "        $obj.LaunchAgentName = 'EC2LaunchV2'",
          "        $obj.Version = $ec2LaunchV2Version",
          "    }",
          "    return $obj",
          "}",
          "Function Confirm-Password",
          "{",
          "    param",
          "    (",
          "        [Parameter(Mandatory=$true, Position=0)]",
          "        [string] $password",
          "    )",
          "    Process",
          "    {",
          "        $complexity = 0",
          "        if ($password -cmatch '[A-Z]')",
          "        {",
          "            $complexity++",
          "        }",
          "        if ($password -cmatch '[a-z]')",
          "        {",
          "            $complexity++",
          "        }",
          "        if ($password -match '[0-9]')",
          "        {",
          "            $complexity++",
          "        }",
          "",
          "        if ($password -match '[^a-zA-Z0-9]')",
          "        {",
          "            $complexity++",
          "        }",
          "        return $complexity -eq 4",
          "    }",
          "}",
          "Function New-RandomPassword",
          "{",
          "    $password = $null",
          "    do {",
          "        do {",
          "            $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()",
          "            $randomBytes = New-Object Byte[] 1024",
          "            $rng.GetBytes($randomBytes)",
          "            $specialChars = @(40, 41, 33, 64, 36, 37, 45, 61, 46, 63, 42, 59, 38)",
          "            $randomString = [System.Text.Encoding]::ASCII.GetString(($randomBytes | where { `",
          "               ($_ -ge 97 -and $_ -le 122) -or ` # a - z",
          "               ($_ -ge 65 -and $_ -le 90) -or  ` # A - Z",
          "               ($_ -ge 50 -and $_ -le 57) -or  ` # 2 - 9",
          "               ($specialChars -contains $_) }) ` # ()!@$%-=.?*;&",
          "               )",
          "        } while ($randomString.Length -lt 32)",
          "        $password = $randomString.Substring(0, 32)",
          "    } while (-not (Confirm-Password -Password $password))",
          "    return $password",
          "}",
          "Function Reset-AdminPassword",
          "{",
          "    $computer = [ADSI]\"WinNT://$($env:computername)\"",
          "    $users = $computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq 'user' }",
          "",
          "    foreach ($user in $users)",
          "    {",
          "        $userObject = New-Object System.Security.Principal.NTAccount($user.Name)",
          "        $userSID = $userObject.Translate([System.Security.Principal.SecurityIdentifier])",
          "        if(($userSID.Value.Substring(0,6) -eq \"S-1-5-\") -and ($userSID.Value.Substring($userSID.Value.Length-4, 4) -eq \"-500\"))",
          "        {",
          "            $adminPassword = New-RandomPassword",
          "            $user.SetPassword($adminPassword)",
          "            return New-Object PSObject -Property @{Username=$user.Name;Password=$adminPassword}",
          "        }",
          "    }",
          "}",
          "Function Start-ProcessAsUser",
          "{",
          "    param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [string] $Username,",
          "        [Parameter(Mandatory=$true)]",
          "        [string] $Password,",
          "        [Parameter(Mandatory=$true)]",
          "        [string] $Command,",
          "        [Parameter(Mandatory=$false)]",
          "        [switch]$Wait",
          "    )",
          "    Begin",
          "    {",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = \"Stop\"",
          "    }",
          "    Process",
          "    {",
          "        try",
          "        {",
          "            # LogonUser method logs user on the local computer and returns a pointer to access token.",
          "            $userSafeTokenHandlePtr = [System.IntPtr]::Zero",
          "            $passwordPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($Password)",
          "            $logonBatch = 4 # LOGON32_LOGON_BATCH",
          "            $logonProviderDefault = 0 # LOGON32_PROVIDER_DEFAULT",
          "            $success = [AwsUwi.PInvoke]::LogonUser($Username, \".\", $passwordPtr, $logonBatch, $logonProviderDefault, [ref] $userSafeTokenHandlePtr)",
          "            if (-not $success)",
          "            {",
          "                [int]$ret = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()",
          "                throw \"LogonUser failed with error code : $($ret)\"",
          "            }",
          "            # Profile must be loaded and checked before moving forward.",
          "            $profileInfo = New-Object AwsUwi.PROFILEINFO",
          "            $profileInfo.lpUserName = $Username;",
          "            $profileInfo.dwSize = [System.Runtime.InteropServices.Marshal]::SizeOf($profileInfo)",
          "            $profileInfo.hProfile = [System.IntPtr]::Zero",
          "            $success = [AwsUwi.PInvoke]::LoadUserProfile($userSafeTokenHandlePtr, [ref] $profileInfo)",
          "            if (-not $success)",
          "            {",
          "                [int]$ret = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()",
          "                throw \"Loading user profile failed with error code : $($ret)\"",
          "            }",
          "",
          "            if ($profileInfo.hProfile -eq [System.IntPtr]::Zero)",
          "            {",
          "                throw 'Loading the user profile failed - HKCU handle was not loaded.'",
          "            }",
          "",
          "            $securityAttributes = New-Object AwsUwi.SECURITY_ATTRIBUTES",
          "            $securityAttributes.nLength = [System.Runtime.InteropServices.Marshal]::SizeOf($securityAttributes)",
          "            $securityAttributes.lpSecurityDescriptor = [IntPtr]::Zero",
          "            $securityAttributes.bInheritHandle = $true",
          "",
          "            # Create pipes for StdOutput and StdError",
          "            $stdOutReadPipe = $stdOutWritePipe = $stdErrReadPipe = $stdErrWritePipe = [IntPtr]::Zero",
          "            [bool]$successOut = [AwsUwi.PInvoke]::CreatePipe([ref]$stdOutReadPipe, [ref]$stdOutWritePipe, [ref]$securityAttributes, 0)",
          "            if (-not $successOut)",
          "            {",
          "                [int]$ret = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()",
          "                throw \"Create stdout pipe failed with error code : $($ret)\"",
          "            }",
          "            [bool]$successErr = [AwsUwi.PInvoke]::CreatePipe([ref]$stdErrReadPipe, [ref]$stdErrWritePipe, [ref]$securityAttributes, 0)",
          "            if (-not $successErr)",
          "            {",
          "                [int]$ret = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()",
          "                throw \"Create stderr pipe failed with error code : $($ret)\"",
          "            }",
          "",
          "            $procCreationFlags = 0x00000020 -bor 0x00000010 -bor 0x00000400 # NORMAL_PRIORITY_CLASS | CREATE_NEW_CONSOLE | CREATE_UNICODE_ENVIRONMENT",
          "",
          "            # CreateEnvironmentBlock method retrieves environment variables and returns a pointer to the environment block.",
          "            $envSafeTokenHandlePtr = [System.IntPtr]::Zero",
          "            $success = [AwsUwi.PInvoke]::CreateEnvironmentBlock([ref] $envSafeTokenHandlePtr, $userSafeTokenHandlePtr, $false)",
          "            if (-not $success)",
          "            {",
          "                throw 'Failed to create environment block.'",
          "            }",
          "",
          "            # Create a process as a user",
          "            $procInfo = New-Object AwsUwi.PROCESS_INFORMATION",
          "",
          "            $startupInfo = New-Object AwsUwi.STARTUPINFO",
          "            $startupInfo.dwFlags = 0x00000100 # STARTF_USESTDHANDLES",
          "            $startupInfo.hStdOutput = $stdOutWritePipe",
          "            $startupInfo.hStdError = $stdErrWritePipe",
          "            $startupInfo.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($startupInfo)",
          "",
          "            $success = [AwsUwi.PInvoke]::CreateProcessAsUser(",
          "                $userSafeTokenHandlePtr, # userToken",
          "                [NullString]::Value, # applicationName",
          "                $Command, # commandLine",
          "                [System.IntPtr]::Zero, # processAttributes",
          "                [System.IntPtr]::Zero, # threadAttributes",
          "                $true, # inheritHandles",
          "                $procCreationFlags, # creationFlags",
          "                $envSafeTokenHandlePtr, # environment",
          "                [NullString]::Value, # currentDirectory",
          "                [ref] $startupInfo, # startupInfo",
          "                [ref] $procInfo # processInformation",
          "            )",
          "            if (-not $success)",
          "            {",
          "                [int]$ret = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()",
          "                throw \"Create process as user failed with error code : $($ret)\"",
          "            }",
          "            $proc = [System.Diagnostics.Process]::GetProcessById($procInfo.dwProcessId)",
          "            if($Wait)",
          "            {",
          "                $timeout = {{SysprepTimeout}}",
          "                if([string]::IsNullOrWhitespace($timeout))",
          "                {",
          "                    $proc.WaitForExit()",
          "                }",
          "                else",
          "                {",
          "                    $Logger.Info(\"Timeout is '$timeout' milliseconds\")",
          "                    # Wait for the process to complete with a timeout",
          "                    $waitResult = [AwsUwi.PInvoke]::WaitForSingleObject($procInfo.hProcess, $timeout)",
          "                    Stop-Process -Id $procInfo.dwProcessId -Force -ErrorAction SilentlyContinue",
          "                }",
          "                [UInt32]$exitCode = $null",
          "                [AwsUwi.PInvoke]::GetExitCodeProcess($procInfo.hProcess, [ref] $exitCode) > $null",
          "            }",
          "        }",
          "        finally",
          "        {",
          "            if($Wait)",
          "            {",
          "                if($envSafeTokenHandlePtr)",
          "                {",
          "                    [AwsUwi.PInvoke]::DestroyEnvironmentBlock($envSafeTokenHandlePtr) > $null",
          "                }",
          "                if($userSafeTokenHandlePtr)",
          "                {",
          "                    if($profileInfo)",
          "                    {",
          "                        [AwsUwi.PInvoke]::UnloadUserProfile($userSafeTokenHandlePtr, $profileInfo.hProfile) > $null",
          "                    }",
          "                }",
          "                [System.Runtime.InteropServices.Marshal]::FreeHGlobal($passwordPtr) > $null",
          "                if($startupInfo)",
          "                {",
          "                    [AwsUwi.PInvoke]::CloseHandle($startupInfo.hStdInput) > $null",
          "                    [AwsUwi.PInvoke]::CloseHandle($startupInfo.hStdOutput) > $null",
          "                    [AwsUwi.PInvoke]::CloseHandle($startupInfo.hStdError) > $null",
          "                }",
          "                if($procInfo)",
          "                {",
          "                    [AwsUwi.PInvoke]::CloseHandle($procInfo.hProcess) > $null",
          "                    [AwsUwi.PInvoke]::CloseHandle($procInfo.hThread) > $null",
          "                }",
          "",
          "                function Read-Pipe {",
          "                    param (",
          "                        [IntPtr]$pipeHandle",
          "                    )",
          "                    $fileStream = New-Object System.IO.FileStream -ArgumentList $pipeHandle, ([System.IO.FileAccess]::Read)",
          "                    $streamReader = New-Object System.IO.StreamReader -ArgumentList $fileStream",
          "",
          "                    $timeoutSeconds = 30",
          "                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()",
          "                    try {",
          "                        $retryCount = 0",
          "                        while ($streamReader.Peek() -ge 0) {",
          "                            if ($stopwatch.Elapsed.TotalSeconds -gt $timeoutSeconds) {",
          "                                Write-Output \"Timeout reached, stopping read operation.\"",
          "                                break",
          "                            }",
          "                            try {",
          "                                $line = $streamReader.ReadLine()",
          "                                $Logger.Info($line)",
          "                                $retryCount = 0",
          "                            } catch [System.OutOfMemoryException] {",
          "                                if ($retryCount -ge 1) {",
          "                                    Write-Output \"OutOfMemoryException occurred twice. Exiting read operation.\"",
          "                                    break",
          "                                }",
          "                                Write-Output \"OutOfMemoryException encountered. Running garbage collection and retrying.\"",
          "                                [System.GC]::Collect()",
          "                                $retryCount++",
          "                                continue",
          "                            }",
          "                        }",
          "                    } finally {",
          "                        $streamReader.Dispose()",
          "                        $fileStream.Dispose()",
          "                        $stopwatch.Stop()",
          "                    }",
          "                }",
          "",
          "                if ($null -eq $stdOutReadPipe) {",
          "                    $Logger.Error(\"Stdout pipe is null.\")",
          "                } else {",
          "                    $Logger.Info(\"Standard Output:\")",
          "                    Read-Pipe -pipeHandle $stdOutReadPipe",
          "                    [AwsUwi.PInvoke]::CloseHandle($stdOutReadPipe) > $null",
          "                }",
          "",
          "                if ($null -eq $stdErrReadPipe) {",
          "                    $Logger.Error(\"Stderr pipe is null.\")",
          "                } else {",
          "                    $Logger.Info(\"Standard Error:\")",
          "                    Read-Pipe -pipeHandle $stdErrReadPipe",
          "                    [AwsUwi.PInvoke]::CloseHandle($stdErrReadPipe) > $null",
          "                }",
          "",
          "                function ThrowAndPrintPantherError {",
          "                    param (",
          "                        [String]$errorMessage",
          "                    )",
          "",
          "                    $sysprepErrorFilePath = \"$env:SystemRoot\\System32\\Sysprep\\Panther\\setuperr.log\"",
          "                    if (Test-Path $sysprepErrorFilePath)",
          "                    {",
          "                        $Logger.Info(\"Sysprep error file: $sysprepErrorFilePath\")",
          "                        $Logger.Error(\"$(Get-Content $env:SystemRoot\\System32\\Sysprep\\Panther\\setuperr.log)\")",
          "                    }",
          "                    throw $errorMessage",
          "                }",
          "",
          "                # Check the result of the wait",
          "                $WAIT_OBJECT_0 = 0x00000000",
          "                $WAIT_TIMEOUT = 0x00000102",
          "                if (($waitResult -eq $WAIT_OBJECT_0) -or ($null -eq $waitResult)) {",
          "                    $Logger.Info(\"Sysprep process completed\")",
          "                } elseif ($waitResult -eq $WAIT_TIMEOUT) {",
          "                    ThrowAndPrintPantherError -errorMessage \"Sysprep process timed out, see error logs above\"",
          "                } else {",
          "                    ThrowAndPrintPantherError -errorMessage \"An error occurred while waiting for the sysprep process\"",
          "                }",
          "            }",
          "        }",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "        return $exitCode",
          "    }",
          "}",
          "Function Start-EC2ConfigSysprep",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$WorkingDirectory",
          "    )",
          "    Begin",
          "    {",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = \"Stop\"",
          "    }",
          "    Process",
          "    {",
          "        $minVersion = New-Object System.Version('4.8.1676')",
          "        $version = Get-EC2ConfigVersion",
          "        if ($version.CompareTo($minVersion) -lt 0)",
          "        {",
          "            throw \"Incompatible EC2Config version: $($version.ToString()).  Please update EC2Config.\"",
          "        }",
          "        $serviceName = 'ec2config'",
          "        try",
          "        {",
          "            $ec2ConfigService = Get-Service -Name $serviceName",
          "        }",
          "        catch",
          "        {",
          "            throw New-Object System.Exception(\"EC2Config service not detected.  EC2Config required. $($_.Exception.Message)\")",
          "        }",
          "        if($ec2ConfigService.Status -ne 'Running')",
          "        {",
          "            Start-Service -Name $serviceName",
          "        }",
          "        [System.Version]$OSVersion = (Get-CimInstance Win32_OperatingSystem).Version",
          "        [System.Version]$Server2003 = '5.2.0.0'",
          "        $ec2ConfigFile = \"$($Env:ProgramFiles)\\Amazon\\Ec2ConfigService\\Settings\\Config.xml\"",
          "        if(Test-Path $ec2ConfigFile)",
          "        {",
          "            $xml = [xml](Get-Content $ec2ConfigFile)",
          "            $xmlElement = $xml.get_DocumentElement()",
          "            $xmlElementToModify = $xmlElement.Plugins",
          "            foreach($element in $xmlElementToModify.Plugin)",
          "            {",
          "                if($element.name -eq 'Ec2SetPassword')",
          "                {",
          "                    $element.State = 'Enabled'",
          "                }",
          "                elseif($element.name -eq 'Ec2HandleUserData')",
          "                {",
          "                    $element.State = 'Enabled'",
          "                }",
          "                elseif($element.name -eq 'Ec2DynamicBootVolumeSize')",
          "                {",
          "                    if($OSVersion -eq $Server2003)",
          "                    {",
          "                        $element.State = 'Enabled'",
          "                    }",
          "                }",
          "                elseif($element.name -eq 'Ec2SetComputerName')",
          "                {",
          "                    $element.State = 'Disabled'",
          "                }",
          "            }",
          "            $xml.Save($ec2ConfigFile)",
          "        }",
          "        else",
          "        {",
          "            throw [System.IO.FileNotFoundException] \"$($ec2ConfigFile) not found.\"",
          "        }",
          "        $ec2SettingsFile = \"$($Env:ProgramFiles)\\Amazon\\Ec2ConfigService\\Settings\\BundleConfig.xml\"",
          "        if(Test-Path $ec2SettingsFile)",
          "        {",
          "            $xml = [xml](Get-Content $ec2SettingsFile)",
          "            $xmlElement = $xml.get_DocumentElement()",
          "            $xmlElementToModify = $xmlElement.Property",
          "            foreach($element in $xmlElementToModify)",
          "            {",
          "                if($element.name -eq 'SetRDPCertificate')",
          "                {",
          "                    if($OSVersion -eq $Server2003)",
          "                    {",
          "                        $element.Value = 'Yes'",
          "                    }",
          "                }",
          "                elseif($element.name -eq 'SetPasswordAfterSysprep')",
          "                {",
          "                    $element.Value = 'Yes'",
          "                }",
          "            }",
          "            $xml.Save($ec2SettingsFile)",
          "        }",
          "        else",
          "        {",
          "            throw \"$($ec2ConfigFile) not found.\"",
          "        }",
          "        $ec2Config = \"$($env:ProgramFiles)\\Amazon\\Ec2ConfigService\\Ec2Config.exe\"",
          "        if(-not (Test-Path $ec2Config))",
          "        {",
          "           throw [System.IO.FileNotFoundException] \"$($ec2Config) not found.\"",
          "        }",
          "        $cmd = \"`\"$($ec2Config)`\" -sysprep -noshutdown\"",
          "        $admin = Reset-AdminPassword",
          "        Start-ProcessAsUser -Username $admin.Username -Password $admin.Password -Command $cmd -Wait 2>&1>$null",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "    }",
          "}",
          "Function Start-EC2LaunchSysprep",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$WorkingDirectory",
          "    )",
          "    Begin",
          "    {",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = \"Stop\"",
          "    }",
          "    Process",
          "    {",
          "        $minVersion = New-Object System.Version('1.3.550')",
          "        $version = Get-EC2LaunchVersion",
          "        if ($version.CompareTo($minVersion) -lt 0)",
          "        {",
          "            throw \"Incompatible EC2Launch version: $($version.ToString()).  Please update EC2Launch.\"",
          "        }",
          "        $initalizeScript = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\\Scripts\\InitializeInstance.ps1\"",
          "        if(-not (Test-Path $initalizeScript))",
          "        {",
          "           throw [System.IO.FileNotFoundException] \"$($initalizeScript) not found.\"",
          "        }",
          "        $psPath = Join-Path $PSHOME 'powershell.exe'",
          "        if(-not (Test-Path $psPath))",
          "        {",
          "            throw [System.IO.FileNotFoundException] \"$($psPath) not found.\"",
          "        }",
          "        $args = \"-ExecutionPolicy Unrestricted -NonInteractive -NoProfile -File $($initalizeScript) -Schedule\"",
          "        $process = Start-Process -PassThru -Wait -FilePath $($psPath) -ArgumentList $args",
          "        if (0 -ne $process.ExitCode)",
          "        {",
          "            throw \"'InitializeInstance.ps1 -Schedule' failed with exit code '$($process.ExitCode)'.\"",
          "        }",
          "        $sysPrepScript = \"$($Env:ProgramData)\\Amazon\\EC2-Windows\\Launch\\Scripts\\SysprepInstance.ps1\"",
          "        if(-not (Test-Path $sysPrepScript))",
          "        {",
          "            throw [System.IO.FileNotFoundException] \"$($sysPrepScript) not found.\"",
          "        }",
          "        $admin = Reset-AdminPassword",
          "        $args = \"-ExecutionPolicy Unrestricted -NonInteractive -NoProfile -File $($sysPrepScript) -NoShutdown\"",
          "        $cmd = \"$($psPath) $($args)\"",
          "        $exitCode = Start-ProcessAsUser -Username $admin.Username -Password $admin.Password -Command $cmd -Wait",
          "        if ($null -eq $exitCode)",
          "        {",
          "            throw \"Failed to get the SysprepInstance.ps1 PowerShell process exit code.\"",
          "        }",
          "        if (0 -ne $exitCode)",
          "        {",
          "            throw \"'SysprepInstance.ps1 -NoShutdown' failed with exit code '$($exitCode)'.\"",
          "        }",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "    }",
          "}",
          "Function Start-EC2LaunchV2Sysprep",
          "{",
          "    [CmdletBinding()]",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$true)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$WorkingDirectory",
          "    )",
          "    Begin",
          "    {",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = \"Stop\"",
          "    }",
          "    Process",
          "    {",
          "        $ec2launchV2 = \"$($env:ProgramFiles)\\Amazon\\EC2Launch\\EC2Launch.exe\"",
          "        if(-not (Test-Path $ec2launchV2))",
          "        {",
          "            throw [System.IO.FileNotFoundException] \"$($ec2launchV2) not found.\"",
          "        }",
          "        $admin = Reset-AdminPassword",
          "        $cmd = \"`\"$($ec2launchV2)`\" sysprep --shutdown=false\"",
          "        Start-ProcessAsUser -Username $admin.Username -Password $admin.Password -Command $cmd -Wait 2>&1>$null",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "    }",
          "}",
          "Function Start-AwsUwiSysprep",
          "{",
          "    [CmdletBinding()]",
          "",
          "    Param",
          "    (",
          "        [Parameter(Mandatory=$false)]",
          "        [ValidateNotNullOrEmpty()]",
          "        [string]$Id = [guid]::NewGuid(),",
          "        [Parameter(Mandatory=$false)]",
          "        [switch]$Shutdown,",
          "        [Parameter(Mandatory=$false)]",
          "        [AwsPoshLogger]$Logger",
          "    )",
          "    DynamicParam",
          "    {",
          "        $runtimeParameterDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary",
          "        if($Logger -eq $null)",
          "        {",
          "            $parameterName = 'LogLevel'",
          "            $parameterAttribute = New-Object System.Management.Automation.parameterAttribute",
          "            $parameterAttribute.Mandatory = $false",
          "            $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]",
          "            $attributeCollection.Add($parameterAttribute)",
          "            [string[]]$arrSet = @('Fatal', 'Error', 'Warn', 'Info', 'Debug', 'Trace')",
          "            $validateSetAttribute = New-Object System.Management.Automation.validateSetAttribute($arrSet)",
          "            $attributeCollection.Add($validateSetAttribute)",
          "            $runtimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($parameterName, [string], $attributeCollection)",
          "            $runtimeParameter.Value = 'Info'",
          "            $runtimeParameterDictionary.Add($parameterName, $runtimeParameter)",
          "        }",
          "        return $runtimeParameterDictionary",
          "    }",
          "    Begin",
          "    {",
          "        $PsBoundParameters.GetEnumerator() | ForEach-Object { New-Variable -Name $_.Key -Value $_.Value -ea 'SilentlyContinue'}",
          "        $temp = $ErrorActionPreference",
          "        $ErrorActionPreference = 'Stop'",
          "        $functionName = 'Start-AwsUwiSysprep'",
          "        $moduleName = 'AWSUpdateWindowsInstance'",
          "        if($Logger -eq $null)",
          "        {",
          "            $WorkingDirectory = Join-Path ${env:ProgramData} (\"Amazon\\$($moduleName)\\$($Id)\\$($functionName)\")",
          "            if(-not (Test-Path $WorkingDirectory))",
          "            {",
          "                New-Item $WorkingDirectory -Type Directory -Force > $null",
          "            }",
          "            if(-not ($LogLevel))",
          "            {",
          "                $LogLevel = 'Info'",
          "            }",
          "            $logFile = Join-Path $WorkingDirectory \"$($functionName).log\"",
          "            if(-not (Test-Path $logFile))",
          "            {",
          "                New-Item $logFile -type File -Force > $null",
          "            }",
          "            $Logger = New-AwsPoshLogger -LogFile $logFile -LogLevel $LogLevel",
          "        }",
          "    }",
          "    Process",
          "    {",
          "        $stateFile = Join-Path $WorkingDirectory \"state_$($functionName).txt\"",
          "        if(-not (Test-Path $stateFile))",
          "        {",
          "            New-Item $stateFile -type File -Force > $null",
          "            $stateObj = New-Object psobject -Property @{Sysprep = 0;}",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "        }",
          "        $stateObj = Get-Content $stateFile -Raw | ConvertFrom-Json",
          "        if($stateObj.Sysprep -eq '0')",
          "        {",
          "            $Logger.Info(\"Start of $($functionName)\")",
          "            try",
          "            {",
          "                $launchAgent = Start-DetectLaunchAgent",
          "            }",
          "            catch",
          "            {",
          "                $Logger.Error(\"Detecting the launch agent resulted in error: $($_)\")",
          "                exit -1",
          "            }",
          "            try",
          "            {",
          "                if($launchAgent.LaunchAgentName -eq 'EC2Launch')",
          "                {",
          "                    $Logger.Info('Starting EC2Launch method of sysprep.')",
          "                    Start-EC2LaunchSysprep -WorkingDirectory $WorkingDirectory",
          "                    $Logger.Info('Successfully executed EC2Launch method of sysprep.')",
          "                }",
          "",
          "                if($launchAgent.LaunchAgentName -eq 'EC2LaunchV2')",
          "                {",
          "                    $Logger.Info('Starting EC2LaunchV2 method of sysprep.')",
          "                    Start-EC2LaunchV2Sysprep -WorkingDirectory $WorkingDirectory",
          "                    $Logger.Info('Successfully executed EC2LaunchV2 method of sysprep.')",
          "                }",
          "",
          "                if($launchAgent.LaunchAgentName -eq 'EC2Config')",
          "                {",
          "                    $Logger.Info('Starting EC2Config method of sysprep.')",
          "                    Start-EC2ConfigSysprep -WorkingDirectory $WorkingDirectory",
          "                    $Logger.Info('Successfully executed EC2Config method of sysprep.')",
          "                }",
          "            }",
          "            catch",
          "            {",
          "                $Logger.Error(\"Sysprep failed with error: $($_)\")",
          "                exit -1",
          "            }",
          "",
          "            $stateObj.Sysprep = 1",
          "            ConvertTo-Json -InputObject $stateObj | Out-File $stateFile",
          "        }",
          "        else",
          "        {",
          "            $Logger.Info('Sysprep was previously performed.')",
          "        }",
          "    }",
          "    End",
          "    {",
          "        $ErrorActionPreference = $temp",
          "    }",
          "}",
          "function Invoke-RunSysprep {",
          "  $command = 'Start-AwsUwiSysprep'",
          "  if($id) { $command += \" -Id $($id)\"}",
          "  Invoke-Expression $command",
          "}",
          "Invoke-RunSysprep"
        ]
      }
    }
  ]
}
